var Yf=Object.defineProperty,Kf=Object.defineProperties;var Xf=Object.getOwnPropertyDescriptors;var kn=Object.getOwnPropertySymbols;var cp=Object.prototype.hasOwnProperty,pp=Object.prototype.propertyIsEnumerable;var lp=(s,e,a)=>e in s?Yf(s,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):s[e]=a,j=(s,e)=>{for(var a in e||={})cp.call(e,a)&&lp(s,a,e[a]);if(kn)for(var a of kn(e))pp.call(e,a)&&lp(s,a,e[a]);return s},Q=(s,e)=>Kf(s,Xf(e));var dp=(s,e)=>{var a={};for(var t in s)cp.call(s,t)&&e.indexOf(t)<0&&(a[t]=s[t]);if(s!=null&&kn)for(var t of kn(s))e.indexOf(t)<0&&pp.call(s,t)&&(a[t]=s[t]);return a};var ya=(s,e,a)=>new Promise((t,n)=>{var i=l=>{try{r(a.next(l))}catch(u){n(u)}},o=l=>{try{r(a.throw(l))}catch(u){n(u)}},r=l=>l.done?t(l.value):Promise.resolve(l.value).then(i,o);r((a=a.apply(s,e)).next())});var up=null;var Eo=1,hp=Symbol("SIGNAL");function U(s){let e=up;return up=s,e}var mp={version:0,lastCleanEpoch:0,dirty:!1,producerNode:void 0,producerLastReadVersion:void 0,producerIndexOfThis:void 0,nextProducerIndex:0,liveConsumerNode:void 0,liveConsumerIndexOfThis:void 0,consumerAllowSignalWrites:!1,consumerIsAlwaysLive:!1,producerMustRecompute:()=>!1,producerRecomputeValue:()=>{},consumerMarkedDirty:()=>{},consumerOnSignalRead:()=>{}};function Qf(s){if(!(Io(s)&&!s.dirty)&&!(!s.dirty&&s.lastCleanEpoch===Eo)){if(!s.producerMustRecompute(s)&&!Do(s)){s.dirty=!1,s.lastCleanEpoch=Eo;return}s.producerRecomputeValue(s),s.dirty=!1,s.lastCleanEpoch=Eo}}function gp(s){return s&&(s.nextProducerIndex=0),U(s)}function vp(s,e){if(U(e),!(!s||s.producerNode===void 0||s.producerIndexOfThis===void 0||s.producerLastReadVersion===void 0)){if(Io(s))for(let a=s.nextProducerIndex;a<s.producerNode.length;a++)qo(s.producerNode[a],s.producerIndexOfThis[a]);for(;s.producerNode.length>s.nextProducerIndex;)s.producerNode.pop(),s.producerLastReadVersion.pop(),s.producerIndexOfThis.pop()}}function Do(s){_n(s);for(let e=0;e<s.producerNode.length;e++){let a=s.producerNode[e],t=s.producerLastReadVersion[e];if(t!==a.version||(Qf(a),t!==a.version))return!0}return!1}function fp(s){if(_n(s),Io(s))for(let e=0;e<s.producerNode.length;e++)qo(s.producerNode[e],s.producerIndexOfThis[e]);s.producerNode.length=s.producerLastReadVersion.length=s.producerIndexOfThis.length=0,s.liveConsumerNode&&(s.liveConsumerNode.length=s.liveConsumerIndexOfThis.length=0)}function qo(s,e){if(Zf(s),_n(s),s.liveConsumerNode.length===1)for(let t=0;t<s.producerNode.length;t++)qo(s.producerNode[t],s.producerIndexOfThis[t]);let a=s.liveConsumerNode.length-1;if(s.liveConsumerNode[e]=s.liveConsumerNode[a],s.liveConsumerIndexOfThis[e]=s.liveConsumerIndexOfThis[a],s.liveConsumerNode.length--,s.liveConsumerIndexOfThis.length--,e<s.liveConsumerNode.length){let t=s.liveConsumerIndexOfThis[e],n=s.liveConsumerNode[e];_n(n),n.producerIndexOfThis[t]=e}}function Io(s){return s.consumerIsAlwaysLive||(s?.liveConsumerNode?.length??0)>0}function _n(s){s.producerNode??=[],s.producerIndexOfThis??=[],s.producerLastReadVersion??=[]}function Zf(s){s.liveConsumerNode??=[],s.liveConsumerIndexOfThis??=[]}function eb(){throw new Error}var sb=eb;function bp(s){sb=s}function A(s){return typeof s=="function"}function ft(s){let a=s(t=>{Error.call(t),t.stack=new Error().stack});return a.prototype=Object.create(Error.prototype),a.prototype.constructor=a,a}var xn=ft(s=>function(a){s(this),this.message=a?`${a.length} errors occurred during unsubscription:
${a.map((t,n)=>`${n+1}) ${t.toString()}`).join(`
  `)}`:"",this.name="UnsubscriptionError",this.errors=a});function ja(s,e){if(s){let a=s.indexOf(e);0<=a&&s.splice(a,1)}}var ae=class s{constructor(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}unsubscribe(){let e;if(!this.closed){this.closed=!0;let{_parentage:a}=this;if(a)if(this._parentage=null,Array.isArray(a))for(let i of a)i.remove(this);else a.remove(this);let{initialTeardown:t}=this;if(A(t))try{t()}catch(i){e=i instanceof xn?i.errors:[i]}let{_finalizers:n}=this;if(n){this._finalizers=null;for(let i of n)try{yp(i)}catch(o){e=e??[],o instanceof xn?e=[...e,...o.errors]:e.push(o)}}if(e)throw new xn(e)}}add(e){var a;if(e&&e!==this)if(this.closed)yp(e);else{if(e instanceof s){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=(a=this._finalizers)!==null&&a!==void 0?a:[]).push(e)}}_hasParent(e){let{_parentage:a}=this;return a===e||Array.isArray(a)&&a.includes(e)}_addParent(e){let{_parentage:a}=this;this._parentage=Array.isArray(a)?(a.push(e),a):a?[a,e]:e}_removeParent(e){let{_parentage:a}=this;a===e?this._parentage=null:Array.isArray(a)&&ja(a,e)}remove(e){let{_finalizers:a}=this;a&&ja(a,e),e instanceof s&&e._removeParent(this)}};ae.EMPTY=(()=>{let s=new ae;return s.closed=!0,s})();var Ao=ae.EMPTY;function Cn(s){return s instanceof ae||s&&"closed"in s&&A(s.remove)&&A(s.add)&&A(s.unsubscribe)}function yp(s){A(s)?s():s.unsubscribe()}var Ve={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1};var bt={setTimeout(s,e,...a){let{delegate:t}=bt;return t?.setTimeout?t.setTimeout(s,e,...a):setTimeout(s,e,...a)},clearTimeout(s){let{delegate:e}=bt;return(e?.clearTimeout||clearTimeout)(s)},delegate:void 0};function Sn(s){bt.setTimeout(()=>{let{onUnhandledError:e}=Ve;if(e)e(s);else throw s})}function wa(){}var jp=Mo("C",void 0,void 0);function wp(s){return Mo("E",void 0,s)}function kp(s){return Mo("N",s,void 0)}function Mo(s,e,a){return{kind:s,value:e,error:a}}var Hs=null;function yt(s){if(Ve.useDeprecatedSynchronousErrorHandling){let e=!Hs;if(e&&(Hs={errorThrown:!1,error:null}),s(),e){let{errorThrown:a,error:t}=Hs;if(Hs=null,a)throw t}}else s()}function _p(s){Ve.useDeprecatedSynchronousErrorHandling&&Hs&&(Hs.errorThrown=!0,Hs.error=s)}var Ws=class extends ae{constructor(e){super(),this.isStopped=!1,e?(this.destination=e,Cn(e)&&e.add(this)):this.destination=nb}static create(e,a,t){return new jt(e,a,t)}next(e){this.isStopped?Lo(kp(e),this):this._next(e)}error(e){this.isStopped?Lo(wp(e),this):(this.isStopped=!0,this._error(e))}complete(){this.isStopped?Lo(jp,this):(this.isStopped=!0,this._complete())}unsubscribe(){this.closed||(this.isStopped=!0,super.unsubscribe(),this.destination=null)}_next(e){this.destination.next(e)}_error(e){try{this.destination.error(e)}finally{this.unsubscribe()}}_complete(){try{this.destination.complete()}finally{this.unsubscribe()}}},tb=Function.prototype.bind;function Ro(s,e){return tb.call(s,e)}var Po=class{constructor(e){this.partialObserver=e}next(e){let{partialObserver:a}=this;if(a.next)try{a.next(e)}catch(t){Tn(t)}}error(e){let{partialObserver:a}=this;if(a.error)try{a.error(e)}catch(t){Tn(t)}else Tn(e)}complete(){let{partialObserver:e}=this;if(e.complete)try{e.complete()}catch(a){Tn(a)}}},jt=class extends Ws{constructor(e,a,t){super();let n;if(A(e)||!e)n={next:e??void 0,error:a??void 0,complete:t??void 0};else{let i;this&&Ve.useDeprecatedNextContext?(i=Object.create(e),i.unsubscribe=()=>this.unsubscribe(),n={next:e.next&&Ro(e.next,i),error:e.error&&Ro(e.error,i),complete:e.complete&&Ro(e.complete,i)}):n=e}this.destination=new Po(n)}};function Tn(s){Ve.useDeprecatedSynchronousErrorHandling?_p(s):Sn(s)}function ab(s){throw s}function Lo(s,e){let{onStoppedNotification:a}=Ve;a&&bt.setTimeout(()=>a(s,e))}var nb={closed:!0,next:wa,error:ab,complete:wa};var wt=typeof Symbol=="function"&&Symbol.observable||"@@observable";function Se(s){return s}function No(...s){return Oo(s)}function Oo(s){return s.length===0?Se:s.length===1?s[0]:function(a){return s.reduce((t,n)=>n(t),a)}}var z=(()=>{class s{constructor(a){a&&(this._subscribe=a)}lift(a){let t=new s;return t.source=this,t.operator=a,t}subscribe(a,t,n){let i=ob(a)?a:new jt(a,t,n);return yt(()=>{let{operator:o,source:r}=this;i.add(o?o.call(i,r):r?this._subscribe(i):this._trySubscribe(i))}),i}_trySubscribe(a){try{return this._subscribe(a)}catch(t){a.error(t)}}forEach(a,t){return t=xp(t),new t((n,i)=>{let o=new jt({next:r=>{try{a(r)}catch(l){i(l),o.unsubscribe()}},error:i,complete:n});this.subscribe(o)})}_subscribe(a){var t;return(t=this.source)===null||t===void 0?void 0:t.subscribe(a)}[wt](){return this}pipe(...a){return Oo(a)(this)}toPromise(a){return a=xp(a),new a((t,n)=>{let i;this.subscribe(o=>i=o,o=>n(o),()=>t(i))})}}return s.create=e=>new s(e),s})();function xp(s){var e;return(e=s??Ve.Promise)!==null&&e!==void 0?e:Promise}function ib(s){return s&&A(s.next)&&A(s.error)&&A(s.complete)}function ob(s){return s&&s instanceof Ws||ib(s)&&Cn(s)}function Fo(s){return A(s?.lift)}function F(s){return e=>{if(Fo(e))return e.lift(function(a){try{return s(a,this)}catch(t){this.error(t)}});throw new TypeError("Unable to lift unknown Observable type")}}function G(s,e,a,t,n){return new Go(s,e,a,t,n)}var Go=class extends Ws{constructor(e,a,t,n,i,o){super(e),this.onFinalize=i,this.shouldUnsubscribe=o,this._next=a?function(r){try{a(r)}catch(l){e.error(l)}}:super._next,this._error=n?function(r){try{n(r)}catch(l){e.error(l)}finally{this.unsubscribe()}}:super._error,this._complete=t?function(){try{t()}catch(r){e.error(r)}finally{this.unsubscribe()}}:super._complete}unsubscribe(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){let{closed:a}=this;super.unsubscribe(),!a&&((e=this.onFinalize)===null||e===void 0||e.call(this))}}};function kt(){return F((s,e)=>{let a=null;s._refCount++;let t=G(e,void 0,void 0,void 0,()=>{if(!s||s._refCount<=0||0<--s._refCount){a=null;return}let n=s._connection,i=a;a=null,n&&(!i||n===i)&&n.unsubscribe(),e.unsubscribe()});s.subscribe(t),t.closed||(a=s.connect())})}var _t=class extends z{constructor(e,a){super(),this.source=e,this.subjectFactory=a,this._subject=null,this._refCount=0,this._connection=null,Fo(e)&&(this.lift=e.lift)}_subscribe(e){return this.getSubject().subscribe(e)}getSubject(){let e=this._subject;return(!e||e.isStopped)&&(this._subject=this.subjectFactory()),this._subject}_teardown(){this._refCount=0;let{_connection:e}=this;this._subject=this._connection=null,e?.unsubscribe()}connect(){let e=this._connection;if(!e){e=this._connection=new ae;let a=this.getSubject();e.add(this.source.subscribe(G(a,void 0,()=>{this._teardown(),a.complete()},t=>{this._teardown(),a.error(t)},()=>this._teardown()))),e.closed&&(this._connection=null,e=ae.EMPTY)}return e}refCount(){return kt()(this)}};var Cp=ft(s=>function(){s(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"});var ue=(()=>{class s extends z{constructor(){super(),this.closed=!1,this.currentObservers=null,this.observers=[],this.isStopped=!1,this.hasError=!1,this.thrownError=null}lift(a){let t=new En(this,this);return t.operator=a,t}_throwIfClosed(){if(this.closed)throw new Cp}next(a){yt(()=>{if(this._throwIfClosed(),!this.isStopped){this.currentObservers||(this.currentObservers=Array.from(this.observers));for(let t of this.currentObservers)t.next(a)}})}error(a){yt(()=>{if(this._throwIfClosed(),!this.isStopped){this.hasError=this.isStopped=!0,this.thrownError=a;let{observers:t}=this;for(;t.length;)t.shift().error(a)}})}complete(){yt(()=>{if(this._throwIfClosed(),!this.isStopped){this.isStopped=!0;let{observers:a}=this;for(;a.length;)a.shift().complete()}})}unsubscribe(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null}get observed(){var a;return((a=this.observers)===null||a===void 0?void 0:a.length)>0}_trySubscribe(a){return this._throwIfClosed(),super._trySubscribe(a)}_subscribe(a){return this._throwIfClosed(),this._checkFinalizedStatuses(a),this._innerSubscribe(a)}_innerSubscribe(a){let{hasError:t,isStopped:n,observers:i}=this;return t||n?Ao:(this.currentObservers=null,i.push(a),new ae(()=>{this.currentObservers=null,ja(i,a)}))}_checkFinalizedStatuses(a){let{hasError:t,thrownError:n,isStopped:i}=this;t?a.error(n):i&&a.complete()}asObservable(){let a=new z;return a.source=this,a}}return s.create=(e,a)=>new En(e,a),s})(),En=class extends ue{constructor(e,a){super(),this.destination=e,this.source=a}next(e){var a,t;(t=(a=this.destination)===null||a===void 0?void 0:a.next)===null||t===void 0||t.call(a,e)}error(e){var a,t;(t=(a=this.destination)===null||a===void 0?void 0:a.error)===null||t===void 0||t.call(a,e)}complete(){var e,a;(a=(e=this.destination)===null||e===void 0?void 0:e.complete)===null||a===void 0||a.call(e)}_subscribe(e){var a,t;return(t=(a=this.source)===null||a===void 0?void 0:a.subscribe(e))!==null&&t!==void 0?t:Ao}};var oe=class extends ue{constructor(e){super(),this._value=e}get value(){return this.getValue()}_subscribe(e){let a=super._subscribe(e);return!a.closed&&e.next(this._value),a}getValue(){let{hasError:e,thrownError:a,_value:t}=this;if(e)throw a;return this._throwIfClosed(),t}next(e){super.next(this._value=e)}};var Te=new z(s=>s.complete());function Sp(s){return s&&A(s.schedule)}function Tp(s){return s[s.length-1]}function Ep(s){return A(Tp(s))?s.pop():void 0}function Ts(s){return Sp(Tp(s))?s.pop():void 0}function qp(s,e,a,t){function n(i){return i instanceof a?i:new a(function(o){o(i)})}return new(a||(a=Promise))(function(i,o){function r(h){try{u(t.next(h))}catch(m){o(m)}}function l(h){try{u(t.throw(h))}catch(m){o(m)}}function u(h){h.done?i(h.value):n(h.value).then(r,l)}u((t=t.apply(s,e||[])).next())})}function Dp(s){var e=typeof Symbol=="function"&&Symbol.iterator,a=e&&s[e],t=0;if(a)return a.call(s);if(s&&typeof s.length=="number")return{next:function(){return s&&t>=s.length&&(s=void 0),{value:s&&s[t++],done:!s}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function Js(s){return this instanceof Js?(this.v=s,this):new Js(s)}function Ip(s,e,a){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=a.apply(s,e||[]),n,i=[];return n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n;function o(g){t[g]&&(n[g]=function(f){return new Promise(function(b,q){i.push([g,f,b,q])>1||r(g,f)})})}function r(g,f){try{l(t[g](f))}catch(b){m(i[0][3],b)}}function l(g){g.value instanceof Js?Promise.resolve(g.value.v).then(u,h):m(i[0][2],g)}function u(g){r("next",g)}function h(g){r("throw",g)}function m(g,f){g(f),i.shift(),i.length&&r(i[0][0],i[0][1])}}function Ap(s){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=s[Symbol.asyncIterator],a;return e?e.call(s):(s=typeof Dp=="function"?Dp(s):s[Symbol.iterator](),a={},t("next"),t("throw"),t("return"),a[Symbol.asyncIterator]=function(){return this},a);function t(i){a[i]=s[i]&&function(o){return new Promise(function(r,l){o=s[i](o),n(r,l,o.done,o.value)})}}function n(i,o,r,l){Promise.resolve(l).then(function(u){i({value:u,done:r})},o)}}var Dn=s=>s&&typeof s.length=="number"&&typeof s!="function";function qn(s){return A(s?.then)}function In(s){return A(s[wt])}function An(s){return Symbol.asyncIterator&&A(s?.[Symbol.asyncIterator])}function Mn(s){return new TypeError(`You provided ${s!==null&&typeof s=="object"?"an invalid object":`'${s}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`)}function rb(){return typeof Symbol!="function"||!Symbol.iterator?"@@iterator":Symbol.iterator}var Rn=rb();function Ln(s){return A(s?.[Rn])}function Pn(s){return Ip(this,arguments,function*(){let a=s.getReader();try{for(;;){let{value:t,done:n}=yield Js(a.read());if(n)return yield Js(void 0);yield yield Js(t)}}finally{a.releaseLock()}})}function Nn(s){return A(s?.getReader)}function le(s){if(s instanceof z)return s;if(s!=null){if(In(s))return lb(s);if(Dn(s))return cb(s);if(qn(s))return pb(s);if(An(s))return Mp(s);if(Ln(s))return db(s);if(Nn(s))return ub(s)}throw Mn(s)}function lb(s){return new z(e=>{let a=s[wt]();if(A(a.subscribe))return a.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")})}function cb(s){return new z(e=>{for(let a=0;a<s.length&&!e.closed;a++)e.next(s[a]);e.complete()})}function pb(s){return new z(e=>{s.then(a=>{e.closed||(e.next(a),e.complete())},a=>e.error(a)).then(null,Sn)})}function db(s){return new z(e=>{for(let a of s)if(e.next(a),e.closed)return;e.complete()})}function Mp(s){return new z(e=>{hb(s,e).catch(a=>e.error(a))})}function ub(s){return Mp(Pn(s))}function hb(s,e){var a,t,n,i;return qp(this,void 0,void 0,function*(){try{for(a=Ap(s);t=yield a.next(),!t.done;){let o=t.value;if(e.next(o),e.closed)return}}catch(o){n={error:o}}finally{try{t&&!t.done&&(i=a.return)&&(yield i.call(a))}finally{if(n)throw n.error}}e.complete()})}function je(s,e,a,t=0,n=!1){let i=e.schedule(function(){a(),n?s.add(this.schedule(null,t)):this.unsubscribe()},t);if(s.add(i),!n)return i}function On(s,e=0){return F((a,t)=>{a.subscribe(G(t,n=>je(t,s,()=>t.next(n),e),()=>je(t,s,()=>t.complete(),e),n=>je(t,s,()=>t.error(n),e)))})}function Fn(s,e=0){return F((a,t)=>{t.add(s.schedule(()=>a.subscribe(t),e))})}function Rp(s,e){return le(s).pipe(Fn(e),On(e))}function Lp(s,e){return le(s).pipe(Fn(e),On(e))}function Pp(s,e){return new z(a=>{let t=0;return e.schedule(function(){t===s.length?a.complete():(a.next(s[t++]),a.closed||this.schedule())})})}function Np(s,e){return new z(a=>{let t;return je(a,e,()=>{t=s[Rn](),je(a,e,()=>{let n,i;try{({value:n,done:i}=t.next())}catch(o){a.error(o);return}i?a.complete():a.next(n)},0,!0)}),()=>A(t?.return)&&t.return()})}function Gn(s,e){if(!s)throw new Error("Iterable cannot be null");return new z(a=>{je(a,e,()=>{let t=s[Symbol.asyncIterator]();je(a,e,()=>{t.next().then(n=>{n.done?a.complete():a.next(n.value)})},0,!0)})})}function Op(s,e){return Gn(Pn(s),e)}function Fp(s,e){if(s!=null){if(In(s))return Rp(s,e);if(Dn(s))return Pp(s,e);if(qn(s))return Lp(s,e);if(An(s))return Gn(s,e);if(Ln(s))return Np(s,e);if(Nn(s))return Op(s,e)}throw Mn(s)}function Z(s,e){return e?Fp(s,e):le(s)}function E(...s){let e=Ts(s);return Z(s,e)}function xt(s,e){let a=A(s)?s:()=>s,t=n=>n.error(a());return new z(e?n=>e.schedule(t,0,n):t)}function zo(s){return!!s&&(s instanceof z||A(s.lift)&&A(s.subscribe))}var hs=ft(s=>function(){s(this),this.name="EmptyError",this.message="no elements in sequence"});function R(s,e){return F((a,t)=>{let n=0;a.subscribe(G(t,i=>{t.next(s.call(e,i,n++))}))})}var{isArray:mb}=Array;function gb(s,e){return mb(e)?s(...e):s(e)}function Gp(s){return R(e=>gb(s,e))}var{isArray:vb}=Array,{getPrototypeOf:fb,prototype:bb,keys:yb}=Object;function zp(s){if(s.length===1){let e=s[0];if(vb(e))return{args:e,keys:null};if(jb(e)){let a=yb(e);return{args:a.map(t=>e[t]),keys:a}}}return{args:s,keys:null}}function jb(s){return s&&typeof s=="object"&&fb(s)===bb}function Bp(s,e){return s.reduce((a,t,n)=>(a[t]=e[n],a),{})}function ka(...s){let e=Ts(s),a=Ep(s),{args:t,keys:n}=zp(s);if(t.length===0)return Z([],e);let i=new z(wb(t,e,n?o=>Bp(n,o):Se));return a?i.pipe(Gp(a)):i}function wb(s,e,a=Se){return t=>{Up(e,()=>{let{length:n}=s,i=new Array(n),o=n,r=n;for(let l=0;l<n;l++)Up(e,()=>{let u=Z(s[l],e),h=!1;u.subscribe(G(t,m=>{i[l]=m,h||(h=!0,r--),r||t.next(a(i.slice()))},()=>{--o||t.complete()}))},t)},t)}}function Up(s,e,a){s?je(a,s,e):e()}function Vp(s,e,a,t,n,i,o,r){let l=[],u=0,h=0,m=!1,g=()=>{m&&!l.length&&!u&&e.complete()},f=q=>u<t?b(q):l.push(q),b=q=>{i&&e.next(q),u++;let x=!1;le(a(q,h++)).subscribe(G(e,D=>{n?.(D),i?f(D):e.next(D)},()=>{x=!0},void 0,()=>{if(x)try{for(u--;l.length&&u<t;){let D=l.shift();o?je(e,o,()=>b(D)):b(D)}g()}catch(D){e.error(D)}}))};return s.subscribe(G(e,f,()=>{m=!0,g()})),()=>{r?.()}}function ne(s,e,a=1/0){return A(e)?ne((t,n)=>R((i,o)=>e(t,i,n,o))(le(s(t,n))),a):(typeof e=="number"&&(a=e),F((t,n)=>Vp(t,n,s,a)))}function Ct(s=1/0){return ne(Se,s)}function Hp(){return Ct(1)}function St(...s){return Hp()(Z(s,Ts(s)))}function zn(s){return new z(e=>{le(s()).subscribe(e)})}function we(s,e){return F((a,t)=>{let n=0;a.subscribe(G(t,i=>s.call(e,i,n++)&&t.next(i)))})}function Es(s){return F((e,a)=>{let t=null,n=!1,i;t=e.subscribe(G(a,void 0,void 0,o=>{i=le(s(o,Es(s)(e))),t?(t.unsubscribe(),t=null,i.subscribe(a)):n=!0})),n&&(t.unsubscribe(),t=null,i.subscribe(a))})}function Wp(s,e,a,t,n){return(i,o)=>{let r=a,l=e,u=0;i.subscribe(G(o,h=>{let m=u++;l=r?s(l,h,m):(r=!0,h),t&&o.next(l)},n&&(()=>{r&&o.next(l),o.complete()})))}}function ms(s,e){return A(e)?ne(s,e,1):ne(s,1)}function Ds(s){return F((e,a)=>{let t=!1;e.subscribe(G(a,n=>{t=!0,a.next(n)},()=>{t||a.next(s),a.complete()}))})}function gs(s){return s<=0?()=>Te:F((e,a)=>{let t=0;e.subscribe(G(a,n=>{++t<=s&&(a.next(n),s<=t&&a.complete())}))})}function Bo(s){return R(()=>s)}function Bn(s=kb){return F((e,a)=>{let t=!1;e.subscribe(G(a,n=>{t=!0,a.next(n)},()=>t?a.complete():a.error(s())))})}function kb(){return new hs}function $s(s){return F((e,a)=>{try{e.subscribe(a)}finally{a.add(s)}})}function He(s,e){let a=arguments.length>=2;return t=>t.pipe(s?we((n,i)=>s(n,i,t)):Se,gs(1),a?Ds(e):Bn(()=>new hs))}function Tt(s){return s<=0?()=>Te:F((e,a)=>{let t=[];e.subscribe(G(a,n=>{t.push(n),s<t.length&&t.shift()},()=>{for(let n of t)a.next(n);a.complete()},void 0,()=>{t=null}))})}function Uo(s,e){let a=arguments.length>=2;return t=>t.pipe(s?we((n,i)=>s(n,i,t)):Se,Tt(1),a?Ds(e):Bn(()=>new hs))}function Vo(s,e){return F(Wp(s,e,arguments.length>=2,!0))}function Ho(...s){let e=Ts(s);return F((a,t)=>{(e?St(s,a,e):St(s,a)).subscribe(t)})}function ke(s,e){return F((a,t)=>{let n=null,i=0,o=!1,r=()=>o&&!n&&t.complete();a.subscribe(G(t,l=>{n?.unsubscribe();let u=0,h=i++;le(s(l,h)).subscribe(n=G(t,m=>t.next(e?e(l,m,h,u++):m),()=>{n=null,r()}))},()=>{o=!0,r()}))})}function Wo(s){return F((e,a)=>{le(s).subscribe(G(a,()=>a.complete(),wa)),!a.closed&&e.subscribe(a)})}function re(s,e,a){let t=A(s)||e||a?{next:s,error:e,complete:a}:s;return t?F((n,i)=>{var o;(o=t.subscribe)===null||o===void 0||o.call(t);let r=!0;n.subscribe(G(i,l=>{var u;(u=t.next)===null||u===void 0||u.call(t,l),i.next(l)},()=>{var l;r=!1,(l=t.complete)===null||l===void 0||l.call(t),i.complete()},l=>{var u;r=!1,(u=t.error)===null||u===void 0||u.call(t,l),i.error(l)},()=>{var l,u;r&&((l=t.unsubscribe)===null||l===void 0||l.call(t)),(u=t.finalize)===null||u===void 0||u.call(t)}))}):Se}var Od="https://g.co/ng/security#xss",k=class extends Error{constructor(e,a){super(xi(e,a)),this.code=e}};function xi(s,e){return`${`NG0${Math.abs(s)}`}${e?": "+e:""}`}function Na(s){return{toString:s}.toString()}var Un="__parameters__";function _b(s){return function(...a){if(s){let t=s(...a);for(let n in t)this[n]=t[n]}}}function Fd(s,e,a){return Na(()=>{let t=_b(e);function n(...i){if(this instanceof n)return t.apply(this,i),this;let o=new n(...i);return r.annotation=o,r;function r(l,u,h){let m=l.hasOwnProperty(Un)?l[Un]:Object.defineProperty(l,Un,{value:[]})[Un];for(;m.length<=h;)m.push(null);return(m[h]=m[h]||[]).push(o),l}}return a&&(n.prototype=Object.create(a.prototype)),n.prototype.ngMetadataName=s,n.annotationCls=n,n})}var Xs=globalThis;function W(s){for(let e in s)if(s[e]===W)return e;throw Error("Could not find renamed property on target object.")}function be(s){if(typeof s=="string")return s;if(Array.isArray(s))return"["+s.map(be).join(", ")+"]";if(s==null)return""+s;if(s.overriddenName)return`${s.overriddenName}`;if(s.name)return`${s.name}`;let e=s.toString();if(e==null)return""+e;let a=e.indexOf(`
`);return a===-1?e:e.substring(0,a)}function Jp(s,e){return s==null||s===""?e===null?"":e:e==null||e===""?s:s+" "+e}var xb=W({__forward_ref__:W});function Gd(s){return s.__forward_ref__=Gd,s.toString=function(){return be(this())},s}function Ne(s){return zd(s)?s():s}function zd(s){return typeof s=="function"&&s.hasOwnProperty(xb)&&s.__forward_ref__===Gd}function w(s){return{token:s.token,providedIn:s.providedIn||null,factory:s.factory,value:void 0}}function Ut(s){return{providers:s.providers||[],imports:s.imports||[]}}function Ci(s){return $p(s,Ud)||$p(s,Vd)}function Bd(s){return Ci(s)!==null}function $p(s,e){return s.hasOwnProperty(e)?s[e]:null}function Cb(s){let e=s&&(s[Ud]||s[Vd]);return e||null}function Yp(s){return s&&(s.hasOwnProperty(Kp)||s.hasOwnProperty(Sb))?s[Kp]:null}var Ud=W({\u0275prov:W}),Kp=W({\u0275inj:W}),Vd=W({ngInjectableDef:W}),Sb=W({ngInjectorDef:W}),_=class{constructor(e,a){this._desc=e,this.ngMetadataName="InjectionToken",this.\u0275prov=void 0,typeof a=="number"?this.__NG_ELEMENT_ID__=a:a!==void 0&&(this.\u0275prov=w({token:this,providedIn:a.providedIn||"root",factory:a.factory}))}get multi(){return this}toString(){return`InjectionToken ${this._desc}`}};function Hd(s){return s&&!!s.\u0275providers}var Tb=W({\u0275cmp:W}),Eb=W({\u0275dir:W}),Db=W({\u0275pipe:W}),qb=W({\u0275mod:W}),si=W({\u0275fac:W}),xa=W({__NG_ELEMENT_ID__:W}),Xp=W({__NG_ENV_ID__:W});function Oa(s){return typeof s=="string"?s:s==null?"":String(s)}function Ib(s){return typeof s=="function"?s.name||s.toString():typeof s=="object"&&s!=null&&typeof s.type=="function"?s.type.name||s.type.toString():Oa(s)}function Ab(s,e){let a=e?`. Dependency path: ${e.join(" > ")} > ${s}`:"";throw new k(-200,s)}function al(s,e){throw new k(-201,!1)}var L=function(s){return s[s.Default=0]="Default",s[s.Host=1]="Host",s[s.Self=2]="Self",s[s.SkipSelf=4]="SkipSelf",s[s.Optional=8]="Optional",s}(L||{}),lr;function Wd(){return lr}function _e(s){let e=lr;return lr=s,e}function Jd(s,e,a){let t=Ci(s);if(t&&t.providedIn=="root")return t.value===void 0?t.value=t.factory():t.value;if(a&L.Optional)return null;if(e!==void 0)return e;al(s,"Injector")}var Mb={},Ca=Mb,cr="__NG_DI_FLAG__",ti="ngTempTokenPath",Rb="ngTokenPath",Lb=/\n/gm,Pb="\u0275",Qp="__source",At;function Nb(){return At}function qs(s){let e=At;return At=s,e}function Ob(s,e=L.Default){if(At===void 0)throw new k(-203,!1);return At===null?Jd(s,void 0,e):At.get(s,e&L.Optional?null:void 0,e)}function C(s,e=L.Default){return(Wd()||Ob)(Ne(s),e)}function v(s,e=L.Default){return C(s,Si(e))}function Si(s){return typeof s>"u"||typeof s=="number"?s:0|(s.optional&&8)|(s.host&&1)|(s.self&&2)|(s.skipSelf&&4)}function pr(s){let e=[];for(let a=0;a<s.length;a++){let t=Ne(s[a]);if(Array.isArray(t)){if(t.length===0)throw new k(900,!1);let n,i=L.Default;for(let o=0;o<t.length;o++){let r=t[o],l=Fb(r);typeof l=="number"?l===-1?n=r.token:i|=l:n=r}e.push(C(n,i))}else e.push(C(t))}return e}function $d(s,e){return s[cr]=e,s.prototype[cr]=e,s}function Fb(s){return s[cr]}function Gb(s,e,a,t){let n=s[ti];throw e[Qp]&&n.unshift(e[Qp]),s.message=zb(`
`+s.message,n,a,t),s[Rb]=n,s[ti]=null,s}function zb(s,e,a,t=null){s=s&&s.charAt(0)===`
`&&s.charAt(1)==Pb?s.slice(2):s;let n=be(e);if(Array.isArray(e))n=e.map(be).join(" -> ");else if(typeof e=="object"){let i=[];for(let o in e)if(e.hasOwnProperty(o)){let r=e[o];i.push(o+":"+(typeof r=="string"?JSON.stringify(r):be(r)))}n=`{${i.join(", ")}}`}return`${a}${t?"("+t+")":""}[${n}]: ${s.replace(Lb,`
  `)}`}var Ti=$d(Fd("Optional"),8);var nl=$d(Fd("SkipSelf"),4);function Qs(s,e){let a=s.hasOwnProperty(si);return a?s[si]:null}function il(s,e){s.forEach(a=>Array.isArray(a)?il(a,e):e(a))}function Yd(s,e,a){e>=s.length?s.push(a):s.splice(e,0,a)}function ai(s,e){return e>=s.length-1?s.pop():s.splice(e,1)[0]}function Bb(s,e,a,t){let n=s.length;if(n==e)s.push(a,t);else if(n===1)s.push(t,s[0]),s[0]=a;else{for(n--,s.push(s[n-1],s[n]);n>e;){let i=n-2;s[n]=s[i],n--}s[e]=a,s[e+1]=t}}function Ub(s,e,a){let t=Fa(s,e);return t>=0?s[t|1]=a:(t=~t,Bb(s,t,e,a)),t}function Jo(s,e){let a=Fa(s,e);if(a>=0)return s[a|1]}function Fa(s,e){return Vb(s,e,1)}function Vb(s,e,a){let t=0,n=s.length>>a;for(;n!==t;){let i=t+(n-t>>1),o=s[i<<a];if(e===o)return i<<a;o>e?n=i:t=i+1}return~(n<<a)}var Sa={},Oe=[],Zs=new _(""),Kd=new _("",-1),Xd=new _(""),ni=class{get(e,a=Ca){if(a===Ca){let t=new Error(`NullInjectorError: No provider for ${be(e)}!`);throw t.name="NullInjectorError",t}return a}},Qd=function(s){return s[s.OnPush=0]="OnPush",s[s.Default=1]="Default",s}(Qd||{}),as=function(s){return s[s.Emulated=0]="Emulated",s[s.None=2]="None",s[s.ShadowDom=3]="ShadowDom",s}(as||{}),Rt=function(s){return s[s.None=0]="None",s[s.SignalBased=1]="SignalBased",s[s.HasDecoratorInputTransform=2]="HasDecoratorInputTransform",s}(Rt||{});function Hb(s,e,a){let t=s.length;for(;;){let n=s.indexOf(e,a);if(n===-1)return n;if(n===0||s.charCodeAt(n-1)<=32){let i=e.length;if(n+i===t||s.charCodeAt(n+i)<=32)return n}a=n+1}}function dr(s,e,a){let t=0;for(;t<a.length;){let n=a[t];if(typeof n=="number"){if(n!==0)break;t++;let i=a[t++],o=a[t++],r=a[t++];s.setAttribute(e,o,r,i)}else{let i=n,o=a[++t];Wb(i)?s.setProperty(e,i,o):s.setAttribute(e,i,o),t++}}return t}function Zd(s){return s===3||s===4||s===6}function Wb(s){return s.charCodeAt(0)===64}function ol(s,e){if(!(e===null||e.length===0))if(s===null||s.length===0)s=e.slice();else{let a=-1;for(let t=0;t<e.length;t++){let n=e[t];typeof n=="number"?a=n:a===0||(a===-1||a===2?Zp(s,a,n,null,e[++t]):Zp(s,a,n,null,null))}}return s}function Zp(s,e,a,t,n){let i=0,o=s.length;if(e===-1)o=-1;else for(;i<s.length;){let r=s[i++];if(typeof r=="number"){if(r===e){o=-1;break}else if(r>e){o=i-1;break}}}for(;i<s.length;){let r=s[i];if(typeof r=="number")break;if(r===a){if(t===null){n!==null&&(s[i+1]=n);return}else if(t===s[i+1]){s[i+2]=n;return}}i++,t!==null&&i++,n!==null&&i++}o!==-1&&(s.splice(o,0,e),i=o+1),s.splice(i++,0,a),t!==null&&s.splice(i++,0,t),n!==null&&s.splice(i++,0,n)}var eu="ng-template";function Jb(s,e,a,t){let n=0;if(t){for(;n<e.length&&typeof e[n]=="string";n+=2)if(e[n]==="class"&&Hb(e[n+1].toLowerCase(),a,0)!==-1)return!0}else if(rl(s))return!1;if(n=e.indexOf(1,n),n>-1){let i;for(;++n<e.length&&typeof(i=e[n])=="string";)if(i.toLowerCase()===a)return!0}return!1}function rl(s){return s.type===4&&s.value!==eu}function $b(s,e,a){let t=s.type===4&&!a?eu:s.value;return e===t}function Yb(s,e,a){let t=4,n=s.attrs,i=n!==null?Qb(n):0,o=!1;for(let r=0;r<e.length;r++){let l=e[r];if(typeof l=="number"){if(!o&&!We(t)&&!We(l))return!1;if(o&&We(l))continue;o=!1,t=l|t&1;continue}if(!o)if(t&4){if(t=2|t&1,l!==""&&!$b(s,l,a)||l===""&&e.length===1){if(We(t))return!1;o=!0}}else if(t&8){if(n===null||!Jb(s,n,l,a)){if(We(t))return!1;o=!0}}else{let u=e[++r],h=Kb(l,n,rl(s),a);if(h===-1){if(We(t))return!1;o=!0;continue}if(u!==""){let m;if(h>i?m="":m=n[h+1].toLowerCase(),t&2&&u!==m){if(We(t))return!1;o=!0}}}}return We(t)||o}function We(s){return(s&1)===0}function Kb(s,e,a,t){if(e===null)return-1;let n=0;if(t||!a){let i=!1;for(;n<e.length;){let o=e[n];if(o===s)return n;if(o===3||o===6)i=!0;else if(o===1||o===2){let r=e[++n];for(;typeof r=="string";)r=e[++n];continue}else{if(o===4)break;if(o===0){n+=4;continue}}n+=i?1:2}return-1}else return Zb(e,s)}function Xb(s,e,a=!1){for(let t=0;t<e.length;t++)if(Yb(s,e[t],a))return!0;return!1}function Qb(s){for(let e=0;e<s.length;e++){let a=s[e];if(Zd(a))return e}return s.length}function Zb(s,e){let a=s.indexOf(4);if(a>-1)for(a++;a<s.length;){let t=s[a];if(typeof t=="number")return-1;if(t===e)return a;a++}return-1}function ed(s,e){return s?":not("+e.trim()+")":e}function ey(s){let e=s[0],a=1,t=2,n="",i=!1;for(;a<s.length;){let o=s[a];if(typeof o=="string")if(t&2){let r=s[++a];n+="["+o+(r.length>0?'="'+r+'"':"")+"]"}else t&8?n+="."+o:t&4&&(n+=" "+o);else n!==""&&!We(o)&&(e+=ed(i,n),n=""),t=o,i=i||!We(t);a++}return n!==""&&(e+=ed(i,n)),e}function sy(s){return s.map(ey).join(",")}function ty(s){let e=[],a=[],t=1,n=2;for(;t<s.length;){let i=s[t];if(typeof i=="string")n===2?i!==""&&e.push(i,s[++t]):n===8&&a.push(i);else{if(!We(n))break;n=i}t++}return{attrs:e,classes:a}}function K(s){return Na(()=>{let e=ou(s),a=Q(j({},e),{decls:s.decls,vars:s.vars,template:s.template,consts:s.consts||null,ngContentSelectors:s.ngContentSelectors,onPush:s.changeDetection===Qd.OnPush,directiveDefs:null,pipeDefs:null,dependencies:e.standalone&&s.dependencies||null,getStandaloneInjector:null,signals:s.signals??!1,data:s.data||{},encapsulation:s.encapsulation||as.Emulated,styles:s.styles||Oe,_:null,schemas:s.schemas||null,tView:null,id:""});ru(a);let t=s.dependencies;return a.directiveDefs=td(t,!1),a.pipeDefs=td(t,!0),a.id=iy(a),a})}function ay(s){return As(s)||tu(s)}function ny(s){return s!==null}function Vt(s){return Na(()=>({type:s.type,bootstrap:s.bootstrap||Oe,declarations:s.declarations||Oe,imports:s.imports||Oe,exports:s.exports||Oe,transitiveCompileScopes:null,schemas:s.schemas||null,id:s.id||null}))}function sd(s,e){if(s==null)return Sa;let a={};for(let t in s)if(s.hasOwnProperty(t)){let n=s[t],i,o,r=Rt.None;Array.isArray(n)?(r=n[0],i=n[1],o=n[2]??i):(i=n,o=n),e?(a[i]=r!==Rt.None?[t,r]:t,e[i]=o):a[i]=t}return a}function ot(s){return Na(()=>{let e=ou(s);return ru(e),e})}function su(s){return{type:s.type,name:s.name,factory:null,pure:s.pure!==!1,standalone:s.standalone===!0,onDestroy:s.type.prototype.ngOnDestroy||null}}function As(s){return s[Tb]||null}function tu(s){return s[Eb]||null}function au(s){return s[Db]||null}function nu(s){let e=As(s)||tu(s)||au(s);return e!==null?e.standalone:!1}function iu(s,e){let a=s[qb]||null;if(!a&&e===!0)throw new Error(`Type ${be(s)} does not have '\u0275mod' property.`);return a}function ou(s){let e={};return{type:s.type,providersResolver:null,factory:null,hostBindings:s.hostBindings||null,hostVars:s.hostVars||0,hostAttrs:s.hostAttrs||null,contentQueries:s.contentQueries||null,declaredInputs:e,inputTransforms:null,inputConfig:s.inputs||Sa,exportAs:s.exportAs||null,standalone:s.standalone===!0,signals:s.signals===!0,selectors:s.selectors||Oe,viewQuery:s.viewQuery||null,features:s.features||null,setInput:null,findHostDirectiveDefs:null,hostDirectives:null,inputs:sd(s.inputs,e),outputs:sd(s.outputs),debugInfo:null}}function ru(s){s.features?.forEach(e=>e(s))}function td(s,e){if(!s)return null;let a=e?au:ay;return()=>(typeof s=="function"?s():s).map(t=>a(t)).filter(ny)}function iy(s){let e=0,a=[s.selectors,s.ngContentSelectors,s.hostVars,s.hostAttrs,s.consts,s.vars,s.decls,s.encapsulation,s.standalone,s.signals,s.exportAs,JSON.stringify(s.inputs),JSON.stringify(s.outputs),Object.getOwnPropertyNames(s.type.prototype),!!s.contentQueries,!!s.viewQuery].join("|");for(let n of a)e=Math.imul(31,e)+n.charCodeAt(0)<<0;return e+=2147483648,"c"+e}function rt(s){return{\u0275providers:s}}function oy(...s){return{\u0275providers:lu(!0,s),\u0275fromNgModule:!0}}function lu(s,...e){let a=[],t=new Set,n,i=o=>{a.push(o)};return il(e,o=>{let r=o;ur(r,i,[],t)&&(n||=[],n.push(r))}),n!==void 0&&cu(n,i),a}function cu(s,e){for(let a=0;a<s.length;a++){let{ngModule:t,providers:n}=s[a];ll(n,i=>{e(i,t)})}}function ur(s,e,a,t){if(s=Ne(s),!s)return!1;let n=null,i=Yp(s),o=!i&&As(s);if(!i&&!o){let l=s.ngModule;if(i=Yp(l),i)n=l;else return!1}else{if(o&&!o.standalone)return!1;n=s}let r=t.has(n);if(o){if(r)return!1;if(t.add(n),o.dependencies){let l=typeof o.dependencies=="function"?o.dependencies():o.dependencies;for(let u of l)ur(u,e,a,t)}}else if(i){if(i.imports!=null&&!r){t.add(n);let u;try{il(i.imports,h=>{ur(h,e,a,t)&&(u||=[],u.push(h))})}finally{}u!==void 0&&cu(u,e)}if(!r){let u=Qs(n)||(()=>new n);e({provide:n,useFactory:u,deps:Oe},n),e({provide:Xd,useValue:n,multi:!0},n),e({provide:Zs,useValue:()=>C(n),multi:!0},n)}let l=i.providers;if(l!=null&&!r){let u=s;ll(l,h=>{e(h,u)})}}else return!1;return n!==s&&s.providers!==void 0}function ll(s,e){for(let a of s)Hd(a)&&(a=a.\u0275providers),Array.isArray(a)?ll(a,e):e(a)}var ry=W({provide:String,useValue:W});function pu(s){return s!==null&&typeof s=="object"&&ry in s}function ly(s){return!!(s&&s.useExisting)}function cy(s){return!!(s&&s.useFactory)}function hr(s){return typeof s=="function"}var Ei=new _(""),Kn={},py={},$o;function cl(){return $o===void 0&&($o=new ni),$o}var he=class{},Ta=class extends he{get destroyed(){return this._destroyed}constructor(e,a,t,n){super(),this.parent=a,this.source=t,this.scopes=n,this.records=new Map,this._ngOnDestroyHooks=new Set,this._onDestroyHooks=[],this._destroyed=!1,gr(e,o=>this.processProvider(o)),this.records.set(Kd,Et(void 0,this)),n.has("environment")&&this.records.set(he,Et(void 0,this));let i=this.records.get(Ei);i!=null&&typeof i.value=="string"&&this.scopes.add(i.value),this.injectorDefTypes=new Set(this.get(Xd,Oe,L.Self))}destroy(){this.assertNotDestroyed(),this._destroyed=!0;let e=U(null);try{for(let t of this._ngOnDestroyHooks)t.ngOnDestroy();let a=this._onDestroyHooks;this._onDestroyHooks=[];for(let t of a)t()}finally{this.records.clear(),this._ngOnDestroyHooks.clear(),this.injectorDefTypes.clear(),U(e)}}onDestroy(e){return this.assertNotDestroyed(),this._onDestroyHooks.push(e),()=>this.removeOnDestroy(e)}runInContext(e){this.assertNotDestroyed();let a=qs(this),t=_e(void 0),n;try{return e()}finally{qs(a),_e(t)}}get(e,a=Ca,t=L.Default){if(this.assertNotDestroyed(),e.hasOwnProperty(Xp))return e[Xp](this);t=Si(t);let n,i=qs(this),o=_e(void 0);try{if(!(t&L.SkipSelf)){let l=this.records.get(e);if(l===void 0){let u=vy(e)&&Ci(e);u&&this.injectableDefInScope(u)?l=Et(mr(e),Kn):l=null,this.records.set(e,l)}if(l!=null)return this.hydrate(e,l)}let r=t&L.Self?cl():this.parent;return a=t&L.Optional&&a===Ca?null:a,r.get(e,a)}catch(r){if(r.name==="NullInjectorError"){if((r[ti]=r[ti]||[]).unshift(be(e)),i)throw r;return Gb(r,e,"R3InjectorError",this.source)}else throw r}finally{_e(o),qs(i)}}resolveInjectorInitializers(){let e=U(null),a=qs(this),t=_e(void 0),n;try{let i=this.get(Zs,Oe,L.Self);for(let o of i)o()}finally{qs(a),_e(t),U(e)}}toString(){let e=[],a=this.records;for(let t of a.keys())e.push(be(t));return`R3Injector[${e.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new k(205,!1)}processProvider(e){e=Ne(e);let a=hr(e)?e:Ne(e&&e.provide),t=uy(e);if(!hr(e)&&e.multi===!0){let n=this.records.get(a);n||(n=Et(void 0,Kn,!0),n.factory=()=>pr(n.multi),this.records.set(a,n)),a=e,n.multi.push(e)}this.records.set(a,t)}hydrate(e,a){let t=U(null);try{return a.value===Kn&&(a.value=py,a.value=a.factory()),typeof a.value=="object"&&a.value&&gy(a.value)&&this._ngOnDestroyHooks.add(a.value),a.value}finally{U(t)}}injectableDefInScope(e){if(!e.providedIn)return!1;let a=Ne(e.providedIn);return typeof a=="string"?a==="any"||this.scopes.has(a):this.injectorDefTypes.has(a)}removeOnDestroy(e){let a=this._onDestroyHooks.indexOf(e);a!==-1&&this._onDestroyHooks.splice(a,1)}};function mr(s){let e=Ci(s),a=e!==null?e.factory:Qs(s);if(a!==null)return a;if(s instanceof _)throw new k(204,!1);if(s instanceof Function)return dy(s);throw new k(204,!1)}function dy(s){if(s.length>0)throw new k(204,!1);let a=Cb(s);return a!==null?()=>a.factory(s):()=>new s}function uy(s){if(pu(s))return Et(void 0,s.useValue);{let e=hy(s);return Et(e,Kn)}}function hy(s,e,a){let t;if(hr(s)){let n=Ne(s);return Qs(n)||mr(n)}else if(pu(s))t=()=>Ne(s.useValue);else if(cy(s))t=()=>s.useFactory(...pr(s.deps||[]));else if(ly(s))t=()=>C(Ne(s.useExisting));else{let n=Ne(s&&(s.useClass||s.provide));if(my(s))t=()=>new n(...pr(s.deps));else return Qs(n)||mr(n)}return t}function Et(s,e,a=!1){return{factory:s,value:e,multi:a?[]:void 0}}function my(s){return!!s.deps}function gy(s){return s!==null&&typeof s=="object"&&typeof s.ngOnDestroy=="function"}function vy(s){return typeof s=="function"||typeof s=="object"&&s instanceof _}function gr(s,e){for(let a of s)Array.isArray(a)?gr(a,e):a&&Hd(a)?gr(a.\u0275providers,e):e(a)}function qe(s,e){s instanceof Ta&&s.assertNotDestroyed();let a,t=qs(s),n=_e(void 0);try{return e()}finally{qs(t),_e(n)}}function du(){return Wd()!==void 0||Nb()!=null}function fy(s){if(!du())throw new k(-203,!1)}function by(s){return typeof s=="function"}var De=0,O=1,I=2,me=3,Je=4,Ke=5,ns=6,Ea=7,$e=8,Lt=9,is=10,te=11,Da=12,ad=13,Ht=14,Fe=15,Pt=16,Dt=17,Nt=18,Di=19,uu=20,Is=21,Yo=22,et=23,ge=25,hu=1,qa=6,vs=7,ii=8,oi=9,Ee=10,ri=function(s){return s[s.None=0]="None",s[s.HasTransplantedViews=2]="HasTransplantedViews",s}(ri||{});function ts(s){return Array.isArray(s)&&typeof s[hu]=="object"}function rs(s){return Array.isArray(s)&&s[hu]===!0}function mu(s){return(s.flags&4)!==0}function Ga(s){return s.componentOffset>-1}function pl(s){return(s.flags&1)===1}function za(s){return!!s.template}function li(s){return(s[I]&512)!==0}var vr=class{constructor(e,a,t){this.previousValue=e,this.currentValue=a,this.firstChange=t}isFirstChange(){return this.firstChange}};function gu(s,e,a,t){e!==null?e.applyValueToInputSignal(e,t):s[a]=t}function Wt(){return vu}function vu(s){return s.type.prototype.ngOnChanges&&(s.setInput=jy),yy}Wt.ngInherit=!0;function yy(){let s=bu(this),e=s?.current;if(e){let a=s.previous;if(a===Sa)s.previous=e;else for(let t in e)a[t]=e[t];s.current=null,this.ngOnChanges(e)}}function jy(s,e,a,t,n){let i=this.declaredInputs[t],o=bu(s)||wy(s,{previous:Sa,current:null}),r=o.current||(o.current={}),l=o.previous,u=l[i];r[i]=new vr(u&&u.currentValue,a,l===Sa),gu(s,e,n,a)}var fu="__ngSimpleChanges__";function bu(s){return s[fu]||null}function wy(s,e){return s[fu]=e}var nd=null;var es=function(s,e,a){nd?.(s,e,a)},ky="svg",_y="math";function Ye(s){for(;Array.isArray(s);)s=s[De];return s}function yu(s,e){return Ye(e[s])}function Ie(s,e){return Ye(e[s.index])}function ju(s,e){return s.data[e]}function xy(s,e){return s[e]}function Rs(s,e){let a=e[s];return ts(a)?a:a[De]}function dl(s){return(s[I]&128)===128}function Cy(s){return rs(s[me])}function ci(s,e){return e==null?null:s[e]}function wu(s){s[Dt]=0}function Sy(s){s[I]&1024||(s[I]|=1024,dl(s)&&qi(s))}function Ty(s,e){for(;s>0;)e=e[Ht],s--;return e}function Ia(s){return!!(s[I]&9216||s[et]?.dirty)}function fr(s){s[is].changeDetectionScheduler?.notify(7),s[I]&64&&(s[I]|=1024),Ia(s)&&qi(s)}function qi(s){s[is].changeDetectionScheduler?.notify(0);let e=Aa(s);for(;e!==null&&!(e[I]&8192||(e[I]|=8192,!dl(e)));)e=Aa(e)}function ku(s,e){if((s[I]&256)===256)throw new k(911,!1);s[Is]===null&&(s[Is]=[]),s[Is].push(e)}function Ey(s,e){if(s[Is]===null)return;let a=s[Is].indexOf(e);a!==-1&&s[Is].splice(a,1)}function Aa(s){let e=s[me];return rs(e)?e[me]:e}var P={lFrame:Ru(null),bindingsEnabled:!0,skipHydrationRootTNode:null};var _u=!1;function Dy(){return P.lFrame.elementDepthCount}function qy(){P.lFrame.elementDepthCount++}function Iy(){P.lFrame.elementDepthCount--}function xu(){return P.bindingsEnabled}function Ba(){return P.skipHydrationRootTNode!==null}function Ay(s){return P.skipHydrationRootTNode===s}function My(s){P.skipHydrationRootTNode=s}function Ry(){P.skipHydrationRootTNode=null}function Y(){return P.lFrame.lView}function ls(){return P.lFrame.tView}function Cu(s){return P.lFrame.contextLView=s,s[$e]}function Su(s){return P.lFrame.contextLView=null,s}function Ae(){let s=Tu();for(;s!==null&&s.type===64;)s=s.parent;return s}function Tu(){return P.lFrame.currentTNode}function Ly(){let s=P.lFrame,e=s.currentTNode;return s.isParent?e:e.parent}function Ua(s,e){let a=P.lFrame;a.currentTNode=s,a.isParent=e}function Eu(){return P.lFrame.isParent}function Py(){P.lFrame.isParent=!1}function Du(){return _u}function id(s){_u=s}function qu(){let s=P.lFrame,e=s.bindingRootIndex;return e===-1&&(e=s.bindingRootIndex=s.tView.bindingStartIndex),e}function Ny(s){return P.lFrame.bindingIndex=s}function ul(){return P.lFrame.bindingIndex++}function Oy(s){let e=P.lFrame,a=e.bindingIndex;return e.bindingIndex=e.bindingIndex+s,a}function Fy(){return P.lFrame.inI18n}function Gy(s,e){let a=P.lFrame;a.bindingIndex=a.bindingRootIndex=s,br(e)}function zy(){return P.lFrame.currentDirectiveIndex}function br(s){P.lFrame.currentDirectiveIndex=s}function By(s){let e=P.lFrame.currentDirectiveIndex;return e===-1?null:s[e]}function Iu(s){P.lFrame.currentQueryIndex=s}function Uy(s){let e=s[O];return e.type===2?e.declTNode:e.type===1?s[Ke]:null}function Au(s,e,a){if(a&L.SkipSelf){let n=e,i=s;for(;n=n.parent,n===null&&!(a&L.Host);)if(n=Uy(i),n===null||(i=i[Ht],n.type&10))break;if(n===null)return!1;e=n,s=i}let t=P.lFrame=Mu();return t.currentTNode=e,t.lView=s,!0}function hl(s){let e=Mu(),a=s[O];P.lFrame=e,e.currentTNode=a.firstChild,e.lView=s,e.tView=a,e.contextLView=s,e.bindingIndex=a.bindingStartIndex,e.inI18n=!1}function Mu(){let s=P.lFrame,e=s===null?null:s.child;return e===null?Ru(s):e}function Ru(s){let e={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:s,child:null,inI18n:!1};return s!==null&&(s.child=e),e}function Lu(){let s=P.lFrame;return P.lFrame=s.parent,s.currentTNode=null,s.lView=null,s}var Pu=Lu;function ml(){let s=Lu();s.isParent=!0,s.tView=null,s.selectedIndex=-1,s.contextLView=null,s.elementDepthCount=0,s.currentDirectiveIndex=-1,s.currentNamespace=null,s.bindingRootIndex=-1,s.bindingIndex=-1,s.currentQueryIndex=0}function Vy(s){return(P.lFrame.contextLView=Ty(s,P.lFrame.contextLView))[$e]}function Jt(){return P.lFrame.selectedIndex}function st(s){P.lFrame.selectedIndex=s}function Nu(){let s=P.lFrame;return ju(s.tView,s.selectedIndex)}function Ou(){return P.lFrame.currentNamespace}var Fu=!0;function gl(){return Fu}function Ls(s){Fu=s}function Hy(s,e,a){let{ngOnChanges:t,ngOnInit:n,ngDoCheck:i}=e.type.prototype;if(t){let o=vu(e);(a.preOrderHooks??=[]).push(s,o),(a.preOrderCheckHooks??=[]).push(s,o)}n&&(a.preOrderHooks??=[]).push(0-s,n),i&&((a.preOrderHooks??=[]).push(s,i),(a.preOrderCheckHooks??=[]).push(s,i))}function vl(s,e){for(let a=e.directiveStart,t=e.directiveEnd;a<t;a++){let i=s.data[a].type.prototype,{ngAfterContentInit:o,ngAfterContentChecked:r,ngAfterViewInit:l,ngAfterViewChecked:u,ngOnDestroy:h}=i;o&&(s.contentHooks??=[]).push(-a,o),r&&((s.contentHooks??=[]).push(a,r),(s.contentCheckHooks??=[]).push(a,r)),l&&(s.viewHooks??=[]).push(-a,l),u&&((s.viewHooks??=[]).push(a,u),(s.viewCheckHooks??=[]).push(a,u)),h!=null&&(s.destroyHooks??=[]).push(a,h)}}function Xn(s,e,a){Gu(s,e,3,a)}function Qn(s,e,a,t){(s[I]&3)===a&&Gu(s,e,a,t)}function Ko(s,e){let a=s[I];(a&3)===e&&(a&=16383,a+=1,s[I]=a)}function Gu(s,e,a,t){let n=t!==void 0?s[Dt]&65535:0,i=t??-1,o=e.length-1,r=0;for(let l=n;l<o;l++)if(typeof e[l+1]=="number"){if(r=e[l],t!=null&&r>=t)break}else e[l]<0&&(s[Dt]+=65536),(r<i||i==-1)&&(Wy(s,a,e,l),s[Dt]=(s[Dt]&4294901760)+l+2),l++}function od(s,e){es(4,s,e);let a=U(null);try{e.call(s)}finally{U(a),es(5,s,e)}}function Wy(s,e,a,t){let n=a[t]<0,i=a[t+1],o=n?-a[t]:a[t],r=s[o];n?s[I]>>14<s[Dt]>>16&&(s[I]&3)===e&&(s[I]+=16384,od(r,i)):od(r,i)}var Mt=-1,Ma=class{constructor(e,a,t){this.factory=e,this.resolving=!1,this.canSeeViewProviders=a,this.injectImpl=t}};function Jy(s){return s instanceof Ma}function $y(s){return(s.flags&8)!==0}function Yy(s){return(s.flags&16)!==0}function zu(s){return s!==Mt}function pi(s){return s&32767}function Ky(s){return s>>16}function di(s,e){let a=Ky(s),t=e;for(;a>0;)t=t[Ht],a--;return t}var yr=!0;function ui(s){let e=yr;return yr=s,e}var Xy=256,Bu=Xy-1,Uu=5,Qy=0,ss={};function Zy(s,e,a){let t;typeof a=="string"?t=a.charCodeAt(0)||0:a.hasOwnProperty(xa)&&(t=a[xa]),t==null&&(t=a[xa]=Qy++);let n=t&Bu,i=1<<n;e.data[s+(n>>Uu)]|=i}function Vu(s,e){let a=Hu(s,e);if(a!==-1)return a;let t=e[O];t.firstCreatePass&&(s.injectorIndex=e.length,Xo(t.data,s),Xo(e,null),Xo(t.blueprint,null));let n=fl(s,e),i=s.injectorIndex;if(zu(n)){let o=pi(n),r=di(n,e),l=r[O].data;for(let u=0;u<8;u++)e[i+u]=r[o+u]|l[o+u]}return e[i+8]=n,i}function Xo(s,e){s.push(0,0,0,0,0,0,0,0,e)}function Hu(s,e){return s.injectorIndex===-1||s.parent&&s.parent.injectorIndex===s.injectorIndex||e[s.injectorIndex+8]===null?-1:s.injectorIndex}function fl(s,e){if(s.parent&&s.parent.injectorIndex!==-1)return s.parent.injectorIndex;let a=0,t=null,n=e;for(;n!==null;){if(t=Ku(n),t===null)return Mt;if(a++,n=n[Ht],t.injectorIndex!==-1)return t.injectorIndex|a<<16}return Mt}function ej(s,e,a){Zy(s,e,a)}function sj(s,e){if(e==="class")return s.classes;if(e==="style")return s.styles;let a=s.attrs;if(a){let t=a.length,n=0;for(;n<t;){let i=a[n];if(Zd(i))break;if(i===0)n=n+2;else if(typeof i=="number")for(n++;n<t&&typeof a[n]=="string";)n++;else{if(i===e)return a[n+1];n=n+2}}}return null}function Wu(s,e,a){if(a&L.Optional||s!==void 0)return s;al(e,"NodeInjector")}function Ju(s,e,a,t){if(a&L.Optional&&t===void 0&&(t=null),!(a&(L.Self|L.Host))){let n=s[Lt],i=_e(void 0);try{return n?n.get(e,t,a&L.Optional):Jd(e,t,a&L.Optional)}finally{_e(i)}}return Wu(t,e,a)}function $u(s,e,a,t=L.Default,n){if(s!==null){if(e[I]&2048&&!(t&L.Self)){let o=oj(s,e,a,t,ss);if(o!==ss)return o}let i=Yu(s,e,a,t,ss);if(i!==ss)return i}return Ju(e,a,t,n)}function Yu(s,e,a,t,n){let i=nj(a);if(typeof i=="function"){if(!Au(e,s,t))return t&L.Host?Wu(n,a,t):Ju(e,a,t,n);try{let o;if(o=i(t),o==null&&!(t&L.Optional))al(a);else return o}finally{Pu()}}else if(typeof i=="number"){let o=null,r=Hu(s,e),l=Mt,u=t&L.Host?e[Fe][Ke]:null;for((r===-1||t&L.SkipSelf)&&(l=r===-1?fl(s,e):e[r+8],l===Mt||!ld(t,!1)?r=-1:(o=e[O],r=pi(l),e=di(l,e)));r!==-1;){let h=e[O];if(rd(i,r,h.data)){let m=tj(r,e,a,o,t,u);if(m!==ss)return m}l=e[r+8],l!==Mt&&ld(t,e[O].data[r+8]===u)&&rd(i,r,e)?(o=h,r=pi(l),e=di(l,e)):r=-1}}return n}function tj(s,e,a,t,n,i){let o=e[O],r=o.data[s+8],l=t==null?Ga(r)&&yr:t!=o&&(r.type&3)!==0,u=n&L.Host&&i===r,h=aj(r,o,a,l,u);return h!==null?Ra(e,o,h,r):ss}function aj(s,e,a,t,n){let i=s.providerIndexes,o=e.data,r=i&1048575,l=s.directiveStart,u=s.directiveEnd,h=i>>20,m=t?r:r+h,g=n?r+h:u;for(let f=m;f<g;f++){let b=o[f];if(f<l&&a===b||f>=l&&b.type===a)return f}if(n){let f=o[l];if(f&&za(f)&&f.type===a)return l}return null}function Ra(s,e,a,t){let n=s[a],i=e.data;if(Jy(n)){let o=n;o.resolving&&Ab(Ib(i[a]));let r=ui(o.canSeeViewProviders);o.resolving=!0;let l,u=o.injectImpl?_e(o.injectImpl):null,h=Au(s,t,L.Default);try{n=s[a]=o.factory(void 0,i,s,t),e.firstCreatePass&&a>=t.directiveStart&&Hy(a,i[a],e)}finally{u!==null&&_e(u),ui(r),o.resolving=!1,Pu()}}return n}function nj(s){if(typeof s=="string")return s.charCodeAt(0)||0;let e=s.hasOwnProperty(xa)?s[xa]:void 0;return typeof e=="number"?e>=0?e&Bu:ij:e}function rd(s,e,a){let t=1<<s;return!!(a[e+(s>>Uu)]&t)}function ld(s,e){return!(s&L.Self)&&!(s&L.Host&&e)}var Ks=class{constructor(e,a){this._tNode=e,this._lView=a}get(e,a,t){return $u(this._tNode,this._lView,e,Si(t),a)}};function ij(){return new Ks(Ae(),Y())}function bl(s){return Na(()=>{let e=s.prototype.constructor,a=e[si]||jr(e),t=Object.prototype,n=Object.getPrototypeOf(s.prototype).constructor;for(;n&&n!==t;){let i=n[si]||jr(n);if(i&&i!==a)return i;n=Object.getPrototypeOf(n)}return i=>new i})}function jr(s){return zd(s)?()=>{let e=jr(Ne(s));return e&&e()}:Qs(s)}function oj(s,e,a,t,n){let i=s,o=e;for(;i!==null&&o!==null&&o[I]&2048&&!(o[I]&512);){let r=Yu(i,o,a,t|L.Self,ss);if(r!==ss)return r;let l=i.parent;if(!l){let u=o[uu];if(u){let h=u.get(a,ss,t);if(h!==ss)return h}l=Ku(o),o=o[Ht]}i=l}return n}function Ku(s){let e=s[O],a=e.type;return a===2?e.declTNode:a===1?s[Ke]:null}function yl(s){return sj(Ae(),s)}function cd(s,e=null,a=null,t){let n=Xu(s,e,a,t);return n.resolveInjectorInitializers(),n}function Xu(s,e=null,a=null,t,n=new Set){let i=[a||Oe,oy(s)];return t=t||(typeof s=="object"?void 0:be(s)),new Ta(i,e||cl(),t||null,n)}var Ys=class Ys{static create(e,a){if(Array.isArray(e))return cd({name:""},a,e,"");{let t=e.name??"";return cd({name:t},e.parent,e.providers,t)}}};Ys.THROW_IF_NOT_FOUND=Ca,Ys.NULL=new ni,Ys.\u0275prov=w({token:Ys,providedIn:"any",factory:()=>C(Kd)}),Ys.__NG_ELEMENT_ID__=-1;var Ge=Ys;var rj=new _("");rj.__NG_ELEMENT_ID__=s=>{let e=Ae();if(e===null)throw new k(204,!1);if(e.type&2)return e.value;if(s&L.Optional)return null;throw new k(204,!1)};var lj="ngOriginalError";function Qo(s){return s[lj]}var os=class{constructor(){this._console=console}handleError(e){let a=this._findOriginalError(e);this._console.error("ERROR",e),a&&this._console.error("ORIGINAL ERROR",a)}_findOriginalError(e){let a=e&&Qo(e);for(;a&&Qo(a);)a=Qo(a);return a||null}},Qu=new _("",{providedIn:"root",factory:()=>v(os).handleError.bind(void 0)}),jl=(()=>{let e=class e{};e.__NG_ELEMENT_ID__=cj,e.__NG_ENV_ID__=t=>t;let s=e;return s})(),wr=class extends jl{constructor(e){super(),this._lView=e}onDestroy(e){return ku(this._lView,e),()=>Ey(this._lView,e)}};function cj(){return new wr(Y())}function pj(){return Ii(Ae(),Y())}function Ii(s,e){return new $t(Ie(s,e))}var $t=(()=>{let e=class e{constructor(t){this.nativeElement=t}};e.__NG_ELEMENT_ID__=pj;let s=e;return s})();var kr=class extends ue{constructor(e=!1){super(),this.destroyRef=void 0,this.__isAsync=e,du()&&(this.destroyRef=v(jl,{optional:!0})??void 0)}emit(e){let a=U(null);try{super.next(e)}finally{U(a)}}subscribe(e,a,t){let n=e,i=a||(()=>null),o=t;if(e&&typeof e=="object"){let l=e;n=l.next?.bind(l),i=l.error?.bind(l),o=l.complete?.bind(l)}this.__isAsync&&(i=Zo(i),n&&(n=Zo(n)),o&&(o=Zo(o)));let r=super.subscribe({next:n,error:i,complete:o});return e instanceof ae&&e.add(r),r}};function Zo(s){return e=>{setTimeout(s,void 0,e)}}var fe=kr;var dj="ngSkipHydration",uj="ngskiphydration";function Zu(s){let e=s.mergedAttrs;if(e===null)return!1;for(let a=0;a<e.length;a+=2){let t=e[a];if(typeof t=="number")return!1;if(typeof t=="string"&&t.toLowerCase()===uj)return!0}return!1}function eh(s){return s.hasAttribute(dj)}function hi(s){return(s.flags&128)===128}function hj(s){if(hi(s))return!0;let e=s.parent;for(;e;){if(hi(s)||Zu(e))return!0;e=e.parent}return!1}var sh=new Map,mj=0;function gj(){return mj++}function vj(s){sh.set(s[Di],s)}function fj(s){sh.delete(s[Di])}var pd="__ngContext__";function tt(s,e){ts(e)?(s[pd]=e[Di],vj(e)):s[pd]=e}function th(s){return nh(s[Da])}function ah(s){return nh(s[Je])}function nh(s){for(;s!==null&&!rs(s);)s=s[Je];return s}var _r;function ih(s){_r=s}function Va(){if(_r!==void 0)return _r;if(typeof document<"u")return document;throw new k(210,!1)}var Ai=new _("",{providedIn:"root",factory:()=>bj}),bj="ng",wl=new _(""),Me=new _("",{providedIn:"platform",factory:()=>"unknown"});var kl=new _("",{providedIn:"root",factory:()=>Va().body?.querySelector("[ngCspNonce]")?.getAttribute("ngCspNonce")||null}),_l={breakpoints:[16,32,48,64,96,128,256,384,640,750,828,1080,1200,1920,2048,3840],placeholderResolution:30,disableImageSizeWarning:!1,disableImageLazyLoadWarning:!1},oh=new _("",{providedIn:"root",factory:()=>_l});function yj(){let s=new Yt;return v(Me)==="browser"&&(s.store=jj(Va(),v(Ai))),s}var Yt=(()=>{let e=class e{constructor(){this.store={},this.onSerializeCallbacks={}}get(t,n){return this.store[t]!==void 0?this.store[t]:n}set(t,n){this.store[t]=n}remove(t){delete this.store[t]}hasKey(t){return this.store.hasOwnProperty(t)}get isEmpty(){return Object.keys(this.store).length===0}onSerialize(t,n){this.onSerializeCallbacks[t]=n}toJson(){for(let t in this.onSerializeCallbacks)if(this.onSerializeCallbacks.hasOwnProperty(t))try{this.store[t]=this.onSerializeCallbacks[t]()}catch(n){console.warn("Exception in onSerialize callback: ",n)}return JSON.stringify(this.store).replace(/</g,"\\u003C")}};e.\u0275prov=w({token:e,providedIn:"root",factory:yj});let s=e;return s})();function jj(s,e){let a=s.getElementById(e+"-state");if(a?.textContent)try{return JSON.parse(a.textContent)}catch(t){console.warn("Exception while restoring TransferState for app "+e,t)}return{}}var rh="h",lh="b",xr=function(s){return s.FirstChild="f",s.NextSibling="n",s}(xr||{}),wj="e",kj="t",xl="c",ch="x",mi="r",_j="i",xj="n",ph="d";var Cj="__nghData__",dh=Cj,er="ngh",Sj="nghm",uh=()=>null;function Tj(s,e,a=!1){let t=s.getAttribute(er);if(t==null)return null;let[n,i]=t.split("|");if(t=a?i:n,!t)return null;let o=i?`|${i}`:"",r=a?n:o,l={};if(t!==""){let h=e.get(Yt,null,{optional:!0});h!==null&&(l=h.get(dh,[])[Number(t)])}let u={data:l,firstChild:s.firstChild??null};return a&&(u.firstChild=s,Mi(u,0,s.nextSibling)),r?s.setAttribute(er,r):s.removeAttribute(er),u}function Ej(){uh=Tj}function Cl(s,e,a=!1){return uh(s,e,a)}function Dj(s){let e=s._lView;return e[O].type===2?null:(li(e)&&(e=e[ge]),e)}function qj(s){return s.textContent?.replace(/\s/gm,"")}function Ij(s){let e=Va(),a=e.createNodeIterator(s,NodeFilter.SHOW_COMMENT,{acceptNode(i){let o=qj(i);return o==="ngetn"||o==="ngtns"?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_REJECT}}),t,n=[];for(;t=a.nextNode();)n.push(t);for(let i of n)i.textContent==="ngetn"?i.replaceWith(e.createTextNode("")):i.remove()}function Mi(s,e,a){s.segmentHeads??={},s.segmentHeads[e]=a}function Cr(s,e){return s.segmentHeads?.[e]??null}function Aj(s,e){let a=s.data,t=a[wj]?.[e]??null;return t===null&&a[xl]?.[e]&&(t=Sl(s,e)),t}function hh(s,e){return s.data[xl]?.[e]??null}function Sl(s,e){let a=hh(s,e)??[],t=0;for(let n of a)t+=n[mi]*(n[ch]??1);return t}function Mj(s){if(typeof s.disconnectedNodes>"u"){let e=s.data[ph];s.disconnectedNodes=e?new Set(e):null}return s.disconnectedNodes}function Ri(s,e){if(typeof s.disconnectedNodes>"u"){let a=s.data[ph];s.disconnectedNodes=a?new Set(a):null}return!!Mj(s)?.has(e)}var Vn=new _(""),mh=!1,gh=new _("",{providedIn:"root",factory:()=>mh});var Hn;function Rj(){if(Hn===void 0&&(Hn=null,Xs.trustedTypes))try{Hn=Xs.trustedTypes.createPolicy("angular",{createHTML:s=>s,createScript:s=>s,createScriptURL:s=>s})}catch{}return Hn}function Li(s){return Rj()?.createHTML(s)||s}var Wn;function vh(){if(Wn===void 0&&(Wn=null,Xs.trustedTypes))try{Wn=Xs.trustedTypes.createPolicy("angular#unsafe-bypass",{createHTML:s=>s,createScript:s=>s,createScriptURL:s=>s})}catch{}return Wn}function dd(s){return vh()?.createHTML(s)||s}function ud(s){return vh()?.createScriptURL(s)||s}var fs=class{constructor(e){this.changingThisBreaksApplicationSecurity=e}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see ${Od})`}},Sr=class extends fs{getTypeName(){return"HTML"}},Tr=class extends fs{getTypeName(){return"Style"}},Er=class extends fs{getTypeName(){return"Script"}},Dr=class extends fs{getTypeName(){return"URL"}},qr=class extends fs{getTypeName(){return"ResourceURL"}};function ze(s){return s instanceof fs?s.changingThisBreaksApplicationSecurity:s}function ys(s,e){let a=Lj(s);if(a!=null&&a!==e){if(a==="ResourceURL"&&e==="URL")return!0;throw new Error(`Required a safe ${e}, got a ${a} (see ${Od})`)}return a===e}function Lj(s){return s instanceof fs&&s.getTypeName()||null}function fh(s){return new Sr(s)}function bh(s){return new Tr(s)}function yh(s){return new Er(s)}function jh(s){return new Dr(s)}function wh(s){return new qr(s)}function Pj(s){let e=new Ar(s);return Nj()?new Ir(e):e}var Ir=class{constructor(e){this.inertDocumentHelper=e}getInertBodyElement(e){e="<body><remove></remove>"+e;try{let a=new window.DOMParser().parseFromString(Li(e),"text/html").body;return a===null?this.inertDocumentHelper.getInertBodyElement(e):(a.removeChild(a.firstChild),a)}catch{return null}}},Ar=class{constructor(e){this.defaultDoc=e,this.inertDocument=this.defaultDoc.implementation.createHTMLDocument("sanitization-inert")}getInertBodyElement(e){let a=this.inertDocument.createElement("template");return a.innerHTML=Li(e),a}};function Nj(){try{return!!new window.DOMParser().parseFromString(Li(""),"text/html")}catch{return!1}}var Oj=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\/?#]*(?:[\/?#]|$))/i;function Pi(s){return s=String(s),s.match(Oj)?s:"unsafe:"+s}function js(s){let e={};for(let a of s.split(","))e[a]=!0;return e}function Ha(...s){let e={};for(let a of s)for(let t in a)a.hasOwnProperty(t)&&(e[t]=!0);return e}var kh=js("area,br,col,hr,img,wbr"),_h=js("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),xh=js("rp,rt"),Fj=Ha(xh,_h),Gj=Ha(_h,js("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),zj=Ha(xh,js("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),hd=Ha(kh,Gj,zj,Fj),Ch=js("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),Bj=js("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),Uj=js("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext"),Vj=Ha(Ch,Bj,Uj),Hj=js("script,style,template"),Mr=class{constructor(){this.sanitizedSomething=!1,this.buf=[]}sanitizeChildren(e){let a=e.firstChild,t=!0,n=[];for(;a;){if(a.nodeType===Node.ELEMENT_NODE?t=this.startElement(a):a.nodeType===Node.TEXT_NODE?this.chars(a.nodeValue):this.sanitizedSomething=!0,t&&a.firstChild){n.push(a),a=$j(a);continue}for(;a;){a.nodeType===Node.ELEMENT_NODE&&this.endElement(a);let i=Jj(a);if(i){a=i;break}a=n.pop()}}return this.buf.join("")}startElement(e){let a=md(e).toLowerCase();if(!hd.hasOwnProperty(a))return this.sanitizedSomething=!0,!Hj.hasOwnProperty(a);this.buf.push("<"),this.buf.push(a);let t=e.attributes;for(let n=0;n<t.length;n++){let i=t.item(n),o=i.name,r=o.toLowerCase();if(!Vj.hasOwnProperty(r)){this.sanitizedSomething=!0;continue}let l=i.value;Ch[r]&&(l=Pi(l)),this.buf.push(" ",o,'="',gd(l),'"')}return this.buf.push(">"),!0}endElement(e){let a=md(e).toLowerCase();hd.hasOwnProperty(a)&&!kh.hasOwnProperty(a)&&(this.buf.push("</"),this.buf.push(a),this.buf.push(">"))}chars(e){this.buf.push(gd(e))}};function Wj(s,e){return(s.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_CONTAINED_BY)!==Node.DOCUMENT_POSITION_CONTAINED_BY}function Jj(s){let e=s.nextSibling;if(e&&s!==e.previousSibling)throw Sh(e);return e}function $j(s){let e=s.firstChild;if(e&&Wj(s,e))throw Sh(e);return e}function md(s){let e=s.nodeName;return typeof e=="string"?e:"FORM"}function Sh(s){return new Error(`Failed to sanitize html because the element is clobbered: ${s.outerHTML}`)}var Yj=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,Kj=/([^\#-~ |!])/g;function gd(s){return s.replace(/&/g,"&amp;").replace(Yj,function(e){let a=e.charCodeAt(0),t=e.charCodeAt(1);return"&#"+((a-55296)*1024+(t-56320)+65536)+";"}).replace(Kj,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}var Jn;function Tl(s,e){let a=null;try{Jn=Jn||Pj(s);let t=e?String(e):"";a=Jn.getInertBodyElement(t);let n=5,i=t;do{if(n===0)throw new Error("Failed to sanitize html because the input is unstable");n--,t=i,i=a.innerHTML,a=Jn.getInertBodyElement(t)}while(t!==i);let r=new Mr().sanitizeChildren(vd(a)||a);return Li(r)}finally{if(a){let t=vd(a)||a;for(;t.firstChild;)t.removeChild(t.firstChild)}}}function vd(s){return"content"in s&&Xj(s)?s.content:null}function Xj(s){return s.nodeType===Node.ELEMENT_NODE&&s.nodeName==="TEMPLATE"}var Xe=function(s){return s[s.NONE=0]="NONE",s[s.HTML=1]="HTML",s[s.STYLE=2]="STYLE",s[s.SCRIPT=3]="SCRIPT",s[s.URL=4]="URL",s[s.RESOURCE_URL=5]="RESOURCE_URL",s}(Xe||{});function Th(s){let e=El();return e?dd(e.sanitize(Xe.HTML,s)||""):ys(s,"HTML")?dd(ze(s)):Tl(Va(),Oa(s))}function Qj(s){let e=El();return e?e.sanitize(Xe.URL,s)||"":ys(s,"URL")?ze(s):Pi(Oa(s))}function Zj(s){let e=El();if(e)return ud(e.sanitize(Xe.RESOURCE_URL,s)||"");if(ys(s,"ResourceURL"))return ud(ze(s));throw new k(904,!1)}function ew(s,e){return e==="src"&&(s==="embed"||s==="frame"||s==="iframe"||s==="media"||s==="script")||e==="href"&&(s==="base"||s==="link")?Zj:Qj}function Eh(s,e,a){return ew(e,a)(s)}function El(){let s=Y();return s&&s[is].sanitizer}var sw=/^>|^->|<!--|-->|--!>|<!-$/g,tw=/(<|>)/g,aw="\u200B$1\u200B";function nw(s){return s.replace(sw,e=>e.replace(tw,aw))}function iw(s){return s.ownerDocument.body}function Dh(s){return s instanceof Function?s():s}function _a(s){return(s??v(Ge)).get(Me)==="browser"}var bs=function(s){return s[s.Important=1]="Important",s[s.DashCase=2]="DashCase",s}(bs||{}),ow;function Dl(s,e){return ow(s,e)}function qt(s,e,a,t,n){if(t!=null){let i,o=!1;rs(t)?i=t:ts(t)&&(o=!0,t=t[De]);let r=Ye(t);s===0&&a!==null?n==null?Lh(e,a,r):gi(e,a,r,n||null,!0):s===1&&a!==null?gi(e,a,r,n||null,!0):s===2?Rl(e,r,o):s===3&&e.destroyNode(r),i!=null&&kw(e,s,i,a,n)}}function qh(s,e){return s.createText(e)}function rw(s,e,a){s.setValue(e,a)}function Ih(s,e){return s.createComment(nw(e))}function ql(s,e,a){return s.createElement(e,a)}function lw(s,e){Ah(s,e),e[De]=null,e[Ke]=null}function cw(s,e,a,t,n,i){t[De]=n,t[Ke]=e,Ni(s,t,a,1,n,i)}function Ah(s,e){e[is].changeDetectionScheduler?.notify(8),Ni(s,e,e[te],2,null,null)}function pw(s){let e=s[Da];if(!e)return sr(s[O],s);for(;e;){let a=null;if(ts(e))a=e[Da];else{let t=e[Ee];t&&(a=t)}if(!a){for(;e&&!e[Je]&&e!==s;)ts(e)&&sr(e[O],e),e=e[me];e===null&&(e=s),ts(e)&&sr(e[O],e),a=e&&e[Je]}e=a}}function dw(s,e,a,t){let n=Ee+t,i=a.length;t>0&&(a[n-1][Je]=e),t<i-Ee?(e[Je]=a[n],Yd(a,Ee+t,e)):(a.push(e),e[Je]=null),e[me]=a;let o=e[Pt];o!==null&&a!==o&&Mh(o,e);let r=e[Nt];r!==null&&r.insertView(s),fr(e),e[I]|=128}function Mh(s,e){let a=s[oi],t=e[me];if(ts(t))s[I]|=ri.HasTransplantedViews;else{let n=t[me][Fe];e[Fe]!==n&&(s[I]|=ri.HasTransplantedViews)}a===null?s[oi]=[e]:a.push(e)}function Il(s,e){let a=s[oi],t=a.indexOf(e);a.splice(t,1)}function Rr(s,e){if(s.length<=Ee)return;let a=Ee+e,t=s[a];if(t){let n=t[Pt];n!==null&&n!==s&&Il(n,t),e>0&&(s[a-1][Je]=t[Je]);let i=ai(s,Ee+e);lw(t[O],t);let o=i[Nt];o!==null&&o.detachView(i[O]),t[me]=null,t[Je]=null,t[I]&=-129}return t}function Rh(s,e){if(!(e[I]&256)){let a=e[te];a.destroyNode&&Ni(s,e,a,3,null,null),pw(e)}}function sr(s,e){if(e[I]&256)return;let a=U(null);try{e[I]&=-129,e[I]|=256,e[et]&&fp(e[et]),hw(s,e),uw(s,e),e[O].type===1&&e[te].destroy();let t=e[Pt];if(t!==null&&rs(e[me])){t!==e[me]&&Il(t,e);let n=e[Nt];n!==null&&n.detachView(s)}fj(e)}finally{U(a)}}function uw(s,e){let a=s.cleanup,t=e[Ea];if(a!==null)for(let i=0;i<a.length-1;i+=2)if(typeof a[i]=="string"){let o=a[i+3];o>=0?t[o]():t[-o].unsubscribe(),i+=2}else{let o=t[a[i+1]];a[i].call(o)}t!==null&&(e[Ea]=null);let n=e[Is];if(n!==null){e[Is]=null;for(let i=0;i<n.length;i++){let o=n[i];o()}}}function hw(s,e){let a;if(s!=null&&(a=s.destroyHooks)!=null)for(let t=0;t<a.length;t+=2){let n=e[a[t]];if(!(n instanceof Ma)){let i=a[t+1];if(Array.isArray(i))for(let o=0;o<i.length;o+=2){let r=n[i[o]],l=i[o+1];es(4,r,l);try{l.call(r)}finally{es(5,r,l)}}else{es(4,n,i);try{i.call(n)}finally{es(5,n,i)}}}}}function mw(s,e,a){return gw(s,e.parent,a)}function gw(s,e,a){let t=e;for(;t!==null&&t.type&40;)e=t,t=e.parent;if(t===null)return a[De];{let{componentOffset:n}=t;if(n>-1){let{encapsulation:i}=s.data[t.directiveStart+n];if(i===as.None||i===as.Emulated)return null}return Ie(t,a)}}function gi(s,e,a,t,n){s.insertBefore(e,a,t,n)}function Lh(s,e,a){s.appendChild(e,a)}function fd(s,e,a,t,n){t!==null?gi(s,e,a,t,n):Lh(s,e,a)}function vw(s,e,a,t){s.removeChild(e,a,t)}function Al(s,e){return s.parentNode(e)}function fw(s,e){return s.nextSibling(e)}function bw(s,e,a){return jw(s,e,a)}function yw(s,e,a){return s.type&40?Ie(s,a):null}var jw=yw,bd;function Ml(s,e,a,t){let n=mw(s,t,e),i=e[te],o=t.parent||e[Ke],r=bw(o,t,e);if(n!=null)if(Array.isArray(a))for(let l=0;l<a.length;l++)fd(i,n,a[l],r,!1);else fd(i,n,a,r,!1);bd!==void 0&&bd(i,t,e,a,n)}function Zn(s,e){if(e!==null){let a=e.type;if(a&3)return Ie(e,s);if(a&4)return Lr(-1,s[e.index]);if(a&8){let t=e.child;if(t!==null)return Zn(s,t);{let n=s[e.index];return rs(n)?Lr(-1,n):Ye(n)}}else{if(a&32)return Dl(e,s)()||Ye(s[e.index]);{let t=Ph(s,e);if(t!==null){if(Array.isArray(t))return t[0];let n=Aa(s[Fe]);return Zn(n,t)}else return Zn(s,e.next)}}}return null}function Ph(s,e){if(e!==null){let t=s[Fe][Ke],n=e.projection;return t.projection[n]}return null}function Lr(s,e){let a=Ee+s+1;if(a<e.length){let t=e[a],n=t[O].firstChild;if(n!==null)return Zn(t,n)}return e[vs]}function Rl(s,e,a){let t=Al(s,e);t&&vw(s,t,e,a)}function Nh(s){s.textContent=""}function Ll(s,e,a,t,n,i,o){for(;a!=null;){let r=t[a.index],l=a.type;if(o&&e===0&&(r&&tt(Ye(r),t),a.flags|=2),(a.flags&32)!==32)if(l&8)Ll(s,e,a.child,t,n,i,!1),qt(e,s,n,r,i);else if(l&32){let u=Dl(a,t),h;for(;h=u();)qt(e,s,n,h,i);qt(e,s,n,r,i)}else l&16?ww(s,e,t,a,n,i):qt(e,s,n,r,i);a=o?a.projectionNext:a.next}}function Ni(s,e,a,t,n,i){Ll(a,t,s.firstChild,e,n,i,!1)}function ww(s,e,a,t,n,i){let o=a[Fe],l=o[Ke].projection[t.projection];if(Array.isArray(l))for(let u=0;u<l.length;u++){let h=l[u];qt(e,s,n,h,i)}else{let u=l,h=o[me];hi(t)&&(u.flags|=128),Ll(s,e,u,h,n,i,!0)}}function kw(s,e,a,t,n){let i=a[vs],o=Ye(a);i!==o&&qt(e,s,t,i,n);for(let r=Ee;r<a.length;r++){let l=a[r];Ni(l[O],l,s,e,t,i)}}function _w(s,e,a,t,n){if(e)n?s.addClass(a,t):s.removeClass(a,t);else{let i=t.indexOf("-")===-1?void 0:bs.DashCase;n==null?s.removeStyle(a,t,i):(typeof n=="string"&&n.endsWith("!important")&&(n=n.slice(0,-10),i|=bs.Important),s.setStyle(a,t,n,i))}}function xw(s,e,a){s.setAttribute(e,"style",a)}function Oh(s,e,a){a===""?s.removeAttribute(e,"class"):s.setAttribute(e,"class",a)}function Fh(s,e,a){let{mergedAttrs:t,classes:n,styles:i}=a;t!==null&&dr(s,e,t),n!==null&&Oh(s,e,n),i!==null&&xw(s,e,i)}var Ps={};function N(s=1){Gh(ls(),Y(),Jt()+s,!1)}function Gh(s,e,a,t){if(!t)if((e[I]&3)===3){let i=s.preOrderCheckHooks;i!==null&&Xn(e,i,a)}else{let i=s.preOrderHooks;i!==null&&Qn(e,i,0,a)}st(a)}function ce(s,e=L.Default){let a=Y();if(a===null)return C(s,e);let t=Ae();return $u(t,a,Ne(s),e)}function zh(){let s="invalid";throw new Error(s)}function Bh(s,e,a,t,n,i){let o=U(null);try{let r=null;n&Rt.SignalBased&&(r=e[t][hp]),r!==null&&r.transformFn!==void 0&&(i=r.transformFn(i)),n&Rt.HasDecoratorInputTransform&&(i=s.inputTransforms[t].call(e,i)),s.setInput!==null?s.setInput(e,r,i,a,t):gu(e,r,t,i)}finally{U(o)}}function Cw(s,e){let a=s.hostBindingOpCodes;if(a!==null)try{for(let t=0;t<a.length;t++){let n=a[t];if(n<0)st(~n);else{let i=n,o=a[++t],r=a[++t];Gy(o,i);let l=e[i];r(2,l)}}}finally{st(-1)}}function Oi(s,e,a,t,n,i,o,r,l,u,h){let m=e.blueprint.slice();return m[De]=n,m[I]=t|4|128|8|64,(u!==null||s&&s[I]&2048)&&(m[I]|=2048),wu(m),m[me]=m[Ht]=s,m[$e]=a,m[is]=o||s&&s[is],m[te]=r||s&&s[te],m[Lt]=l||s&&s[Lt]||null,m[Ke]=i,m[Di]=gj(),m[ns]=h,m[uu]=u,m[Fe]=e.type==2?s[Fe]:m,m}function Fi(s,e,a,t,n){let i=s.data[e];if(i===null)i=Sw(s,e,a,t,n),Fy()&&(i.flags|=32);else if(i.type&64){i.type=a,i.value=t,i.attrs=n;let o=Ly();i.injectorIndex=o===null?-1:o.injectorIndex}return Ua(i,!0),i}function Sw(s,e,a,t,n){let i=Tu(),o=Eu(),r=o?i:i&&i.parent,l=s.data[e]=Aw(s,r,a,e,t,n);return s.firstChild===null&&(s.firstChild=l),i!==null&&(o?i.child==null&&l.parent!==null&&(i.child=l):i.next===null&&(i.next=l,l.prev=i)),l}function Uh(s,e,a,t){if(a===0)return-1;let n=e.length;for(let i=0;i<a;i++)e.push(t),s.blueprint.push(t),s.data.push(null);return n}function Vh(s,e,a,t,n){let i=Jt(),o=t&2;try{st(-1),o&&e.length>ge&&Gh(s,e,ge,!1),es(o?2:0,n),a(t,n)}finally{st(i),es(o?3:1,n)}}function Hh(s,e,a){if(mu(e)){let t=U(null);try{let n=e.directiveStart,i=e.directiveEnd;for(let o=n;o<i;o++){let r=s.data[o];if(r.contentQueries){let l=a[o];r.contentQueries(1,l,o)}}}finally{U(t)}}}function Wh(s,e,a){xu()&&(Fw(s,e,a,Ie(a,e)),(a.flags&64)===64&&Qh(s,e,a))}function Jh(s,e,a=Ie){let t=e.localNames;if(t!==null){let n=e.index+1;for(let i=0;i<t.length;i+=2){let o=t[i+1],r=o===-1?a(e,s):s[o];s[n++]=r}}}function $h(s){let e=s.tView;return e===null||e.incompleteFirstPass?s.tView=Pl(1,null,s.template,s.decls,s.vars,s.directiveDefs,s.pipeDefs,s.viewQuery,s.schemas,s.consts,s.id):e}function Pl(s,e,a,t,n,i,o,r,l,u,h){let m=ge+t,g=m+n,f=Tw(m,g),b=typeof u=="function"?u():u;return f[O]={type:s,blueprint:f,template:a,queries:null,viewQuery:r,declTNode:e,data:f.slice().fill(null,m),bindingStartIndex:m,expandoStartIndex:g,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:typeof i=="function"?i():i,pipeRegistry:typeof o=="function"?o():o,firstChild:null,schemas:l,consts:b,incompleteFirstPass:!1,ssrId:h}}function Tw(s,e){let a=[];for(let t=0;t<e;t++)a.push(t<s?null:Ps);return a}function Ew(s,e,a,t){let i=t.get(gh,mh)||a===as.ShadowDom,o=s.selectRootElement(e,i);return Dw(o),o}function Dw(s){Yh(s)}var Yh=()=>null;function qw(s){eh(s)?Nh(s):Ij(s)}function Iw(){Yh=qw}function Aw(s,e,a,t,n,i){let o=e?e.injectorIndex:-1,r=0;return Ba()&&(r|=128),{type:a,index:t,insertBeforeIndex:null,injectorIndex:o,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,componentOffset:-1,propertyBindings:null,flags:r,providerIndexes:0,value:n,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tView:null,next:null,prev:null,projectionNext:null,child:null,parent:e,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0}}function yd(s,e,a,t,n){for(let i in e){if(!e.hasOwnProperty(i))continue;let o=e[i];if(o===void 0)continue;t??={};let r,l=Rt.None;Array.isArray(o)?(r=o[0],l=o[1]):r=o;let u=i;if(n!==null){if(!n.hasOwnProperty(i))continue;u=n[i]}s===0?jd(t,a,u,r,l):jd(t,a,u,r)}return t}function jd(s,e,a,t,n){let i;s.hasOwnProperty(a)?(i=s[a]).push(e,t):i=s[a]=[e,t],n!==void 0&&i.push(n)}function Mw(s,e,a){let t=e.directiveStart,n=e.directiveEnd,i=s.data,o=e.attrs,r=[],l=null,u=null;for(let h=t;h<n;h++){let m=i[h],g=a?a.get(m):null,f=g?g.inputs:null,b=g?g.outputs:null;l=yd(0,m.inputs,h,l,f),u=yd(1,m.outputs,h,u,b);let q=l!==null&&o!==null&&!rl(e)?Kw(l,h,o):null;r.push(q)}l!==null&&(l.hasOwnProperty("class")&&(e.flags|=8),l.hasOwnProperty("style")&&(e.flags|=16)),e.initialInputs=r,e.inputs=l,e.outputs=u}function Rw(s){return s==="class"?"className":s==="for"?"htmlFor":s==="formaction"?"formAction":s==="innerHtml"?"innerHTML":s==="readonly"?"readOnly":s==="tabindex"?"tabIndex":s}function Lw(s,e,a,t,n,i,o,r){let l=Ie(e,a),u=e.inputs,h;!r&&u!=null&&(h=u[t])?(Nl(s,a,h,t,n),Ga(e)&&Pw(a,e.index)):e.type&3?(t=Rw(t),n=o!=null?o(n,e.value||"",t):n,i.setProperty(l,t,n)):e.type&12}function Pw(s,e){let a=Rs(e,s);a[I]&16||(a[I]|=64)}function Kh(s,e,a,t){if(xu()){let n=t===null?null:{"":-1},i=zw(s,a),o,r;i===null?o=r=null:[o,r]=i,o!==null&&Xh(s,e,a,o,n,r),n&&Bw(a,t,n)}a.mergedAttrs=ol(a.mergedAttrs,a.attrs)}function Xh(s,e,a,t,n,i){for(let u=0;u<t.length;u++)ej(Vu(a,e),s,t[u].type);Vw(a,s.data.length,t.length);for(let u=0;u<t.length;u++){let h=t[u];h.providersResolver&&h.providersResolver(h)}let o=!1,r=!1,l=Uh(s,e,t.length,null);for(let u=0;u<t.length;u++){let h=t[u];a.mergedAttrs=ol(a.mergedAttrs,h.hostAttrs),Hw(s,a,e,l,h),Uw(l,h,n),h.contentQueries!==null&&(a.flags|=4),(h.hostBindings!==null||h.hostAttrs!==null||h.hostVars!==0)&&(a.flags|=64);let m=h.type.prototype;!o&&(m.ngOnChanges||m.ngOnInit||m.ngDoCheck)&&((s.preOrderHooks??=[]).push(a.index),o=!0),!r&&(m.ngOnChanges||m.ngDoCheck)&&((s.preOrderCheckHooks??=[]).push(a.index),r=!0),l++}Mw(s,a,i)}function Nw(s,e,a,t,n){let i=n.hostBindings;if(i){let o=s.hostBindingOpCodes;o===null&&(o=s.hostBindingOpCodes=[]);let r=~e.index;Ow(o)!=r&&o.push(r),o.push(a,t,i)}}function Ow(s){let e=s.length;for(;e>0;){let a=s[--e];if(typeof a=="number"&&a<0)return a}return 0}function Fw(s,e,a,t){let n=a.directiveStart,i=a.directiveEnd;Ga(a)&&Ww(e,a,s.data[n+a.componentOffset]),s.firstCreatePass||Vu(a,e),tt(t,e);let o=a.initialInputs;for(let r=n;r<i;r++){let l=s.data[r],u=Ra(e,s,r,a);if(tt(u,e),o!==null&&Yw(e,r-n,u,l,a,o),za(l)){let h=Rs(a.index,e);h[$e]=Ra(e,s,r,a)}}}function Qh(s,e,a){let t=a.directiveStart,n=a.directiveEnd,i=a.index,o=zy();try{st(i);for(let r=t;r<n;r++){let l=s.data[r],u=e[r];br(r),(l.hostBindings!==null||l.hostVars!==0||l.hostAttrs!==null)&&Gw(l,u)}}finally{st(-1),br(o)}}function Gw(s,e){s.hostBindings!==null&&s.hostBindings(1,e)}function zw(s,e){let a=s.directiveRegistry,t=null,n=null;if(a)for(let i=0;i<a.length;i++){let o=a[i];if(Xb(e,o.selectors,!1))if(t||(t=[]),za(o))if(o.findHostDirectiveDefs!==null){let r=[];n=n||new Map,o.findHostDirectiveDefs(o,r,n),t.unshift(...r,o);let l=r.length;Pr(s,e,l)}else t.unshift(o),Pr(s,e,0);else n=n||new Map,o.findHostDirectiveDefs?.(o,t,n),t.push(o)}return t===null?null:[t,n]}function Pr(s,e,a){e.componentOffset=a,(s.components??=[]).push(e.index)}function Bw(s,e,a){if(e){let t=s.localNames=[];for(let n=0;n<e.length;n+=2){let i=a[e[n+1]];if(i==null)throw new k(-301,!1);t.push(e[n],i)}}}function Uw(s,e,a){if(a){if(e.exportAs)for(let t=0;t<e.exportAs.length;t++)a[e.exportAs[t]]=s;za(e)&&(a[""]=s)}}function Vw(s,e,a){s.flags|=1,s.directiveStart=e,s.directiveEnd=e+a,s.providerIndexes=e}function Hw(s,e,a,t,n){s.data[t]=n;let i=n.factory||(n.factory=Qs(n.type,!0)),o=new Ma(i,za(n),ce);s.blueprint[t]=o,a[t]=o,Nw(s,e,t,Uh(s,a,n.hostVars,Ps),n)}function Ww(s,e,a){let t=Ie(e,s),n=$h(a),i=s[is].rendererFactory,o=16;a.signals?o=4096:a.onPush&&(o=64);let r=Gi(s,Oi(s,n,null,o,t,e,null,i.createRenderer(t,a),null,null,null));s[e.index]=r}function Jw(s,e,a,t,n,i){let o=Ie(s,e);$w(e[te],o,i,s.value,a,t,n)}function $w(s,e,a,t,n,i,o){if(i==null)s.removeAttribute(e,n,a);else{let r=o==null?Oa(i):o(i,t||"",n);s.setAttribute(e,n,r,a)}}function Yw(s,e,a,t,n,i){let o=i[e];if(o!==null)for(let r=0;r<o.length;){let l=o[r++],u=o[r++],h=o[r++],m=o[r++];Bh(t,a,l,u,h,m)}}function Kw(s,e,a){let t=null,n=0;for(;n<a.length;){let i=a[n];if(i===0){n+=4;continue}else if(i===5){n+=2;continue}if(typeof i=="number")break;if(s.hasOwnProperty(i)){t===null&&(t=[]);let o=s[i];for(let r=0;r<o.length;r+=3)if(o[r]===e){t.push(i,o[r+1],o[r+2],a[n+1]);break}}n+=2}return t}function Zh(s,e,a,t){return[s,!0,0,e,null,t,null,a,null,null]}function em(s,e){let a=s.contentQueries;if(a!==null){let t=U(null);try{for(let n=0;n<a.length;n+=2){let i=a[n],o=a[n+1];if(o!==-1){let r=s.data[o];Iu(i),r.contentQueries(2,e[o],o)}}}finally{U(t)}}}function Gi(s,e){return s[Da]?s[ad][Je]=e:s[Da]=e,s[ad]=e,e}function Nr(s,e,a){Iu(0);let t=U(null);try{e(s,a)}finally{U(t)}}function Xw(s){return s[Ea]||(s[Ea]=[])}function Qw(s){return s.cleanup||(s.cleanup=[])}function sm(s,e){let a=s[Lt],t=a?a.get(os,null):null;t&&t.handleError(e)}function Nl(s,e,a,t,n){for(let i=0;i<a.length;){let o=a[i++],r=a[i++],l=a[i++],u=e[o],h=s.data[o];Bh(h,u,t,r,l,n)}}function Zw(s,e,a){let t=yu(e,s);rw(s[te],t,a)}function e1(s,e){let a=Rs(e,s),t=a[O];s1(t,a);let n=a[De];n!==null&&a[ns]===null&&(a[ns]=Cl(n,a[Lt])),Ol(t,a,a[$e])}function s1(s,e){for(let a=e.length;a<s.blueprint.length;a++)e.push(s.blueprint[a])}function Ol(s,e,a){hl(e);try{let t=s.viewQuery;t!==null&&Nr(1,t,a);let n=s.template;n!==null&&Vh(s,e,n,1,a),s.firstCreatePass&&(s.firstCreatePass=!1),e[Nt]?.finishViewCreation(s),s.staticContentQueries&&em(s,e),s.staticViewQueries&&Nr(2,s.viewQuery,a);let i=s.components;i!==null&&t1(e,i)}catch(t){throw s.firstCreatePass&&(s.incompleteFirstPass=!0,s.firstCreatePass=!1),t}finally{e[I]&=-5,ml()}}function t1(s,e){for(let a=0;a<e.length;a++)e1(s,e[a])}function a1(s,e,a,t){let n=U(null);try{let i=e.tView,r=s[I]&4096?4096:16,l=Oi(s,i,a,r,null,e,null,null,t?.injector??null,t?.embeddedViewInjector??null,t?.dehydratedView??null),u=s[e.index];l[Pt]=u;let h=s[Nt];return h!==null&&(l[Nt]=h.createEmbeddedView(i)),Ol(i,l,a),l}finally{U(n)}}function wd(s,e){return!e||e.firstChild===null||hi(s)}function n1(s,e,a,t=!0){let n=e[O];if(dw(n,e,s,a),t){let o=Lr(a,s),r=e[te],l=Al(r,s[vs]);l!==null&&cw(n,s[Ke],r,e,l,o)}let i=e[ns];i!==null&&i.firstChild!==null&&(i.firstChild=null)}function vi(s,e,a,t,n=!1){for(;a!==null;){let i=e[a.index];i!==null&&t.push(Ye(i)),rs(i)&&i1(i,t);let o=a.type;if(o&8)vi(s,e,a.child,t);else if(o&32){let r=Dl(a,e),l;for(;l=r();)t.push(l)}else if(o&16){let r=Ph(e,a);if(Array.isArray(r))t.push(...r);else{let l=Aa(e[Fe]);vi(l[O],l,r,t,!0)}}a=n?a.projectionNext:a.next}return t}function i1(s,e){for(let a=Ee;a<s.length;a++){let t=s[a],n=t[O].firstChild;n!==null&&vi(t[O],t,n,e)}s[vs]!==s[De]&&e.push(s[vs])}var tm=[];function o1(s){return s[et]??r1(s)}function r1(s){let e=tm.pop()??Object.create(c1);return e.lView=s,e}function l1(s){s.lView[et]!==s&&(s.lView=null,tm.push(s))}var c1=Q(j({},mp),{consumerIsAlwaysLive:!0,consumerMarkedDirty:s=>{qi(s.lView)},consumerOnSignalRead(){this.lView[et]=this}}),p1=100;function am(s,e=!0,a=0){let t=s[is],n=t.rendererFactory,i=!1;i||n.begin?.();try{d1(s,a)}catch(o){throw e&&sm(s,o),o}finally{i||(n.end?.(),t.inlineEffectRunner?.flush())}}function d1(s,e){let a=Du();try{id(!0),Or(s,e);let t=0;for(;Ia(s);){if(t===p1)throw new k(103,!1);t++,Or(s,1)}}finally{id(a)}}function u1(s,e,a,t){let n=e[I];if((n&256)===256)return;let i=!1,o=!1;!i&&e[is].inlineEffectRunner?.flush(),hl(e);let r=null,l=null;!i&&h1(s)&&(l=o1(e),r=gp(l));try{wu(e),Ny(s.bindingStartIndex),a!==null&&Vh(s,e,a,2,t);let u=(n&3)===3;if(!i)if(u){let g=s.preOrderCheckHooks;g!==null&&Xn(e,g,null)}else{let g=s.preOrderHooks;g!==null&&Qn(e,g,0,null),Ko(e,0)}if(o||m1(e),nm(e,0),s.contentQueries!==null&&em(s,e),!i)if(u){let g=s.contentCheckHooks;g!==null&&Xn(e,g)}else{let g=s.contentHooks;g!==null&&Qn(e,g,1),Ko(e,1)}Cw(s,e);let h=s.components;h!==null&&om(e,h,0);let m=s.viewQuery;if(m!==null&&Nr(2,m,t),!i)if(u){let g=s.viewCheckHooks;g!==null&&Xn(e,g)}else{let g=s.viewHooks;g!==null&&Qn(e,g,2),Ko(e,2)}if(s.firstUpdatePass===!0&&(s.firstUpdatePass=!1),e[Yo]){for(let g of e[Yo])g();e[Yo]=null}i||(e[I]&=-73)}catch(u){throw i||qi(e),u}finally{l!==null&&(vp(l,r),l1(l)),ml()}}function h1(s){return s.type!==2}function nm(s,e){for(let a=th(s);a!==null;a=ah(a))for(let t=Ee;t<a.length;t++){let n=a[t];im(n,e)}}function m1(s){for(let e=th(s);e!==null;e=ah(e)){if(!(e[I]&ri.HasTransplantedViews))continue;let a=e[oi];for(let t=0;t<a.length;t++){let n=a[t];Sy(n)}}}function g1(s,e,a){let t=Rs(e,s);im(t,a)}function im(s,e){dl(s)&&Or(s,e)}function Or(s,e){let t=s[O],n=s[I],i=s[et],o=!!(e===0&&n&16);if(o||=!!(n&64&&e===0),o||=!!(n&1024),o||=!!(i?.dirty&&Do(i)),o||=!1,i&&(i.dirty=!1),s[I]&=-9217,o)u1(t,s,t.template,s[$e]);else if(n&8192){nm(s,1);let r=t.components;r!==null&&om(s,r,1)}}function om(s,e,a){for(let t=0;t<e.length;t++)g1(s,e[t],a)}function Fl(s,e){let a=Du()?64:1088;for(s[is].changeDetectionScheduler?.notify(e);s;){s[I]|=a;let t=Aa(s);if(li(s)&&!t)return s;s=t}return null}var at=class{get rootNodes(){let e=this._lView,a=e[O];return vi(a,e,a.firstChild,[])}constructor(e,a,t=!0){this._lView=e,this._cdRefInjectingView=a,this.notifyErrorHandler=t,this._appRef=null,this._attachedToViewContainer=!1}get context(){return this._lView[$e]}set context(e){this._lView[$e]=e}get destroyed(){return(this._lView[I]&256)===256}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._attachedToViewContainer){let e=this._lView[me];if(rs(e)){let a=e[ii],t=a?a.indexOf(this):-1;t>-1&&(Rr(e,t),ai(a,t))}this._attachedToViewContainer=!1}Rh(this._lView[O],this._lView)}onDestroy(e){ku(this._lView,e)}markForCheck(){Fl(this._cdRefInjectingView||this._lView,4)}detach(){this._lView[I]&=-129}reattach(){fr(this._lView),this._lView[I]|=128}detectChanges(){this._lView[I]|=1024,am(this._lView,this.notifyErrorHandler)}checkNoChanges(){}attachToViewContainerRef(){if(this._appRef)throw new k(902,!1);this._attachedToViewContainer=!0}detachFromAppRef(){this._appRef=null;let e=li(this._lView),a=this._lView[Pt];a!==null&&!e&&Il(a,this._lView),Ah(this._lView[O],this._lView)}attachToAppRef(e){if(this._attachedToViewContainer)throw new k(902,!1);this._appRef=e;let a=li(this._lView),t=this._lView[Pt];t!==null&&!a&&Mh(t,this._lView),fr(this._lView)}},zi=(()=>{let e=class e{};e.__NG_ELEMENT_ID__=b1;let s=e;return s})(),v1=zi,f1=class extends v1{constructor(e,a,t){super(),this._declarationLView=e,this._declarationTContainer=a,this.elementRef=t}get ssrId(){return this._declarationTContainer.tView?.ssrId||null}createEmbeddedView(e,a){return this.createEmbeddedViewImpl(e,a)}createEmbeddedViewImpl(e,a,t){let n=a1(this._declarationLView,this._declarationTContainer,e,{embeddedViewInjector:a,dehydratedView:t});return new at(n)}};function b1(){return y1(Ae(),Y())}function y1(s,e){return s.type&4?new f1(e,s,Ii(s,e)):null}var j1=new RegExp(`^(\\d+)*(${lh}|${rh})*(.*)`);function w1(s){let e=s.match(j1),[a,t,n,i]=e,o=t?parseInt(t,10):n,r=[];for(let[l,u,h]of i.matchAll(/(f|n)(\d*)/g)){let m=parseInt(h,10)||1;r.push(u,m)}return[o,...r]}function k1(s){return!s.prev&&s.parent?.type===8}function tr(s){return s.index-ge}function _1(s,e){let a=s.i18nNodes;if(a)return a.get(e)}function Bi(s,e,a,t){let n=tr(t),i=_1(s,n);if(i===void 0){let o=s.data[xj];if(o?.[n])i=C1(o[n],a);else if(e.firstChild===t)i=s.firstChild;else{let r=t.prev===null,l=t.prev??t.parent;if(k1(t)){let u=tr(t.parent);i=Cr(s,u)}else{let u=Ie(l,a);if(r)i=u.firstChild;else{let h=tr(l),m=Cr(s,h);if(l.type===2&&m){let f=Sl(s,h)+1;i=Ui(f,m)}else i=u.nextSibling}}}}return i}function Ui(s,e){let a=e;for(let t=0;t<s;t++)a=a.nextSibling;return a}function x1(s,e){let a=s;for(let t=0;t<e.length;t+=2){let n=e[t],i=e[t+1];for(let o=0;o<i;o++)switch(n){case xr.FirstChild:a=a.firstChild;break;case xr.NextSibling:a=a.nextSibling;break}}return a}function C1(s,e){let[a,...t]=w1(s),n;if(a===rh)n=e[Fe][De];else if(a===lh)n=iw(e[Fe][De]);else{let i=Number(a);n=Ye(e[i+ge])}return x1(n,t)}var S1=!1;function T1(s){S1=s}function E1(s){let e=s[ns];if(e){let{i18nNodes:a,dehydratedIcuData:t}=e;if(a&&t){let n=s[te];for(let i of t.values())D1(n,a,i)}e.i18nNodes=void 0,e.dehydratedIcuData=void 0}}function D1(s,e,a){for(let t of a.node.cases[a.case]){let n=e.get(t.index-ge);n&&Rl(s,n,!1)}}function rm(s){let e=s[qa]??[],t=s[me][te];for(let n of e)q1(n,t);s[qa]=Oe}function q1(s,e){let a=0,t=s.firstChild;if(t){let n=s.data[mi];for(;a<n;){let i=t.nextSibling;Rl(e,t,!1),t=i,a++}}}function lm(s){rm(s);for(let e=Ee;e<s.length;e++)fi(s[e])}function fi(s){E1(s);let e=s[O];for(let a=ge;a<e.bindingStartIndex;a++)if(rs(s[a])){let t=s[a];lm(t)}else ts(s[a])&&fi(s[a])}function I1(s){let e=s._views;for(let a of e){let t=Dj(a);if(t!==null&&t[De]!==null)if(ts(t))fi(t);else{let n=t[De];fi(n),lm(t)}}}function A1(s,e){let a=[];for(let t of e)for(let n=0;n<(t[ch]??1);n++){let i={data:t,firstChild:null};t[mi]>0&&(i.firstChild=s,s=Ui(t[mi],s)),a.push(i)}return[s,a]}var cm=()=>null;function M1(s,e){let a=s[qa];return!e||a===null||a.length===0?null:a[0].data[_j]===e?a.shift():(rm(s),null)}function R1(){cm=M1}function kd(s,e){return cm(s,e)}var Ot=class{},pm=new _("",{providedIn:"root",factory:()=>!1});var dm=new _(""),Fr=class{},bi=class{};function L1(s){let e=Error(`No component factory found for ${be(s)}.`);return e[P1]=s,e}var P1="ngComponent";var Gr=class{resolveComponentFactory(e){throw L1(e)}},Yl=class Yl{};Yl.NULL=new Gr;var Ft=Yl,Gt=class{},Wa=(()=>{let e=class e{constructor(){this.destroyNode=null}};e.__NG_ELEMENT_ID__=()=>N1();let s=e;return s})();function N1(){let s=Y(),e=Ae(),a=Rs(e.index,s);return(ts(a)?a:s)[te]}var O1=(()=>{let e=class e{};e.\u0275prov=w({token:e,providedIn:"root",factory:()=>null});let s=e;return s})(),ar={};var _d=new Set;function lt(s){_d.has(s)||(_d.add(s),performance?.mark?.("mark_feature_usage",{detail:{feature:s}}))}function um(s){let e=!0;return setTimeout(()=>{e&&(e=!1,s())}),typeof Xs.requestAnimationFrame=="function"&&Xs.requestAnimationFrame(()=>{e&&(e=!1,s())}),()=>{e=!1}}function xd(s){let e=!0;return queueMicrotask(()=>{e&&s()}),()=>{e=!1}}function Cd(...s){}var J=class s{constructor({enableLongStackTrace:e=!1,shouldCoalesceEventChangeDetection:a=!1,shouldCoalesceRunChangeDetection:t=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new fe(!1),this.onMicrotaskEmpty=new fe(!1),this.onStable=new fe(!1),this.onError=new fe(!1),typeof Zone>"u")throw new k(908,!1);Zone.assertZonePatched();let n=this;n._nesting=0,n._outer=n._inner=Zone.current,Zone.TaskTrackingZoneSpec&&(n._inner=n._inner.fork(new Zone.TaskTrackingZoneSpec)),e&&Zone.longStackTraceZoneSpec&&(n._inner=n._inner.fork(Zone.longStackTraceZoneSpec)),n.shouldCoalesceEventChangeDetection=!t&&a,n.shouldCoalesceRunChangeDetection=t,n.callbackScheduled=!1,z1(n)}static isInAngularZone(){return typeof Zone<"u"&&Zone.current.get("isAngularZone")===!0}static assertInAngularZone(){if(!s.isInAngularZone())throw new k(909,!1)}static assertNotInAngularZone(){if(s.isInAngularZone())throw new k(909,!1)}run(e,a,t){return this._inner.run(e,a,t)}runTask(e,a,t,n){let i=this._inner,o=i.scheduleEventTask("NgZoneEvent: "+n,e,F1,Cd,Cd);try{return i.runTask(o,a,t)}finally{i.cancelTask(o)}}runGuarded(e,a,t){return this._inner.runGuarded(e,a,t)}runOutsideAngular(e){return this._outer.run(e)}},F1={};function Gl(s){if(s._nesting==0&&!s.hasPendingMicrotasks&&!s.isStable)try{s._nesting++,s.onMicrotaskEmpty.emit(null)}finally{if(s._nesting--,!s.hasPendingMicrotasks)try{s.runOutsideAngular(()=>s.onStable.emit(null))}finally{s.isStable=!0}}}function G1(s){s.isCheckStableRunning||s.callbackScheduled||(s.callbackScheduled=!0,Zone.root.run(()=>{um(()=>{s.callbackScheduled=!1,zr(s),s.isCheckStableRunning=!0,Gl(s),s.isCheckStableRunning=!1})}),zr(s))}function z1(s){let e=()=>{G1(s)};s._inner=s._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:(a,t,n,i,o,r)=>{if(B1(r))return a.invokeTask(n,i,o,r);try{return Sd(s),a.invokeTask(n,i,o,r)}finally{(s.shouldCoalesceEventChangeDetection&&i.type==="eventTask"||s.shouldCoalesceRunChangeDetection)&&e(),Td(s)}},onInvoke:(a,t,n,i,o,r,l)=>{try{return Sd(s),a.invoke(n,i,o,r,l)}finally{s.shouldCoalesceRunChangeDetection&&!s.callbackScheduled&&!U1(r)&&e(),Td(s)}},onHasTask:(a,t,n,i)=>{a.hasTask(n,i),t===n&&(i.change=="microTask"?(s._hasPendingMicrotasks=i.microTask,zr(s),Gl(s)):i.change=="macroTask"&&(s.hasPendingMacrotasks=i.macroTask))},onHandleError:(a,t,n,i)=>(a.handleError(n,i),s.runOutsideAngular(()=>s.onError.emit(i)),!1)})}function zr(s){s._hasPendingMicrotasks||(s.shouldCoalesceEventChangeDetection||s.shouldCoalesceRunChangeDetection)&&s.callbackScheduled===!0?s.hasPendingMicrotasks=!0:s.hasPendingMicrotasks=!1}function Sd(s){s._nesting++,s.isStable&&(s.isStable=!1,s.onUnstable.emit(null))}function Td(s){s._nesting--,Gl(s)}var Br=class{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new fe,this.onMicrotaskEmpty=new fe,this.onStable=new fe,this.onError=new fe}run(e,a,t){return e.apply(a,t)}runGuarded(e,a,t){return e.apply(a,t)}runOutsideAngular(e){return e()}runTask(e,a,t,n){return e.apply(a,t)}};function B1(s){return hm(s,"__ignore_ng_zone__")}function U1(s){return hm(s,"__scheduler_tick__")}function hm(s,e){return!Array.isArray(s)||s.length!==1?!1:s[0]?.data?.[e]===!0}var It=function(s){return s[s.EarlyRead=0]="EarlyRead",s[s.Write=1]="Write",s[s.MixedReadWrite=2]="MixedReadWrite",s[s.Read=3]="Read",s}(It||{}),V1={destroy(){}};function Vi(s,e){!e&&fy(Vi);let a=e?.injector??v(Ge);if(!_a(a))return V1;lt("NgAfterNextRender");let t=a.get(zl),n=t.handler??=new Vr,i=e?.phase??It.MixedReadWrite,o=()=>{n.unregister(l),r()},r=a.get(jl).onDestroy(o),l=qe(a,()=>new Ur(i,()=>{o(),s()}));return n.register(l),{destroy:o}}var Ur=class{constructor(e,a){this.phase=e,this.callbackFn=a,this.zone=v(J),this.errorHandler=v(os,{optional:!0}),v(Ot,{optional:!0})?.notify(6)}invoke(){try{this.zone.runOutsideAngular(this.callbackFn)}catch(e){this.errorHandler?.handleError(e)}}},Vr=class{constructor(){this.executingCallbacks=!1,this.buckets={[It.EarlyRead]:new Set,[It.Write]:new Set,[It.MixedReadWrite]:new Set,[It.Read]:new Set},this.deferredCallbacks=new Set}register(e){(this.executingCallbacks?this.deferredCallbacks:this.buckets[e.phase]).add(e)}unregister(e){this.buckets[e.phase].delete(e),this.deferredCallbacks.delete(e)}execute(){this.executingCallbacks=!0;for(let e of Object.values(this.buckets))for(let a of e)a.invoke();this.executingCallbacks=!1;for(let e of this.deferredCallbacks)this.buckets[e.phase].add(e);this.deferredCallbacks.clear()}destroy(){for(let e of Object.values(this.buckets))e.clear();this.deferredCallbacks.clear()}},zl=(()=>{let e=class e{constructor(){this.handler=null,this.internalCallbacks=[]}execute(){this.executeInternalCallbacks(),this.handler?.execute()}executeInternalCallbacks(){let t=[...this.internalCallbacks];this.internalCallbacks.length=0;for(let n of t)n()}ngOnDestroy(){this.handler?.destroy(),this.handler=null,this.internalCallbacks.length=0}};e.\u0275prov=w({token:e,providedIn:"root",factory:()=>new e});let s=e;return s})();function Hr(s,e,a){let t=a?s.styles:null,n=a?s.classes:null,i=0;if(e!==null)for(let o=0;o<e.length;o++){let r=e[o];if(typeof r=="number")i=r;else if(i==1)n=Jp(n,r);else if(i==2){let l=r,u=e[++o];t=Jp(t,l+": "+u+";")}}a?s.styles=t:s.stylesWithoutHost=t,a?s.classes=n:s.classesWithoutHost=n}var yi=class extends Ft{constructor(e){super(),this.ngModule=e}resolveComponentFactory(e){let a=As(e);return new zt(a,this.ngModule)}};function Ed(s){let e=[];for(let a in s){if(!s.hasOwnProperty(a))continue;let t=s[a];t!==void 0&&e.push({propName:Array.isArray(t)?t[0]:t,templateName:a})}return e}function H1(s){let e=s.toLowerCase();return e==="svg"?ky:e==="math"?_y:null}var Wr=class{constructor(e,a){this.injector=e,this.parentInjector=a}get(e,a,t){t=Si(t);let n=this.injector.get(e,ar,t);return n!==ar||a===ar?n:this.parentInjector.get(e,a,t)}},zt=class extends bi{get inputs(){let e=this.componentDef,a=e.inputTransforms,t=Ed(e.inputs);if(a!==null)for(let n of t)a.hasOwnProperty(n.propName)&&(n.transform=a[n.propName]);return t}get outputs(){return Ed(this.componentDef.outputs)}constructor(e,a){super(),this.componentDef=e,this.ngModule=a,this.componentType=e.type,this.selector=sy(e.selectors),this.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],this.isBoundToModule=!!a}create(e,a,t,n){let i=U(null);try{n=n||this.ngModule;let o=n instanceof he?n:n?.injector;o&&this.componentDef.getStandaloneInjector!==null&&(o=this.componentDef.getStandaloneInjector(o)||o);let r=o?new Wr(e,o):e,l=r.get(Gt,null);if(l===null)throw new k(407,!1);let u=r.get(O1,null),h=r.get(zl,null),m=r.get(Ot,null),g={rendererFactory:l,sanitizer:u,inlineEffectRunner:null,afterRenderEventManager:h,changeDetectionScheduler:m},f=l.createRenderer(null,this.componentDef),b=this.componentDef.selectors[0][0]||"div",q=t?Ew(f,t,this.componentDef.encapsulation,r):ql(f,b,H1(b)),x=512;this.componentDef.signals?x|=4096:this.componentDef.onPush||(x|=16);let D=null;q!==null&&(D=Cl(q,r,!0));let se=Pl(0,null,null,1,0,null,null,null,null,null,null),H=Oi(null,se,null,x,null,null,g,f,r,null,D);hl(H);let B,ye;try{let ie=this.componentDef,Pe,vt=null;ie.findHostDirectiveDefs?(Pe=[],vt=new Map,ie.findHostDirectiveDefs(ie,Pe,vt),Pe.push(ie)):Pe=[ie];let Jf=W1(H,q),$f=J1(Jf,q,ie,Pe,H,g,f);ye=ju(se,ge),q&&K1(f,ie,q,t),a!==void 0&&X1(ye,this.ngContentSelectors,a),B=Y1($f,ie,Pe,vt,H,[Q1]),Ol(se,H,null)}finally{ml()}return new Jr(this.componentType,B,Ii(ye,H),H,ye)}finally{U(i)}}},Jr=class extends Fr{constructor(e,a,t,n,i){super(),this.location=t,this._rootLView=n,this._tNode=i,this.previousInputValues=null,this.instance=a,this.hostView=this.changeDetectorRef=new at(n,void 0,!1),this.componentType=e}setInput(e,a){let t=this._tNode.inputs,n;if(t!==null&&(n=t[e])){if(this.previousInputValues??=new Map,this.previousInputValues.has(e)&&Object.is(this.previousInputValues.get(e),a))return;let i=this._rootLView;Nl(i[O],i,n,e,a),this.previousInputValues.set(e,a);let o=Rs(this._tNode.index,i);Fl(o,1)}}get injector(){return new Ks(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(e){this.hostView.onDestroy(e)}};function W1(s,e){let a=s[O],t=ge;return s[t]=e,Fi(a,t,2,"#host",null)}function J1(s,e,a,t,n,i,o){let r=n[O];$1(t,s,e,o);let l=null;e!==null&&(l=Cl(e,n[Lt]));let u=i.rendererFactory.createRenderer(e,a),h=16;a.signals?h=4096:a.onPush&&(h=64);let m=Oi(n,$h(a),null,h,n[s.index],s,i,u,null,null,l);return r.firstCreatePass&&Pr(r,s,t.length-1),Gi(n,m),n[s.index]=m}function $1(s,e,a,t){for(let n of s)e.mergedAttrs=ol(e.mergedAttrs,n.hostAttrs);e.mergedAttrs!==null&&(Hr(e,e.mergedAttrs,!0),a!==null&&Fh(t,a,e))}function Y1(s,e,a,t,n,i){let o=Ae(),r=n[O],l=Ie(o,n);Xh(r,n,o,a,null,t);for(let h=0;h<a.length;h++){let m=o.directiveStart+h,g=Ra(n,r,m,o);tt(g,n)}Qh(r,n,o),l&&tt(l,n);let u=Ra(n,r,o.directiveStart+o.componentOffset,o);if(s[$e]=n[$e]=u,i!==null)for(let h of i)h(u,e);return Hh(r,o,n),u}function K1(s,e,a,t){if(t)dr(s,a,["ng-version","18.0.0"]);else{let{attrs:n,classes:i}=ty(e.selectors[0]);n&&dr(s,a,n),i&&i.length>0&&Oh(s,a,i.join(" "))}}function X1(s,e,a){let t=s.projection=[];for(let n=0;n<e.length;n++){let i=a[n];t.push(i!=null?Array.from(i):null)}}function Q1(){let s=Ae();vl(Y()[O],s)}var Kt=(()=>{let e=class e{};e.__NG_ELEMENT_ID__=Z1;let s=e;return s})();function Z1(){let s=Ae();return s2(s,Y())}var e2=Kt,mm=class extends e2{constructor(e,a,t){super(),this._lContainer=e,this._hostTNode=a,this._hostLView=t}get element(){return Ii(this._hostTNode,this._hostLView)}get injector(){return new Ks(this._hostTNode,this._hostLView)}get parentInjector(){let e=fl(this._hostTNode,this._hostLView);if(zu(e)){let a=di(e,this._hostLView),t=pi(e),n=a[O].data[t+8];return new Ks(n,a)}else return new Ks(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(e){let a=Dd(this._lContainer);return a!==null&&a[e]||null}get length(){return this._lContainer.length-Ee}createEmbeddedView(e,a,t){let n,i;typeof t=="number"?n=t:t!=null&&(n=t.index,i=t.injector);let o=kd(this._lContainer,e.ssrId),r=e.createEmbeddedViewImpl(a||{},i,o);return this.insertImpl(r,n,wd(this._hostTNode,o)),r}createComponent(e,a,t,n,i){let o=e&&!by(e),r;if(o)r=a;else{let b=a||{};r=b.index,t=b.injector,n=b.projectableNodes,i=b.environmentInjector||b.ngModuleRef}let l=o?e:new zt(As(e)),u=t||this.parentInjector;if(!i&&l.ngModule==null){let q=(o?u:this.parentInjector).get(he,null);q&&(i=q)}let h=As(l.componentType??{}),m=kd(this._lContainer,h?.id??null),g=m?.firstChild??null,f=l.create(u,n,g,i);return this.insertImpl(f.hostView,r,wd(this._hostTNode,m)),f}insert(e,a){return this.insertImpl(e,a,!0)}insertImpl(e,a,t){let n=e._lView;if(Cy(n)){let r=this.indexOf(e);if(r!==-1)this.detach(r);else{let l=n[me],u=new mm(l,l[Ke],l[me]);u.detach(u.indexOf(e))}}let i=this._adjustIndex(a),o=this._lContainer;return n1(o,n,i,t),e.attachToViewContainerRef(),Yd(nr(o),i,e),e}move(e,a){return this.insert(e,a)}indexOf(e){let a=Dd(this._lContainer);return a!==null?a.indexOf(e):-1}remove(e){let a=this._adjustIndex(e,-1),t=Rr(this._lContainer,a);t&&(ai(nr(this._lContainer),a),Rh(t[O],t))}detach(e){let a=this._adjustIndex(e,-1),t=Rr(this._lContainer,a);return t&&ai(nr(this._lContainer),a)!=null?new at(t):null}_adjustIndex(e,a=0){return e??this.length+a}};function Dd(s){return s[ii]}function nr(s){return s[ii]||(s[ii]=[])}function s2(s,e){let a,t=e[s.index];return rs(t)?a=t:(a=Zh(t,e,null,s),e[s.index]=a,Gi(e,a)),gm(a,e,s,t),new mm(a,s,e)}function t2(s,e){let a=s[te],t=a.createComment(""),n=Ie(e,s),i=Al(a,n);return gi(a,i,t,fw(a,n),!1),t}var gm=vm,Bl=()=>!1;function a2(s,e,a){return Bl(s,e,a)}function vm(s,e,a,t){if(s[vs])return;let n;a.type&8?n=Ye(t):n=t2(e,a),s[vs]=n}function n2(s,e,a){if(s[vs]&&s[qa])return!0;let t=a[ns],n=e.index-ge;if(!t||hj(e)||Ri(t,n))return!1;let o=Cr(t,n),r=t.data[xl]?.[n],[l,u]=A1(o,r);return s[vs]=l,s[qa]=u,!0}function i2(s,e,a,t){Bl(s,a,e)||vm(s,e,a,t)}function o2(){gm=i2,Bl=n2}function Hi(s){let e=s.inputConfig,a={};for(let t in e)if(e.hasOwnProperty(t)){let n=e[t];Array.isArray(n)&&n[3]&&(a[t]=n[3])}s.inputTransforms=a}var Ms=class{},La=class{};var $r=class extends Ms{constructor(e,a,t){super(),this._parent=a,this._bootstrapComponents=[],this.destroyCbs=[],this.componentFactoryResolver=new yi(this);let n=iu(e);this._bootstrapComponents=Dh(n.bootstrap),this._r3Injector=Xu(e,a,[{provide:Ms,useValue:this},{provide:Ft,useValue:this.componentFactoryResolver},...t],be(e),new Set(["environment"])),this._r3Injector.resolveInjectorInitializers(),this.instance=this._r3Injector.get(e)}get injector(){return this._r3Injector}destroy(){let e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach(a=>a()),this.destroyCbs=null}onDestroy(e){this.destroyCbs.push(e)}},Yr=class extends La{constructor(e){super(),this.moduleType=e}create(e){return new $r(this.moduleType,e,[])}};var ji=class extends Ms{constructor(e){super(),this.componentFactoryResolver=new yi(this),this.instance=null;let a=new Ta([...e.providers,{provide:Ms,useValue:this},{provide:Ft,useValue:this.componentFactoryResolver}],e.parent||cl(),e.debugName,new Set(["environment"]));this.injector=a,e.runEnvironmentInitializers&&a.resolveInjectorInitializers()}destroy(){this.injector.destroy()}onDestroy(e){this.injector.onDestroy(e)}};function Wi(s,e,a=null){return new ji({providers:s,parent:e,debugName:a,runEnvironmentInitializers:!0}).injector}var ct=(()=>{let e=class e{constructor(){this.taskId=0,this.pendingTasks=new Set,this.hasPendingTasks=new oe(!1)}get _hasPendingTasks(){return this.hasPendingTasks.value}add(){this._hasPendingTasks||this.hasPendingTasks.next(!0);let t=this.taskId++;return this.pendingTasks.add(t),t}remove(t){this.pendingTasks.delete(t),this.pendingTasks.size===0&&this._hasPendingTasks&&this.hasPendingTasks.next(!1)}ngOnDestroy(){this.pendingTasks.clear(),this._hasPendingTasks&&this.hasPendingTasks.next(!1)}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();function fm(s){return l2(s)?Array.isArray(s)||!(s instanceof Map)&&Symbol.iterator in s:!1}function r2(s,e){if(Array.isArray(s))for(let a=0;a<s.length;a++)e(s[a]);else{let a=s[Symbol.iterator](),t;for(;!(t=a.next()).done;)e(t.value)}}function l2(s){return s!==null&&(typeof s=="function"||typeof s=="object")}function bm(s,e,a){return s[e]=a}function c2(s,e){return s[e]}function nt(s,e,a){let t=s[e];return Object.is(t,a)?!1:(s[e]=a,!0)}function p2(s,e,a,t){let n=nt(s,e,a);return nt(s,e+1,t)||n}function d2(s,e,a,t,n){let i=p2(s,e,a,t);return nt(s,e+2,n)||i}function Ja(s){return(s.flags&32)===32}function u2(s,e,a,t,n,i,o,r,l){let u=e.consts,h=Fi(e,s,4,o||null,r||null);Kh(e,a,h,ci(u,l)),vl(e,h);let m=h.tView=Pl(2,h,t,n,i,e.directiveRegistry,e.pipeRegistry,null,e.schemas,u,null);return e.queries!==null&&(e.queries.template(e,h),m.queries=e.queries.embeddedTView(h)),h}function h2(s,e,a,t,n,i,o,r,l,u){let h=a+ge,m=e.firstCreatePass?u2(h,e,s,t,n,i,o,r,l):e.data[h];Ua(m,!1);let g=ym(e,s,m,a);gl()&&Ml(e,s,g,m),tt(g,s);let f=Zh(g,s,g,m);return s[h]=f,Gi(s,f),a2(f,m,s),pl(m)&&Wh(e,s,m),l!=null&&Jh(s,m,u),m}function Qe(s,e,a,t,n,i,o,r){let l=Y(),u=ls(),h=ci(u.consts,i);return h2(l,u,s,e,a,t,n,h,o,r),Qe}var ym=jm;function jm(s,e,a,t){return Ls(!0),e[te].createComment("")}function m2(s,e,a,t){let n=e[ns],i=!n||Ba()||Ja(a)||Ri(n,t);if(Ls(i),i)return jm(s,e,a,t);let o=n.data[kj]?.[t]??null;o!==null&&a.tView!==null&&a.tView.ssrId===null&&(a.tView.ssrId=o);let r=Bi(n,s,e,a);Mi(n,t,r);let l=Sl(n,t);return Ui(l,r)}function g2(){ym=m2}function Ul(s,e,a,t){let n=Y(),i=ul();if(nt(n,i,e)){let o=ls(),r=Nu();Jw(r,n,s,e,a,t)}return Ul}function v2(s,e,a,t){return nt(s,ul(),a)?e+Oa(a)+t:Ps}function $n(s,e){return s<<17|e<<2}function it(s){return s>>17&32767}function f2(s){return(s&2)==2}function b2(s,e){return s&131071|e<<17}function Kr(s){return s|2}function Bt(s){return(s&131068)>>2}function ir(s,e){return s&-131069|e<<2}function y2(s){return(s&1)===1}function Xr(s){return s|1}function j2(s,e,a,t,n,i){let o=i?e.classBindings:e.styleBindings,r=it(o),l=Bt(o);s[t]=a;let u=!1,h;if(Array.isArray(a)){let m=a;h=m[1],(h===null||Fa(m,h)>0)&&(u=!0)}else h=a;if(n)if(l!==0){let g=it(s[r+1]);s[t+1]=$n(g,r),g!==0&&(s[g+1]=ir(s[g+1],t)),s[r+1]=b2(s[r+1],t)}else s[t+1]=$n(r,0),r!==0&&(s[r+1]=ir(s[r+1],t)),r=t;else s[t+1]=$n(l,0),r===0?r=t:s[l+1]=ir(s[l+1],t),l=t;u&&(s[t+1]=Kr(s[t+1])),qd(s,h,t,!0),qd(s,h,t,!1),w2(e,h,s,t,i),o=$n(r,l),i?e.classBindings=o:e.styleBindings=o}function w2(s,e,a,t,n){let i=n?s.residualClasses:s.residualStyles;i!=null&&typeof e=="string"&&Fa(i,e)>=0&&(a[t+1]=Xr(a[t+1]))}function qd(s,e,a,t){let n=s[a+1],i=e===null,o=t?it(n):Bt(n),r=!1;for(;o!==0&&(r===!1||i);){let l=s[o],u=s[o+1];k2(l,e)&&(r=!0,s[o+1]=t?Xr(u):Kr(u)),o=t?it(u):Bt(u)}r&&(s[a+1]=t?Kr(n):Xr(n))}function k2(s,e){return s===null||e==null||(Array.isArray(s)?s[1]:s)===e?!0:Array.isArray(s)&&typeof e=="string"?Fa(s,e)>=0:!1}function $(s,e,a){let t=Y(),n=ul();if(nt(t,n,e)){let i=ls(),o=Nu();Lw(i,o,t,s,e,t[te],a,!1)}return $}function Id(s,e,a,t,n){let i=e.inputs,o=n?"class":"style";Nl(s,a,i[o],o,t)}function Vl(s,e,a){return wm(s,e,a,!1),Vl}function Xt(s,e){return wm(s,e,null,!0),Xt}function wm(s,e,a,t){let n=Y(),i=ls(),o=Oy(2);if(i.firstUpdatePass&&x2(i,s,o,t),e!==Ps&&nt(n,o,e)){let r=i.data[Jt()];D2(i,r,n,n[te],s,n[o+1]=q2(e,a),t,o)}}function _2(s,e){return e>=s.expandoStartIndex}function x2(s,e,a,t){let n=s.data;if(n[a+1]===null){let i=n[Jt()],o=_2(s,a);I2(i,t)&&e===null&&!o&&(e=!1),e=C2(n,i,e,t),j2(n,i,e,a,o,t)}}function C2(s,e,a,t){let n=By(s),i=t?e.residualClasses:e.residualStyles;if(n===null)(t?e.classBindings:e.styleBindings)===0&&(a=or(null,s,e,a,t),a=Pa(a,e.attrs,t),i=null);else{let o=e.directiveStylingLast;if(o===-1||s[o]!==n)if(a=or(n,s,e,a,t),i===null){let l=S2(s,e,t);l!==void 0&&Array.isArray(l)&&(l=or(null,s,e,l[1],t),l=Pa(l,e.attrs,t),T2(s,e,t,l))}else i=E2(s,e,t)}return i!==void 0&&(t?e.residualClasses=i:e.residualStyles=i),a}function S2(s,e,a){let t=a?e.classBindings:e.styleBindings;if(Bt(t)!==0)return s[it(t)]}function T2(s,e,a,t){let n=a?e.classBindings:e.styleBindings;s[it(n)]=t}function E2(s,e,a){let t,n=e.directiveEnd;for(let i=1+e.directiveStylingLast;i<n;i++){let o=s[i].hostAttrs;t=Pa(t,o,a)}return Pa(t,e.attrs,a)}function or(s,e,a,t,n){let i=null,o=a.directiveEnd,r=a.directiveStylingLast;for(r===-1?r=a.directiveStart:r++;r<o&&(i=e[r],t=Pa(t,i.hostAttrs,n),i!==s);)r++;return s!==null&&(a.directiveStylingLast=r),t}function Pa(s,e,a){let t=a?1:2,n=-1;if(e!==null)for(let i=0;i<e.length;i++){let o=e[i];typeof o=="number"?n=o:n===t&&(Array.isArray(s)||(s=s===void 0?[]:["",s]),Ub(s,o,a?!0:e[++i]))}return s===void 0?null:s}function D2(s,e,a,t,n,i,o,r){if(!(e.type&3))return;let l=s.data,u=l[r+1],h=y2(u)?Ad(l,e,a,n,Bt(u),o):void 0;if(!wi(h)){wi(i)||f2(u)&&(i=Ad(l,null,a,n,r,o));let m=yu(Jt(),a);_w(t,o,m,n,i)}}function Ad(s,e,a,t,n,i){let o=e===null,r;for(;n>0;){let l=s[n],u=Array.isArray(l),h=u?l[1]:l,m=h===null,g=a[n+1];g===Ps&&(g=m?Oe:void 0);let f=m?Jo(g,t):h===t?g:void 0;if(u&&!wi(f)&&(f=Jo(l,t)),wi(f)&&(r=f,o))return r;let b=s[n+1];n=o?it(b):Bt(b)}if(e!==null){let l=i?e.residualClasses:e.residualStyles;l!=null&&(r=Jo(l,t))}return r}function wi(s){return s!==void 0}function q2(s,e){return s==null||s===""||(typeof e=="string"?s=s+e:typeof s=="object"&&(s=be(ze(s)))),s}function I2(s,e){return(s.flags&(e?8:16))!==0}function A2(s,e,a,t,n,i){let o=e.consts,r=ci(o,n),l=Fi(e,s,2,t,r);return Kh(e,a,l,ci(o,i)),l.attrs!==null&&Hr(l,l.attrs,!1),l.mergedAttrs!==null&&Hr(l,l.mergedAttrs,!0),e.queries!==null&&e.queries.elementStart(e,l),l}function d(s,e,a,t){let n=Y(),i=ls(),o=ge+s,r=n[te],l=i.firstCreatePass?A2(o,i,n,e,a,t):i.data[o],u=km(i,n,l,r,e,s);n[o]=u;let h=pl(l);return Ua(l,!0),Fh(r,u,l),!Ja(l)&&gl()&&Ml(i,n,u,l),Dy()===0&&tt(u,n),qy(),h&&(Wh(i,n,l),Hh(i,l,n)),t!==null&&Jh(n,l),d}function p(){let s=Ae();Eu()?Py():(s=s.parent,Ua(s,!1));let e=s;Ay(e)&&Ry(),Iy();let a=ls();return a.firstCreatePass&&(vl(a,s),mu(s)&&a.queries.elementEnd(s)),e.classesWithoutHost!=null&&$y(e)&&Id(a,e,Y(),e.classesWithoutHost,!0),e.stylesWithoutHost!=null&&Yy(e)&&Id(a,e,Y(),e.stylesWithoutHost,!1),p}function S(s,e,a,t){return d(s,e,a,t),p(),S}var km=(s,e,a,t,n,i)=>(Ls(!0),ql(t,n,Ou()));function M2(s,e,a,t,n,i){let o=e[ns],r=!o||Ba()||Ja(a)||Ri(o,i);if(Ls(r),r)return ql(t,n,Ou());let l=Bi(o,s,e,a);return hh(o,i)&&Mi(o,i,l.nextSibling),o&&(Zu(a)||eh(l))&&Ga(a)&&(My(a),Nh(l)),l}function R2(){km=M2}var L2=(s,e,a,t)=>(Ls(!0),Ih(e[te],""));function P2(s,e,a,t){let n,i=e[ns],o=!i||Ba()||Ja(a);if(Ls(o),o)return Ih(e[te],"");let r=Bi(i,s,e,a),l=Aj(i,t);return Mi(i,t,r),n=Ui(l,r),n}function N2(){L2=P2}function _m(){return Y()}var ki="en-US";var O2=ki;function F2(s){typeof s=="string"&&(O2=s.toLowerCase().replace(/_/g,"-"))}var G2=(s,e,a)=>{};function pt(s,e,a,t){let n=Y(),i=ls(),o=Ae();return B2(i,n,n[te],o,s,e,t),pt}function z2(s,e,a,t){let n=s.cleanup;if(n!=null)for(let i=0;i<n.length-1;i+=2){let o=n[i];if(o===a&&n[i+1]===t){let r=e[Ea],l=n[i+2];return r.length>l?r[l]:null}typeof o=="string"&&(i+=2)}return null}function B2(s,e,a,t,n,i,o){let r=pl(t),u=s.firstCreatePass&&Qw(s),h=e[$e],m=Xw(e),g=!0;if(t.type&3||o){let q=Ie(t,e),x=o?o(q):q,D=m.length,se=o?B=>o(Ye(B[t.index])):t.index;G2(q,n,i);let H=null;if(!o&&r&&(H=z2(s,e,n,t.index)),H!==null){let B=H.__ngLastListenerFn__||H;B.__ngNextListenerFn__=i,H.__ngLastListenerFn__=i,g=!1}else{i=Rd(t,e,h,i,!1);let B=a.listen(x,n,i);m.push(i,B),u&&u.push(n,se,D,D+1)}}else i=Rd(t,e,h,i,!1);let f=t.outputs,b;if(g&&f!==null&&(b=f[n])){let q=b.length;if(q)for(let x=0;x<q;x+=2){let D=b[x],se=b[x+1],ye=e[D][se].subscribe(i),ie=m.length;m.push(i,ye),u&&u.push(n,t.index,ie,-(ie+1))}}}function Md(s,e,a,t){let n=U(null);try{return es(6,e,a),a(t)!==!1}catch(i){return sm(s,i),!1}finally{es(7,e,a),U(n)}}function Rd(s,e,a,t,n){return function i(o){if(o===Function)return t;let r=s.componentOffset>-1?Rs(s.index,e):e;Fl(r,5);let l=Md(e,a,t,o),u=i.__ngNextListenerFn__;for(;u;)l=Md(e,a,u,o)&&l,u=u.__ngNextListenerFn__;return n&&l===!1&&o.preventDefault(),l}}function dt(s=1){return Vy(s)}function U2(s,e,a,t){a>=s.data.length&&(s.data[a]=null,s.blueprint[a]=null),e[a]=t}function c(s,e=""){let a=Y(),t=ls(),n=s+ge,i=t.firstCreatePass?Fi(t,n,1,e,null):t.data[n],o=xm(t,a,i,e,s);a[n]=o,gl()&&Ml(t,a,o,i),Ua(i,!1)}var xm=(s,e,a,t,n)=>(Ls(!0),qh(e[te],t));function V2(s,e,a,t,n){let i=e[ns],o=!i||Ba()||Ja(a)||Ri(i,n);return Ls(o),o?qh(e[te],t):Bi(i,s,e,a)}function H2(){xm=V2}function xe(s){return Ji("",s,""),xe}function Ji(s,e,a){let t=Y(),n=v2(t,s,e,a);return n!==Ps&&Zw(t,Jt(),n),Ji}var W2=(()=>{let e=class e{constructor(t){this._injector=t,this.cachedInjectors=new Map}getOrCreateStandaloneInjector(t){if(!t.standalone)return null;if(!this.cachedInjectors.has(t)){let n=lu(!1,t.type),i=n.length>0?Wi([n],this._injector,`Standalone[${t.type.name}]`):null;this.cachedInjectors.set(t,i)}return this.cachedInjectors.get(t)}ngOnDestroy(){try{for(let t of this.cachedInjectors.values())t!==null&&t.destroy()}finally{this.cachedInjectors.clear()}}};e.\u0275prov=w({token:e,providedIn:"environment",factory:()=>new e(C(he))});let s=e;return s})();function X(s){lt("NgStandalone"),s.getStandaloneInjector=e=>e.get(W2).getOrCreateStandaloneInjector(s)}function Cm(s,e,a){let t=qu()+s,n=Y();return n[t]===Ps?bm(n,t,a?e.call(a):e()):c2(n,t)}function J2(s,e){let a=s[e];return a===Ps?void 0:a}function $2(s,e,a,t,n,i,o,r){let l=e+a;return d2(s,l,n,i,o)?bm(s,l+3,r?t.call(r,n,i,o):t(n,i,o)):J2(s,l+3)}function Sm(s,e){let a=ls(),t,n=s+ge;a.firstCreatePass?(t=Y2(e,a.pipeRegistry),a.data[n]=t,t.onDestroy&&(a.destroyHooks??=[]).push(n,t.onDestroy)):t=a.data[n];let i=t.factory||(t.factory=Qs(t.type,!0)),o,r=_e(ce);try{let l=ui(!1),u=i();return ui(l),U2(a,Y(),n,u),u}finally{_e(r)}}function Y2(s,e){if(e)for(let a=e.length-1;a>=0;a--){let t=e[a];if(s===t.name)return t}}function Tm(s,e,a,t,n){let i=s+ge,o=Y(),r=xy(o,i);return K2(o,i)?$2(o,qu(),e,r.transform,a,t,n,r):r.transform(a,t,n)}function K2(s,e){return s[O].data[e].pure}var $i=(()=>{let e=class e{log(t){console.log(t)}warn(t){console.warn(t)}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"platform"});let s=e;return s})();var Em=new _("");function $a(s){return!!s&&typeof s.then=="function"}function Dm(s){return!!s&&typeof s.subscribe=="function"}var Yi=new _(""),qm=(()=>{let e=class e{constructor(){this.initialized=!1,this.done=!1,this.donePromise=new Promise((t,n)=>{this.resolve=t,this.reject=n}),this.appInits=v(Yi,{optional:!0})??[]}runInitializers(){if(this.initialized)return;let t=[];for(let i of this.appInits){let o=i();if($a(o))t.push(o);else if(Dm(o)){let r=new Promise((l,u)=>{o.subscribe({complete:l,error:u})});t.push(r)}}let n=()=>{this.done=!0,this.resolve()};Promise.all(t).then(()=>{n()}).catch(i=>{this.reject(i)}),t.length===0&&n(),this.initialized=!0}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),ut=new _("");function X2(){bp(()=>{throw new k(600,!1)})}function Q2(s){return s.isBoundToModule}var Z2=10;function e0(s,e,a){try{let t=a();return $a(t)?t.catch(n=>{throw e.runOutsideAngular(()=>s.handleError(n)),n}):t}catch(t){throw e.runOutsideAngular(()=>s.handleError(t)),t}}var ws=(()=>{let e=class e{constructor(){this._bootstrapListeners=[],this._runningTick=!1,this._destroyed=!1,this._destroyListeners=[],this._views=[],this.internalErrorHandler=v(Qu),this.afterRenderEffectManager=v(zl),this.zonelessEnabled=v(pm),this.externalTestViews=new Set,this.beforeRender=new ue,this.afterTick=new ue,this.componentTypes=[],this.components=[],this.isStable=v(ct).hasPendingTasks.pipe(R(t=>!t)),this._injector=v(he)}get allViews(){return[...this.externalTestViews.keys(),...this._views]}get destroyed(){return this._destroyed}get injector(){return this._injector}bootstrap(t,n){let i=t instanceof bi;if(!this._injector.get(qm).done){let f=!i&&nu(t),b=!1;throw new k(405,b)}let r;i?r=t:r=this._injector.get(Ft).resolveComponentFactory(t),this.componentTypes.push(r.componentType);let l=Q2(r)?void 0:this._injector.get(Ms),u=n||r.selector,h=r.create(Ge.NULL,[],u,l),m=h.location.nativeElement,g=h.injector.get(Em,null);return g?.registerApplication(m),h.onDestroy(()=>{this.detachView(h.hostView),rr(this.components,h),g?.unregisterApplication(m)}),this._loadComponent(h),h}tick(){this._tick(!0)}_tick(t){if(this._runningTick)throw new k(101,!1);let n=U(null);try{this._runningTick=!0,this.detectChangesInAttachedViews(t)}catch(i){this.internalErrorHandler(i)}finally{this._runningTick=!1,U(n),this.afterTick.next()}}detectChangesInAttachedViews(t){let n=null;this._injector.destroyed||(n=this._injector.get(Gt,null,{optional:!0}));let i=0,o=this.afterRenderEffectManager;for(;i<Z2;){let r=i===0;if(t||!r){this.beforeRender.next(r);for(let{_lView:l,notifyErrorHandler:u}of this._views)s0(l,u,r,this.zonelessEnabled)}else n?.begin?.(),n?.end?.();if(i++,o.executeInternalCallbacks(),!this.allViews.some(({_lView:l})=>Ia(l))&&(o.execute(),!this.allViews.some(({_lView:l})=>Ia(l))))break}}attachView(t){let n=t;this._views.push(n),n.attachToAppRef(this)}detachView(t){let n=t;rr(this._views,n),n.detachFromAppRef()}_loadComponent(t){this.attachView(t.hostView),this.tick(),this.components.push(t);let n=this._injector.get(ut,[]);[...this._bootstrapListeners,...n].forEach(i=>i(t))}ngOnDestroy(){if(!this._destroyed)try{this._destroyListeners.forEach(t=>t()),this._views.slice().forEach(t=>t.destroy())}finally{this._destroyed=!0,this._views=[],this._bootstrapListeners=[],this._destroyListeners=[]}}onDestroy(t){return this._destroyListeners.push(t),()=>rr(this._destroyListeners,t)}destroy(){if(this._destroyed)throw new k(406,!1);let t=this._injector;t.destroy&&!t.destroyed&&t.destroy()}get viewCount(){return this._views.length}warnIfDestroyed(){}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();function rr(s,e){let a=s.indexOf(e);a>-1&&s.splice(a,1)}var Yn;function Hl(s){Yn??=new WeakMap;let e=Yn.get(s);if(e)return e;let a=s.isStable.pipe(He(t=>t)).toPromise().then(()=>{});return Yn.set(s,a),s.onDestroy(()=>Yn?.delete(s)),a}function s0(s,e,a,t){if(!a&&!Ia(s))return;am(s,e,a&&!t?0:1)}var Qr=class{constructor(e,a){this.ngModuleFactory=e,this.componentFactories=a}},Ki=(()=>{let e=class e{compileModuleSync(t){return new Yr(t)}compileModuleAsync(t){return Promise.resolve(this.compileModuleSync(t))}compileModuleAndAllComponentsSync(t){let n=this.compileModuleSync(t),i=iu(t),o=Dh(i.declarations).reduce((r,l)=>{let u=As(l);return u&&r.push(new zt(u)),r},[]);return new Qr(n,o)}compileModuleAndAllComponentsAsync(t){return Promise.resolve(this.compileModuleAndAllComponentsSync(t))}clearCache(){}clearCacheFor(t){}getModuleId(t){}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();var t0=!0;var a0=(()=>{let e=class e{constructor(){this.appRef=v(ws),this.taskService=v(ct),this.ngZone=v(J),this.zonelessEnabled=v(pm),this.disableScheduling=v(dm,{optional:!0})??!1,this.zoneIsDefined=typeof Zone<"u"&&!!Zone.root.run,this.schedulerTickApplyArgs=[{data:{__scheduler_tick__:!0}}],this.subscriptions=new ae,this.cancelScheduledCallback=null,this.shouldRefreshViews=!1,this.useMicrotaskScheduler=!1,this.runningTick=!1,this.pendingRenderTaskId=null,this.subscriptions.add(this.appRef.afterTick.subscribe(()=>{this.runningTick||this.cleanup()})),this.subscriptions.add(this.ngZone.onUnstable.subscribe(()=>{this.runningTick||this.cleanup()})),this.disableScheduling||=!this.zonelessEnabled&&(this.ngZone instanceof Br||!this.zoneIsDefined)}notify(t){if(!this.zonelessEnabled&&t===5)return;switch(t){case 3:case 2:case 0:case 4:case 5:case 1:{this.shouldRefreshViews=!0;break}case 8:case 7:case 6:case 9:default:}if(!this.shouldScheduleTick())return;let n=this.useMicrotaskScheduler?xd:um;this.pendingRenderTaskId=this.taskService.add(),this.zoneIsDefined?Zone.root.run(()=>{this.cancelScheduledCallback=n(()=>{this.tick(this.shouldRefreshViews)})}):this.cancelScheduledCallback=n(()=>{this.tick(this.shouldRefreshViews)})}shouldScheduleTick(){return!(this.disableScheduling||this.pendingRenderTaskId!==null||this.runningTick||this.appRef._runningTick||!this.zonelessEnabled&&this.zoneIsDefined&&J.isInAngularZone())}tick(t){if(this.runningTick||this.appRef.destroyed)return;let n=this.taskService.add();try{this.ngZone.run(()=>{this.runningTick=!0,this.appRef._tick(t)},void 0,this.schedulerTickApplyArgs)}catch(i){throw this.taskService.remove(n),i}finally{this.cleanup()}this.useMicrotaskScheduler=!0,xd(()=>{this.useMicrotaskScheduler=!1,this.taskService.remove(n)})}ngOnDestroy(){this.subscriptions.unsubscribe(),this.cleanup()}cleanup(){if(this.shouldRefreshViews=!1,this.runningTick=!1,this.cancelScheduledCallback?.(),this.cancelScheduledCallback=null,this.pendingRenderTaskId!==null){let t=this.pendingRenderTaskId;this.pendingRenderTaskId=null,this.taskService.remove(t)}}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();var n0=(()=>{let e=class e{constructor(){this.zone=v(J),this.changeDetectionScheduler=v(Ot,{optional:!0}),this.applicationRef=v(ws)}initialize(){this._onMicrotaskEmptySubscription||(this._onMicrotaskEmptySubscription=this.zone.onMicrotaskEmpty.subscribe({next:()=>{this.changeDetectionScheduler?.runningTick||this.zone.run(()=>{this.applicationRef.tick()})}}))}ngOnDestroy(){this._onMicrotaskEmptySubscription?.unsubscribe()}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();function i0({ngZoneFactory:s,ignoreChangesOutsideZone:e}){return s??=()=>new J(r0()),[{provide:J,useFactory:s},{provide:Zs,multi:!0,useFactory:()=>{let a=v(n0,{optional:!0});return()=>a.initialize()}},{provide:Zs,multi:!0,useFactory:()=>{let a=v(l0);return()=>{a.initialize()}}},{provide:Qu,useFactory:o0},e===!0?{provide:dm,useValue:!0}:[],t0||e===!1?{provide:Ot,useExisting:a0}:[]]}function o0(){let s=v(J),e=v(os);return a=>s.runOutsideAngular(()=>e.handleError(a))}function r0(s){return{enableLongStackTrace:!1,shouldCoalesceEventChangeDetection:s?.eventCoalescing??!1,shouldCoalesceRunChangeDetection:s?.runCoalescing??!1}}var l0=(()=>{let e=class e{constructor(){this.subscription=new ae,this.initialized=!1,this.zone=v(J),this.pendingTasks=v(ct)}initialize(){if(this.initialized)return;this.initialized=!0;let t=null;!this.zone.isStable&&!this.zone.hasPendingMacrotasks&&!this.zone.hasPendingMicrotasks&&(t=this.pendingTasks.add()),this.zone.runOutsideAngular(()=>{this.subscription.add(this.zone.onStable.subscribe(()=>{J.assertNotInAngularZone(),queueMicrotask(()=>{t!==null&&!this.zone.hasPendingMacrotasks&&!this.zone.hasPendingMicrotasks&&(this.pendingTasks.remove(t),t=null)})}))}),this.subscription.add(this.zone.onUnstable.subscribe(()=>{J.assertInAngularZone(),t??=this.pendingTasks.add()}))}ngOnDestroy(){this.subscription.unsubscribe()}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();function c0(){return typeof $localize<"u"&&$localize.locale||ki}var Wl=new _("",{providedIn:"root",factory:()=>v(Wl,L.Optional|L.SkipSelf)||c0()});var Im=new _("");var ei=null;function p0(s=[],e){return Ge.create({name:e,providers:[{provide:Ei,useValue:"platform"},{provide:Im,useValue:new Set([()=>ei=null])},...s]})}function d0(s=[]){if(ei)return ei;let e=p0(s);return ei=e,X2(),u0(e),e}function u0(s){s.get(wl,null)?.forEach(a=>a())}var Qt=(()=>{let e=class e{};e.__NG_ELEMENT_ID__=h0;let s=e;return s})();function h0(s){return m0(Ae(),Y(),(s&16)===16)}function m0(s,e,a){if(Ga(s)&&!a){let t=Rs(s.index,e);return new at(t,t)}else if(s.type&47){let t=e[Fe];return new at(t,e)}return null}var Zr=class{constructor(){}supports(e){return fm(e)}create(e){return new el(e)}},g0=(s,e)=>e,el=class{constructor(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||g0}forEachItem(e){let a;for(a=this._itHead;a!==null;a=a._next)e(a)}forEachOperation(e){let a=this._itHead,t=this._removalsHead,n=0,i=null;for(;a||t;){let o=!t||a&&a.currentIndex<Ld(t,n,i)?a:t,r=Ld(o,n,i),l=o.currentIndex;if(o===t)n--,t=t._nextRemoved;else if(a=a._next,o.previousIndex==null)n++;else{i||(i=[]);let u=r-n,h=l-n;if(u!=h){for(let g=0;g<u;g++){let f=g<i.length?i[g]:i[g]=0,b=f+g;h<=b&&b<u&&(i[g]=f+1)}let m=o.previousIndex;i[m]=h-u}}r!==l&&e(o,r,l)}}forEachPreviousItem(e){let a;for(a=this._previousItHead;a!==null;a=a._nextPrevious)e(a)}forEachAddedItem(e){let a;for(a=this._additionsHead;a!==null;a=a._nextAdded)e(a)}forEachMovedItem(e){let a;for(a=this._movesHead;a!==null;a=a._nextMoved)e(a)}forEachRemovedItem(e){let a;for(a=this._removalsHead;a!==null;a=a._nextRemoved)e(a)}forEachIdentityChange(e){let a;for(a=this._identityChangesHead;a!==null;a=a._nextIdentityChange)e(a)}diff(e){if(e==null&&(e=[]),!fm(e))throw new k(900,!1);return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let a=this._itHead,t=!1,n,i,o;if(Array.isArray(e)){this.length=e.length;for(let r=0;r<this.length;r++)i=e[r],o=this._trackByFn(r,i),a===null||!Object.is(a.trackById,o)?(a=this._mismatch(a,i,o,r),t=!0):(t&&(a=this._verifyReinsertion(a,i,o,r)),Object.is(a.item,i)||this._addIdentityChange(a,i)),a=a._next}else n=0,r2(e,r=>{o=this._trackByFn(n,r),a===null||!Object.is(a.trackById,o)?(a=this._mismatch(a,r,o,n),t=!0):(t&&(a=this._verifyReinsertion(a,r,o,n)),Object.is(a.item,r)||this._addIdentityChange(a,r)),a=a._next,n++}),this.length=n;return this._truncate(a),this.collection=e,this.isDirty}get isDirty(){return this._additionsHead!==null||this._movesHead!==null||this._removalsHead!==null||this._identityChangesHead!==null}_reset(){if(this.isDirty){let e;for(e=this._previousItHead=this._itHead;e!==null;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;e!==null;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;e!==null;e=e._nextMoved)e.previousIndex=e.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(e,a,t,n){let i;return e===null?i=this._itTail:(i=e._prev,this._remove(e)),e=this._unlinkedRecords===null?null:this._unlinkedRecords.get(t,null),e!==null?(Object.is(e.item,a)||this._addIdentityChange(e,a),this._reinsertAfter(e,i,n)):(e=this._linkedRecords===null?null:this._linkedRecords.get(t,n),e!==null?(Object.is(e.item,a)||this._addIdentityChange(e,a),this._moveAfter(e,i,n)):e=this._addAfter(new sl(a,t),i,n)),e}_verifyReinsertion(e,a,t,n){let i=this._unlinkedRecords===null?null:this._unlinkedRecords.get(t,null);return i!==null?e=this._reinsertAfter(i,e._prev,n):e.currentIndex!=n&&(e.currentIndex=n,this._addToMoves(e,n)),e}_truncate(e){for(;e!==null;){let a=e._next;this._addToRemovals(this._unlink(e)),e=a}this._unlinkedRecords!==null&&this._unlinkedRecords.clear(),this._additionsTail!==null&&(this._additionsTail._nextAdded=null),this._movesTail!==null&&(this._movesTail._nextMoved=null),this._itTail!==null&&(this._itTail._next=null),this._removalsTail!==null&&(this._removalsTail._nextRemoved=null),this._identityChangesTail!==null&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(e,a,t){this._unlinkedRecords!==null&&this._unlinkedRecords.remove(e);let n=e._prevRemoved,i=e._nextRemoved;return n===null?this._removalsHead=i:n._nextRemoved=i,i===null?this._removalsTail=n:i._prevRemoved=n,this._insertAfter(e,a,t),this._addToMoves(e,t),e}_moveAfter(e,a,t){return this._unlink(e),this._insertAfter(e,a,t),this._addToMoves(e,t),e}_addAfter(e,a,t){return this._insertAfter(e,a,t),this._additionsTail===null?this._additionsTail=this._additionsHead=e:this._additionsTail=this._additionsTail._nextAdded=e,e}_insertAfter(e,a,t){let n=a===null?this._itHead:a._next;return e._next=n,e._prev=a,n===null?this._itTail=e:n._prev=e,a===null?this._itHead=e:a._next=e,this._linkedRecords===null&&(this._linkedRecords=new _i),this._linkedRecords.put(e),e.currentIndex=t,e}_remove(e){return this._addToRemovals(this._unlink(e))}_unlink(e){this._linkedRecords!==null&&this._linkedRecords.remove(e);let a=e._prev,t=e._next;return a===null?this._itHead=t:a._next=t,t===null?this._itTail=a:t._prev=a,e}_addToMoves(e,a){return e.previousIndex===a||(this._movesTail===null?this._movesTail=this._movesHead=e:this._movesTail=this._movesTail._nextMoved=e),e}_addToRemovals(e){return this._unlinkedRecords===null&&(this._unlinkedRecords=new _i),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,this._removalsTail===null?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}_addIdentityChange(e,a){return e.item=a,this._identityChangesTail===null?this._identityChangesTail=this._identityChangesHead=e:this._identityChangesTail=this._identityChangesTail._nextIdentityChange=e,e}},sl=class{constructor(e,a){this.item=e,this.trackById=a,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}},tl=class{constructor(){this._head=null,this._tail=null}add(e){this._head===null?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}get(e,a){let t;for(t=this._head;t!==null;t=t._nextDup)if((a===null||a<=t.currentIndex)&&Object.is(t.trackById,e))return t;return null}remove(e){let a=e._prevDup,t=e._nextDup;return a===null?this._head=t:a._nextDup=t,t===null?this._tail=a:t._prevDup=a,this._head===null}},_i=class{constructor(){this.map=new Map}put(e){let a=e.trackById,t=this.map.get(a);t||(t=new tl,this.map.set(a,t)),t.add(e)}get(e,a){let t=e,n=this.map.get(t);return n?n.get(e,a):null}remove(e){let a=e.trackById;return this.map.get(a).remove(e)&&this.map.delete(a),e}get isEmpty(){return this.map.size===0}clear(){this.map.clear()}};function Ld(s,e,a){let t=s.previousIndex;if(t===null)return t;let n=0;return a&&t<a.length&&(n=a[t]),t+e+n}function Pd(){return new Jl([new Zr])}var Jl=(()=>{let e=class e{constructor(t){this.factories=t}static create(t,n){if(n!=null){let i=n.factories.slice();t=t.concat(i)}return new e(t)}static extend(t){return{provide:e,useFactory:n=>e.create(t,n||Pd()),deps:[[e,new nl,new Ti]]}}find(t){let n=this.factories.find(i=>i.supports(t));if(n!=null)return n;throw new k(901,!1)}};e.\u0275prov=w({token:e,providedIn:"root",factory:Pd});let s=e;return s})();function Am(s){try{let{rootComponent:e,appProviders:a,platformProviders:t}=s,n=d0(t),i=[i0({}),...a||[]],r=new ji({providers:i,parent:n,debugName:"",runEnvironmentInitializers:!1}).injector,l=r.get(J);return l.run(()=>{r.resolveInjectorInitializers();let u=r.get(os,null),h;l.runOutsideAngular(()=>{h=l.onError.subscribe({next:f=>{u.handleError(f)}})});let m=()=>r.destroy(),g=n.get(Im);return g.add(m),r.onDestroy(()=>{h.unsubscribe(),g.delete(m)}),e0(u,l,()=>{let f=r.get(qm);return f.runInitializers(),f.donePromise.then(()=>{let b=r.get(Wl,ki);F2(b||ki);let q=r.get(ws);return e!==void 0&&q.bootstrap(e),q})})})}catch(e){return Promise.reject(e)}}var Nd=!1;function v0(){Nd||(Nd=!0,Ej(),R2(),H2(),N2(),g2(),o2(),R1(),Iw())}function f0(s,e){return Hl(s)}function Mm(){return rt([{provide:Vn,useFactory:()=>{let s=!0;return _a()&&(s=!!v(Yt,{optional:!0})?.get(dh,null)),s&&lt("NgHydration"),s}},{provide:Zs,useValue:()=>{T1(!1),_a()&&v(Vn)&&(b0(),v0())},multi:!0},{provide:gh,useFactory:()=>_a()&&v(Vn)},{provide:ut,useFactory:()=>{if(_a()&&v(Vn)){let s=v(ws),e=v(Ge);return()=>{f0(s,e).then(()=>{I1(s)})}}return()=>{}},multi:!0}])}function b0(){let s=Va(),e;for(let a of s.body.childNodes)if(a.nodeType===Node.COMMENT_NODE&&a.textContent?.trim()===Sj){e=a;break}if(!e)throw new k(-507,!1)}function ks(s){return typeof s=="boolean"?s:s!=null&&s!=="false"}function $l(s,e=NaN){return!isNaN(parseFloat(s))&&!isNaN(Number(s))?Number(s):e}function Rm(s){let e=As(s);if(!e)return null;let a=new zt(e);return{get selector(){return a.selector},get type(){return a.componentType},get inputs(){return a.inputs},get outputs(){return a.outputs},get ngContentSelectors(){return a.ngContentSelectors},get isStandalone(){return e.standalone},get isSignal(){return e.signals}}}var Gm=null;function Zt(){return Gm}function zm(s){Gm??=s}var Xi=class{};var pe=new _(""),ec=(()=>{let e=class e{historyGo(t){throw new Error("")}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:()=>v(y0),providedIn:"platform"});let s=e;return s})(),Bm=new _(""),y0=(()=>{let e=class e extends ec{constructor(){super(),this._doc=v(pe),this._location=window.location,this._history=window.history}getBaseHrefFromDOM(){return Zt().getBaseHref(this._doc)}onPopState(t){let n=Zt().getGlobalEventTarget(this._doc,"window");return n.addEventListener("popstate",t,!1),()=>n.removeEventListener("popstate",t)}onHashChange(t){let n=Zt().getGlobalEventTarget(this._doc,"window");return n.addEventListener("hashchange",t,!1),()=>n.removeEventListener("hashchange",t)}get href(){return this._location.href}get protocol(){return this._location.protocol}get hostname(){return this._location.hostname}get port(){return this._location.port}get pathname(){return this._location.pathname}get search(){return this._location.search}get hash(){return this._location.hash}set pathname(t){this._location.pathname=t}pushState(t,n,i){this._history.pushState(t,n,i)}replaceState(t,n,i){this._history.replaceState(t,n,i)}forward(){this._history.forward()}back(){this._history.back()}historyGo(t=0){this._history.go(t)}getState(){return this._history.state}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:()=>new e,providedIn:"platform"});let s=e;return s})();function sc(s,e){if(s.length==0)return e;if(e.length==0)return s;let a=0;return s.endsWith("/")&&a++,e.startsWith("/")&&a++,a==2?s+e.substring(1):a==1?s+e:s+"/"+e}function Lm(s){let e=s.match(/#|\?|$/),a=e&&e.index||s.length,t=a-(s[a-1]==="/"?1:0);return s.slice(0,t)+s.slice(a)}function _s(s){return s&&s[0]!=="?"?"?"+s:s}var xs=(()=>{let e=class e{historyGo(t){throw new Error("")}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:()=>v(tc),providedIn:"root"});let s=e;return s})(),Um=new _(""),tc=(()=>{let e=class e extends xs{constructor(t,n){super(),this._platformLocation=t,this._removeListenerFns=[],this._baseHref=n??this._platformLocation.getBaseHrefFromDOM()??v(pe).location?.origin??""}ngOnDestroy(){for(;this._removeListenerFns.length;)this._removeListenerFns.pop()()}onPopState(t){this._removeListenerFns.push(this._platformLocation.onPopState(t),this._platformLocation.onHashChange(t))}getBaseHref(){return this._baseHref}prepareExternalUrl(t){return sc(this._baseHref,t)}path(t=!1){let n=this._platformLocation.pathname+_s(this._platformLocation.search),i=this._platformLocation.hash;return i&&t?`${n}${i}`:n}pushState(t,n,i,o){let r=this.prepareExternalUrl(i+_s(o));this._platformLocation.pushState(t,n,r)}replaceState(t,n,i,o){let r=this.prepareExternalUrl(i+_s(o));this._platformLocation.replaceState(t,n,r)}forward(){this._platformLocation.forward()}back(){this._platformLocation.back()}getState(){return this._platformLocation.getState()}historyGo(t=0){this._platformLocation.historyGo?.(t)}};e.\u0275fac=function(n){return new(n||e)(C(ec),C(Um,8))},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),Vm=(()=>{let e=class e extends xs{constructor(t,n){super(),this._platformLocation=t,this._baseHref="",this._removeListenerFns=[],n!=null&&(this._baseHref=n)}ngOnDestroy(){for(;this._removeListenerFns.length;)this._removeListenerFns.pop()()}onPopState(t){this._removeListenerFns.push(this._platformLocation.onPopState(t),this._platformLocation.onHashChange(t))}getBaseHref(){return this._baseHref}path(t=!1){let n=this._platformLocation.hash??"#";return n.length>0?n.substring(1):n}prepareExternalUrl(t){let n=sc(this._baseHref,t);return n.length>0?"#"+n:n}pushState(t,n,i,o){let r=this.prepareExternalUrl(i+_s(o));r.length==0&&(r=this._platformLocation.pathname),this._platformLocation.pushState(t,n,r)}replaceState(t,n,i,o){let r=this.prepareExternalUrl(i+_s(o));r.length==0&&(r=this._platformLocation.pathname),this._platformLocation.replaceState(t,n,r)}forward(){this._platformLocation.forward()}back(){this._platformLocation.back()}getState(){return this._platformLocation.getState()}historyGo(t=0){this._platformLocation.historyGo?.(t)}};e.\u0275fac=function(n){return new(n||e)(C(ec),C(Um,8))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),sa=(()=>{let e=class e{constructor(t){this._subject=new fe,this._urlChangeListeners=[],this._urlChangeSubscription=null,this._locationStrategy=t;let n=this._locationStrategy.getBaseHref();this._basePath=k0(Lm(Pm(n))),this._locationStrategy.onPopState(i=>{this._subject.emit({url:this.path(!0),pop:!0,state:i.state,type:i.type})})}ngOnDestroy(){this._urlChangeSubscription?.unsubscribe(),this._urlChangeListeners=[]}path(t=!1){return this.normalize(this._locationStrategy.path(t))}getState(){return this._locationStrategy.getState()}isCurrentPathEqualTo(t,n=""){return this.path()==this.normalize(t+_s(n))}normalize(t){return e.stripTrailingSlash(w0(this._basePath,Pm(t)))}prepareExternalUrl(t){return t&&t[0]!=="/"&&(t="/"+t),this._locationStrategy.prepareExternalUrl(t)}go(t,n="",i=null){this._locationStrategy.pushState(i,"",t,n),this._notifyUrlChangeListeners(this.prepareExternalUrl(t+_s(n)),i)}replaceState(t,n="",i=null){this._locationStrategy.replaceState(i,"",t,n),this._notifyUrlChangeListeners(this.prepareExternalUrl(t+_s(n)),i)}forward(){this._locationStrategy.forward()}back(){this._locationStrategy.back()}historyGo(t=0){this._locationStrategy.historyGo?.(t)}onUrlChange(t){return this._urlChangeListeners.push(t),this._urlChangeSubscription??=this.subscribe(n=>{this._notifyUrlChangeListeners(n.url,n.state)}),()=>{let n=this._urlChangeListeners.indexOf(t);this._urlChangeListeners.splice(n,1),this._urlChangeListeners.length===0&&(this._urlChangeSubscription?.unsubscribe(),this._urlChangeSubscription=null)}}_notifyUrlChangeListeners(t="",n){this._urlChangeListeners.forEach(i=>i(t,n))}subscribe(t,n,i){return this._subject.subscribe({next:t,error:n,complete:i})}};e.normalizeQueryParams=_s,e.joinWithSlash=sc,e.stripTrailingSlash=Lm,e.\u0275fac=function(n){return new(n||e)(C(xs))},e.\u0275prov=w({token:e,factory:()=>j0(),providedIn:"root"});let s=e;return s})();function j0(){return new sa(C(xs))}function w0(s,e){if(!s||!e.startsWith(s))return e;let a=e.substring(s.length);return a===""||["/",";","?","#"].includes(a[0])?a:e}function Pm(s){return s.replace(/\/index.html$/,"")}function k0(s){if(new RegExp("^(https?:)?//").test(s)){let[,a]=s.split(/\/\/[^\/]+/);return a}return s}function Qi(s,e){e=encodeURIComponent(e);for(let a of s.split(";")){let t=a.indexOf("="),[n,i]=t==-1?[a,""]:[a.slice(0,t),a.slice(t+1)];if(n.trim()===e)return decodeURIComponent(i)}return null}var Kl=class{constructor(e,a,t,n){this.$implicit=e,this.ngForOf=a,this.index=t,this.count=n}get first(){return this.index===0}get last(){return this.index===this.count-1}get even(){return this.index%2===0}get odd(){return!this.even}},Ns=(()=>{let e=class e{set ngForOf(t){this._ngForOf=t,this._ngForOfDirty=!0}set ngForTrackBy(t){this._trackByFn=t}get ngForTrackBy(){return this._trackByFn}constructor(t,n,i){this._viewContainer=t,this._template=n,this._differs=i,this._ngForOf=null,this._ngForOfDirty=!0,this._differ=null}set ngForTemplate(t){t&&(this._template=t)}ngDoCheck(){if(this._ngForOfDirty){this._ngForOfDirty=!1;let t=this._ngForOf;if(!this._differ&&t)if(0)try{}catch{}else this._differ=this._differs.find(t).create(this.ngForTrackBy)}if(this._differ){let t=this._differ.diff(this._ngForOf);t&&this._applyChanges(t)}}_applyChanges(t){let n=this._viewContainer;t.forEachOperation((i,o,r)=>{if(i.previousIndex==null)n.createEmbeddedView(this._template,new Kl(i.item,this._ngForOf,-1,-1),r===null?void 0:r);else if(r==null)n.remove(o===null?void 0:o);else if(o!==null){let l=n.get(o);n.move(l,r),Nm(l,i)}});for(let i=0,o=n.length;i<o;i++){let l=n.get(i).context;l.index=i,l.count=o,l.ngForOf=this._ngForOf}t.forEachIdentityChange(i=>{let o=n.get(i.currentIndex);Nm(o,i)})}static ngTemplateContextGuard(t,n){return!0}};e.\u0275fac=function(n){return new(n||e)(ce(Kt),ce(zi),ce(Jl))},e.\u0275dir=ot({type:e,selectors:[["","ngFor","","ngForOf",""]],inputs:{ngForOf:"ngForOf",ngForTrackBy:"ngForTrackBy",ngForTemplate:"ngForTemplate"},standalone:!0});let s=e;return s})();function Nm(s,e){s.context.$implicit=e.item}var Hm=(()=>{let e=class e{constructor(t,n){this._viewContainer=t,this._context=new Xl,this._thenTemplateRef=null,this._elseTemplateRef=null,this._thenViewRef=null,this._elseViewRef=null,this._thenTemplateRef=n}set ngIf(t){this._context.$implicit=this._context.ngIf=t,this._updateView()}set ngIfThen(t){Om("ngIfThen",t),this._thenTemplateRef=t,this._thenViewRef=null,this._updateView()}set ngIfElse(t){Om("ngIfElse",t),this._elseTemplateRef=t,this._elseViewRef=null,this._updateView()}_updateView(){this._context.$implicit?this._thenViewRef||(this._viewContainer.clear(),this._elseViewRef=null,this._thenTemplateRef&&(this._thenViewRef=this._viewContainer.createEmbeddedView(this._thenTemplateRef,this._context))):this._elseViewRef||(this._viewContainer.clear(),this._thenViewRef=null,this._elseTemplateRef&&(this._elseViewRef=this._viewContainer.createEmbeddedView(this._elseTemplateRef,this._context)))}static ngTemplateContextGuard(t,n){return!0}};e.\u0275fac=function(n){return new(n||e)(ce(Kt),ce(zi))},e.\u0275dir=ot({type:e,selectors:[["","ngIf",""]],inputs:{ngIf:"ngIf",ngIfThen:"ngIfThen",ngIfElse:"ngIfElse"},standalone:!0});let s=e;return s})(),Xl=class{constructor(){this.$implicit=null,this.ngIf=null}};function Om(s,e){if(!!!(!e||e.createEmbeddedView))throw new Error(`${s} must be a TemplateRef, but received '${be(e)}'.`)}function _0(s,e){return new k(2100,!1)}var Wm=(()=>{let e=class e{transform(t,n,i){if(t==null)return null;if(!this.supports(t))throw _0(e,t);return t.slice(n,i)}supports(t){return typeof t=="string"||Array.isArray(t)}};e.\u0275fac=function(n){return new(n||e)},e.\u0275pipe=su({name:"slice",type:e,pure:!1,standalone:!0});let s=e;return s})();var ac=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275mod=Vt({type:e}),e.\u0275inj=Ut({});let s=e;return s})(),nc="browser",x0="server";function C0(s){return s===nc}function ta(s){return s===x0}var ic=(()=>{let e=class e{};e.\u0275prov=w({token:e,providedIn:"root",factory:()=>C0(v(Me))?new Ql(v(pe),window):new Zl});let s=e;return s})(),Ql=class{constructor(e,a){this.document=e,this.window=a,this.offset=()=>[0,0]}setOffset(e){Array.isArray(e)?this.offset=()=>e:this.offset=e}getScrollPosition(){return[this.window.scrollX,this.window.scrollY]}scrollToPosition(e){this.window.scrollTo(e[0],e[1])}scrollToAnchor(e){let a=S0(this.document,e);a&&(this.scrollToElement(a),a.focus())}setHistoryScrollRestoration(e){this.window.history.scrollRestoration=e}scrollToElement(e){let a=e.getBoundingClientRect(),t=a.left+this.window.pageXOffset,n=a.top+this.window.pageYOffset,i=this.offset();this.window.scrollTo(t-i[0],n-i[1])}};function S0(s,e){let a=s.getElementById(e)||s.getElementsByName(e)[0];if(a)return a;if(typeof s.createTreeWalker=="function"&&s.body&&typeof s.body.attachShadow=="function"){let t=s.createTreeWalker(s.body,NodeFilter.SHOW_ELEMENT),n=t.currentNode;for(;n;){let i=n.shadowRoot;if(i){let o=i.getElementById(e)||i.querySelector(`[name="${e}"]`);if(o)return o}n=t.nextNode()}}return null}var Zl=class{setOffset(e){}getScrollPosition(){return[0,0]}scrollToPosition(e){}scrollToAnchor(e){}setHistoryScrollRestoration(e){}},ea=class{};var Jm=s=>s.src,T0=new _("",{providedIn:"root",factory:()=>Jm});var E0=new _("NG_OPTIMIZED_PRELOADED_IMAGES",{providedIn:"root",factory:()=>new Set}),D0=(()=>{let e=class e{constructor(){this.preloadedImages=v(E0),this.document=v(pe)}createPreloadLinkTag(t,n,i,o){if(this.preloadedImages.has(n))return;this.preloadedImages.add(n);let r=t.createElement("link");t.setAttribute(r,"as","image"),t.setAttribute(r,"href",n),t.setAttribute(r,"rel","preload"),t.setAttribute(r,"fetchpriority","high"),o&&t.setAttribute(r,"imageSizes",o),i&&t.setAttribute(r,"imageSrcset",i),t.appendChild(this.document.head,r)}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();var q0=/^((\s*\d+w\s*(,|$)){1,})$/;var I0=[1,2],A0=640;var M0=1920,R0=1080;var aa=(()=>{let e=class e{constructor(){this.imageLoader=v(T0),this.config=L0(v(oh)),this.renderer=v(Wa),this.imgElement=v($t).nativeElement,this.injector=v(Ge),this.isServer=ta(v(Me)),this.preloadLinkCreator=v(D0),this.lcpObserver=null,this._renderedSrc=null,this.priority=!1,this.disableOptimizedSrcset=!1,this.fill=!1}ngOnInit(){lt("NgOptimizedImage"),this.placeholder&&this.removePlaceholderOnLoad(this.imgElement),this.setHostAttributes()}setHostAttributes(){this.fill?this.sizes||="100vw":(this.setHostAttribute("width",this.width.toString()),this.setHostAttribute("height",this.height.toString())),this.setHostAttribute("loading",this.getLoadingBehavior()),this.setHostAttribute("fetchpriority",this.getFetchPriority()),this.setHostAttribute("ng-img","true");let t=this.updateSrcAndSrcset();this.sizes&&this.setHostAttribute("sizes",this.sizes),this.isServer&&this.priority&&this.preloadLinkCreator.createPreloadLinkTag(this.renderer,this.getRewrittenSrc(),t,this.sizes)}ngOnChanges(t){if(t.ngSrc&&!t.ngSrc.isFirstChange()){let n=this._renderedSrc;this.updateSrcAndSrcset(!0);let i=this._renderedSrc;this.lcpObserver!==null&&n&&i&&n!==i&&this.injector.get(J).runOutsideAngular(()=>{this.lcpObserver?.updateImage(n,i)})}}callImageLoader(t){let n=t;return this.loaderParams&&(n.loaderParams=this.loaderParams),this.imageLoader(n)}getLoadingBehavior(){return!this.priority&&this.loading!==void 0?this.loading:this.priority?"eager":"lazy"}getFetchPriority(){return this.priority?"high":"auto"}getRewrittenSrc(){if(!this._renderedSrc){let t={src:this.ngSrc};this._renderedSrc=this.callImageLoader(t)}return this._renderedSrc}getRewrittenSrcset(){let t=q0.test(this.ngSrcset);return this.ngSrcset.split(",").filter(i=>i!=="").map(i=>{i=i.trim();let o=t?parseFloat(i):parseFloat(i)*this.width;return`${this.callImageLoader({src:this.ngSrc,width:o})} ${i}`}).join(", ")}getAutomaticSrcset(){return this.sizes?this.getResponsiveSrcset():this.getFixedSrcset()}getResponsiveSrcset(){let{breakpoints:t}=this.config,n=t;return this.sizes?.trim()==="100vw"&&(n=t.filter(o=>o>=A0)),n.map(o=>`${this.callImageLoader({src:this.ngSrc,width:o})} ${o}w`).join(", ")}updateSrcAndSrcset(t=!1){t&&(this._renderedSrc=null);let n=this.getRewrittenSrc();this.setHostAttribute("src",n);let i;return this.ngSrcset?i=this.getRewrittenSrcset():this.shouldGenerateAutomaticSrcset()&&(i=this.getAutomaticSrcset()),i&&this.setHostAttribute("srcset",i),i}getFixedSrcset(){return I0.map(n=>`${this.callImageLoader({src:this.ngSrc,width:this.width*n})} ${n}x`).join(", ")}shouldGenerateAutomaticSrcset(){let t=!1;return this.sizes||(t=this.width>M0||this.height>R0),!this.disableOptimizedSrcset&&!this.srcset&&this.imageLoader!==Jm&&!t}generatePlaceholder(t){let{placeholderResolution:n}=this.config;return t===!0?`url(${this.callImageLoader({src:this.ngSrc,width:n,isPlaceholder:!0})})`:typeof t=="string"&&t.startsWith("data:")?`url(${t})`:null}shouldBlurPlaceholder(t){return!t||!t.hasOwnProperty("blur")?!0:!!t.blur}removePlaceholderOnLoad(t){let n=()=>{let r=this.injector.get(Qt);i(),o(),this.placeholder=!1,r.markForCheck()},i=this.renderer.listen(t,"load",n),o=this.renderer.listen(t,"error",n)}ngOnDestroy(){}setHostAttribute(t,n){this.renderer.setAttribute(this.imgElement,t,n)}};e.\u0275fac=function(n){return new(n||e)},e.\u0275dir=ot({type:e,selectors:[["img","ngSrc",""]],hostVars:18,hostBindings:function(n,i){n&2&&Vl("position",i.fill?"absolute":null)("width",i.fill?"100%":null)("height",i.fill?"100%":null)("inset",i.fill?"0":null)("background-size",i.placeholder?"cover":null)("background-position",i.placeholder?"50% 50%":null)("background-repeat",i.placeholder?"no-repeat":null)("background-image",i.placeholder?i.generatePlaceholder(i.placeholder):null)("filter",i.placeholder&&i.shouldBlurPlaceholder(i.placeholderConfig)?"blur(15px)":null)},inputs:{ngSrc:[2,"ngSrc","ngSrc",P0],ngSrcset:"ngSrcset",sizes:"sizes",width:[2,"width","width",$l],height:[2,"height","height",$l],loading:"loading",priority:[2,"priority","priority",ks],loaderParams:"loaderParams",disableOptimizedSrcset:[2,"disableOptimizedSrcset","disableOptimizedSrcset",ks],fill:[2,"fill","fill",ks],placeholder:[2,"placeholder","placeholder",N0],placeholderConfig:"placeholderConfig",src:"src",srcset:"srcset"},standalone:!0,features:[Hi,Wt]});let s=e;return s})();function L0(s){let e={};return s.breakpoints&&(e.breakpoints=s.breakpoints.sort((a,t)=>a-t)),Object.assign({},_l,s,e)}function P0(s){return typeof s=="string"?s:ze(s)}function N0(s){return typeof s=="string"&&s.startsWith("data:")?s:ks(s)}var Ka=class{},so=class{},cs=class s{constructor(e){this.normalizedNames=new Map,this.lazyUpdate=null,e?typeof e=="string"?this.lazyInit=()=>{this.headers=new Map,e.split(`
`).forEach(a=>{let t=a.indexOf(":");if(t>0){let n=a.slice(0,t),i=n.toLowerCase(),o=a.slice(t+1).trim();this.maybeSetNormalizedName(n,i),this.headers.has(i)?this.headers.get(i).push(o):this.headers.set(i,[o])}})}:typeof Headers<"u"&&e instanceof Headers?(this.headers=new Map,e.forEach((a,t)=>{this.setHeaderEntries(t,a)})):this.lazyInit=()=>{this.headers=new Map,Object.entries(e).forEach(([a,t])=>{this.setHeaderEntries(a,t)})}:this.headers=new Map}has(e){return this.init(),this.headers.has(e.toLowerCase())}get(e){this.init();let a=this.headers.get(e.toLowerCase());return a&&a.length>0?a[0]:null}keys(){return this.init(),Array.from(this.normalizedNames.values())}getAll(e){return this.init(),this.headers.get(e.toLowerCase())||null}append(e,a){return this.clone({name:e,value:a,op:"a"})}set(e,a){return this.clone({name:e,value:a,op:"s"})}delete(e,a){return this.clone({name:e,value:a,op:"d"})}maybeSetNormalizedName(e,a){this.normalizedNames.has(a)||this.normalizedNames.set(a,e)}init(){this.lazyInit&&(this.lazyInit instanceof s?this.copyFrom(this.lazyInit):this.lazyInit(),this.lazyInit=null,this.lazyUpdate&&(this.lazyUpdate.forEach(e=>this.applyUpdate(e)),this.lazyUpdate=null))}copyFrom(e){e.init(),Array.from(e.headers.keys()).forEach(a=>{this.headers.set(a,e.headers.get(a)),this.normalizedNames.set(a,e.normalizedNames.get(a))})}clone(e){let a=new s;return a.lazyInit=this.lazyInit&&this.lazyInit instanceof s?this.lazyInit:this,a.lazyUpdate=(this.lazyUpdate||[]).concat([e]),a}applyUpdate(e){let a=e.name.toLowerCase();switch(e.op){case"a":case"s":let t=e.value;if(typeof t=="string"&&(t=[t]),t.length===0)return;this.maybeSetNormalizedName(e.name,a);let n=(e.op==="a"?this.headers.get(a):void 0)||[];n.push(...t),this.headers.set(a,n);break;case"d":let i=e.value;if(!i)this.headers.delete(a),this.normalizedNames.delete(a);else{let o=this.headers.get(a);if(!o)return;o=o.filter(r=>i.indexOf(r)===-1),o.length===0?(this.headers.delete(a),this.normalizedNames.delete(a)):this.headers.set(a,o)}break}}setHeaderEntries(e,a){let t=(Array.isArray(a)?a:[a]).map(i=>i.toString()),n=e.toLowerCase();this.headers.set(n,t),this.maybeSetNormalizedName(e,n)}forEach(e){this.init(),Array.from(this.normalizedNames.keys()).forEach(a=>e(this.normalizedNames.get(a),this.headers.get(a)))}};var rc=class{encodeKey(e){return Ym(e)}encodeValue(e){return Ym(e)}decodeKey(e){return decodeURIComponent(e)}decodeValue(e){return decodeURIComponent(e)}};function O0(s,e){let a=new Map;return s.length>0&&s.replace(/^\?/,"").split("&").forEach(n=>{let i=n.indexOf("="),[o,r]=i==-1?[e.decodeKey(n),""]:[e.decodeKey(n.slice(0,i)),e.decodeValue(n.slice(i+1))],l=a.get(o)||[];l.push(r),a.set(o,l)}),a}var F0=/%(\d[a-f0-9])/gi,G0={40:"@","3A":":",24:"$","2C":",","3B":";","3D":"=","3F":"?","2F":"/"};function Ym(s){return encodeURIComponent(s).replace(F0,(e,a)=>G0[a]??e)}function Zi(s){return`${s}`}var Fs=class s{constructor(e={}){if(this.updates=null,this.cloneFrom=null,this.encoder=e.encoder||new rc,e.fromString){if(e.fromObject)throw new Error("Cannot specify both fromString and fromObject.");this.map=O0(e.fromString,this.encoder)}else e.fromObject?(this.map=new Map,Object.keys(e.fromObject).forEach(a=>{let t=e.fromObject[a],n=Array.isArray(t)?t.map(Zi):[Zi(t)];this.map.set(a,n)})):this.map=null}has(e){return this.init(),this.map.has(e)}get(e){this.init();let a=this.map.get(e);return a?a[0]:null}getAll(e){return this.init(),this.map.get(e)||null}keys(){return this.init(),Array.from(this.map.keys())}append(e,a){return this.clone({param:e,value:a,op:"a"})}appendAll(e){let a=[];return Object.keys(e).forEach(t=>{let n=e[t];Array.isArray(n)?n.forEach(i=>{a.push({param:t,value:i,op:"a"})}):a.push({param:t,value:n,op:"a"})}),this.clone(a)}set(e,a){return this.clone({param:e,value:a,op:"s"})}delete(e,a){return this.clone({param:e,value:a,op:"d"})}toString(){return this.init(),this.keys().map(e=>{let a=this.encoder.encodeKey(e);return this.map.get(e).map(t=>a+"="+this.encoder.encodeValue(t)).join("&")}).filter(e=>e!=="").join("&")}clone(e){let a=new s({encoder:this.encoder});return a.cloneFrom=this.cloneFrom||this,a.updates=(this.updates||[]).concat(e),a}init(){this.map===null&&(this.map=new Map),this.cloneFrom!==null&&(this.cloneFrom.init(),this.cloneFrom.keys().forEach(e=>this.map.set(e,this.cloneFrom.map.get(e))),this.updates.forEach(e=>{switch(e.op){case"a":case"s":let a=(e.op==="a"?this.map.get(e.param):void 0)||[];a.push(Zi(e.value)),this.map.set(e.param,a);break;case"d":if(e.value!==void 0){let t=this.map.get(e.param)||[],n=t.indexOf(Zi(e.value));n!==-1&&t.splice(n,1),t.length>0?this.map.set(e.param,t):this.map.delete(e.param)}else{this.map.delete(e.param);break}}}),this.cloneFrom=this.updates=null)}};var lc=class{constructor(){this.map=new Map}set(e,a){return this.map.set(e,a),this}get(e){return this.map.has(e)||this.map.set(e,e.defaultValue()),this.map.get(e)}delete(e){return this.map.delete(e),this}has(e){return this.map.has(e)}keys(){return this.map.keys()}};function z0(s){switch(s){case"DELETE":case"GET":case"HEAD":case"OPTIONS":case"JSONP":return!1;default:return!0}}function Km(s){return typeof ArrayBuffer<"u"&&s instanceof ArrayBuffer}function Xm(s){return typeof Blob<"u"&&s instanceof Blob}function Qm(s){return typeof FormData<"u"&&s instanceof FormData}function B0(s){return typeof URLSearchParams<"u"&&s instanceof URLSearchParams}var Ya=class s{constructor(e,a,t,n){this.url=a,this.body=null,this.reportProgress=!1,this.withCredentials=!1,this.responseType="json",this.method=e.toUpperCase();let i;if(z0(this.method)||n?(this.body=t!==void 0?t:null,i=n):i=t,i&&(this.reportProgress=!!i.reportProgress,this.withCredentials=!!i.withCredentials,i.responseType&&(this.responseType=i.responseType),i.headers&&(this.headers=i.headers),i.context&&(this.context=i.context),i.params&&(this.params=i.params),this.transferCache=i.transferCache),this.headers??=new cs,this.context??=new lc,!this.params)this.params=new Fs,this.urlWithParams=a;else{let o=this.params.toString();if(o.length===0)this.urlWithParams=a;else{let r=a.indexOf("?"),l=r===-1?"?":r<a.length-1?"&":"";this.urlWithParams=a+l+o}}}serializeBody(){return this.body===null?null:typeof this.body=="string"||Km(this.body)||Xm(this.body)||Qm(this.body)||B0(this.body)?this.body:this.body instanceof Fs?this.body.toString():typeof this.body=="object"||typeof this.body=="boolean"||Array.isArray(this.body)?JSON.stringify(this.body):this.body.toString()}detectContentTypeHeader(){return this.body===null||Qm(this.body)?null:Xm(this.body)?this.body.type||null:Km(this.body)?null:typeof this.body=="string"?"text/plain":this.body instanceof Fs?"application/x-www-form-urlencoded;charset=UTF-8":typeof this.body=="object"||typeof this.body=="number"||typeof this.body=="boolean"?"application/json":null}clone(e={}){let a=e.method||this.method,t=e.url||this.url,n=e.responseType||this.responseType,i=e.transferCache??this.transferCache,o=e.body!==void 0?e.body:this.body,r=e.withCredentials??this.withCredentials,l=e.reportProgress??this.reportProgress,u=e.headers||this.headers,h=e.params||this.params,m=e.context??this.context;return e.setHeaders!==void 0&&(u=Object.keys(e.setHeaders).reduce((g,f)=>g.set(f,e.setHeaders[f]),u)),e.setParams&&(h=Object.keys(e.setParams).reduce((g,f)=>g.set(f,e.setParams[f]),h)),new s(a,t,o,{params:h,headers:u,context:m,reportProgress:l,responseType:n,withCredentials:r,transferCache:i})}},Gs=function(s){return s[s.Sent=0]="Sent",s[s.UploadProgress=1]="UploadProgress",s[s.ResponseHeader=2]="ResponseHeader",s[s.DownloadProgress=3]="DownloadProgress",s[s.Response=4]="Response",s[s.User=5]="User",s}(Gs||{}),Xa=class{constructor(e,a=200,t="OK"){this.headers=e.headers||new cs,this.status=e.status!==void 0?e.status:a,this.statusText=e.statusText||t,this.url=e.url||null,this.ok=this.status>=200&&this.status<300}},to=class s extends Xa{constructor(e={}){super(e),this.type=Gs.ResponseHeader}clone(e={}){return new s({headers:e.headers||this.headers,status:e.status!==void 0?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})}},ht=class s extends Xa{constructor(e={}){super(e),this.type=Gs.Response,this.body=e.body!==void 0?e.body:null}clone(e={}){return new s({body:e.body!==void 0?e.body:this.body,headers:e.headers||this.headers,status:e.status!==void 0?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})}},Os=class extends Xa{constructor(e){super(e,0,"Unknown Error"),this.name="HttpErrorResponse",this.ok=!1,this.status>=200&&this.status<300?this.message=`Http failure during parsing for ${e.url||"(unknown url)"}`:this.message=`Http failure response for ${e.url||"(unknown url)"}: ${e.status} ${e.statusText}`,this.error=e.error||null}},cg=200,U0=204;function oc(s,e){return{body:e,headers:s.headers,context:s.context,observe:s.observe,params:s.params,reportProgress:s.reportProgress,responseType:s.responseType,withCredentials:s.withCredentials,transferCache:s.transferCache}}var V0=(()=>{let e=class e{constructor(t){this.handler=t}request(t,n,i={}){let o;if(t instanceof Ya)o=t;else{let u;i.headers instanceof cs?u=i.headers:u=new cs(i.headers);let h;i.params&&(i.params instanceof Fs?h=i.params:h=new Fs({fromObject:i.params})),o=new Ya(t,n,i.body!==void 0?i.body:null,{headers:u,context:i.context,params:h,reportProgress:i.reportProgress,responseType:i.responseType||"json",withCredentials:i.withCredentials,transferCache:i.transferCache})}let r=E(o).pipe(ms(u=>this.handler.handle(u)));if(t instanceof Ya||i.observe==="events")return r;let l=r.pipe(we(u=>u instanceof ht));switch(i.observe||"body"){case"body":switch(o.responseType){case"arraybuffer":return l.pipe(R(u=>{if(u.body!==null&&!(u.body instanceof ArrayBuffer))throw new Error("Response is not an ArrayBuffer.");return u.body}));case"blob":return l.pipe(R(u=>{if(u.body!==null&&!(u.body instanceof Blob))throw new Error("Response is not a Blob.");return u.body}));case"text":return l.pipe(R(u=>{if(u.body!==null&&typeof u.body!="string")throw new Error("Response is not a string.");return u.body}));case"json":default:return l.pipe(R(u=>u.body))}case"response":return l;default:throw new Error(`Unreachable: unhandled observe type ${i.observe}}`)}}delete(t,n={}){return this.request("DELETE",t,n)}get(t,n={}){return this.request("GET",t,n)}head(t,n={}){return this.request("HEAD",t,n)}jsonp(t,n){return this.request("JSONP",t,{params:new Fs().append(n,"JSONP_CALLBACK"),observe:"body",responseType:"json"})}options(t,n={}){return this.request("OPTIONS",t,n)}patch(t,n,i={}){return this.request("PATCH",t,oc(i,n))}post(t,n,i={}){return this.request("POST",t,oc(i,n))}put(t,n,i={}){return this.request("PUT",t,oc(i,n))}};e.\u0275fac=function(n){return new(n||e)(C(Ka))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),H0=/^\)\]\}',?\n/,W0="X-Request-URL";function Zm(s){if(s.url)return s.url;let e=W0.toLocaleLowerCase();return s.headers.get(e)}var J0=(()=>{let e=class e{constructor(){this.fetchImpl=v(cc,{optional:!0})?.fetch??fetch.bind(globalThis),this.ngZone=v(J)}handle(t){return new z(n=>{let i=new AbortController;return this.doRequest(t,i.signal,n).then(pc,o=>n.error(new Os({error:o}))),()=>i.abort()})}doRequest(t,n,i){return ya(this,null,function*(){let o=this.createRequestInit(t),r;try{let b=this.fetchImpl(t.urlWithParams,j({signal:n},o));$0(b),i.next({type:Gs.Sent}),r=yield b}catch(b){i.error(new Os({error:b,status:b.status??0,statusText:b.statusText,url:t.urlWithParams,headers:b.headers}));return}let l=new cs(r.headers),u=r.statusText,h=Zm(r)??t.urlWithParams,m=r.status,g=null;if(t.reportProgress&&i.next(new to({headers:l,status:m,statusText:u,url:h})),r.body){let b=r.headers.get("content-length"),q=[],x=r.body.getReader(),D=0,se,H,B=typeof Zone<"u"&&Zone.current;yield this.ngZone.runOutsideAngular(()=>ya(this,null,function*(){for(;;){let{done:ie,value:Pe}=yield x.read();if(ie)break;if(q.push(Pe),D+=Pe.length,t.reportProgress){H=t.responseType==="text"?(H??"")+(se??=new TextDecoder).decode(Pe,{stream:!0}):void 0;let vt=()=>i.next({type:Gs.DownloadProgress,total:b?+b:void 0,loaded:D,partialText:H});B?B.run(vt):vt()}}}));let ye=this.concatChunks(q,D);try{let ie=r.headers.get("Content-Type")??"";g=this.parseBody(t,ye,ie)}catch(ie){i.error(new Os({error:ie,headers:new cs(r.headers),status:r.status,statusText:r.statusText,url:Zm(r)??t.urlWithParams}));return}}m===0&&(m=g?cg:0),m>=200&&m<300?(i.next(new ht({body:g,headers:l,status:m,statusText:u,url:h})),i.complete()):i.error(new Os({error:g,headers:l,status:m,statusText:u,url:h}))})}parseBody(t,n,i){switch(t.responseType){case"json":let o=new TextDecoder().decode(n).replace(H0,"");return o===""?null:JSON.parse(o);case"text":return new TextDecoder().decode(n);case"blob":return new Blob([n],{type:i});case"arraybuffer":return n.buffer}}createRequestInit(t){let n={},i=t.withCredentials?"include":void 0;if(t.headers.forEach((o,r)=>n[o]=r.join(",")),n.Accept??="application/json, text/plain, */*",!n["Content-Type"]){let o=t.detectContentTypeHeader();o!==null&&(n["Content-Type"]=o)}return{body:t.serializeBody(),method:t.method,headers:n,credentials:i}}concatChunks(t,n){let i=new Uint8Array(n),o=0;for(let r of t)i.set(r,o),o+=r.length;return i}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),cc=class{};function pc(){}function $0(s){s.then(pc,pc)}function Y0(s,e){return e(s)}function K0(s,e,a){return(t,n)=>qe(a,()=>e(t,i=>s(i,n)))}var pg=new _(""),dg=new _(""),X0=new _("",{providedIn:"root",factory:()=>!0});var eg=(()=>{let e=class e extends Ka{constructor(t,n){super(),this.backend=t,this.injector=n,this.chain=null,this.pendingTasks=v(ct),this.contributeToStability=v(X0)}handle(t){if(this.chain===null){let n=Array.from(new Set([...this.injector.get(pg),...this.injector.get(dg,[])]));this.chain=n.reduceRight((i,o)=>K0(i,o,this.injector),Y0)}if(this.contributeToStability){let n=this.pendingTasks.add();return this.chain(t,i=>this.backend.handle(i)).pipe($s(()=>this.pendingTasks.remove(n)))}else return this.chain(t,n=>this.backend.handle(n))}};e.\u0275fac=function(n){return new(n||e)(C(so),C(he))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})();var Q0=/^\)\]\}',?\n/;function Z0(s){return"responseURL"in s&&s.responseURL?s.responseURL:/^X-Request-URL:/m.test(s.getAllResponseHeaders())?s.getResponseHeader("X-Request-URL"):null}var sg=(()=>{let e=class e{constructor(t){this.xhrFactory=t}handle(t){if(t.method==="JSONP")throw new k(-2800,!1);let n=this.xhrFactory;return(n.\u0275loadImpl?Z(n.\u0275loadImpl()):E(null)).pipe(ke(()=>new z(o=>{let r=n.build();if(r.open(t.method,t.urlWithParams),t.withCredentials&&(r.withCredentials=!0),t.headers.forEach((x,D)=>r.setRequestHeader(x,D.join(","))),t.headers.has("Accept")||r.setRequestHeader("Accept","application/json, text/plain, */*"),!t.headers.has("Content-Type")){let x=t.detectContentTypeHeader();x!==null&&r.setRequestHeader("Content-Type",x)}if(t.responseType){let x=t.responseType.toLowerCase();r.responseType=x!=="json"?x:"text"}let l=t.serializeBody(),u=null,h=()=>{if(u!==null)return u;let x=r.statusText||"OK",D=new cs(r.getAllResponseHeaders()),se=Z0(r)||t.url;return u=new to({headers:D,status:r.status,statusText:x,url:se}),u},m=()=>{let{headers:x,status:D,statusText:se,url:H}=h(),B=null;D!==U0&&(B=typeof r.response>"u"?r.responseText:r.response),D===0&&(D=B?cg:0);let ye=D>=200&&D<300;if(t.responseType==="json"&&typeof B=="string"){let ie=B;B=B.replace(Q0,"");try{B=B!==""?JSON.parse(B):null}catch(Pe){B=ie,ye&&(ye=!1,B={error:Pe,text:B})}}ye?(o.next(new ht({body:B,headers:x,status:D,statusText:se,url:H||void 0})),o.complete()):o.error(new Os({error:B,headers:x,status:D,statusText:se,url:H||void 0}))},g=x=>{let{url:D}=h(),se=new Os({error:x,status:r.status||0,statusText:r.statusText||"Unknown Error",url:D||void 0});o.error(se)},f=!1,b=x=>{f||(o.next(h()),f=!0);let D={type:Gs.DownloadProgress,loaded:x.loaded};x.lengthComputable&&(D.total=x.total),t.responseType==="text"&&r.responseText&&(D.partialText=r.responseText),o.next(D)},q=x=>{let D={type:Gs.UploadProgress,loaded:x.loaded};x.lengthComputable&&(D.total=x.total),o.next(D)};return r.addEventListener("load",m),r.addEventListener("error",g),r.addEventListener("timeout",g),r.addEventListener("abort",g),t.reportProgress&&(r.addEventListener("progress",b),l!==null&&r.upload&&r.upload.addEventListener("progress",q)),r.send(l),o.next({type:Gs.Sent}),()=>{r.removeEventListener("error",g),r.removeEventListener("abort",g),r.removeEventListener("load",m),r.removeEventListener("timeout",g),t.reportProgress&&(r.removeEventListener("progress",b),l!==null&&r.upload&&r.upload.removeEventListener("progress",q)),r.readyState!==r.DONE&&r.abort()}})))}};e.\u0275fac=function(n){return new(n||e)(C(ea))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),ug=new _(""),ek="XSRF-TOKEN",sk=new _("",{providedIn:"root",factory:()=>ek}),tk="X-XSRF-TOKEN",ak=new _("",{providedIn:"root",factory:()=>tk}),ao=class{},nk=(()=>{let e=class e{constructor(t,n,i){this.doc=t,this.platform=n,this.cookieName=i,this.lastCookieString="",this.lastToken=null,this.parseCount=0}getToken(){if(this.platform==="server")return null;let t=this.doc.cookie||"";return t!==this.lastCookieString&&(this.parseCount++,this.lastToken=Qi(t,this.cookieName),this.lastCookieString=t),this.lastToken}};e.\u0275fac=function(n){return new(n||e)(C(pe),C(Me),C(sk))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})();function ik(s,e){let a=s.url.toLowerCase();if(!v(ug)||s.method==="GET"||s.method==="HEAD"||a.startsWith("http://")||a.startsWith("https://"))return e(s);let t=v(ao).getToken(),n=v(ak);return t!=null&&!s.headers.has(n)&&(s=s.clone({headers:s.headers.set(n,t)})),e(s)}function hg(...s){let e=[V0,sg,eg,{provide:Ka,useExisting:eg},{provide:so,useFactory:()=>v(J0,{optional:!0})??v(sg)},{provide:pg,useValue:ik,multi:!0},{provide:ug,useValue:!0},{provide:ao,useClass:nk}];for(let a of s)e.push(...a.\u0275providers);return rt(e)}var ok=new _(""),tg="b",ag="h",ng="s",ig="st",og="u",rg="rt",eo=new _(""),rk=["GET","HEAD"];function lk(s,e){let f=v(eo),{isCacheActive:a}=f,t=dp(f,["isCacheActive"]),{transferCache:n,method:i}=s;if(!a||n===!1||i==="POST"&&!t.includePostRequests&&!n||i!=="POST"&&!rk.includes(i)||!t.includeRequestsWithAuthHeaders&&ck(s)||t.filter?.(s)===!1)return e(s);let o=v(Yt),r=v(ok,{optional:!0}),l=ta(v(Me));if(r&&!l)throw new k(2803,!1);let u=l&&r?hk(s.url,r):s.url,h=dk(s,u),m=o.get(h,null),g=t.includeHeaders;if(typeof n=="object"&&n.includeHeaders&&(g=n.includeHeaders),m){let{[tg]:b,[rg]:q,[ag]:x,[ng]:D,[ig]:se,[og]:H}=m,B=b;switch(q){case"arraybuffer":B=new TextEncoder().encode(b).buffer;break;case"blob":B=new Blob([b]);break}let ye=new cs(x);return E(new ht({body:B,headers:ye,status:D,statusText:se,url:H}))}return e(s).pipe(re(b=>{b instanceof ht&&l&&o.set(h,{[tg]:b.body,[ag]:pk(b.headers,g),[ng]:b.status,[ig]:b.statusText,[og]:u,[rg]:s.responseType})}))}function ck(s){return s.headers.has("authorization")||s.headers.has("proxy-authorization")}function pk(s,e){if(!e)return{};let a={};for(let t of e){let n=s.getAll(t);n!==null&&(a[t]=n)}return a}function lg(s){return[...s.keys()].sort().map(e=>`${e}=${s.getAll(e)}`).join("&")}function dk(s,e){let{params:a,method:t,responseType:n}=s,i=lg(a),o=s.serializeBody();o instanceof URLSearchParams?o=lg(o):typeof o!="string"&&(o="");let r=[t,n,e,o,i].join("|"),l=uk(r);return l}function uk(s){let e=0;for(let a of s)e=Math.imul(31,e)+a.charCodeAt(0)<<0;return e+=2147483648,e.toString()}function mg(s){return[{provide:eo,useFactory:()=>(lt("NgHttpTransferCache"),j({isCacheActive:!0},s))},{provide:dg,useValue:lk,multi:!0,deps:[Yt,eo]},{provide:ut,multi:!0,useFactory:()=>{let e=v(ws),a=v(eo);return()=>{Hl(e).then(()=>{a.isCacheActive=!1})}}}]}function hk(s,e){let a=new URL(s,"resolve://").origin,t=e[a];return t?s.replace(a,t):s}var hc=class extends Xi{constructor(){super(...arguments),this.supportsDOMEvents=!0}},mc=class s extends hc{static makeCurrent(){zm(new s)}onAndCancel(e,a,t){return e.addEventListener(a,t),()=>{e.removeEventListener(a,t)}}dispatchEvent(e,a){e.dispatchEvent(a)}remove(e){e.parentNode&&e.parentNode.removeChild(e)}createElement(e,a){return a=a||this.getDefaultDocument(),a.createElement(e)}createHtmlDocument(){return document.implementation.createHTMLDocument("fakeTitle")}getDefaultDocument(){return document}isElementNode(e){return e.nodeType===Node.ELEMENT_NODE}isShadowRoot(e){return e instanceof DocumentFragment}getGlobalEventTarget(e,a){return a==="window"?window:a==="document"?e:a==="body"?e.body:null}getBaseHref(e){let a=mk();return a==null?null:gk(a)}resetBaseElement(){Qa=null}getUserAgent(){return window.navigator.userAgent}getCookie(e){return Qi(document.cookie,e)}},Qa=null;function mk(){return Qa=Qa||document.querySelector("base"),Qa?Qa.getAttribute("href"):null}function gk(s){return new URL(s,document.baseURI).pathname}var vk=(()=>{let e=class e{build(){return new XMLHttpRequest}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),gc=new _(""),bg=(()=>{let e=class e{constructor(t,n){this._zone=n,this._eventNameToPlugin=new Map,t.forEach(i=>{i.manager=this}),this._plugins=t.slice().reverse()}addEventListener(t,n,i){return this._findPluginFor(n).addEventListener(t,n,i)}getZone(){return this._zone}_findPluginFor(t){let n=this._eventNameToPlugin.get(t);if(n)return n;if(n=this._plugins.find(o=>o.supports(t)),!n)throw new k(5101,!1);return this._eventNameToPlugin.set(t,n),n}};e.\u0275fac=function(n){return new(n||e)(C(gc),C(J))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),no=class{constructor(e){this._doc=e}},dc="ng-app-id",yg=(()=>{let e=class e{constructor(t,n,i,o={}){this.doc=t,this.appId=n,this.nonce=i,this.platformId=o,this.styleRef=new Map,this.hostNodes=new Set,this.styleNodesInDOM=this.collectServerRenderedStyles(),this.platformIsServer=ta(o),this.resetHostNodes()}addStyles(t){for(let n of t)this.changeUsageCount(n,1)===1&&this.onStyleAdded(n)}removeStyles(t){for(let n of t)this.changeUsageCount(n,-1)<=0&&this.onStyleRemoved(n)}ngOnDestroy(){let t=this.styleNodesInDOM;t&&(t.forEach(n=>n.remove()),t.clear());for(let n of this.getAllStyles())this.onStyleRemoved(n);this.resetHostNodes()}addHost(t){this.hostNodes.add(t);for(let n of this.getAllStyles())this.addStyleToHost(t,n)}removeHost(t){this.hostNodes.delete(t)}getAllStyles(){return this.styleRef.keys()}onStyleAdded(t){for(let n of this.hostNodes)this.addStyleToHost(n,t)}onStyleRemoved(t){let n=this.styleRef;n.get(t)?.elements?.forEach(i=>i.remove()),n.delete(t)}collectServerRenderedStyles(){let t=this.doc.head?.querySelectorAll(`style[${dc}="${this.appId}"]`);if(t?.length){let n=new Map;return t.forEach(i=>{i.textContent!=null&&n.set(i.textContent,i)}),n}return null}changeUsageCount(t,n){let i=this.styleRef;if(i.has(t)){let o=i.get(t);return o.usage+=n,o.usage}return i.set(t,{usage:n,elements:[]}),n}getStyleElement(t,n){let i=this.styleNodesInDOM,o=i?.get(n);if(o?.parentNode===t)return i.delete(n),o.removeAttribute(dc),o;{let r=this.doc.createElement("style");return this.nonce&&r.setAttribute("nonce",this.nonce),r.textContent=n,this.platformIsServer&&r.setAttribute(dc,this.appId),t.appendChild(r),r}}addStyleToHost(t,n){let i=this.getStyleElement(t,n),o=this.styleRef,r=o.get(n)?.elements;r?r.push(i):o.set(n,{elements:[i],usage:1})}resetHostNodes(){let t=this.hostNodes;t.clear(),t.add(this.doc.head)}};e.\u0275fac=function(n){return new(n||e)(C(pe),C(Ai),C(kl,8),C(Me))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),uc={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/",math:"http://www.w3.org/1998/Math/MathML"},bc=/%COMP%/g,jg="%COMP%",fk=`_nghost-${jg}`,bk=`_ngcontent-${jg}`,yk=!0,jk=new _("",{providedIn:"root",factory:()=>yk});function wk(s){return bk.replace(bc,s)}function kk(s){return fk.replace(bc,s)}function wg(s,e){return e.map(a=>a.replace(bc,s))}var gg=(()=>{let e=class e{constructor(t,n,i,o,r,l,u,h=null){this.eventManager=t,this.sharedStylesHost=n,this.appId=i,this.removeStylesOnCompDestroy=o,this.doc=r,this.platformId=l,this.ngZone=u,this.nonce=h,this.rendererByCompId=new Map,this.platformIsServer=ta(l),this.defaultRenderer=new Za(t,r,u,this.platformIsServer)}createRenderer(t,n){if(!t||!n)return this.defaultRenderer;this.platformIsServer&&n.encapsulation===as.ShadowDom&&(n=Q(j({},n),{encapsulation:as.Emulated}));let i=this.getOrCreateRenderer(t,n);return i instanceof io?i.applyToHost(t):i instanceof en&&i.applyStyles(),i}getOrCreateRenderer(t,n){let i=this.rendererByCompId,o=i.get(n.id);if(!o){let r=this.doc,l=this.ngZone,u=this.eventManager,h=this.sharedStylesHost,m=this.removeStylesOnCompDestroy,g=this.platformIsServer;switch(n.encapsulation){case as.Emulated:o=new io(u,h,n,this.appId,m,r,l,g);break;case as.ShadowDom:return new vc(u,h,t,n,r,l,this.nonce,g);default:o=new en(u,h,n,m,r,l,g);break}i.set(n.id,o)}return o}ngOnDestroy(){this.rendererByCompId.clear()}};e.\u0275fac=function(n){return new(n||e)(C(bg),C(yg),C(Ai),C(jk),C(pe),C(Me),C(J),C(kl))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),Za=class{constructor(e,a,t,n){this.eventManager=e,this.doc=a,this.ngZone=t,this.platformIsServer=n,this.data=Object.create(null),this.throwOnSyntheticProps=!0,this.destroyNode=null}destroy(){}createElement(e,a){return a?this.doc.createElementNS(uc[a]||a,e):this.doc.createElement(e)}createComment(e){return this.doc.createComment(e)}createText(e){return this.doc.createTextNode(e)}appendChild(e,a){(vg(e)?e.content:e).appendChild(a)}insertBefore(e,a,t){e&&(vg(e)?e.content:e).insertBefore(a,t)}removeChild(e,a){e&&e.removeChild(a)}selectRootElement(e,a){let t=typeof e=="string"?this.doc.querySelector(e):e;if(!t)throw new k(-5104,!1);return a||(t.textContent=""),t}parentNode(e){return e.parentNode}nextSibling(e){return e.nextSibling}setAttribute(e,a,t,n){if(n){a=n+":"+a;let i=uc[n];i?e.setAttributeNS(i,a,t):e.setAttribute(a,t)}else e.setAttribute(a,t)}removeAttribute(e,a,t){if(t){let n=uc[t];n?e.removeAttributeNS(n,a):e.removeAttribute(`${t}:${a}`)}else e.removeAttribute(a)}addClass(e,a){e.classList.add(a)}removeClass(e,a){e.classList.remove(a)}setStyle(e,a,t,n){n&(bs.DashCase|bs.Important)?e.style.setProperty(a,t,n&bs.Important?"important":""):e.style[a]=t}removeStyle(e,a,t){t&bs.DashCase?e.style.removeProperty(a):e.style[a]=""}setProperty(e,a,t){e!=null&&(e[a]=t)}setValue(e,a){e.nodeValue=a}listen(e,a,t){if(typeof e=="string"&&(e=Zt().getGlobalEventTarget(this.doc,e),!e))throw new Error(`Unsupported event target ${e} for event ${a}`);return this.eventManager.addEventListener(e,a,this.decoratePreventDefault(t))}decoratePreventDefault(e){return a=>{if(a==="__ngUnwrap__")return e;(this.platformIsServer?this.ngZone.runGuarded(()=>e(a)):e(a))===!1&&a.preventDefault()}}};function vg(s){return s.tagName==="TEMPLATE"&&s.content!==void 0}var vc=class extends Za{constructor(e,a,t,n,i,o,r,l){super(e,i,o,l),this.sharedStylesHost=a,this.hostEl=t,this.shadowRoot=t.attachShadow({mode:"open"}),this.sharedStylesHost.addHost(this.shadowRoot);let u=wg(n.id,n.styles);for(let h of u){let m=document.createElement("style");r&&m.setAttribute("nonce",r),m.textContent=h,this.shadowRoot.appendChild(m)}}nodeOrShadowRoot(e){return e===this.hostEl?this.shadowRoot:e}appendChild(e,a){return super.appendChild(this.nodeOrShadowRoot(e),a)}insertBefore(e,a,t){return super.insertBefore(this.nodeOrShadowRoot(e),a,t)}removeChild(e,a){return super.removeChild(this.nodeOrShadowRoot(e),a)}parentNode(e){return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(e)))}destroy(){this.sharedStylesHost.removeHost(this.shadowRoot)}},en=class extends Za{constructor(e,a,t,n,i,o,r,l){super(e,i,o,r),this.sharedStylesHost=a,this.removeStylesOnCompDestroy=n,this.styles=l?wg(l,t.styles):t.styles}applyStyles(){this.sharedStylesHost.addStyles(this.styles)}destroy(){this.removeStylesOnCompDestroy&&this.sharedStylesHost.removeStyles(this.styles)}},io=class extends en{constructor(e,a,t,n,i,o,r,l){let u=n+"-"+t.id;super(e,a,t,i,o,r,l,u),this.contentAttr=wk(u),this.hostAttr=kk(u)}applyToHost(e){this.applyStyles(),this.setAttribute(e,this.hostAttr,"")}createElement(e,a){let t=super.createElement(e,a);return super.setAttribute(t,this.contentAttr,""),t}},_k=(()=>{let e=class e extends no{constructor(t){super(t)}supports(t){return!0}addEventListener(t,n,i){return t.addEventListener(n,i,!1),()=>this.removeEventListener(t,n,i)}removeEventListener(t,n,i){return t.removeEventListener(n,i)}};e.\u0275fac=function(n){return new(n||e)(C(pe))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})(),fg=["alt","control","meta","shift"],xk={"\b":"Backspace","	":"Tab","\x7F":"Delete","\x1B":"Escape",Del:"Delete",Esc:"Escape",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Down:"ArrowDown",Menu:"ContextMenu",Scroll:"ScrollLock",Win:"OS"},Ck={alt:s=>s.altKey,control:s=>s.ctrlKey,meta:s=>s.metaKey,shift:s=>s.shiftKey},Sk=(()=>{let e=class e extends no{constructor(t){super(t)}supports(t){return e.parseEventName(t)!=null}addEventListener(t,n,i){let o=e.parseEventName(n),r=e.eventCallback(o.fullKey,i,this.manager.getZone());return this.manager.getZone().runOutsideAngular(()=>Zt().onAndCancel(t,o.domEventName,r))}static parseEventName(t){let n=t.toLowerCase().split("."),i=n.shift();if(n.length===0||!(i==="keydown"||i==="keyup"))return null;let o=e._normalizeKey(n.pop()),r="",l=n.indexOf("code");if(l>-1&&(n.splice(l,1),r="code."),fg.forEach(h=>{let m=n.indexOf(h);m>-1&&(n.splice(m,1),r+=h+".")}),r+=o,n.length!=0||o.length===0)return null;let u={};return u.domEventName=i,u.fullKey=r,u}static matchEventFullKeyCode(t,n){let i=xk[t.key]||t.key,o="";return n.indexOf("code.")>-1&&(i=t.code,o="code."),i==null||!i?!1:(i=i.toLowerCase(),i===" "?i="space":i==="."&&(i="dot"),fg.forEach(r=>{if(r!==i){let l=Ck[r];l(t)&&(o+=r+".")}}),o+=i,o===n)}static eventCallback(t,n,i){return o=>{e.matchEventFullKeyCode(o,t)&&i.runGuarded(()=>n(o))}}static _normalizeKey(t){return t==="esc"?"escape":t}};e.\u0275fac=function(n){return new(n||e)(C(pe))},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})();function kg(s,e){return Am(j({rootComponent:s},Tk(e)))}function Tk(s){return{appProviders:[...Ak,...s?.providers??[]],platformProviders:Ik}}function Ek(){mc.makeCurrent()}function Dk(){return new os}function qk(){return ih(document),document}var Ik=[{provide:Me,useValue:nc},{provide:wl,useValue:Ek,multi:!0},{provide:pe,useFactory:qk,deps:[]}];var Ak=[{provide:Ei,useValue:"root"},{provide:os,useFactory:Dk,deps:[]},{provide:gc,useClass:_k,multi:!0,deps:[pe,J,Me]},{provide:gc,useClass:Sk,multi:!0,deps:[pe]},gg,yg,bg,{provide:Gt,useExisting:gg},{provide:ea,useClass:vk,deps:[]},[]];var Be=(()=>{let e=class e{constructor(t){this._doc=t}getTitle(){return this._doc.title}setTitle(t){this._doc.title=t||""}};e.\u0275fac=function(n){return new(n||e)(C(pe))},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();var yc=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:function(n){let i=null;return n?i=new(n||e):i=C(Mk),i},providedIn:"root"});let s=e;return s})(),Mk=(()=>{let e=class e extends yc{constructor(t){super(),this._doc=t}sanitize(t,n){if(n==null)return null;switch(t){case Xe.NONE:return n;case Xe.HTML:return ys(n,"HTML")?ze(n):Tl(this._doc,String(n)).toString();case Xe.STYLE:return ys(n,"Style")?ze(n):n;case Xe.SCRIPT:if(ys(n,"Script"))return ze(n);throw new k(5200,!1);case Xe.URL:return ys(n,"URL")?ze(n):Pi(String(n));case Xe.RESOURCE_URL:if(ys(n,"ResourceURL"))return ze(n);throw new k(5201,!1);default:throw new k(5202,!1)}}bypassSecurityTrustHtml(t){return fh(t)}bypassSecurityTrustStyle(t){return bh(t)}bypassSecurityTrustScript(t){return yh(t)}bypassSecurityTrustUrl(t){return jh(t)}bypassSecurityTrustResourceUrl(t){return wh(t)}};e.\u0275fac=function(n){return new(n||e)(C(pe))},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),fc=function(s){return s[s.NoHttpTransferCache=0]="NoHttpTransferCache",s[s.HttpTransferCacheOptions=1]="HttpTransferCacheOptions",s[s.I18nSupport=2]="I18nSupport",s[s.EventReplay=3]="EventReplay",s}(fc||{});function _g(...s){let e=[],a=new Set,t=a.has(fc.HttpTransferCacheOptions);for(let{\u0275providers:n,\u0275kind:i}of s)a.add(i),n.length&&e.push(n);return rt([[],Mm(),a.has(fc.NoHttpTransferCache)||t?[]:mg({}),e])}var M="primary",fn=Symbol("RouteTitle"),xc=class{constructor(e){this.params=e||{}}has(e){return Object.prototype.hasOwnProperty.call(this.params,e)}get(e){if(this.has(e)){let a=this.params[e];return Array.isArray(a)?a[0]:a}return null}getAll(e){if(this.has(e)){let a=this.params[e];return Array.isArray(a)?a:[a]}return[]}get keys(){return Object.keys(this.params)}};function ca(s){return new xc(s)}function Rk(s,e,a){let t=a.path.split("/");if(t.length>s.length||a.pathMatch==="full"&&(e.hasChildren()||t.length<s.length))return null;let n={};for(let i=0;i<t.length;i++){let o=t[i],r=s[i];if(o[0]===":")n[o.substring(1)]=r;else if(o!==r.path)return null}return{consumed:s.slice(0,t.length),posParams:n}}function Lk(s,e){if(s.length!==e.length)return!1;for(let a=0;a<s.length;++a)if(!ps(s[a],e[a]))return!1;return!0}function ps(s,e){let a=s?Cc(s):void 0,t=e?Cc(e):void 0;if(!a||!t||a.length!=t.length)return!1;let n;for(let i=0;i<a.length;i++)if(n=a[i],!Lg(s[n],e[n]))return!1;return!0}function Cc(s){return[...Object.keys(s),...Object.getOwnPropertySymbols(s)]}function Lg(s,e){if(Array.isArray(s)&&Array.isArray(e)){if(s.length!==e.length)return!1;let a=[...s].sort(),t=[...e].sort();return a.every((n,i)=>t[i]===n)}else return s===e}function Pg(s){return s.length>0?s[s.length-1]:null}function Vs(s){return zo(s)?s:$a(s)?Z(Promise.resolve(s)):E(s)}var Pk={exact:Og,subset:Fg},Ng={exact:Nk,subset:Ok,ignored:()=>!0};function Cg(s,e,a){return Pk[a.paths](s.root,e.root,a.matrixParams)&&Ng[a.queryParams](s.queryParams,e.queryParams)&&!(a.fragment==="exact"&&s.fragment!==e.fragment)}function Nk(s,e){return ps(s,e)}function Og(s,e,a){if(!gt(s.segments,e.segments)||!lo(s.segments,e.segments,a)||s.numberOfChildren!==e.numberOfChildren)return!1;for(let t in e.children)if(!s.children[t]||!Og(s.children[t],e.children[t],a))return!1;return!0}function Ok(s,e){return Object.keys(e).length<=Object.keys(s).length&&Object.keys(e).every(a=>Lg(s[a],e[a]))}function Fg(s,e,a){return Gg(s,e,e.segments,a)}function Gg(s,e,a,t){if(s.segments.length>a.length){let n=s.segments.slice(0,a.length);return!(!gt(n,a)||e.hasChildren()||!lo(n,a,t))}else if(s.segments.length===a.length){if(!gt(s.segments,a)||!lo(s.segments,a,t))return!1;for(let n in e.children)if(!s.children[n]||!Fg(s.children[n],e.children[n],t))return!1;return!0}else{let n=a.slice(0,s.segments.length),i=a.slice(s.segments.length);return!gt(s.segments,n)||!lo(s.segments,n,t)||!s.children[M]?!1:Gg(s.children[M],e,i,t)}}function lo(s,e,a){return e.every((t,n)=>Ng[a](s[n].parameters,t.parameters))}var zs=class{constructor(e=new V([],{}),a={},t=null){this.root=e,this.queryParams=a,this.fragment=t}get queryParamMap(){return this._queryParamMap??=ca(this.queryParams),this._queryParamMap}toString(){return zk.serialize(this)}},V=class{constructor(e,a){this.segments=e,this.children=a,this.parent=null,Object.values(a).forEach(t=>t.parent=this)}hasChildren(){return this.numberOfChildren>0}get numberOfChildren(){return Object.keys(this.children).length}toString(){return co(this)}},mt=class{constructor(e,a){this.path=e,this.parameters=a}get parameterMap(){return this._parameterMap??=ca(this.parameters),this._parameterMap}toString(){return Bg(this)}};function Fk(s,e){return gt(s,e)&&s.every((a,t)=>ps(a.parameters,e[t].parameters))}function gt(s,e){return s.length!==e.length?!1:s.every((a,t)=>a.path===e[t].path)}function Gk(s,e){let a=[];return Object.entries(s.children).forEach(([t,n])=>{t===M&&(a=a.concat(e(n,t)))}),Object.entries(s.children).forEach(([t,n])=>{t!==M&&(a=a.concat(e(n,t)))}),a}var ma=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:()=>new pa,providedIn:"root"});let s=e;return s})(),pa=class{parse(e){let a=new Tc(e);return new zs(a.parseRootSegment(),a.parseQueryParams(),a.parseFragment())}serialize(e){let a=`/${sn(e.root,!0)}`,t=Vk(e.queryParams),n=typeof e.fragment=="string"?`#${Bk(e.fragment)}`:"";return`${a}${t}${n}`}},zk=new pa;function co(s){return s.segments.map(e=>Bg(e)).join("/")}function sn(s,e){if(!s.hasChildren())return co(s);if(e){let a=s.children[M]?sn(s.children[M],!1):"",t=[];return Object.entries(s.children).forEach(([n,i])=>{n!==M&&t.push(`${n}:${sn(i,!1)}`)}),t.length>0?`${a}(${t.join("//")})`:a}else{let a=Gk(s,(t,n)=>n===M?[sn(s.children[M],!1)]:[`${n}:${sn(t,!1)}`]);return Object.keys(s.children).length===1&&s.children[M]!=null?`${co(s)}/${a[0]}`:`${co(s)}/(${a.join("//")})`}}function zg(s){return encodeURIComponent(s).replace(/%40/g,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",")}function oo(s){return zg(s).replace(/%3B/gi,";")}function Bk(s){return encodeURI(s)}function Sc(s){return zg(s).replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/%26/gi,"&")}function po(s){return decodeURIComponent(s)}function Sg(s){return po(s.replace(/\+/g,"%20"))}function Bg(s){return`${Sc(s.path)}${Uk(s.parameters)}`}function Uk(s){return Object.entries(s).map(([e,a])=>`;${Sc(e)}=${Sc(a)}`).join("")}function Vk(s){let e=Object.entries(s).map(([a,t])=>Array.isArray(t)?t.map(n=>`${oo(a)}=${oo(n)}`).join("&"):`${oo(a)}=${oo(t)}`).filter(a=>a);return e.length?`?${e.join("&")}`:""}var Hk=/^[^\/()?;#]+/;function jc(s){let e=s.match(Hk);return e?e[0]:""}var Wk=/^[^\/()?;=#]+/;function Jk(s){let e=s.match(Wk);return e?e[0]:""}var $k=/^[^=?&#]+/;function Yk(s){let e=s.match($k);return e?e[0]:""}var Kk=/^[^&#]+/;function Xk(s){let e=s.match(Kk);return e?e[0]:""}var Tc=class{constructor(e){this.url=e,this.remaining=e}parseRootSegment(){return this.consumeOptional("/"),this.remaining===""||this.peekStartsWith("?")||this.peekStartsWith("#")?new V([],{}):new V([],this.parseChildren())}parseQueryParams(){let e={};if(this.consumeOptional("?"))do this.parseQueryParam(e);while(this.consumeOptional("&"));return e}parseFragment(){return this.consumeOptional("#")?decodeURIComponent(this.remaining):null}parseChildren(){if(this.remaining==="")return{};this.consumeOptional("/");let e=[];for(this.peekStartsWith("(")||e.push(this.parseSegment());this.peekStartsWith("/")&&!this.peekStartsWith("//")&&!this.peekStartsWith("/(");)this.capture("/"),e.push(this.parseSegment());let a={};this.peekStartsWith("/(")&&(this.capture("/"),a=this.parseParens(!0));let t={};return this.peekStartsWith("(")&&(t=this.parseParens(!1)),(e.length>0||Object.keys(a).length>0)&&(t[M]=new V(e,a)),t}parseSegment(){let e=jc(this.remaining);if(e===""&&this.peekStartsWith(";"))throw new k(4009,!1);return this.capture(e),new mt(po(e),this.parseMatrixParams())}parseMatrixParams(){let e={};for(;this.consumeOptional(";");)this.parseParam(e);return e}parseParam(e){let a=Jk(this.remaining);if(!a)return;this.capture(a);let t="";if(this.consumeOptional("=")){let n=jc(this.remaining);n&&(t=n,this.capture(t))}e[po(a)]=po(t)}parseQueryParam(e){let a=Yk(this.remaining);if(!a)return;this.capture(a);let t="";if(this.consumeOptional("=")){let o=Xk(this.remaining);o&&(t=o,this.capture(t))}let n=Sg(a),i=Sg(t);if(e.hasOwnProperty(n)){let o=e[n];Array.isArray(o)||(o=[o],e[n]=o),o.push(i)}else e[n]=i}parseParens(e){let a={};for(this.capture("(");!this.consumeOptional(")")&&this.remaining.length>0;){let t=jc(this.remaining),n=this.remaining[t.length];if(n!=="/"&&n!==")"&&n!==";")throw new k(4010,!1);let i;t.indexOf(":")>-1?(i=t.slice(0,t.indexOf(":")),this.capture(i),this.capture(":")):e&&(i=M);let o=this.parseChildren();a[i]=Object.keys(o).length===1?o[M]:new V([],o),this.consumeOptional("//")}return a}peekStartsWith(e){return this.remaining.startsWith(e)}consumeOptional(e){return this.peekStartsWith(e)?(this.remaining=this.remaining.substring(e.length),!0):!1}capture(e){if(!this.consumeOptional(e))throw new k(4011,!1)}};function Ug(s){return s.segments.length>0?new V([],{[M]:s}):s}function Vg(s){let e={};for(let[t,n]of Object.entries(s.children)){let i=Vg(n);if(t===M&&i.segments.length===0&&i.hasChildren())for(let[o,r]of Object.entries(i.children))e[o]=r;else(i.segments.length>0||i.hasChildren())&&(e[t]=i)}let a=new V(s.segments,e);return Qk(a)}function Qk(s){if(s.numberOfChildren===1&&s.children[M]){let e=s.children[M];return new V(s.segments.concat(e.segments),e.children)}return s}function ln(s){return s instanceof zs}function Zk(s,e,a=null,t=null){let n=Hg(s);return Wg(n,e,a,t)}function Hg(s){let e;function a(i){let o={};for(let l of i.children){let u=a(l);o[l.outlet]=u}let r=new V(i.url,o);return i===s&&(e=r),r}let t=a(s.root),n=Ug(t);return e??n}function Wg(s,e,a,t){let n=s;for(;n.parent;)n=n.parent;if(e.length===0)return wc(n,n,n,a,t);let i=e_(e);if(i.toRoot())return wc(n,n,new V([],{}),a,t);let o=s_(i,n,s),r=o.processChildren?nn(o.segmentGroup,o.index,i.commands):$g(o.segmentGroup,o.index,i.commands);return wc(n,o.segmentGroup,r,a,t)}function uo(s){return typeof s=="object"&&s!=null&&!s.outlets&&!s.segmentPath}function cn(s){return typeof s=="object"&&s!=null&&s.outlets}function wc(s,e,a,t,n){let i={};t&&Object.entries(t).forEach(([l,u])=>{i[l]=Array.isArray(u)?u.map(h=>`${h}`):`${u}`});let o;s===e?o=a:o=Jg(s,e,a);let r=Ug(Vg(o));return new zs(r,i,n)}function Jg(s,e,a){let t={};return Object.entries(s.children).forEach(([n,i])=>{i===e?t[n]=a:t[n]=Jg(i,e,a)}),new V(s.segments,t)}var ho=class{constructor(e,a,t){if(this.isAbsolute=e,this.numberOfDoubleDots=a,this.commands=t,e&&t.length>0&&uo(t[0]))throw new k(4003,!1);let n=t.find(cn);if(n&&n!==Pg(t))throw new k(4004,!1)}toRoot(){return this.isAbsolute&&this.commands.length===1&&this.commands[0]=="/"}};function e_(s){if(typeof s[0]=="string"&&s.length===1&&s[0]==="/")return new ho(!0,0,s);let e=0,a=!1,t=s.reduce((n,i,o)=>{if(typeof i=="object"&&i!=null){if(i.outlets){let r={};return Object.entries(i.outlets).forEach(([l,u])=>{r[l]=typeof u=="string"?u.split("/"):u}),[...n,{outlets:r}]}if(i.segmentPath)return[...n,i.segmentPath]}return typeof i!="string"?[...n,i]:o===0?(i.split("/").forEach((r,l)=>{l==0&&r==="."||(l==0&&r===""?a=!0:r===".."?e++:r!=""&&n.push(r))}),n):[...n,i]},[]);return new ho(a,e,t)}var oa=class{constructor(e,a,t){this.segmentGroup=e,this.processChildren=a,this.index=t}};function s_(s,e,a){if(s.isAbsolute)return new oa(e,!0,0);if(!a)return new oa(e,!1,NaN);if(a.parent===null)return new oa(a,!0,0);let t=uo(s.commands[0])?0:1,n=a.segments.length-1+t;return t_(a,n,s.numberOfDoubleDots)}function t_(s,e,a){let t=s,n=e,i=a;for(;i>n;){if(i-=n,t=t.parent,!t)throw new k(4005,!1);n=t.segments.length}return new oa(t,!1,n-i)}function a_(s){return cn(s[0])?s[0].outlets:{[M]:s}}function $g(s,e,a){if(s??=new V([],{}),s.segments.length===0&&s.hasChildren())return nn(s,e,a);let t=n_(s,e,a),n=a.slice(t.commandIndex);if(t.match&&t.pathIndex<s.segments.length){let i=new V(s.segments.slice(0,t.pathIndex),{});return i.children[M]=new V(s.segments.slice(t.pathIndex),s.children),nn(i,0,n)}else return t.match&&n.length===0?new V(s.segments,{}):t.match&&!s.hasChildren()?Ec(s,e,a):t.match?nn(s,0,n):Ec(s,e,a)}function nn(s,e,a){if(a.length===0)return new V(s.segments,{});{let t=a_(a),n={};if(Object.keys(t).some(i=>i!==M)&&s.children[M]&&s.numberOfChildren===1&&s.children[M].segments.length===0){let i=nn(s.children[M],e,a);return new V(s.segments,i.children)}return Object.entries(t).forEach(([i,o])=>{typeof o=="string"&&(o=[o]),o!==null&&(n[i]=$g(s.children[i],e,o))}),Object.entries(s.children).forEach(([i,o])=>{t[i]===void 0&&(n[i]=o)}),new V(s.segments,n)}}function n_(s,e,a){let t=0,n=e,i={match:!1,pathIndex:0,commandIndex:0};for(;n<s.segments.length;){if(t>=a.length)return i;let o=s.segments[n],r=a[t];if(cn(r))break;let l=`${r}`,u=t<a.length-1?a[t+1]:null;if(n>0&&l===void 0)break;if(l&&u&&typeof u=="object"&&u.outlets===void 0){if(!Eg(l,u,o))return i;t+=2}else{if(!Eg(l,{},o))return i;t++}n++}return{match:!0,pathIndex:n,commandIndex:t}}function Ec(s,e,a){let t=s.segments.slice(0,e),n=0;for(;n<a.length;){let i=a[n];if(cn(i)){let l=i_(i.outlets);return new V(t,l)}if(n===0&&uo(a[0])){let l=s.segments[e];t.push(new mt(l.path,Tg(a[0]))),n++;continue}let o=cn(i)?i.outlets[M]:`${i}`,r=n<a.length-1?a[n+1]:null;o&&r&&uo(r)?(t.push(new mt(o,Tg(r))),n+=2):(t.push(new mt(o,{})),n++)}return new V(t,{})}function i_(s){let e={};return Object.entries(s).forEach(([a,t])=>{typeof t=="string"&&(t=[t]),t!==null&&(e[a]=Ec(new V([],{}),0,t))}),e}function Tg(s){let e={};return Object.entries(s).forEach(([a,t])=>e[a]=`${t}`),e}function Eg(s,e,a){return s==a.path&&ps(e,a.parameters)}var on="imperative",de=function(s){return s[s.NavigationStart=0]="NavigationStart",s[s.NavigationEnd=1]="NavigationEnd",s[s.NavigationCancel=2]="NavigationCancel",s[s.NavigationError=3]="NavigationError",s[s.RoutesRecognized=4]="RoutesRecognized",s[s.ResolveStart=5]="ResolveStart",s[s.ResolveEnd=6]="ResolveEnd",s[s.GuardsCheckStart=7]="GuardsCheckStart",s[s.GuardsCheckEnd=8]="GuardsCheckEnd",s[s.RouteConfigLoadStart=9]="RouteConfigLoadStart",s[s.RouteConfigLoadEnd=10]="RouteConfigLoadEnd",s[s.ChildActivationStart=11]="ChildActivationStart",s[s.ChildActivationEnd=12]="ChildActivationEnd",s[s.ActivationStart=13]="ActivationStart",s[s.ActivationEnd=14]="ActivationEnd",s[s.Scroll=15]="Scroll",s[s.NavigationSkipped=16]="NavigationSkipped",s}(de||{}),Ue=class{constructor(e,a){this.id=e,this.url=a}},da=class extends Ue{constructor(e,a,t="imperative",n=null){super(e,a),this.type=de.NavigationStart,this.navigationTrigger=t,this.restoredState=n}toString(){return`NavigationStart(id: ${this.id}, url: '${this.url}')`}},ds=class extends Ue{constructor(e,a,t){super(e,a),this.urlAfterRedirects=t,this.type=de.NavigationEnd}toString(){return`NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`}},Le=function(s){return s[s.Redirect=0]="Redirect",s[s.SupersededByNewNavigation=1]="SupersededByNewNavigation",s[s.NoDataFromResolver=2]="NoDataFromResolver",s[s.GuardRejected=3]="GuardRejected",s}(Le||{}),mo=function(s){return s[s.IgnoredSameUrlNavigation=0]="IgnoredSameUrlNavigation",s[s.IgnoredByUrlHandlingStrategy=1]="IgnoredByUrlHandlingStrategy",s}(mo||{}),Cs=class extends Ue{constructor(e,a,t,n){super(e,a),this.reason=t,this.code=n,this.type=de.NavigationCancel}toString(){return`NavigationCancel(id: ${this.id}, url: '${this.url}')`}},Bs=class extends Ue{constructor(e,a,t,n){super(e,a),this.reason=t,this.code=n,this.type=de.NavigationSkipped}},pn=class extends Ue{constructor(e,a,t,n){super(e,a),this.error=t,this.target=n,this.type=de.NavigationError}toString(){return`NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`}},go=class extends Ue{constructor(e,a,t,n){super(e,a),this.urlAfterRedirects=t,this.state=n,this.type=de.RoutesRecognized}toString(){return`RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}},Dc=class extends Ue{constructor(e,a,t,n){super(e,a),this.urlAfterRedirects=t,this.state=n,this.type=de.GuardsCheckStart}toString(){return`GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}},qc=class extends Ue{constructor(e,a,t,n,i){super(e,a),this.urlAfterRedirects=t,this.state=n,this.shouldActivate=i,this.type=de.GuardsCheckEnd}toString(){return`GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`}},Ic=class extends Ue{constructor(e,a,t,n){super(e,a),this.urlAfterRedirects=t,this.state=n,this.type=de.ResolveStart}toString(){return`ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}},Ac=class extends Ue{constructor(e,a,t,n){super(e,a),this.urlAfterRedirects=t,this.state=n,this.type=de.ResolveEnd}toString(){return`ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}},Mc=class{constructor(e){this.route=e,this.type=de.RouteConfigLoadStart}toString(){return`RouteConfigLoadStart(path: ${this.route.path})`}},Rc=class{constructor(e){this.route=e,this.type=de.RouteConfigLoadEnd}toString(){return`RouteConfigLoadEnd(path: ${this.route.path})`}},Lc=class{constructor(e){this.snapshot=e,this.type=de.ChildActivationStart}toString(){return`ChildActivationStart(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}},Pc=class{constructor(e){this.snapshot=e,this.type=de.ChildActivationEnd}toString(){return`ChildActivationEnd(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}},Nc=class{constructor(e){this.snapshot=e,this.type=de.ActivationStart}toString(){return`ActivationStart(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}},Oc=class{constructor(e){this.snapshot=e,this.type=de.ActivationEnd}toString(){return`ActivationEnd(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}},vo=class{constructor(e,a,t){this.routerEvent=e,this.position=a,this.anchor=t,this.type=de.Scroll}toString(){let e=this.position?`${this.position[0]}, ${this.position[1]}`:null;return`Scroll(anchor: '${this.anchor}', position: '${e}')`}},dn=class{},ua=class{constructor(e,a){this.url=e,this.navigationBehaviorOptions=a}};var Fc=class{constructor(e){this.injector=e,this.outlet=null,this.route=null,this.children=new bn(this.injector),this.attachRef=null}},bn=(()=>{let e=class e{constructor(t){this.parentInjector=t,this.contexts=new Map}onChildOutletCreated(t,n){let i=this.getOrCreateContext(t);i.outlet=n,this.contexts.set(t,i)}onChildOutletDestroyed(t){let n=this.getContext(t);n&&(n.outlet=null,n.attachRef=null)}onOutletDeactivated(){let t=this.contexts;return this.contexts=new Map,t}onOutletReAttached(t){this.contexts=t}getOrCreateContext(t){let n=this.getContext(t);return n||(n=new Fc(this.parentInjector),this.contexts.set(t,n)),n}getContext(t){return this.contexts.get(t)||null}};e.\u0275fac=function(n){return new(n||e)(C(he))},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),fo=class{constructor(e){this._root=e}get root(){return this._root.value}parent(e){let a=this.pathFromRoot(e);return a.length>1?a[a.length-2]:null}children(e){let a=Gc(e,this._root);return a?a.children.map(t=>t.value):[]}firstChild(e){let a=Gc(e,this._root);return a&&a.children.length>0?a.children[0].value:null}siblings(e){let a=zc(e,this._root);return a.length<2?[]:a[a.length-2].children.map(n=>n.value).filter(n=>n!==e)}pathFromRoot(e){return zc(e,this._root).map(a=>a.value)}};function Gc(s,e){if(s===e.value)return e;for(let a of e.children){let t=Gc(s,a);if(t)return t}return null}function zc(s,e){if(s===e.value)return[e];for(let a of e.children){let t=zc(s,a);if(t.length)return t.unshift(e),t}return[]}var Re=class{constructor(e,a){this.value=e,this.children=a}toString(){return`TreeNode(${this.value})`}};function ia(s){let e={};return s&&s.children.forEach(a=>e[a.value.outlet]=a),e}var bo=class extends fo{constructor(e,a){super(e),this.snapshot=a,Kc(this,e)}toString(){return this.snapshot.toString()}};function Yg(s){let e=o_(s),a=new oe([new mt("",{})]),t=new oe({}),n=new oe({}),i=new oe({}),o=new oe(""),r=new Us(a,t,i,o,n,M,s,e.root);return r.snapshot=e.root,new bo(new Re(r,[]),e)}function o_(s){let e={},a={},t={},n="",i=new ra([],e,t,n,a,M,s,null,{});return new jo("",new Re(i,[]))}var Us=class{constructor(e,a,t,n,i,o,r,l){this.urlSubject=e,this.paramsSubject=a,this.queryParamsSubject=t,this.fragmentSubject=n,this.dataSubject=i,this.outlet=o,this.component=r,this._futureSnapshot=l,this.title=this.dataSubject?.pipe(R(u=>u[fn]))??E(void 0),this.url=e,this.params=a,this.queryParams=t,this.fragment=n,this.data=i}get routeConfig(){return this._futureSnapshot.routeConfig}get root(){return this._routerState.root}get parent(){return this._routerState.parent(this)}get firstChild(){return this._routerState.firstChild(this)}get children(){return this._routerState.children(this)}get pathFromRoot(){return this._routerState.pathFromRoot(this)}get paramMap(){return this._paramMap??=this.params.pipe(R(e=>ca(e))),this._paramMap}get queryParamMap(){return this._queryParamMap??=this.queryParams.pipe(R(e=>ca(e))),this._queryParamMap}toString(){return this.snapshot?this.snapshot.toString():`Future(${this._futureSnapshot})`}};function yo(s,e,a="emptyOnly"){let t,{routeConfig:n}=s;return e!==null&&(a==="always"||n?.path===""||!e.component&&!e.routeConfig?.loadComponent)?t={params:j(j({},e.params),s.params),data:j(j({},e.data),s.data),resolve:j(j(j(j({},s.data),e.data),n?.data),s._resolvedData)}:t={params:j({},s.params),data:j({},s.data),resolve:j(j({},s.data),s._resolvedData??{})},n&&Xg(n)&&(t.resolve[fn]=n.title),t}var ra=class{get title(){return this.data?.[fn]}constructor(e,a,t,n,i,o,r,l,u){this.url=e,this.params=a,this.queryParams=t,this.fragment=n,this.data=i,this.outlet=o,this.component=r,this.routeConfig=l,this._resolve=u}get root(){return this._routerState.root}get parent(){return this._routerState.parent(this)}get firstChild(){return this._routerState.firstChild(this)}get children(){return this._routerState.children(this)}get pathFromRoot(){return this._routerState.pathFromRoot(this)}get paramMap(){return this._paramMap??=ca(this.params),this._paramMap}get queryParamMap(){return this._queryParamMap??=ca(this.queryParams),this._queryParamMap}toString(){let e=this.url.map(t=>t.toString()).join("/"),a=this.routeConfig?this.routeConfig.path:"";return`Route(url:'${e}', path:'${a}')`}},jo=class extends fo{constructor(e,a){super(a),this.url=e,Kc(this,a)}toString(){return Kg(this._root)}};function Kc(s,e){e.value._routerState=s,e.children.forEach(a=>Kc(s,a))}function Kg(s){let e=s.children.length>0?` { ${s.children.map(Kg).join(", ")} } `:"";return`${s.value}${e}`}function kc(s){if(s.snapshot){let e=s.snapshot,a=s._futureSnapshot;s.snapshot=a,ps(e.queryParams,a.queryParams)||s.queryParamsSubject.next(a.queryParams),e.fragment!==a.fragment&&s.fragmentSubject.next(a.fragment),ps(e.params,a.params)||s.paramsSubject.next(a.params),Lk(e.url,a.url)||s.urlSubject.next(a.url),ps(e.data,a.data)||s.dataSubject.next(a.data)}else s.snapshot=s._futureSnapshot,s.dataSubject.next(s._futureSnapshot.data)}function Bc(s,e){let a=ps(s.params,e.params)&&Fk(s.url,e.url),t=!s.parent!=!e.parent;return a&&!t&&(!s.parent||Bc(s.parent,e.parent))}function Xg(s){return typeof s.title=="string"||s.title===null}var Xc=(()=>{let e=class e{constructor(){this.activated=null,this._activatedRoute=null,this.name=M,this.activateEvents=new fe,this.deactivateEvents=new fe,this.attachEvents=new fe,this.detachEvents=new fe,this.parentContexts=v(bn),this.location=v(Kt),this.changeDetector=v(Qt),this.inputBinder=v(xo,{optional:!0}),this.supportsBindingToComponentInputs=!0}get activatedComponentRef(){return this.activated}ngOnChanges(t){if(t.name){let{firstChange:n,previousValue:i}=t.name;if(n)return;this.isTrackedInParentContexts(i)&&(this.deactivate(),this.parentContexts.onChildOutletDestroyed(i)),this.initializeOutletWithName()}}ngOnDestroy(){this.isTrackedInParentContexts(this.name)&&this.parentContexts.onChildOutletDestroyed(this.name),this.inputBinder?.unsubscribeFromRouteData(this)}isTrackedInParentContexts(t){return this.parentContexts.getContext(t)?.outlet===this}ngOnInit(){this.initializeOutletWithName()}initializeOutletWithName(){if(this.parentContexts.onChildOutletCreated(this.name,this),this.activated)return;let t=this.parentContexts.getContext(this.name);t?.route&&(t.attachRef?this.attach(t.attachRef,t.route):this.activateWith(t.route,t.injector))}get isActivated(){return!!this.activated}get component(){if(!this.activated)throw new k(4012,!1);return this.activated.instance}get activatedRoute(){if(!this.activated)throw new k(4012,!1);return this._activatedRoute}get activatedRouteData(){return this._activatedRoute?this._activatedRoute.snapshot.data:{}}detach(){if(!this.activated)throw new k(4012,!1);this.location.detach();let t=this.activated;return this.activated=null,this._activatedRoute=null,this.detachEvents.emit(t.instance),t}attach(t,n){this.activated=t,this._activatedRoute=n,this.location.insert(t.hostView),this.inputBinder?.bindActivatedRouteToOutletComponent(this),this.attachEvents.emit(t.instance)}deactivate(){if(this.activated){let t=this.component;this.activated.destroy(),this.activated=null,this._activatedRoute=null,this.deactivateEvents.emit(t)}}activateWith(t,n){if(this.isActivated)throw new k(4013,!1);this._activatedRoute=t;let i=this.location,r=t.snapshot.component,l=this.parentContexts.getOrCreateContext(this.name).children,u=new Uc(t,l,i.injector);this.activated=i.createComponent(r,{index:i.length,injector:u,environmentInjector:n}),this.changeDetector.markForCheck(),this.inputBinder?.bindActivatedRouteToOutletComponent(this),this.activateEvents.emit(this.activated.instance)}};e.\u0275fac=function(n){return new(n||e)},e.\u0275dir=ot({type:e,selectors:[["router-outlet"]],inputs:{name:"name"},outputs:{activateEvents:"activate",deactivateEvents:"deactivate",attachEvents:"attach",detachEvents:"detach"},exportAs:["outlet"],standalone:!0,features:[Wt]});let s=e;return s})(),Uc=class s{__ngOutletInjector(e){return new s(this.route,this.childContexts,e)}constructor(e,a,t){this.route=e,this.childContexts=a,this.parent=t}get(e,a){return e===Us?this.route:e===bn?this.childContexts:this.parent.get(e,a)}},xo=new _(""),Dg=(()=>{let e=class e{constructor(){this.outletDataSubscriptions=new Map}bindActivatedRouteToOutletComponent(t){this.unsubscribeFromRouteData(t),this.subscribeToRouteData(t)}unsubscribeFromRouteData(t){this.outletDataSubscriptions.get(t)?.unsubscribe(),this.outletDataSubscriptions.delete(t)}subscribeToRouteData(t){let{activatedRoute:n}=t,i=ka([n.queryParams,n.params,n.data]).pipe(ke(([o,r,l],u)=>(l=j(j(j({},o),r),l),u===0?E(l):Promise.resolve(l)))).subscribe(o=>{if(!t.isActivated||!t.activatedComponentRef||t.activatedRoute!==n||n.component===null){this.unsubscribeFromRouteData(t);return}let r=Rm(n.component);if(!r){this.unsubscribeFromRouteData(t);return}for(let{templateName:l}of r.inputs)t.activatedComponentRef.setInput(l,o[l])});this.outletDataSubscriptions.set(t,i)}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})();function r_(s,e,a){let t=un(s,e._root,a?a._root:void 0);return new bo(t,e)}function un(s,e,a){if(a&&s.shouldReuseRoute(e.value,a.value.snapshot)){let t=a.value;t._futureSnapshot=e.value;let n=l_(s,e,a);return new Re(t,n)}else{if(s.shouldAttach(e.value)){let i=s.retrieve(e.value);if(i!==null){let o=i.route;return o.value._futureSnapshot=e.value,o.children=e.children.map(r=>un(s,r)),o}}let t=c_(e.value),n=e.children.map(i=>un(s,i));return new Re(t,n)}}function l_(s,e,a){return e.children.map(t=>{for(let n of a.children)if(s.shouldReuseRoute(t.value,n.value.snapshot))return un(s,t,n);return un(s,t)})}function c_(s){return new Us(new oe(s.url),new oe(s.params),new oe(s.queryParams),new oe(s.fragment),new oe(s.data),s.outlet,s.component,s)}var hn=class{constructor(e,a){this.redirectTo=e,this.navigationBehaviorOptions=a}},Qg="ngNavigationCancelingError";function wo(s,e){let{redirectTo:a,navigationBehaviorOptions:t}=ln(e)?{redirectTo:e,navigationBehaviorOptions:void 0}:e,n=Zg(!1,Le.Redirect);return n.url=a,n.navigationBehaviorOptions=t,n}function Zg(s,e){let a=new Error(`NavigationCancelingError: ${s||""}`);return a[Qg]=!0,a.cancellationCode=e,a}function p_(s){return ev(s)&&ln(s.url)}function ev(s){return!!s&&s[Qg]}var d_=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["ng-component"]],standalone:!0,features:[X],decls:1,vars:0,template:function(n,i){n&1&&S(0,"router-outlet")},dependencies:[Xc],encapsulation:2});let s=e;return s})();function u_(s,e){return s.providers&&!s._injector&&(s._injector=Wi(s.providers,e,`Route: ${s.path}`)),s._injector??e}function Qc(s){let e=s.children&&s.children.map(Qc),a=e?Q(j({},s),{children:e}):j({},s);return!a.component&&!a.loadComponent&&(e||a.loadChildren)&&a.outlet&&a.outlet!==M&&(a.component=d_),a}function Ze(s){return s.outlet||M}function h_(s,e){let a=s.filter(t=>Ze(t)===e);return a.push(...s.filter(t=>Ze(t)!==e)),a}function yn(s){if(!s)return null;if(s.routeConfig?._injector)return s.routeConfig._injector;for(let e=s.parent;e;e=e.parent){let a=e.routeConfig;if(a?._loadedInjector)return a._loadedInjector;if(a?._injector)return a._injector}return null}var m_=(s,e,a,t)=>R(n=>(new Vc(e,n.targetRouterState,n.currentRouterState,a,t).activate(s),n)),Vc=class{constructor(e,a,t,n,i){this.routeReuseStrategy=e,this.futureState=a,this.currState=t,this.forwardEvent=n,this.inputBindingEnabled=i}activate(e){let a=this.futureState._root,t=this.currState?this.currState._root:null;this.deactivateChildRoutes(a,t,e),kc(this.futureState.root),this.activateChildRoutes(a,t,e)}deactivateChildRoutes(e,a,t){let n=ia(a);e.children.forEach(i=>{let o=i.value.outlet;this.deactivateRoutes(i,n[o],t),delete n[o]}),Object.values(n).forEach(i=>{this.deactivateRouteAndItsChildren(i,t)})}deactivateRoutes(e,a,t){let n=e.value,i=a?a.value:null;if(n===i)if(n.component){let o=t.getContext(n.outlet);o&&this.deactivateChildRoutes(e,a,o.children)}else this.deactivateChildRoutes(e,a,t);else i&&this.deactivateRouteAndItsChildren(a,t)}deactivateRouteAndItsChildren(e,a){e.value.component&&this.routeReuseStrategy.shouldDetach(e.value.snapshot)?this.detachAndStoreRouteSubtree(e,a):this.deactivateRouteAndOutlet(e,a)}detachAndStoreRouteSubtree(e,a){let t=a.getContext(e.value.outlet),n=t&&e.value.component?t.children:a,i=ia(e);for(let o of Object.values(i))this.deactivateRouteAndItsChildren(o,n);if(t&&t.outlet){let o=t.outlet.detach(),r=t.children.onOutletDeactivated();this.routeReuseStrategy.store(e.value.snapshot,{componentRef:o,route:e,contexts:r})}}deactivateRouteAndOutlet(e,a){let t=a.getContext(e.value.outlet),n=t&&e.value.component?t.children:a,i=ia(e);for(let o of Object.values(i))this.deactivateRouteAndItsChildren(o,n);t&&(t.outlet&&(t.outlet.deactivate(),t.children.onOutletDeactivated()),t.attachRef=null,t.route=null)}activateChildRoutes(e,a,t){let n=ia(a);e.children.forEach(i=>{this.activateRoutes(i,n[i.value.outlet],t),this.forwardEvent(new Oc(i.value.snapshot))}),e.children.length&&this.forwardEvent(new Pc(e.value.snapshot))}activateRoutes(e,a,t){let n=e.value,i=a?a.value:null;if(kc(n),n===i)if(n.component){let o=t.getOrCreateContext(n.outlet);this.activateChildRoutes(e,a,o.children)}else this.activateChildRoutes(e,a,t);else if(n.component){let o=t.getOrCreateContext(n.outlet);if(this.routeReuseStrategy.shouldAttach(n.snapshot)){let r=this.routeReuseStrategy.retrieve(n.snapshot);this.routeReuseStrategy.store(n.snapshot,null),o.children.onOutletReAttached(r.contexts),o.attachRef=r.componentRef,o.route=r.route.value,o.outlet&&o.outlet.attach(r.componentRef,r.route.value),kc(r.route.value),this.activateChildRoutes(e,null,o.children)}else{let r=yn(n.snapshot);o.attachRef=null,o.route=n,o.injector=r??o.injector,o.outlet&&o.outlet.activateWith(n,o.injector),this.activateChildRoutes(e,null,o.children)}}else this.activateChildRoutes(e,null,t)}},ko=class{constructor(e){this.path=e,this.route=this.path[this.path.length-1]}},la=class{constructor(e,a){this.component=e,this.route=a}};function g_(s,e,a){let t=s._root,n=e?e._root:null;return tn(t,n,a,[t.value])}function v_(s){let e=s.routeConfig?s.routeConfig.canActivateChild:null;return!e||e.length===0?null:{node:s,guards:e}}function ga(s,e){let a=Symbol(),t=e.get(s,a);return t===a?typeof s=="function"&&!Bd(s)?s:e.get(s):t}function tn(s,e,a,t,n={canDeactivateChecks:[],canActivateChecks:[]}){let i=ia(e);return s.children.forEach(o=>{f_(o,i[o.value.outlet],a,t.concat([o.value]),n),delete i[o.value.outlet]}),Object.entries(i).forEach(([o,r])=>rn(r,a.getContext(o),n)),n}function f_(s,e,a,t,n={canDeactivateChecks:[],canActivateChecks:[]}){let i=s.value,o=e?e.value:null,r=a?a.getContext(s.value.outlet):null;if(o&&i.routeConfig===o.routeConfig){let l=b_(o,i,i.routeConfig.runGuardsAndResolvers);l?n.canActivateChecks.push(new ko(t)):(i.data=o.data,i._resolvedData=o._resolvedData),i.component?tn(s,e,r?r.children:null,t,n):tn(s,e,a,t,n),l&&r&&r.outlet&&r.outlet.isActivated&&n.canDeactivateChecks.push(new la(r.outlet.component,o))}else o&&rn(e,r,n),n.canActivateChecks.push(new ko(t)),i.component?tn(s,null,r?r.children:null,t,n):tn(s,null,a,t,n);return n}function b_(s,e,a){if(typeof a=="function")return a(s,e);switch(a){case"pathParamsChange":return!gt(s.url,e.url);case"pathParamsOrQueryParamsChange":return!gt(s.url,e.url)||!ps(s.queryParams,e.queryParams);case"always":return!0;case"paramsOrQueryParamsChange":return!Bc(s,e)||!ps(s.queryParams,e.queryParams);case"paramsChange":default:return!Bc(s,e)}}function rn(s,e,a){let t=ia(s),n=s.value;Object.entries(t).forEach(([i,o])=>{n.component?e?rn(o,e.children.getContext(i),a):rn(o,null,a):rn(o,e,a)}),n.component?e&&e.outlet&&e.outlet.isActivated?a.canDeactivateChecks.push(new la(e.outlet.component,n)):a.canDeactivateChecks.push(new la(null,n)):a.canDeactivateChecks.push(new la(null,n))}function jn(s){return typeof s=="function"}function y_(s){return typeof s=="boolean"}function j_(s){return s&&jn(s.canLoad)}function w_(s){return s&&jn(s.canActivate)}function k_(s){return s&&jn(s.canActivateChild)}function __(s){return s&&jn(s.canDeactivate)}function x_(s){return s&&jn(s.canMatch)}function sv(s){return s instanceof hs||s?.name==="EmptyError"}var ro=Symbol("INITIAL_VALUE");function ha(){return ke(s=>ka(s.map(e=>e.pipe(gs(1),Ho(ro)))).pipe(R(e=>{for(let a of e)if(a!==!0){if(a===ro)return ro;if(a===!1||C_(a))return a}return!0}),we(e=>e!==ro),gs(1)))}function C_(s){return ln(s)||s instanceof hn}function S_(s,e){return ne(a=>{let{targetSnapshot:t,currentSnapshot:n,guards:{canActivateChecks:i,canDeactivateChecks:o}}=a;return o.length===0&&i.length===0?E(Q(j({},a),{guardsResult:!0})):T_(o,t,n,s).pipe(ne(r=>r&&y_(r)?E_(t,i,s,e):E(r)),R(r=>Q(j({},a),{guardsResult:r})))})}function T_(s,e,a,t){return Z(s).pipe(ne(n=>M_(n.component,n.route,a,e,t)),He(n=>n!==!0,!0))}function E_(s,e,a,t){return Z(e).pipe(ms(n=>St(q_(n.route.parent,t),D_(n.route,t),A_(s,n.path,a),I_(s,n.route,a))),He(n=>n!==!0,!0))}function D_(s,e){return s!==null&&e&&e(new Nc(s)),E(!0)}function q_(s,e){return s!==null&&e&&e(new Lc(s)),E(!0)}function I_(s,e,a){let t=e.routeConfig?e.routeConfig.canActivate:null;if(!t||t.length===0)return E(!0);let n=t.map(i=>zn(()=>{let o=yn(e)??a,r=ga(i,o),l=w_(r)?r.canActivate(e,s):qe(o,()=>r(e,s));return Vs(l).pipe(He())}));return E(n).pipe(ha())}function A_(s,e,a){let t=e[e.length-1],i=e.slice(0,e.length-1).reverse().map(o=>v_(o)).filter(o=>o!==null).map(o=>zn(()=>{let r=o.guards.map(l=>{let u=yn(o.node)??a,h=ga(l,u),m=k_(h)?h.canActivateChild(t,s):qe(u,()=>h(t,s));return Vs(m).pipe(He())});return E(r).pipe(ha())}));return E(i).pipe(ha())}function M_(s,e,a,t,n){let i=e&&e.routeConfig?e.routeConfig.canDeactivate:null;if(!i||i.length===0)return E(!0);let o=i.map(r=>{let l=yn(e)??n,u=ga(r,l),h=__(u)?u.canDeactivate(s,e,a,t):qe(l,()=>u(s,e,a,t));return Vs(h).pipe(He())});return E(o).pipe(ha())}function R_(s,e,a,t){let n=e.canLoad;if(n===void 0||n.length===0)return E(!0);let i=n.map(o=>{let r=ga(o,s),l=j_(r)?r.canLoad(e,a):qe(s,()=>r(e,a));return Vs(l)});return E(i).pipe(ha(),tv(t))}function tv(s){return No(re(e=>{if(typeof e!="boolean")throw wo(s,e)}),R(e=>e===!0))}function L_(s,e,a,t){let n=e.canMatch;if(!n||n.length===0)return E(!0);let i=n.map(o=>{let r=ga(o,s),l=x_(r)?r.canMatch(e,a):qe(s,()=>r(e,a));return Vs(l)});return E(i).pipe(ha(),tv(t))}var mn=class{constructor(e){this.segmentGroup=e||null}},gn=class extends Error{constructor(e){super(),this.urlTree=e}};function na(s){return xt(new mn(s))}function P_(s){return xt(new k(4e3,!1))}function N_(s){return xt(Zg(!1,Le.GuardRejected))}var Hc=class{constructor(e,a){this.urlSerializer=e,this.urlTree=a}lineralizeSegments(e,a){let t=[],n=a.root;for(;;){if(t=t.concat(n.segments),n.numberOfChildren===0)return E(t);if(n.numberOfChildren>1||!n.children[M])return P_(`${e.redirectTo}`);n=n.children[M]}}applyRedirectCommands(e,a,t,n,i){if(typeof a!="string"){let r=a,{queryParams:l,fragment:u,routeConfig:h,url:m,outlet:g,params:f,data:b,title:q}=n,x=qe(i,()=>r({params:f,data:b,queryParams:l,fragment:u,routeConfig:h,url:m,outlet:g,title:q}));if(x instanceof zs)throw new gn(x);a=x}let o=this.applyRedirectCreateUrlTree(a,this.urlSerializer.parse(a),e,t);if(a[0]==="/")throw new gn(o);return o}applyRedirectCreateUrlTree(e,a,t,n){let i=this.createSegmentGroup(e,a.root,t,n);return new zs(i,this.createQueryParams(a.queryParams,this.urlTree.queryParams),a.fragment)}createQueryParams(e,a){let t={};return Object.entries(e).forEach(([n,i])=>{if(typeof i=="string"&&i[0]===":"){let r=i.substring(1);t[n]=a[r]}else t[n]=i}),t}createSegmentGroup(e,a,t,n){let i=this.createSegments(e,a.segments,t,n),o={};return Object.entries(a.children).forEach(([r,l])=>{o[r]=this.createSegmentGroup(e,l,t,n)}),new V(i,o)}createSegments(e,a,t,n){return a.map(i=>i.path[0]===":"?this.findPosParam(e,i,n):this.findOrReturn(i,t))}findPosParam(e,a,t){let n=t[a.path.substring(1)];if(!n)throw new k(4001,!1);return n}findOrReturn(e,a){let t=0;for(let n of a){if(n.path===e.path)return a.splice(t),n;t++}return e}},Wc={matched:!1,consumedSegments:[],remainingSegments:[],parameters:{},positionalParamSegments:{}};function O_(s,e,a,t,n){let i=Zc(s,e,a);return i.matched?(t=u_(e,t),L_(t,e,a,n).pipe(R(o=>o===!0?i:j({},Wc)))):E(i)}function Zc(s,e,a){if(e.path==="**")return F_(a);if(e.path==="")return e.pathMatch==="full"&&(s.hasChildren()||a.length>0)?j({},Wc):{matched:!0,consumedSegments:[],remainingSegments:a,parameters:{},positionalParamSegments:{}};let n=(e.matcher||Rk)(a,s,e);if(!n)return j({},Wc);let i={};Object.entries(n.posParams??{}).forEach(([r,l])=>{i[r]=l.path});let o=n.consumed.length>0?j(j({},i),n.consumed[n.consumed.length-1].parameters):i;return{matched:!0,consumedSegments:n.consumed,remainingSegments:a.slice(n.consumed.length),parameters:o,positionalParamSegments:n.posParams??{}}}function F_(s){return{matched:!0,parameters:s.length>0?Pg(s).parameters:{},consumedSegments:s,remainingSegments:[],positionalParamSegments:{}}}function qg(s,e,a,t){return a.length>0&&B_(s,a,t)?{segmentGroup:new V(e,z_(t,new V(a,s.children))),slicedSegments:[]}:a.length===0&&U_(s,a,t)?{segmentGroup:new V(s.segments,G_(s,a,t,s.children)),slicedSegments:a}:{segmentGroup:new V(s.segments,s.children),slicedSegments:a}}function G_(s,e,a,t){let n={};for(let i of a)if(Co(s,e,i)&&!t[Ze(i)]){let o=new V([],{});n[Ze(i)]=o}return j(j({},t),n)}function z_(s,e){let a={};a[M]=e;for(let t of s)if(t.path===""&&Ze(t)!==M){let n=new V([],{});a[Ze(t)]=n}return a}function B_(s,e,a){return a.some(t=>Co(s,e,t)&&Ze(t)!==M)}function U_(s,e,a){return a.some(t=>Co(s,e,t))}function Co(s,e,a){return(s.hasChildren()||e.length>0)&&a.pathMatch==="full"?!1:a.path===""}function V_(s,e,a,t){return Ze(s)!==t&&(t===M||!Co(e,a,s))?!1:Zc(e,s,a).matched}function H_(s,e,a){return e.length===0&&!s.children[a]}var Jc=class{};function W_(s,e,a,t,n,i,o="emptyOnly"){return new $c(s,e,a,t,n,o,i).recognize()}var J_=31,$c=class{constructor(e,a,t,n,i,o,r){this.injector=e,this.configLoader=a,this.rootComponentType=t,this.config=n,this.urlTree=i,this.paramsInheritanceStrategy=o,this.urlSerializer=r,this.applyRedirects=new Hc(this.urlSerializer,this.urlTree),this.absoluteRedirectCount=0,this.allowRedirects=!0}noMatchError(e){return new k(4002,`'${e.segmentGroup}'`)}recognize(){let e=qg(this.urlTree.root,[],[],this.config).segmentGroup;return this.match(e).pipe(R(({children:a,rootSnapshot:t})=>{let n=new Re(t,a),i=new jo("",n),o=Zk(t,[],this.urlTree.queryParams,this.urlTree.fragment);return o.queryParams=this.urlTree.queryParams,i.url=this.urlSerializer.serialize(o),{state:i,tree:o}}))}match(e){let a=new ra([],Object.freeze({}),Object.freeze(j({},this.urlTree.queryParams)),this.urlTree.fragment,Object.freeze({}),M,this.rootComponentType,null,{});return this.processSegmentGroup(this.injector,this.config,e,M,a).pipe(R(t=>({children:t,rootSnapshot:a})),Es(t=>{if(t instanceof gn)return this.urlTree=t.urlTree,this.match(t.urlTree.root);throw t instanceof mn?this.noMatchError(t):t}))}processSegmentGroup(e,a,t,n,i){return t.segments.length===0&&t.hasChildren()?this.processChildren(e,a,t,i):this.processSegment(e,a,t,t.segments,n,!0,i).pipe(R(o=>o instanceof Re?[o]:[]))}processChildren(e,a,t,n){let i=[];for(let o of Object.keys(t.children))o==="primary"?i.unshift(o):i.push(o);return Z(i).pipe(ms(o=>{let r=t.children[o],l=h_(a,o);return this.processSegmentGroup(e,l,r,o,n)}),Vo((o,r)=>(o.push(...r),o)),Ds(null),Uo(),ne(o=>{if(o===null)return na(t);let r=av(o);return $_(r),E(r)}))}processSegment(e,a,t,n,i,o,r){return Z(a).pipe(ms(l=>this.processSegmentAgainstRoute(l._injector??e,a,l,t,n,i,o,r).pipe(Es(u=>{if(u instanceof mn)return E(null);throw u}))),He(l=>!!l),Es(l=>{if(sv(l))return H_(t,n,i)?E(new Jc):na(t);throw l}))}processSegmentAgainstRoute(e,a,t,n,i,o,r,l){return V_(t,n,i,o)?t.redirectTo===void 0?this.matchSegmentAgainstRoute(e,n,t,i,o,l):this.allowRedirects&&r?this.expandSegmentAgainstRouteUsingRedirect(e,n,a,t,i,o,l):na(n):na(n)}expandSegmentAgainstRouteUsingRedirect(e,a,t,n,i,o,r){let{matched:l,parameters:u,consumedSegments:h,positionalParamSegments:m,remainingSegments:g}=Zc(a,n,i);if(!l)return na(a);typeof n.redirectTo=="string"&&n.redirectTo[0]==="/"&&(this.absoluteRedirectCount++,this.absoluteRedirectCount>J_&&(this.allowRedirects=!1));let f=new ra(i,u,Object.freeze(j({},this.urlTree.queryParams)),this.urlTree.fragment,Ig(n),Ze(n),n.component??n._loadedComponent??null,n,Ag(n)),b=yo(f,r,this.paramsInheritanceStrategy);f.params=Object.freeze(b.params),f.data=Object.freeze(b.data);let q=this.applyRedirects.applyRedirectCommands(h,n.redirectTo,m,f,e);return this.applyRedirects.lineralizeSegments(n,q).pipe(ne(x=>this.processSegment(e,t,a,x.concat(g),o,!1,r)))}matchSegmentAgainstRoute(e,a,t,n,i,o){let r=O_(a,t,n,e,this.urlSerializer);return t.path==="**"&&(a.children={}),r.pipe(ke(l=>l.matched?(e=t._injector??e,this.getChildConfig(e,t,n).pipe(ke(({routes:u})=>{let h=t._loadedInjector??e,{parameters:m,consumedSegments:g,remainingSegments:f}=l,b=new ra(g,m,Object.freeze(j({},this.urlTree.queryParams)),this.urlTree.fragment,Ig(t),Ze(t),t.component??t._loadedComponent??null,t,Ag(t)),q=yo(b,o,this.paramsInheritanceStrategy);b.params=Object.freeze(q.params),b.data=Object.freeze(q.data);let{segmentGroup:x,slicedSegments:D}=qg(a,g,f,u);if(D.length===0&&x.hasChildren())return this.processChildren(h,u,x,b).pipe(R(H=>new Re(b,H)));if(u.length===0&&D.length===0)return E(new Re(b,[]));let se=Ze(t)===i;return this.processSegment(h,u,x,D,se?M:i,!0,b).pipe(R(H=>new Re(b,H instanceof Re?[H]:[])))}))):na(a)))}getChildConfig(e,a,t){return a.children?E({routes:a.children,injector:e}):a.loadChildren?a._loadedRoutes!==void 0?E({routes:a._loadedRoutes,injector:a._loadedInjector}):R_(e,a,t,this.urlSerializer).pipe(ne(n=>n?this.configLoader.loadChildren(e,a).pipe(re(i=>{a._loadedRoutes=i.routes,a._loadedInjector=i.injector})):N_(a))):E({routes:[],injector:e})}};function $_(s){s.sort((e,a)=>e.value.outlet===M?-1:a.value.outlet===M?1:e.value.outlet.localeCompare(a.value.outlet))}function Y_(s){let e=s.value.routeConfig;return e&&e.path===""}function av(s){let e=[],a=new Set;for(let t of s){if(!Y_(t)){e.push(t);continue}let n=e.find(i=>t.value.routeConfig===i.value.routeConfig);n!==void 0?(n.children.push(...t.children),a.add(n)):e.push(t)}for(let t of a){let n=av(t.children);e.push(new Re(t.value,n))}return e.filter(t=>!a.has(t))}function Ig(s){return s.data||{}}function Ag(s){return s.resolve||{}}function K_(s,e,a,t,n,i){return ne(o=>W_(s,e,a,t,o.extractedUrl,n,i).pipe(R(({state:r,tree:l})=>Q(j({},o),{targetSnapshot:r,urlAfterRedirects:l}))))}function X_(s,e){return ne(a=>{let{targetSnapshot:t,guards:{canActivateChecks:n}}=a;if(!n.length)return E(a);let i=new Set(n.map(l=>l.route)),o=new Set;for(let l of i)if(!o.has(l))for(let u of nv(l))o.add(u);let r=0;return Z(o).pipe(ms(l=>i.has(l)?Q_(l,t,s,e):(l.data=yo(l,l.parent,s).resolve,E(void 0))),re(()=>r++),Tt(1),ne(l=>r===o.size?E(a):Te))})}function nv(s){let e=s.children.map(a=>nv(a)).flat();return[s,...e]}function Q_(s,e,a,t){let n=s.routeConfig,i=s._resolve;return n?.title!==void 0&&!Xg(n)&&(i[fn]=n.title),Z_(i,s,e,t).pipe(R(o=>(s._resolvedData=o,s.data=yo(s,s.parent,a).resolve,null)))}function Z_(s,e,a,t){let n=Cc(s);if(n.length===0)return E({});let i={};return Z(n).pipe(ne(o=>ex(s[o],e,a,t).pipe(He(),re(r=>{if(r instanceof hn)throw wo(new pa,r);i[o]=r}))),Tt(1),Bo(i),Es(o=>sv(o)?Te:xt(o)))}function ex(s,e,a,t){let n=yn(e)??t,i=ga(s,n),o=i.resolve?i.resolve(e,a):qe(n,()=>i(e,a));return Vs(o)}function _c(s){return ke(e=>{let a=s(e);return a?Z(a).pipe(R(()=>e)):E(e)})}var iv=(()=>{let e=class e{buildTitle(t){let n,i=t.root;for(;i!==void 0;)n=this.getResolvedTitleForRoute(i)??n,i=i.children.find(o=>o.outlet===M);return n}getResolvedTitleForRoute(t){return t.data[fn]}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:()=>v(sx),providedIn:"root"});let s=e;return s})(),sx=(()=>{let e=class e extends iv{constructor(t){super(),this.title=t}updateTitle(t){let n=this.buildTitle(t);n!==void 0&&this.title.setTitle(n)}};e.\u0275fac=function(n){return new(n||e)(C(Be))},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),wn=new _("",{providedIn:"root",factory:()=>({})}),vn=new _(""),ep=(()=>{let e=class e{constructor(){this.componentLoaders=new WeakMap,this.childrenLoaders=new WeakMap,this.compiler=v(Ki)}loadComponent(t){if(this.componentLoaders.get(t))return this.componentLoaders.get(t);if(t._loadedComponent)return E(t._loadedComponent);this.onLoadStartListener&&this.onLoadStartListener(t);let n=Vs(t.loadComponent()).pipe(R(ov),re(o=>{this.onLoadEndListener&&this.onLoadEndListener(t),t._loadedComponent=o}),$s(()=>{this.componentLoaders.delete(t)})),i=new _t(n,()=>new ue).pipe(kt());return this.componentLoaders.set(t,i),i}loadChildren(t,n){if(this.childrenLoaders.get(n))return this.childrenLoaders.get(n);if(n._loadedRoutes)return E({routes:n._loadedRoutes,injector:n._loadedInjector});this.onLoadStartListener&&this.onLoadStartListener(n);let o=tx(n,this.compiler,t,this.onLoadEndListener).pipe($s(()=>{this.childrenLoaders.delete(n)})),r=new _t(o,()=>new ue).pipe(kt());return this.childrenLoaders.set(n,r),r}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();function tx(s,e,a,t){return Vs(s.loadChildren()).pipe(R(ov),ne(n=>n instanceof La||Array.isArray(n)?E(n):Z(e.compileModuleAsync(n))),R(n=>{t&&t(s);let i,o,r=!1;return Array.isArray(n)?(o=n,r=!0):(i=n.create(a).injector,o=i.get(vn,[],{optional:!0,self:!0}).flat()),{routes:o.map(Qc),injector:i}}))}function ax(s){return s&&typeof s=="object"&&"default"in s}function ov(s){return ax(s)?s.default:s}var sp=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:()=>v(nx),providedIn:"root"});let s=e;return s})(),nx=(()=>{let e=class e{shouldProcessUrl(t){return!0}extract(t){return t}merge(t,n){return t}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),rv=new _(""),lv=new _("");function ix(s,e,a){let t=s.get(lv),n=s.get(pe);return s.get(J).runOutsideAngular(()=>{if(!n.startViewTransition||t.skipNextTransition)return t.skipNextTransition=!1,new Promise(u=>setTimeout(u));let i,o=new Promise(u=>{i=u}),r=n.startViewTransition(()=>(i(),ox(s))),{onViewTransitionCreated:l}=t;return l&&qe(s,()=>l({transition:r,from:e,to:a})),o})}function ox(s){return new Promise(e=>{Vi(e,{injector:s})})}var rx=new _(""),So=(()=>{let e=class e{get hasRequestedNavigation(){return this.navigationId!==0}constructor(){this.currentNavigation=null,this.currentTransition=null,this.lastSuccessfulNavigation=null,this.events=new ue,this.transitionAbortSubject=new ue,this.configLoader=v(ep),this.environmentInjector=v(he),this.urlSerializer=v(ma),this.rootContexts=v(bn),this.location=v(sa),this.inputBindingEnabled=v(xo,{optional:!0})!==null,this.titleStrategy=v(iv),this.options=v(wn,{optional:!0})||{},this.paramsInheritanceStrategy=this.options.paramsInheritanceStrategy||"emptyOnly",this.urlHandlingStrategy=v(sp),this.createViewTransition=v(rv,{optional:!0}),this.navigationErrorHandler=v(rx,{optional:!0}),this.navigationId=0,this.afterPreactivation=()=>E(void 0),this.rootComponentType=null;let t=i=>this.events.next(new Mc(i)),n=i=>this.events.next(new Rc(i));this.configLoader.onLoadEndListener=n,this.configLoader.onLoadStartListener=t}complete(){this.transitions?.complete()}handleNavigationRequest(t){let n=++this.navigationId;this.transitions?.next(Q(j(j({},this.transitions.value),t),{id:n}))}setupNavigations(t,n,i){return this.transitions=new oe({id:0,currentUrlTree:n,currentRawUrl:n,extractedUrl:this.urlHandlingStrategy.extract(n),urlAfterRedirects:this.urlHandlingStrategy.extract(n),rawUrl:n,extras:{},resolve:()=>{},reject:()=>{},promise:Promise.resolve(!0),source:on,restoredState:null,currentSnapshot:i.snapshot,targetSnapshot:null,currentRouterState:i,targetRouterState:null,guards:{canActivateChecks:[],canDeactivateChecks:[]},guardsResult:null}),this.transitions.pipe(we(o=>o.id!==0),R(o=>Q(j({},o),{extractedUrl:this.urlHandlingStrategy.extract(o.rawUrl)})),ke(o=>{let r=!1,l=!1;return E(o).pipe(ke(u=>{if(this.navigationId>o.id)return this.cancelNavigationTransition(o,"",Le.SupersededByNewNavigation),Te;this.currentTransition=o,this.currentNavigation={id:u.id,initialUrl:u.rawUrl,extractedUrl:u.extractedUrl,trigger:u.source,extras:u.extras,previousNavigation:this.lastSuccessfulNavigation?Q(j({},this.lastSuccessfulNavigation),{previousNavigation:null}):null};let h=!t.navigated||this.isUpdatingInternalState()||this.isUpdatedBrowserUrl(),m=u.extras.onSameUrlNavigation??t.onSameUrlNavigation;if(!h&&m!=="reload"){let g="";return this.events.next(new Bs(u.id,this.urlSerializer.serialize(u.rawUrl),g,mo.IgnoredSameUrlNavigation)),u.resolve(!1),Te}if(this.urlHandlingStrategy.shouldProcessUrl(u.rawUrl))return E(u).pipe(ke(g=>{let f=this.transitions?.getValue();return this.events.next(new da(g.id,this.urlSerializer.serialize(g.extractedUrl),g.source,g.restoredState)),f!==this.transitions?.getValue()?Te:Promise.resolve(g)}),K_(this.environmentInjector,this.configLoader,this.rootComponentType,t.config,this.urlSerializer,this.paramsInheritanceStrategy),re(g=>{o.targetSnapshot=g.targetSnapshot,o.urlAfterRedirects=g.urlAfterRedirects,this.currentNavigation=Q(j({},this.currentNavigation),{finalUrl:g.urlAfterRedirects});let f=new go(g.id,this.urlSerializer.serialize(g.extractedUrl),this.urlSerializer.serialize(g.urlAfterRedirects),g.targetSnapshot);this.events.next(f)}));if(h&&this.urlHandlingStrategy.shouldProcessUrl(u.currentRawUrl)){let{id:g,extractedUrl:f,source:b,restoredState:q,extras:x}=u,D=new da(g,this.urlSerializer.serialize(f),b,q);this.events.next(D);let se=Yg(this.rootComponentType).snapshot;return this.currentTransition=o=Q(j({},u),{targetSnapshot:se,urlAfterRedirects:f,extras:Q(j({},x),{skipLocationChange:!1,replaceUrl:!1})}),this.currentNavigation.finalUrl=f,E(o)}else{let g="";return this.events.next(new Bs(u.id,this.urlSerializer.serialize(u.extractedUrl),g,mo.IgnoredByUrlHandlingStrategy)),u.resolve(!1),Te}}),re(u=>{let h=new Dc(u.id,this.urlSerializer.serialize(u.extractedUrl),this.urlSerializer.serialize(u.urlAfterRedirects),u.targetSnapshot);this.events.next(h)}),R(u=>(this.currentTransition=o=Q(j({},u),{guards:g_(u.targetSnapshot,u.currentSnapshot,this.rootContexts)}),o)),S_(this.environmentInjector,u=>this.events.next(u)),re(u=>{if(o.guardsResult=u.guardsResult,u.guardsResult&&typeof u.guardsResult!="boolean")throw wo(this.urlSerializer,u.guardsResult);let h=new qc(u.id,this.urlSerializer.serialize(u.extractedUrl),this.urlSerializer.serialize(u.urlAfterRedirects),u.targetSnapshot,!!u.guardsResult);this.events.next(h)}),we(u=>u.guardsResult?!0:(this.cancelNavigationTransition(u,"",Le.GuardRejected),!1)),_c(u=>{if(u.guards.canActivateChecks.length)return E(u).pipe(re(h=>{let m=new Ic(h.id,this.urlSerializer.serialize(h.extractedUrl),this.urlSerializer.serialize(h.urlAfterRedirects),h.targetSnapshot);this.events.next(m)}),ke(h=>{let m=!1;return E(h).pipe(X_(this.paramsInheritanceStrategy,this.environmentInjector),re({next:()=>m=!0,complete:()=>{m||this.cancelNavigationTransition(h,"",Le.NoDataFromResolver)}}))}),re(h=>{let m=new Ac(h.id,this.urlSerializer.serialize(h.extractedUrl),this.urlSerializer.serialize(h.urlAfterRedirects),h.targetSnapshot);this.events.next(m)}))}),_c(u=>{let h=m=>{let g=[];m.routeConfig?.loadComponent&&!m.routeConfig._loadedComponent&&g.push(this.configLoader.loadComponent(m.routeConfig).pipe(re(f=>{m.component=f}),R(()=>{})));for(let f of m.children)g.push(...h(f));return g};return ka(h(u.targetSnapshot.root)).pipe(Ds(null),gs(1))}),_c(()=>this.afterPreactivation()),ke(()=>{let{currentSnapshot:u,targetSnapshot:h}=o,m=this.createViewTransition?.(this.environmentInjector,u.root,h.root);return m?Z(m).pipe(R(()=>o)):E(o)}),R(u=>{let h=r_(t.routeReuseStrategy,u.targetSnapshot,u.currentRouterState);return this.currentTransition=o=Q(j({},u),{targetRouterState:h}),this.currentNavigation.targetRouterState=h,o}),re(()=>{this.events.next(new dn)}),m_(this.rootContexts,t.routeReuseStrategy,u=>this.events.next(u),this.inputBindingEnabled),gs(1),re({next:u=>{r=!0,this.lastSuccessfulNavigation=this.currentNavigation,this.events.next(new ds(u.id,this.urlSerializer.serialize(u.extractedUrl),this.urlSerializer.serialize(u.urlAfterRedirects))),this.titleStrategy?.updateTitle(u.targetRouterState.snapshot),u.resolve(!0)},complete:()=>{r=!0}}),Wo(this.transitionAbortSubject.pipe(re(u=>{throw u}))),$s(()=>{!r&&!l&&this.cancelNavigationTransition(o,"",Le.SupersededByNewNavigation),this.currentTransition?.id===o.id&&(this.currentNavigation=null,this.currentTransition=null)}),Es(u=>{if(l=!0,ev(u))this.events.next(new Cs(o.id,this.urlSerializer.serialize(o.extractedUrl),u.message,u.cancellationCode)),p_(u)?this.events.next(new ua(u.url,u.navigationBehaviorOptions)):o.resolve(!1);else{let h=new pn(o.id,this.urlSerializer.serialize(o.extractedUrl),u,o.targetSnapshot??void 0);try{let m=qe(this.environmentInjector,()=>this.navigationErrorHandler?.(h));if(m instanceof hn){let{message:g,cancellationCode:f}=wo(this.urlSerializer,m);this.events.next(new Cs(o.id,this.urlSerializer.serialize(o.extractedUrl),g,f)),this.events.next(new ua(m.redirectTo,m.navigationBehaviorOptions))}else{this.events.next(h);let g=t.errorHandler(u);o.resolve(!!g)}}catch(m){this.options.resolveNavigationPromiseOnError?o.resolve(!1):o.reject(m)}}return Te}))}))}cancelNavigationTransition(t,n,i){let o=new Cs(t.id,this.urlSerializer.serialize(t.extractedUrl),n,i);this.events.next(o),t.resolve(!1)}isUpdatingInternalState(){return this.currentTransition?.extractedUrl.toString()!==this.currentTransition?.currentUrlTree.toString()}isUpdatedBrowserUrl(){return this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(!0))).toString()!==this.currentTransition?.extractedUrl.toString()&&!this.currentTransition?.extras.skipLocationChange}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();function lx(s){return s!==on}var cx=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:()=>v(px),providedIn:"root"});let s=e;return s})(),Yc=class{shouldDetach(e){return!1}store(e,a){}shouldAttach(e){return!1}retrieve(e){return null}shouldReuseRoute(e,a){return e.routeConfig===a.routeConfig}},px=(()=>{let e=class e extends Yc{};e.\u0275fac=(()=>{let t;return function(i){return(t||(t=bl(e)))(i||e)}})(),e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),cv=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:()=>v(dx),providedIn:"root"});let s=e;return s})(),dx=(()=>{let e=class e extends cv{constructor(){super(...arguments),this.location=v(sa),this.urlSerializer=v(ma),this.options=v(wn,{optional:!0})||{},this.canceledNavigationResolution=this.options.canceledNavigationResolution||"replace",this.urlHandlingStrategy=v(sp),this.urlUpdateStrategy=this.options.urlUpdateStrategy||"deferred",this.currentUrlTree=new zs,this.rawUrlTree=this.currentUrlTree,this.currentPageId=0,this.lastSuccessfulId=-1,this.routerState=Yg(null),this.stateMemento=this.createStateMemento()}getCurrentUrlTree(){return this.currentUrlTree}getRawUrlTree(){return this.rawUrlTree}restoredState(){return this.location.getState()}get browserPageId(){return this.canceledNavigationResolution!=="computed"?this.currentPageId:this.restoredState()?.\u0275routerPageId??this.currentPageId}getRouterState(){return this.routerState}createStateMemento(){return{rawUrlTree:this.rawUrlTree,currentUrlTree:this.currentUrlTree,routerState:this.routerState}}registerNonRouterCurrentEntryChangeListener(t){return this.location.subscribe(n=>{n.type==="popstate"&&t(n.url,n.state)})}handleRouterEvent(t,n){if(t instanceof da)this.stateMemento=this.createStateMemento();else if(t instanceof Bs)this.rawUrlTree=n.initialUrl;else if(t instanceof go){if(this.urlUpdateStrategy==="eager"&&!n.extras.skipLocationChange){let i=this.urlHandlingStrategy.merge(n.finalUrl,n.initialUrl);this.setBrowserUrl(i,n)}}else t instanceof dn?(this.currentUrlTree=n.finalUrl,this.rawUrlTree=this.urlHandlingStrategy.merge(n.finalUrl,n.initialUrl),this.routerState=n.targetRouterState,this.urlUpdateStrategy==="deferred"&&(n.extras.skipLocationChange||this.setBrowserUrl(this.rawUrlTree,n))):t instanceof Cs&&(t.code===Le.GuardRejected||t.code===Le.NoDataFromResolver)?this.restoreHistory(n):t instanceof pn?this.restoreHistory(n,!0):t instanceof ds&&(this.lastSuccessfulId=t.id,this.currentPageId=this.browserPageId)}setBrowserUrl(t,n){let i=this.urlSerializer.serialize(t);if(this.location.isCurrentPathEqualTo(i)||n.extras.replaceUrl){let o=this.browserPageId,r=j(j({},n.extras.state),this.generateNgRouterState(n.id,o));this.location.replaceState(i,"",r)}else{let o=j(j({},n.extras.state),this.generateNgRouterState(n.id,this.browserPageId+1));this.location.go(i,"",o)}}restoreHistory(t,n=!1){if(this.canceledNavigationResolution==="computed"){let i=this.browserPageId,o=this.currentPageId-i;o!==0?this.location.historyGo(o):this.currentUrlTree===t.finalUrl&&o===0&&(this.resetState(t),this.resetUrlToCurrentUrlTree())}else this.canceledNavigationResolution==="replace"&&(n&&this.resetState(t),this.resetUrlToCurrentUrlTree())}resetState(t){this.routerState=this.stateMemento.routerState,this.currentUrlTree=this.stateMemento.currentUrlTree,this.rawUrlTree=this.urlHandlingStrategy.merge(this.currentUrlTree,t.finalUrl??this.rawUrlTree)}resetUrlToCurrentUrlTree(){this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree),"",this.generateNgRouterState(this.lastSuccessfulId,this.currentPageId))}generateNgRouterState(t,n){return this.canceledNavigationResolution==="computed"?{navigationId:t,\u0275routerPageId:n}:{navigationId:t}}};e.\u0275fac=(()=>{let t;return function(i){return(t||(t=bl(e)))(i||e)}})(),e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),an=function(s){return s[s.COMPLETE=0]="COMPLETE",s[s.FAILED=1]="FAILED",s[s.REDIRECTING=2]="REDIRECTING",s}(an||{});function pv(s,e){s.events.pipe(we(a=>a instanceof ds||a instanceof Cs||a instanceof pn||a instanceof Bs),R(a=>a instanceof ds||a instanceof Bs?an.COMPLETE:(a instanceof Cs?a.code===Le.Redirect||a.code===Le.SupersededByNewNavigation:!1)?an.REDIRECTING:an.FAILED),we(a=>a!==an.REDIRECTING),gs(1)).subscribe(()=>{e()})}function ux(s){throw s}var hx={paths:"exact",fragment:"ignored",matrixParams:"ignored",queryParams:"exact"},mx={paths:"subset",fragment:"ignored",matrixParams:"ignored",queryParams:"subset"},Ss=(()=>{let e=class e{get currentUrlTree(){return this.stateManager.getCurrentUrlTree()}get rawUrlTree(){return this.stateManager.getRawUrlTree()}get events(){return this._events}get routerState(){return this.stateManager.getRouterState()}constructor(){this.disposed=!1,this.console=v($i),this.stateManager=v(cv),this.options=v(wn,{optional:!0})||{},this.pendingTasks=v(ct),this.urlUpdateStrategy=this.options.urlUpdateStrategy||"deferred",this.navigationTransitions=v(So),this.urlSerializer=v(ma),this.location=v(sa),this.urlHandlingStrategy=v(sp),this._events=new ue,this.errorHandler=this.options.errorHandler||ux,this.navigated=!1,this.routeReuseStrategy=v(cx),this.onSameUrlNavigation=this.options.onSameUrlNavigation||"ignore",this.config=v(vn,{optional:!0})?.flat()??[],this.componentInputBindingEnabled=!!v(xo,{optional:!0}),this.eventsSubscription=new ae,this.resetConfig(this.config),this.navigationTransitions.setupNavigations(this,this.currentUrlTree,this.routerState).subscribe({error:t=>{this.console.warn(t)}}),this.subscribeToNavigationEvents()}subscribeToNavigationEvents(){let t=this.navigationTransitions.events.subscribe(n=>{try{let i=this.navigationTransitions.currentTransition,o=this.navigationTransitions.currentNavigation;if(i!==null&&o!==null){if(this.stateManager.handleRouterEvent(n,o),n instanceof Cs&&n.code!==Le.Redirect&&n.code!==Le.SupersededByNewNavigation)this.navigated=!0;else if(n instanceof ds)this.navigated=!0;else if(n instanceof ua){let r=n.navigationBehaviorOptions,l=this.urlHandlingStrategy.merge(n.url,i.currentRawUrl),u=j({info:i.extras.info,skipLocationChange:i.extras.skipLocationChange,replaceUrl:i.extras.replaceUrl||this.urlUpdateStrategy==="eager"||lx(i.source)},r);this.scheduleNavigation(l,on,null,u,{resolve:i.resolve,reject:i.reject,promise:i.promise})}}vx(n)&&this._events.next(n)}catch(i){this.navigationTransitions.transitionAbortSubject.next(i)}});this.eventsSubscription.add(t)}resetRootComponentType(t){this.routerState.root.component=t,this.navigationTransitions.rootComponentType=t}initialNavigation(){this.setUpLocationChangeListener(),this.navigationTransitions.hasRequestedNavigation||this.navigateToSyncWithBrowser(this.location.path(!0),on,this.stateManager.restoredState())}setUpLocationChangeListener(){this.nonRouterCurrentEntryChangeSubscription??=this.stateManager.registerNonRouterCurrentEntryChangeListener((t,n)=>{setTimeout(()=>{this.navigateToSyncWithBrowser(t,"popstate",n)},0)})}navigateToSyncWithBrowser(t,n,i){let o={replaceUrl:!0},r=i?.navigationId?i:null;if(i){let u=j({},i);delete u.navigationId,delete u.\u0275routerPageId,Object.keys(u).length!==0&&(o.state=u)}let l=this.parseUrl(t);this.scheduleNavigation(l,n,r,o)}get url(){return this.serializeUrl(this.currentUrlTree)}getCurrentNavigation(){return this.navigationTransitions.currentNavigation}get lastSuccessfulNavigation(){return this.navigationTransitions.lastSuccessfulNavigation}resetConfig(t){this.config=t.map(Qc),this.navigated=!1}ngOnDestroy(){this.dispose()}dispose(){this.navigationTransitions.complete(),this.nonRouterCurrentEntryChangeSubscription&&(this.nonRouterCurrentEntryChangeSubscription.unsubscribe(),this.nonRouterCurrentEntryChangeSubscription=void 0),this.disposed=!0,this.eventsSubscription.unsubscribe()}createUrlTree(t,n={}){let{relativeTo:i,queryParams:o,fragment:r,queryParamsHandling:l,preserveFragment:u}=n,h=u?this.currentUrlTree.fragment:r,m=null;switch(l){case"merge":m=j(j({},this.currentUrlTree.queryParams),o);break;case"preserve":m=this.currentUrlTree.queryParams;break;default:m=o||null}m!==null&&(m=this.removeEmptyProps(m));let g;try{let f=i?i.snapshot:this.routerState.snapshot.root;g=Hg(f)}catch{(typeof t[0]!="string"||t[0][0]!=="/")&&(t=[]),g=this.currentUrlTree.root}return Wg(g,t,m,h??null)}navigateByUrl(t,n={skipLocationChange:!1}){let i=ln(t)?t:this.parseUrl(t),o=this.urlHandlingStrategy.merge(i,this.rawUrlTree);return this.scheduleNavigation(o,on,null,n)}navigate(t,n={skipLocationChange:!1}){return gx(t),this.navigateByUrl(this.createUrlTree(t,n),n)}serializeUrl(t){return this.urlSerializer.serialize(t)}parseUrl(t){try{return this.urlSerializer.parse(t)}catch{return this.urlSerializer.parse("/")}}isActive(t,n){let i;if(n===!0?i=j({},hx):n===!1?i=j({},mx):i=n,ln(t))return Cg(this.currentUrlTree,t,i);let o=this.parseUrl(t);return Cg(this.currentUrlTree,o,i)}removeEmptyProps(t){return Object.entries(t).reduce((n,[i,o])=>(o!=null&&(n[i]=o),n),{})}scheduleNavigation(t,n,i,o,r){if(this.disposed)return Promise.resolve(!1);let l,u,h;r?(l=r.resolve,u=r.reject,h=r.promise):h=new Promise((g,f)=>{l=g,u=f});let m=this.pendingTasks.add();return pv(this,()=>{queueMicrotask(()=>this.pendingTasks.remove(m))}),this.navigationTransitions.handleNavigationRequest({source:n,restoredState:i,currentUrlTree:this.currentUrlTree,currentRawUrl:this.currentUrlTree,rawUrl:t,extras:o,resolve:l,reject:u,promise:h,currentSnapshot:this.routerState.snapshot,currentRouterState:this.routerState}),h.catch(g=>Promise.reject(g))}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();function gx(s){for(let e=0;e<s.length;e++)if(s[e]==null)throw new k(4008,!1)}function vx(s){return!(s instanceof dn)&&!(s instanceof ua)}var us=(()=>{let e=class e{constructor(t,n,i,o,r,l){this.router=t,this.route=n,this.tabIndexAttribute=i,this.renderer=o,this.el=r,this.locationStrategy=l,this.href=null,this.commands=null,this.onChanges=new ue,this.preserveFragment=!1,this.skipLocationChange=!1,this.replaceUrl=!1;let u=r.nativeElement.tagName?.toLowerCase();this.isAnchorElement=u==="a"||u==="area",this.isAnchorElement?this.subscription=t.events.subscribe(h=>{h instanceof ds&&this.updateHref()}):this.setTabIndexIfNotOnNativeEl("0")}setTabIndexIfNotOnNativeEl(t){this.tabIndexAttribute!=null||this.isAnchorElement||this.applyAttributeValue("tabindex",t)}ngOnChanges(t){this.isAnchorElement&&this.updateHref(),this.onChanges.next(this)}set routerLink(t){t!=null?(this.commands=Array.isArray(t)?t:[t],this.setTabIndexIfNotOnNativeEl("0")):(this.commands=null,this.setTabIndexIfNotOnNativeEl(null))}onClick(t,n,i,o,r){let l=this.urlTree;if(l===null||this.isAnchorElement&&(t!==0||n||i||o||r||typeof this.target=="string"&&this.target!="_self"))return!0;let u={skipLocationChange:this.skipLocationChange,replaceUrl:this.replaceUrl,state:this.state,info:this.info};return this.router.navigateByUrl(l,u),!this.isAnchorElement}ngOnDestroy(){this.subscription?.unsubscribe()}updateHref(){let t=this.urlTree;this.href=t!==null&&this.locationStrategy?this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(t)):null;let n=this.href===null?null:Eh(this.href,this.el.nativeElement.tagName.toLowerCase(),"href");this.applyAttributeValue("href",n)}applyAttributeValue(t,n){let i=this.renderer,o=this.el.nativeElement;n!==null?i.setAttribute(o,t,n):i.removeAttribute(o,t)}get urlTree(){return this.commands===null?null:this.router.createUrlTree(this.commands,{relativeTo:this.relativeTo!==void 0?this.relativeTo:this.route,queryParams:this.queryParams,fragment:this.fragment,queryParamsHandling:this.queryParamsHandling,preserveFragment:this.preserveFragment})}};e.\u0275fac=function(n){return new(n||e)(ce(Ss),ce(Us),yl("tabindex"),ce(Wa),ce($t),ce(xs))},e.\u0275dir=ot({type:e,selectors:[["","routerLink",""]],hostVars:1,hostBindings:function(n,i){n&1&&pt("click",function(r){return i.onClick(r.button,r.ctrlKey,r.shiftKey,r.altKey,r.metaKey)}),n&2&&Ul("target",i.target)},inputs:{target:"target",queryParams:"queryParams",fragment:"fragment",queryParamsHandling:"queryParamsHandling",state:"state",info:"info",relativeTo:"relativeTo",preserveFragment:[2,"preserveFragment","preserveFragment",ks],skipLocationChange:[2,"skipLocationChange","skipLocationChange",ks],replaceUrl:[2,"replaceUrl","replaceUrl",ks],routerLink:"routerLink"},standalone:!0,features:[Hi,Wt]});let s=e;return s})();var _o=class{};var fx=(()=>{let e=class e{constructor(t,n,i,o,r){this.router=t,this.injector=i,this.preloadingStrategy=o,this.loader=r}setUpPreloading(){this.subscription=this.router.events.pipe(we(t=>t instanceof ds),ms(()=>this.preload())).subscribe(()=>{})}preload(){return this.processRoutes(this.injector,this.router.config)}ngOnDestroy(){this.subscription&&this.subscription.unsubscribe()}processRoutes(t,n){let i=[];for(let o of n){o.providers&&!o._injector&&(o._injector=Wi(o.providers,t,`Route: ${o.path}`));let r=o._injector??t,l=o._loadedInjector??r;(o.loadChildren&&!o._loadedRoutes&&o.canLoad===void 0||o.loadComponent&&!o._loadedComponent)&&i.push(this.preloadConfig(r,o)),(o.children||o._loadedRoutes)&&i.push(this.processRoutes(l,o.children??o._loadedRoutes))}return Z(i).pipe(Ct())}preloadConfig(t,n){return this.preloadingStrategy.preload(n,()=>{let i;n.loadChildren&&n.canLoad===void 0?i=this.loader.loadChildren(t,n):i=E(null);let o=i.pipe(ne(r=>r===null?E(void 0):(n._loadedRoutes=r.routes,n._loadedInjector=r.injector,this.processRoutes(r.injector??t,r.routes))));if(n.loadComponent&&!n._loadedComponent){let r=this.loader.loadComponent(n);return Z([o,r]).pipe(Ct())}else return o})}};e.\u0275fac=function(n){return new(n||e)(C(Ss),C(Ki),C(he),C(_o),C(ep))},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})(),tp=new _(""),dv=(()=>{let e=class e{constructor(t,n,i,o,r={}){this.urlSerializer=t,this.transitions=n,this.viewportScroller=i,this.zone=o,this.options=r,this.lastId=0,this.lastSource="imperative",this.restoredId=0,this.store={},this.environmentInjector=v(he),r.scrollPositionRestoration||="disabled",r.anchorScrolling||="disabled"}init(){this.options.scrollPositionRestoration!=="disabled"&&this.viewportScroller.setHistoryScrollRestoration("manual"),this.routerEventsSubscription=this.createScrollEvents(),this.scrollEventsSubscription=this.consumeScrollEvents()}createScrollEvents(){return this.transitions.events.subscribe(t=>{t instanceof da?(this.store[this.lastId]=this.viewportScroller.getScrollPosition(),this.lastSource=t.navigationTrigger,this.restoredId=t.restoredState?t.restoredState.navigationId:0):t instanceof ds?(this.lastId=t.id,this.scheduleScrollEvent(t,this.urlSerializer.parse(t.urlAfterRedirects).fragment)):t instanceof Bs&&t.code===mo.IgnoredSameUrlNavigation&&(this.lastSource=void 0,this.restoredId=0,this.scheduleScrollEvent(t,this.urlSerializer.parse(t.url).fragment))})}consumeScrollEvents(){return this.transitions.events.subscribe(t=>{t instanceof vo&&(t.position?this.options.scrollPositionRestoration==="top"?this.viewportScroller.scrollToPosition([0,0]):this.options.scrollPositionRestoration==="enabled"&&this.viewportScroller.scrollToPosition(t.position):t.anchor&&this.options.anchorScrolling==="enabled"?this.viewportScroller.scrollToAnchor(t.anchor):this.options.scrollPositionRestoration!=="disabled"&&this.viewportScroller.scrollToPosition([0,0]))})}scheduleScrollEvent(t,n){this.zone.runOutsideAngular(()=>ya(this,null,function*(){yield new Promise(i=>{setTimeout(()=>{i()}),Vi(()=>{i()},{injector:this.environmentInjector})}),this.zone.run(()=>{this.transitions.events.next(new vo(t,this.lastSource==="popstate"?this.store[this.restoredId]:null,n))})}))}ngOnDestroy(){this.routerEventsSubscription?.unsubscribe(),this.scrollEventsSubscription?.unsubscribe()}};e.\u0275fac=function(n){zh()},e.\u0275prov=w({token:e,factory:e.\u0275fac});let s=e;return s})();function uv(s,...e){return rt([{provide:vn,multi:!0,useValue:s},[],{provide:Us,useFactory:hv,deps:[Ss]},{provide:ut,multi:!0,useFactory:gv},e.map(a=>a.\u0275providers)])}function hv(s){return s.routerState.root}function va(s,e){return{\u0275kind:s,\u0275providers:e}}function mv(s={}){return va(4,[{provide:tp,useFactory:()=>{let a=v(ic),t=v(J),n=v(So),i=v(ma);return new dv(i,n,a,t,s)}}])}function gv(){let s=v(Ge);return e=>{let a=s.get(ws);if(e!==a.components[0])return;let t=s.get(Ss),n=s.get(vv);s.get(ap)===1&&t.initialNavigation(),s.get(fv,null,L.Optional)?.setUpPreloading(),s.get(tp,null,L.Optional)?.init(),t.resetRootComponentType(a.componentTypes[0]),n.closed||(n.next(),n.complete(),n.unsubscribe())}}var vv=new _("",{factory:()=>new ue}),ap=new _("",{providedIn:"root",factory:()=>1});function bx(){return va(2,[{provide:ap,useValue:0},{provide:Yi,multi:!0,deps:[Ge],useFactory:e=>{let a=e.get(Bm,Promise.resolve());return()=>a.then(()=>new Promise(t=>{let n=e.get(Ss),i=e.get(vv);pv(n,()=>{t(!0)}),e.get(So).afterPreactivation=()=>(t(!0),i.closed?E(void 0):i),n.initialNavigation()}))}}])}function yx(){return va(3,[{provide:Yi,multi:!0,useFactory:()=>{let e=v(Ss);return()=>{e.setUpLocationChangeListener()}}},{provide:ap,useValue:2}])}var fv=new _("");function jx(s){return va(0,[{provide:fv,useExisting:fx},{provide:_o,useExisting:s}])}function np(){return va(8,[Dg,{provide:xo,useExisting:Dg}])}function wx(s){let e=[{provide:rv,useValue:ix},{provide:lv,useValue:j({skipNextTransition:!!s?.skipInitialTransition},s)}];return va(9,e)}var Mg=new _("ROUTER_FORROOT_GUARD"),kx=[sa,{provide:ma,useClass:pa},Ss,bn,{provide:Us,useFactory:hv,deps:[Ss]},ep,[]],fa=(()=>{let e=class e{constructor(t){}static forRoot(t,n){return{ngModule:e,providers:[kx,[],{provide:vn,multi:!0,useValue:t},{provide:Mg,useFactory:Sx,deps:[[Ss,new Ti,new nl]]},{provide:wn,useValue:n||{}},n?.useHash?xx():Cx(),_x(),n?.preloadingStrategy?jx(n.preloadingStrategy).\u0275providers:[],n?.initialNavigation?Tx(n):[],n?.bindToComponentInputs?np().\u0275providers:[],n?.enableViewTransitions?wx().\u0275providers:[],Ex()]}}static forChild(t){return{ngModule:e,providers:[{provide:vn,multi:!0,useValue:t}]}}};e.\u0275fac=function(n){return new(n||e)(C(Mg,8))},e.\u0275mod=Vt({type:e}),e.\u0275inj=Ut({});let s=e;return s})();function _x(){return{provide:tp,useFactory:()=>{let s=v(ic),e=v(J),a=v(wn),t=v(So),n=v(ma);return a.scrollOffset&&s.setOffset(a.scrollOffset),new dv(n,t,s,e,a)}}}function xx(){return{provide:xs,useClass:Vm}}function Cx(){return{provide:xs,useClass:tc}}function Sx(s){return"guarded"}function Tx(s){return[s.initialNavigation==="disabled"?yx().\u0275providers:[],s.initialNavigation==="enabledBlocking"?bx().\u0275providers:[]]}var Rg=new _("");function Ex(){return[{provide:Rg,useFactory:gv},{provide:ut,multi:!0,useExisting:Rg}]}var bv=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_pourquoi_le_ssr">Pourquoi le SSR ?</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_comment_fonctionne_le_ssr">Comment fonctionne le SSR ?</a></li>
<li><a class="link" fragment="#_inconv\xE9nients_du_ssr">Inconv\xE9nients du SSR</a></li>
</ul>
</li>
<li><a class="link" fragment="#_mettre_en_place_le_ssr_dans_une_application_angular">Mettre en place le SSR dans une application Angular</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_comment_proc\xE9der">Comment proc\xE9der ?</a></li>
</ul>
</li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Le Server Side Rendering (SSR ou rendu c\xF4t\xE9 serveur) consiste \xE0 g\xE9n\xE9rer le code HTML d&#8217;une page web sur le serveur, avant de l&#8217;envoyer au navigateur de l&#8217;utilisateur.</p>
</div>
<div class="paragraph">
<p>Cette technique n&#8217;est pas r\xE9cente. Plusieurs langages de programmation (PHP&#8230;&#8203;) ou librairies de templating (JSP, Thymeleaf, Mustache,&#8230;&#8203;) peuvent \xEAtre utilis\xE9es depuis tr\xE8s longtemps. Cependant le terme SSR, est utilis\xE9 depuis l&#8217;av\xE8nement des frameworks Javascript tels que React, Angular et NodeJS.</p>
</div>
<div class="paragraph">
<p>Je vais vous expliquer comment fonctionne le SSR, ses avantages et inconv\xE9nients, et dans quels cas il est recommand\xE9 de l&#8217;utiliser. Nous verrons enfin comment l&#8217;utiliser dans une application Angular.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2024/ssr_intro.png" alt="SSR ou CSR?" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pourquoi_le_ssr">Pourquoi le SSR ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>React ou Angular ont popularis\xE9 le concept de Single Page Application (SPA) o\xF9 le code HTML est g\xE9n\xE9r\xE9 c\xF4t\xE9 client. On parle de Client Side Rendering (CSR ou rendu c\xF4t\xE9 client). Ceci permet de cr\xE9er des applications web plus r\xE9actives et dynamiques, mais cela peut poser des probl\xE8mes de r\xE9f\xE9rencement et de performance.</p>
</div>
<div class="paragraph">
<p>Prenons l&#8217;exemple d&#8217;une application Angular, vous avez un fichier index.html qui va charger les styles et les fichiers Javascript qui vont ensuite \xEAtre capables de g\xE9n\xE9rer les pages de votre application. Mais plus votre application est cons\xE9quente, plus la taille, et donc le temps de chargement seront importants.</p>
</div>
<div class="paragraph">
<p>Le deuxi\xE8me probl\xE8me est le r\xE9f\xE9rencement. Quand vous voulez faire un site public, c&#8217;est certainement le principal probl\xE8me car vous serez transparents sur le web. Les moteurs de recherche comme Google utilisent des robots d&#8217;indexation pour parcourir les pages web et les ajouter \xE0 leur index. Ces robots ne sont pas toujours  capables d&#8217;ex\xE9cuter le Javascript. Pour eux votre site se r\xE9sume \xE0 un fichier HTML pratiquement vide.</p>
</div>
<div class="paragraph">
<p>Le SSR ben\xE9ficie aussi aux robots d&#8217;exploration des r\xE9seaux sociaux (crawlers) qui n&#8217;ex\xE9cutent pas le Javascript. Un crawler, explore automatiquement le web pour extraire des informations \xE0 partir des pages visit\xE9es. Sur les r\xE9seaux sociaux ils sont utilis\xE9s quand vous partagez un lien pour g\xE9n\xE9rer un aper\xE7u de la page.</p>
</div>
<div class="sect2">
<h3 id="_comment_fonctionne_le_ssr">Comment fonctionne le SSR ?</h3>
<div class="paragraph">
<p>Le mieux est d&#8217;utiliser un sch\xE9ma pour expliquer le fonctionnement du SSR.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2024/SSR.png" alt="Comment fonctionne le SSR ?" width="800">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>(1)</strong> L&#8217;utilisateur clique sur un lien ou saisit une URL dans son navigateur.</p>
</li>
<li>
<p><strong>(2)</strong> Le navigateur envoie une requ\xEAte HTTP au serveur.</p>
</li>
<li>
<p><strong>(3)</strong> Le serveur re\xE7oit la requ\xEAte et utilise un langage de templating ou un moteur de rendu pour g\xE9n\xE9rer le code HTML de la page demand\xE9e. Le HTML peut inclure des donn\xE9es dynamiques provenant de bases de donn\xE9es ou d&#8217;autres sources.</p>
</li>
<li>
<p><strong>(4)</strong> Le serveur envoie la r\xE9ponse HTTP au navigateur, qui contient le code HTML complet de la page.</p>
</li>
<li>
<p><strong>(5)</strong> Le navigateur re\xE7oit la r\xE9ponse HTTP et affiche la page web \xE0 l&#8217;utilisateur.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Gr\xE2ce au SSR, le navigateur re\xE7oit le code HTML complet de la page d\xE8s la premi\xE8re r\xE9ponse HTTP, ce qui permet d&#8217;afficher la page plus rapidement car il peut le faire avant le chargement du Javascript. Un contenu pur HTML est beaucoup plus facile \xE0 parser pour un robot d&#8217;indexation.</p>
</div>
</div>
<div class="sect2">
<h3 id="_inconv\xE9nients_du_ssr">Inconv\xE9nients du SSR</h3>
<div class="paragraph">
<p>Le rendu c\xF4t\xE9 serveur peut g\xE9n\xE9rer plus de charge sur le serveur, car il doit g\xE9n\xE9rer chaque page web \xE0 chaque requ\xEAte.</p>
</div>
<div class="paragraph">
<p>Les pages web rendues c\xF4t\xE9 serveur peuvent aussi \xEAtre moins r\xE9actives que les pages rendues c\xF4t\xE9 client, car les interactions de l&#8217;utilisateur n\xE9cessitent g\xE9n\xE9ralement des requ\xEAtes HTTP suppl\xE9mentaires vers le serveur.</p>
</div>
<div class="paragraph">
<p>Le SSR peut \xE9galement poser des probl\xE8mes de performances si la page web utilise beaucoup de JavaScript, car le JavaScript doit \xEAtre charg\xE9 et ex\xE9cut\xE9 par le navigateur avant que la page ne soit interactive.</p>
</div>
<div class="paragraph">
<p>Il peut parfois \xEAtre compliqu\xE9 de mettre en place le SSR dans une application web existante, en particulier si elle a \xE9t\xE9 con\xE7ue pour le rendu c\xF4t\xE9 client.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mettre_en_place_le_ssr_dans_une_application_angular">Mettre en place le SSR dans une application Angular</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Angular Universal est un outil qui permet de mettre en place le SSR dans une application Angular. Il utilise Node.js pour g\xE9n\xE9rer le code HTML des pages web c\xF4t\xE9 serveur.</p>
</div>
<div class="paragraph">
<p>Ce site web a d&#8217;ailleurs \xE9t\xE9 migr\xE9 derni\xE8rement pour utiliser Angular Universal. Ceci m&#8217;a permi de supprimer ma stack technique que j&#8217;\xE9tais le seul \xE0 maitriser pour une stack Angular que tout le monde connait.</p>
</div>
<div class="sect2">
<h3 id="_comment_proc\xE9der">Comment proc\xE9der ?</h3>
<div class="paragraph">
<p>Pour g\xE9n\xE9rer un nouveau projet Angular avec SSR, vous pouvez g\xE9n\xE9rer un nouveau projet avec Angular CLI en utilisant la commande suivante :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451026.765">ng new my-ssr-app</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451026.765')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Angular CLI vous pose plusieurs questions pour la configuration de votre projet. Vous pouvez choisir d&#8217;ajouter Angular Universal en r\xE9pondant "yes" \xE0 la question suivante :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451026.742">@dollar@ ng new my-ssr-app
? Which stylesheet format would you like to use? Sass (SCSS)     [
https://sass-lang.com/documentation/syntax#scss                ]
? Do you want to enable Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)?
(y/N)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451026.742')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour ajouter Angular Universal \xE0 un projet Angular existant, vous pouvez utiliser la commande suivante :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451026.573">ng add @nguniversal/express-engine</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451026.573')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Une fois installer plusieurs scripts seront ajout\xE9s \xE0 votre <code>package.json</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" id="1732912451027.973"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-ssr-app&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.0.0&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;ng&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ng&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ng serve&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ng build&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;watch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ng build --watch --configuration development&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ng test&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;serve:ssr:example&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node dist/example/server/server.mjs&quot;</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  ...
<span class="hljs-punctuation">}</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451027.973')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez lancer la compilation incr\xE9mentale de votre application avec la commande suivante dans un terminal:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451027.6042">npm run watch</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451027.6042')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Et en parall\xE8le dans un navigateur, lancez votre application en mode serveur avec la commande suivante :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451027.422">npm run  serve:ssr:example</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451027.422')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez maintenant acc\xE9der \xE0 votre application Angular avec SSR en ouvrant un navigateur et en saisissant l&#8217;URL suivante : <code><a href="http://localhost:4000" class="bare">http://localhost:4000</a></code>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lors de mes premiers tests il y a quelques ann\xE9es j&#8217;avais rencontr\xE9 plusieurs erreurs et j&#8217;avais abandonn\xE9. Aujourd&#8217;hui, la mise en place est beaucoup plus simple et je vous encourage \xE0 tester Angular Universal pour vos applications Angular.</p>
</div>
<div class="paragraph">
<p>Mais le SSR n&#8217;est pas la solution \xE0 tous les probl\xE8mes. Il peut \xEAtre utile dans certains cas, mais il peut aussi poser des probl\xE8mes de performances et de r\xE9activit\xE9. Il est important de peser le pour et le contre avant de d\xE9cider d&#8217;utiliser le SSR dans une application web.</p>
</div>
<div class="paragraph">
<p>Le SSR est une bonne option pour les sites web statiques qui ne changent pas souvent de contenu. Mon site web est un excellent exemple. Il est compos\xE9 de pages statiques g\xE9n\xE9r\xE9es en Asciisdoc et le travail se fait \xE0 la compilation.</p>
</div>
</div>
</div>`;var yv=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_un_use_case_r\xE9el">Un use case r\xE9el</a></li>
<li><a class="link" fragment="#_quest_ce_quune_auto_configuration_spring_boot">Qu&#8217;est ce qu&#8217;une auto configuration Spring Boot ?</a></li>
<li><a class="link" fragment="#_ce_que_jaimerai_faire">Ce que j&#8217;aimerai faire</a></li>
<li><a class="link" fragment="#_les_conditions_sur_les_beans_de_configuration">Les conditions sur les beans de configuration</a></li>
<li><a class="link" fragment="#_utiliser_votre_code">Utiliser votre code</a></li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Le but de cet article est d&#8217;expliquer comment rajouter un bean de configuration Spring Boot \xE0 votre application, tout en l&#8217;int\xE9grant correctement pour qu&#8217;il s&#8217;ex\xE9cute au moment o\xF9 vous le souhaitez, au milieu de la multitudes des autres beans d&#8217;auto configuration.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2022/sb_starter.png" alt="Auto configuration" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_use_case_r\xE9el">Un use case r\xE9el</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Un besoin technique est (ou devrait \xEAtre) li\xE9 \xE0 un r\xE9el besoin.</p>
</div>
<div class="paragraph">
<p>Nous allons donc parler d&#8217;un exemple concret avec une application qui a une base de donn\xE9es commune \xE0 diff\xE9rents micro services. Chaque microservice a un utilisateur et un sch\xE9ma qui lui sont propres.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2022/sb_starter_archi1.svg" alt="Une seule base de donn\xE9e" width="800">
</div>
</div>
<div class="paragraph">
<p>Les tables du sch\xE9ma peuvent \xEAtre g\xE9n\xE9r\xE9es soit par <a href="https://hibernate.org/tools/">HibernateTools</a> , soit g\xE9r\xE9e par des librairies comme <a href="https://flywaydb.org/">Flyway</a> ou <a href="https://www.liquibase.org/">Liquibase</a>. Mais ces outils travaillent avec un user et un schema existants.</p>
</div>
<div class="paragraph">
<p>Je souhaiterai pouvoir initialiser le sch\xE9ma et le user de cette base de donn\xE9es automatiquement. Il existe bien s\xFBr plusieurs solutions mais dans mon cas je veux que chaque application puisse le faire au d\xE9marrage avant l&#8217;initialisation de la datasource et son utilisation par des librairies externes comme Hibernate, Flyway ou Liquibase&#8230;&#8203;..</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_quest_ce_quune_auto_configuration_spring_boot">Qu&#8217;est ce qu&#8217;une auto configuration Spring Boot ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Boot a \xE9t\xE9 mis en place pour faciliter le d\xE9veloppement d&#8217;une application en privil\xE9giant la convention plut\xF4t que la configuration. En gros, vous installez des librairies tierces dans votre application, et Spring Boot essaie de les configurer automatiquement en appliquant un param\xE9trage par d\xE9faut pouss\xE9 par les \xE9quipes Spring pour les briques de base, ou par les concepteurs des autres briques.</p>
</div>
<div class="paragraph">
<p>Vous pouvez surcharger certains param\xE8tres de ces configuration. D&#8217;ailleurs quand on \xE9crit un nouveau starter Spring c&#8217;est une bonne chose de rendre configurable et personnalisable le maximum de choses.</p>
</div>
<div class="paragraph">
<p>Prenons les cas cit\xE9s plus haut (Hiberante, Flyway et Liquibase) qui sont assez courants et pour lesquels Spring Boot propose des beans d&#8217;autoconfiguration.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>si vous utilisez Jpa vous pouvez ajouter Hibernate dans vos d\xE9pendances ou mieux le starter <code>spring-boot-starter-data-jpa</code> et la classe <code>org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration</code> fera le reste.</p>
</li>
<li>
<p>si vous ajoutez Flyway dans le classpath automatiquement <code>org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration</code> prendra le pas pour configurer cette librairie</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Chaque bean d&#8217;auto configuration g\xE9r\xE9 par la team Spring est d\xE9fini dans le projet <a href="https://github.com/spring-projects/spring-boot/tree/v2.7.4/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure">spring-boot-autoconfigure</a>. Tous ces beans sont d\xE9clar\xE9s dans un fichier <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></p>
</div>
<div class="paragraph">
<p>Vous pouvez reproduire cette m\xE9canique mais personnellement je ne suis pas fan de cette magie noire et je pr\xE9f\xE8re clairement les d\xE9clarations explicites pour activer les diff\xE9rents beans des applications tierces. C&#8217;\xE9tait un peu la philosophie derri\xE8re le projet exp\xE9rimental <a href="https://github.com/spring-projects-experimental/spring-fu">Spring-fu</a> et <a href="https://github.com/spring-projects-experimental/spring-fu/tree/main/kofu">KoFu</a>.</p>
</div>
<div class="paragraph">
<p>C&#8217;est pourquoi je ne vais pas m&#8217;\xE9tendre sur ce point, et je vous montrerai plus loin comment cr\xE9er une m\xE9ta annotation pour activer votre bean de configuration simplement. Si vous n&#8217;\xEAtes pas d&#8217;accord avec ma vision, vous pouvez suivre les <a href="https://docs.spring.io/spring-boot/docs/2.7.4/reference/htmlsingle/#features.developing-auto-configuration.locating-auto-configuration-candidates">explications de Spring</a> pour appliquer une auto configuration.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ce_que_jaimerai_faire">Ce que j&#8217;aimerai faire</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Du coup si je reviens \xE0 mon besoin j&#8217;aimerai param\xE9trer un bout de code qui viendrait s&#8217;int\xE9grer dans le cycle de vie de mon application Spring Boot et qui viendrait s&#8217;ex\xE9cuter avant les beans d&#8217;auto configurations utilis\xE9s pour param\xE9trer la datasource ou des librairies comme Liquibase ou Flyway.</p>
</div>
<div class="paragraph">
<p>Pour rappel ce code permettrait de cr\xE9er le user et le sch\xE9ma de mon application.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2022/sb_starter_lifecycle.svg" alt="Cycle de vie" width="1200">
</div>
</div>
<div class="paragraph">
<p>Mais comment faire pour \xEAtre s\xFBr que ma configuration sera appliqu\xE9e au moment o\xF9 je le veux ?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_conditions_sur_les_beans_de_configuration">Les conditions sur les beans de configuration</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quand votre configuration doit s&#8217;int\xE9grer avant ou apr\xE8s d&#8217;autres configuration, vous pouvez utiliser les annotations  <code>@AutoConfigureBefore</code> et <code>@AutoConfigureAfter</code>. Dans notre cas</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451020.0144"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span>
<span class="hljs-meta">@AutoConfigureBefore(DataSourceAutoConfiguration::class, LiquibaseAutoConfiguration::class)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseSchemaInitializerAutoConfiguration</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451020.0144')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Mais ceci n&#8217;agit que sur l&#8217;ordre des classes de configuration et non sur les beans qui sont d\xE9finis \xE0 l&#8217;int\xE9rieur. <strong>L&#8217;ordre dans lequel les beans sont cr\xE9\xE9s n&#8217;est pas affect\xE9. L&#8217;ordre des beans de configuration est d\xE9termin\xE9 par les d\xE9pendances de chaque bean et des relations explicites d\xE9finies aves l&#8217;annotation @DependsOn.</strong></p>
</div>
<div class="paragraph">
<p>Donc dans mon cas rien ne me garantit que mon bean <code>DatabaseSchemaInitializer</code> sera lanc\xE9 avant les autres.</p>
</div>
<div class="paragraph">
<p>Spring Boot fournit diff\xE9rentes annotations <code>@Conditional</code> que l&#8217;on peut appliquer sur les beans de configurations ou n&#8217;importe quel autre bean. Je ne pr\xE9senterai ici que les principales</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Class Conditions<br></p>
<div class="ulist">
<ul>
<li>
<p>le bean annot\xE9 avec <code>@ConditionalOnClass</code> ne sera initialis\xE9 que si une classe est pr\xE9sente dans le classpath</p>
</li>
<li>
<p>le bean annot\xE9 avec <code>@ConditionalOnMissingClass</code> ne sera initialis\xE9 que si une classe n&#8217;est pas pr\xE9sente dans le classpath</p>
</li>
</ul>
</div>
</li>
<li>
<p>Bean Conditions<br></p>
<div class="ulist">
<ul>
<li>
<p>le bean annot\xE9 avec  <code>@ConditionalOnBean</code> ne sera initialis\xE9 que si un bean est pr\xE9sent dans le contexte Spring</p>
</li>
<li>
<p>le bean annot\xE9 avec  <code>@ConditionalOnMissingBean</code> ne sera initialis\xE9 que si un bean n&#8217;est pas pr\xE9sent dans le contexte Spring (ou pas encore&#8230;&#8203;). Pour que votre auto configuration puisse \xEAtre facilement surcharg\xE9 il est pr\xE9f\xE9rable de mettre cette annotation sur la classe de configuration</p>
</li>
</ul>
</div>
</li>
<li>
<p>Property Conditions : le bean annot\xE9 avec  <code>@ConditionalOnProperty</code> ne sera activ\xE9 que sur la pr\xE9sence d&#8217;une propri\xE9t\xE9. Pratique pour mettre en place un garde fou</p>
</li>
<li>
<p>Resource Conditions : <code>@ConditionalOnResource</code> permet de n&#8217;activer un bean que si une resource (un fichier par exemple) est pr\xE9sente</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Notre bean de configuration peut devenir</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451020.7395"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span>
<span class="hljs-meta">@ConditionalOnProperty(prefix = PROPERTIES_PREFIX, name = [<span class="hljs-string">&quot;enabled&quot;</span>], matchIfMissing = true)</span>
<span class="hljs-meta">@AutoConfigureBefore(DataSourceAutoConfiguration::class, LiquibaseAutoConfiguration::class)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseSchemaInitializerAutoConfiguration</span> {

    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> {
        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> PROPERTIES_PREFIX = <span class="hljs-string">&quot;app.database.initializer&quot;</span>
    }

    <span class="hljs-meta">@Configuration</span>
    <span class="hljs-meta">@ConditionalOnClass(DataSource::class)</span>
    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseSchemaInitializerConfiguration</span> {
        <span class="hljs-meta">@Bean</span>
        <span class="hljs-meta">@ConditionalOnMissingBean(DataSource::class, SpringLiquibase::class, Flyway::class)</span>
         <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">databaseSchemaInitializer</span><span class="hljs-params">()</span></span> =
             DatabaseSchemaInitializer()
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451020.7395')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Notre <code>DatabaseSchemaInitializer</code> doit maintenant s&#8217;ex\xE9cuter avant la mise en place de la datasource de Flyway ou Liquibase. Votre code marche en Java 8 mais pas avec les versions sup\xE9rieures o\xF9 les modules ont \xE9t\xE9 introduits. Sur Java @GT 9 avec une configuration par d\xE9faut o\xF9 les modules dont ferm\xE9s, <code>SpringLiquibase</code> et <code>Flyway</code> ne sont pas accessible.</p>
</div>
<div class="paragraph">
<p>Si on maitrisait le code, nous pourrions ajouter une annotation @DependsOn() vers <code>DatabaseSchemaInitializer</code> sur les beans <code>SpringLiquibase</code> et <code>Flyway</code>, mais ce n&#8217;est pas le cas.</p>
</div>
<div class="paragraph">
<p>Avec Spring il y a toujours des solutions. Nous pouvons faire h\xE9riter notre bean de configuration de <code>AbstractDependsOnBeanFactoryPostProcessor</code>. Cette classe de configuration permet de d\xE9clarer ces d\xE9pendances entre beans. Je peux donc r\xE9soudre mon probl\xE8me en sp\xE9cifiant que le bean Datasource (utilis\xE9 par <code>SpringLiquibase</code> et <code>Flyway</code>) ne peut \xEAtre instanci\xE9 que si mon bean <code>DatabaseSchemaInitializer</code> est instanci\xE9.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451021.823"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span>
<span class="hljs-meta">@ConditionalOnProperty(prefix = PROPERTIES_PREFIX, name = [<span class="hljs-string">&quot;enabled&quot;</span>], matchIfMissing = true)</span>
<span class="hljs-meta">@AutoConfigureBefore(DataSourceAutoConfiguration::class, LiquibaseAutoConfiguration::class)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseSchemaInitializerAutoConfiguration</span> {

    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> {
        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> PROPERTIES_PREFIX = <span class="hljs-string">&quot;app.database.initializer&quot;</span>
    }

    <span class="hljs-meta">@Configuration</span>
    <span class="hljs-meta">@ConditionalOnClass(DataSource::class)</span>
    <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseSchemaInitializerDependencyPostProcessor</span> : <span class="hljs-type">AbstractDependsOnBeanFactoryPostProcessor</span>(
        <span class="hljs-comment">// Ma datasource ne peut pas \xEAtre instanci\xE9e avant ...</span>
        DataSource::<span class="hljs-keyword">class</span>.java,
        <span class="hljs-comment">// le bean suivant</span>
        DatabaseSchemaInitializer::<span class="hljs-keyword">class</span>.java
    ) {
        <span class="hljs-meta">@Bean</span>
        <span class="hljs-meta">@ConditionalOnMissingBean(DataSource::class, SpringLiquibase::class, Flyway::class)</span>
         <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">databaseSchemaInitializer</span><span class="hljs-params">()</span></span> =
             DatabaseSchemaInitializer()
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451021.823')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Avec ce code, mon code pour initilialiser ue user et un schema de base de donn\xE9es sera ex\xE9cut\xE9 avant que l&#8217;application cherche \xE0 initialiser la base de donn\xE9es et donc Hibernate, Flyway ou Liquibase.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utiliser_votre_code">Utiliser votre code</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le but de ce code est d&#8217;\xEAtre partag\xE9 par mes diff\xE9rentes applications.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2022/sb_starter_archi2.svg" alt="Shared config" width="800">
</div>
</div>
<div class="paragraph">
<p>Dans la philosophie Spring Boot nous devrions <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.developing-auto-configuration.custom-starter">cr\xE9er notre propre starter</a>. Mais dans mon cas o\xF9 tous mes micro services sont dans un mono repository, je peux juste partager mon code via par exemple Gradle</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451021.2263">    <span class="hljs-comment">// ...</span>
    dependencies {
        implementation(project(<span class="hljs-string">&quot;:database-initializer&quot;</span>))
        <span class="hljs-comment">// ...</span>
    }
    <span class="hljs-comment">// ...</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451021.2263')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Plus haut je vous ai dit que je pr\xE9f\xE9rai des configurations explicites plut\xF4t que des auto configurations qui s&#8217;appliquent automatiquement.</p>
</div>
<div class="paragraph">
<p>Vous pouvez cr\xE9er par exemple une meta annotation <code>EnableDatabaseSchemaInitializer</code> que vous pourrez ajouter sur vos applications qui ont besoin de cette nouvelle fonctionnalit\xE9</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451021.2544"><span class="hljs-meta">@Retention(AnnotationRetention.RUNTIME)</span>
<span class="hljs-meta">@Target(AnnotationTarget.CLASS, AnnotationTarget.TYPE)</span>
<span class="hljs-meta">@MustBeDocumented</span>
<span class="hljs-meta">@Import(DatabaseSchemaInitializerAutoConfiguration::class)</span>
<span class="hljs-keyword">annotation</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnableDatabaseSchemaInitializer</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451021.2544')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Je vous ai pr\xE9sent\xE9 un use case mais au final vous n&#8217;avez pas le code de mon <code>DatabaseSchemaInitializer</code>. Je peux le partager si il y a des int\xE9ress\xE9s.</p>
</div>
<div class="paragraph">
<p>Le but de cet article \xE9tait plut\xF4t de comprendre les m\xE9canismes de Spring Boot et de l&#8217;autoconfiguration. Nous avons vu comment int\xE9grer du code au milieu de cette magie noire qui est tr\xE8s pratique quand on d\xE9bute mais qu&#8217;il faut conna\xEEtre lorsque nous avons des besoins plus pointus.</p>
</div>
<div class="paragraph">
<p>N&#8217;h\xE9sitez pas \xE0 me contacter sur Twitter si vous avez des questions ou des remarques sur cet article.</p>
</div>
</div>
</div>`;var jv=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_m\xE9thode_extracting_en_java">M\xE9thode <code>extracting</code> en Java</a></li>
<li><a class="link" fragment="#_m\xE9thode_extracting_en_kotlin">M\xE9thode <code>extracting</code> en Kotlin</a></li>
<li><a class="link" fragment="#_le_langage_kotlin_\xE0_la_rescousse">Le langage Kotlin \xE0 la rescousse</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Lorsque je veux faire des assertions dans mes tests unitaires en Java, j&#8217;utilise la librairie <a href="https://assertj.github.io/doc/">AssertJ</a>.
Cette librairie offre une "fluent API" pour rendre lisible vos tests unitaires.</p>
</div>
<div class="paragraph">
<p>Je vais me focaliser aujourd&#8217;hui sur la m\xE9thode <code>extracting</code> de AssertJ qui permet de tester les propri\xE9t\xE9s d&#8217;un objet ou d&#8217;une liste d&#8217;objets.
Je vais surtout parler des limitations quand on veut utiliser cette m\xE9thode sur des tests \xE9crits en Kotlin</p>
</div>
<div class="paragraph">
<p>Si par exemple nous avons un objet Talk avec un identifiant, un nom et une liste d&#8217;identifiants de speaker.
En Kotlin cet objet se d\xE9finit de cette mani\xE8re</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450850.4067"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Talk</span>(<span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>, <span class="hljs-keyword">val</span> name: String, <span class="hljs-keyword">val</span> speakerIds: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTLong@</span>GT)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450850.4067')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_m\xE9thode_extracting_en_java">M\xE9thode <code>extracting</code> en Java</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Regardons maintenant comment utiliser cette m\xE9thode dans un test \xE9crit en Java</p>
</div>
<div class="paragraph">
<p>Exemple pour un objet</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450850.361"><span class="hljs-meta">@Test</span>
void extractPropertyOnObject() {
    Talk talk = new Talk(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, asList(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>));
    assertThat(talk)
        .extracting(Talk::getId, Talk::getName, Talk::getSpeakerIds)
        .containsExactly(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, asList(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>));
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450850.361')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Exemple pour une liste d&#8217;objets</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450851.0227"><span class="hljs-meta">@Test</span>
void extractPropertyOnList() {
    <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTTalk@</span>GT talks = asList(
        new Talk(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, asList(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)),
        new Talk(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Other talk&quot;</span>, asList(<span class="hljs-number">14L</span>))
    );
    assertThat(talks).extracting(Talk::getId, Talk::getName, Talk::getSpeakerIds)
        .containsExactly(
            Tuple.tuple(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, asList(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)),
            Tuple.tuple(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Other talk&quot;</span>, asList(<span class="hljs-number">14L</span>))
        );
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450851.0227')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_m\xE9thode_extracting_en_kotlin">M\xE9thode <code>extracting</code> en Kotlin</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Passons maintenant \xE0 Kotlin, le compilateur limite l&#8217;utilisation des r\xE9f\xE9rences de fonction \xE0 cause de l&#8217;API.
En effet si nous voulons utiliser plusieurs r\xE9f\xE9rence de fonction nous avons une erreur "None of the following functions can be called with the arguments supplied" Le probl\xE8me est r\xE9f\xE9renc\xE9 <a href="https://github.com/assertj/assertj-core/issues/1499">ici</a> mais il ne sera pas r\xE9solu.</p>
</div>
<div class="paragraph">
<p>La solution \xE9tait de de passer par le nom des propri\xE9t\xE9s.
Mais cette solution n&#8217;est pas tr\xE8s viable car si une propri\xE9t\xE9 change de nom, vous n&#8217;aurez pas d&#8217;erreur de compilation.</p>
</div>
<div class="paragraph">
<p>Exemple pour un objet</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450851.3005"><span class="hljs-meta">@Test</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> @backtick@should extract property on <span class="hljs-keyword">object</span>@backtick@<span class="hljs-params">()</span></span> {
        <span class="hljs-keyword">val</span> talk = Talk(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>))
        assertThat(talk).extracting(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;speakerIds&quot;</span>)
            .containsExactly(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>))
    }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450851.3005')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Exemple pour une liste d&#8217;objets</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450851.3894"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> @backtick@should extract property on list@backtick@<span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">val</span> talks = listOf(
        Talk(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)),
        Talk(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Other talk&quot;</span>, listOf(<span class="hljs-number">14L</span>))
    )
    assertThat(talks)
        .extracting(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;speakerIds&quot;</span>)
        .containsExactly(
            tuple(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)),
            tuple(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Other talk&quot;</span>, listOf(<span class="hljs-number">14L</span>))
        )
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450851.3894')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Suite \xE0 l&#8217;\xE9criture de la premi\xE8re version de cet article j&#8217;ai pu tester les derni\xE8res versions d&#8217;AssertJ.
Contrairement \xE0 ce qui avait \xE9t\xE9 dit l&#8217;API a \xE9volu\xE9 \xE0 partir de la version 3.18 et vous pouvez maintenant \xE9crire</p>
</div>
<div class="paragraph">
<p>Exemple pour un objet</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450851.3037"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> @backtick@should extract property on <span class="hljs-keyword">object</span>@backtick@<span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">val</span> talk = Talk(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>))
    assertThat(talk)
        .extracting(Talk::id, Talk::name, Talk::speakerIds)
        .containsExactly(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>))
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450851.3037')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Exemple pour une liste d&#8217;objets</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450852.6873"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> @backtick@should extract property on list@backtick@<span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">val</span> talks: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTTalk@</span>GT = listOf(
        Talk(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)),
        Talk(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Other talk&quot;</span>, listOf(<span class="hljs-number">14L</span>))
    )
    assertThat(talks).extracting(Talk::id, Talk::name, Talk::speakerIds)
        .containsExactly(
            Tuple.tuple(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)),
            Tuple.tuple(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Other talk&quot;</span>, listOf(<span class="hljs-number">14L</span>))
        )
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450852.6873')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_langage_kotlin_\xE0_la_rescousse">Le langage Kotlin \xE0 la rescousse</h2>
<div class="sectionbody">
<div class="paragraph">
<p>AssertJ a \xE9t\xE9 \xE9crit pour faciliter les tests en Java.
En Kotlin, le langage est beaucoup plus souple et le langage lui m\xEAme est souvent une r\xE9ponse simple \xE0 un probl\xE8me.
Au lieu d&#8217;utiliser la m\xE9thode <code>extracting</code>, vous pouvez par exemple transformer vos \xE9l\xE9ments en tuple</p>
</div>
<div class="paragraph">
<p>Exemple pour un objet avec un let</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450852.0874"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> @backtick@should extract property on <span class="hljs-keyword">object</span>@backtick@<span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">val</span> talk = Talk(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>))
    assertThat(talk.let { tuple(it.id, it.name, it.speakerIds) })
        .isEqualTo(tuple(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)))
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450852.0874')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Exemple pour une liste d&#8217;objets avec un map</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450852.4333"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> @backtick@should extract property on list@backtick@<span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">val</span> talks = listOf(
        Talk(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)),
        Talk(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Other talk&quot;</span>, listOf(<span class="hljs-number">14L</span>))
    )
    assertThat(talks.map { tuple(it.id, it.name, it.speakerIds) })
        .containsExactly(
            tuple(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Fabulous talk&quot;</span>, listOf(<span class="hljs-number">12L</span>, <span class="hljs-number">13L</span>)),
            tuple(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Other talk&quot;</span>, listOf(<span class="hljs-number">14L</span>))

        )
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450852.4333')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voici la fin de cet article que je voulais partag\xE9 apr\xE8s avoir perdu pas mal de temps avec des anciennes versions de AssertJ pour migrer du code de test Java en Kotlin.</p>
</div>
</div>
</div>`;var wv=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_le_garbage_collector">Le garbage collector</a></li>
<li><a class="link" fragment="#_fonctionnement">Fonctionnement</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_collecte_gen\xE9rationnelle">Collecte gen\xE9rationnelle</a></li>
<li><a class="link" fragment="#_logguer_ce_que_fait_le_garbage_collector">Logguer ce que fait le garbage collector</a></li>
</ul>
</li>
<li><a class="link" fragment="#_m\xE9triques">M\xE9triques</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_maximum_pause_time">Maximum Pause-Time</a></li>
<li><a class="link" fragment="#_d\xE9bit_de_lapplication_throughput">D\xE9bit de l&#8217;application (throughput)</a></li>
</ul>
</li>
<li><a class="link" fragment="#_performances">Performances</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_taille_de_la_heap_espace_m\xE9moire_global">Taille de la heap (espace m\xE9moire global)</a></li>
<li><a class="link" fragment="#_taille_de_la_jeune_g\xE9n\xE9ration">Taille de la jeune g\xE9n\xE9ration</a></li>
</ul>
</li>
<li><a class="link" fragment="#_serial_collector">Serial Collector</a></li>
<li><a class="link" fragment="#_parallel_collector">Parallel Collector</a></li>
<li><a class="link" fragment="#_garbage_first_g1">Garbage-First (G1)</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_fonctionnement_2">Fonctionnement</a></li>
<li><a class="link" fragment="#_principales_options">Principales options</a></li>
<li><a class="link" fragment="#_am\xE9liorer_les_performances_du_g1">Am\xE9liorer les performances du G1</a>
<ul class="sectlevel3">
<li><a class="link" fragment="#_full_gc">Full GC</a></li>
<li><a class="link" fragment="#_utilisation_temps_syst\xE8me_incoh\xE9rent">Utilisation temps syst\xE8me incoh\xE9rent</a></li>
<li><a class="link" fragment="#_probl\xE8me_sur_les_collectes_mineures">Probl\xE8me sur les collectes mineures</a></li>
<li><a class="link" fragment="#_probl\xE8me_sur_les_collectes_mixtes">Probl\xE8me sur les collectes mixtes</a></li>
<li><a class="link" fragment="#_r\xE9f\xE9rence_interr\xE9gionale">R\xE9f\xE9rence interr\xE9gionale</a></li>
</ul>
</li>
</ul>
</li>
<li><a class="link" fragment="#_z_garbage_collector">Z Garbage Collector</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_d\xE9coupage_de_la_m\xE9moire">D\xE9coupage de la m\xE9moire</a></li>
<li><a class="link" fragment="#_coloration_de_r\xE9f\xE9rence_colored_pointer">Coloration de r\xE9f\xE9rence (colored pointer)</a></li>
<li><a class="link" fragment="#_barri\xE8res_gc_gc_barrier">Barri\xE8res GC (GC barrier)</a></li>
<li><a class="link" fragment="#_cycle_de_vie">Cycle de vie</a></li>
<li><a class="link" fragment="#_principales_options_2">Principales options</a></li>
</ul>
</li>
<li><a class="link" fragment="#_epsilon_garbage_collector">Epsilon Garbage Collector</a></li>
<li><a class="link" fragment="#_shenandoah_garbage_collector">Shenandoah Garbage Collector</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_fonctionnement_3">Fonctionnement</a></li>
<li><a class="link" fragment="#_principales_options_3">Principales options</a></li>
</ul>
</li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
<li><a class="link" fragment="#_r\xE9f\xE9rences">R\xE9f\xE9rences</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Nous allons voir dans cet article, comment la m\xE9moire est g\xE9r\xE9e sur une machine virtuelle (Java HotSpot VM).
En tant que d\xE9veloppeur Java ou Kotlin la gestion de la m\xE9moire est transparente et automatique, mais il existe plusieurs strat\xE9gies qui peuvent influer sur les performances de votre application.</p>
</div>
<div class="paragraph">
<p>Ces diff\xE9rentes strat\xE9gies ont \xE9volu\xE9 au fur et \xE0 mesure du temps et des versions.
Mon article se base sur Java 11, la <a href="https://en.wikipedia.org/wiki/Java_version_history">version LTS (Long term support) actuelle</a>.</p>
</div>
<div class="paragraph">
<p>Plusieurs termes ne seront pas traduits en fran\xE7ais dans cet article, car la traduction a peu d&#8217;int\xE9r\xEAt \xE0 mon sens.
J&#8217;\xE9viterai par exemple de parler de ramasse-miettes et conserverai le terme Garbage collector :-).
Cet article est long (au moins 30 min) mais je trouvais important de d\xE9crire les diff\xE9rents GC au m\xEAme endroit pour voir comment ils ont \xE9volu\xE9.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory.png" alt="M\xE9moire Java">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_garbage_collector">Le garbage collector</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le garbage collector (GC) est l&#8217;outil qui va g\xE9rer les allocations dynamiques et de la m\xE9moire.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Lorsque l&#8217;application d\xE9marre, le garbage collector va r\xE9server de la m\xE9moire du syst\xE8me d&#8217;exploitation, et la restituer lors de son arr\xEAt.
Les diff\xE9rents objets sont stock\xE9s dans un espace que l\u2019on appelle la <code>heap</code>.</p>
</li>
<li>
<p>Quand l&#8217;application a besoin de cr\xE9er des objets, le garbage collector va leur allouer des zones d\xE9di\xE9es</p>
</li>
<li>
<p>La m\xE9moire n&#8217;est pas infinie sur une machine.
Le garbage collector doit \xEAtre capable de recycler les zones m\xE9moires qui ne sont plus utilis\xE9es, pour pouvoir les r\xE9allouer.
Il le fait g\xE9n\xE9ralement en deux phases</p>
<div class="ulist">
<ul>
<li>
<p><code>Mark</code>: il identifie les objets qui sont utilis\xE9s ou non</p>
</li>
<li>
<p><code>Sweep</code>: il supprime les objets identifi\xE9s comme non utilis\xE9s lors de la phase pr\xE9c\xE9dente.</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Comme je l&#8217;ai dit en introduction il existe plusieurs <a href="https://medium.com/@hasithalgamge/seven-types-of-java-garbage-collectors-6297a1418e82">garbages collectors</a> qui vont se comporter diff\xE9remment.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/gctuning/available-collectors.html">Serial Garbage Collector</a> utilise un seul thread.
C&#8217;est le mieux adapt\xE9 aux machines mono processeur.
C&#8217;est une tr\xE8s bonne solution pour les petites applications n&#8217;utilisant pas plus de 100Mo de m\xE9moire.</p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/gctuning/parallel-collector1.html">Parallel Garbage Collector</a> est similaire au <code>Serial Collector</code> mais il est lui capable d&#8217;utiliser plusieurs threads pour essayer d&#8217;optimiser la phase de v\xE9rification des objets \xE0 supprimer.
Ce collecteur est destin\xE9 \xE0 des applications avec un ensemble de donn\xE9es moyen s&#8217;ex\xE9cutant sur une machine multiprocesseur ou multithread.</p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/gctuning/concurrent-mark-sweep-cms-collector.html">CMS Garbage Collector</a> (d\xE9pr\xE9ci\xE9 depuis Java 9) on s&#8217;attardera plus sur son successeur le <code>Garbage-First (G1)</code></p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/gctuning/garbage-first-garbage-collector.html">G1 Garbage Collector</a> a \xE9t\xE9 cr\xE9\xE9 pour les serveurs multi multiprocesseurs avec une grande quantit\xE9 de m\xE9moire.</p>
</li>
<li>
<p><a href="https://openjdk.java.net/jeps/333">Z garbage collector</a> (exp\xE9rimental en Java 11 et amen\xE9 \xE0 remplacer le G1 \xE0 partir de JDK15) ZGC effectue tous les travaux co\xFBteux simultan\xE9ment, sans arr\xEAter l&#8217;ex\xE9cution des threads d&#8217;application.
Le ZGC est destin\xE9 aux applications qui n\xE9cessitent une faible latence (moins de 10ms de pauses) et/ou utilisent une tr\xE8s grosse <code>heap</code> (plusieurs t\xE9raoctets).</p>
</li>
<li>
<p><a href="http://openjdk.java.net/jeps/318">Epsilon Garbage Collector</a> (exp\xE9rimental en Java 11) g\xE8re l&#8217;allocation de m\xE9moire mais n&#8217;impl\xE9mente aucun m\xE9canisme de r\xE9cup\xE9ration de m\xE9moire.
Une fois que le tas Java disponible est \xE9puis\xE9, la machine virtuelle Java s&#8217;arr\xEAte (OutOfMemory).
C&#8217;est forc\xE9ment celui qui a le temps de latence le plus faible.
Il est destin\xE9 \xE0 des jobs qui vont avoir une dur\xE9e de vie tr\xE8s courte.</p>
</li>
<li>
<p><a href="https://openjdk.java.net/jeps/189">Shenandoah Garbage Collector</a> (apparu en Java 12) a pour but de r\xE9duire les temps de pause GC en effectuant le nettoyage en m\xEAme temps que les threads Java sont en cours d&#8217;ex\xE9cution.
Les temps de pause avec Shenandoah sont ind\xE9pendants de la taille du tas, ce qui signifie que vous aurez les m\xEAmes temps de pause, que votre tas soit de 200Mo ou 200Go.
Par contre forc\xE9ment vu que le travail est en continu le d\xE9bit peut \xEAtre impact\xE9</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>La JVM essaie de s&#8217;adapter \xE0 votre environnement et votre application.
Dans la majorit\xE9 des cas, elle fera les bons choix.
Mais si vous constatez des ralentissements, vous pouvez vous poser des questions et affiner \xE9ventuellement les param\xE8tres ou le GC utilis\xE9.</p>
</div>
<div class="paragraph">
<p>Par d\xE9faut, la JVM fait ce choix l\xE0</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>G1 Garbage Collector</code></p>
</li>
<li>
<p>Le nombre de threads utilisables par le GC est d\xE9termin\xE9 en fonction des ressources CPU disponible et de la taille de la <code>heap</code></p>
</li>
<li>
<p>Taille initiale de la <code>heap</code> : 1/64 de la m\xE9moire physique</p>
</li>
<li>
<p>Taille maximale de la <code>heap</code> : 1/4 de la m\xE9moire physique</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fonctionnement">Fonctionnement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Scanner la m\xE9moire (<code>mark</code>) et recycler des zones (<code>sweep</code>) a un co\xFBt non n\xE9gligeable.</p>
</div>
<div class="paragraph">
<p>Chaque objet instanci\xE9 dans la JVM peut \xEAtre li\xE9 \xE0 un ou plusieurs autres.
Ce lien est appel\xE9 une r\xE9f\xE9rence.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>un objet ayant une ou plusieurs r\xE9f\xE9rences est consid\xE9r\xE9 comme vivant</p>
</li>
<li>
<p>quand il n&#8217;existe plus aucune r\xE9f\xE9rence vers un objet, ce dernier est consid\xE9r\xE9 comme mort et le GC peut le supprimer et r\xE9utiliser l&#8217;espace m\xE9moire utilis\xE9.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si on voulait impl\xE9menter un garbage collector simple, on pourrait mettre en place l&#8217;algorithme suivant.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>l&#8217;application est mise en pause pour analyser chaque objet, pour \xE9viter de recr\xE9er des objets pendant que nous essayons de faire du m\xE9nage.</p>
</li>
<li>
<p>notre GC it\xE8re sur chaque objet accessible pour voir si il est ref\xE9renc\xE9 par d&#8217;autres.</p>
</li>
<li>
<p>on supprime tous les objets morts pour r\xE9utiliser leur espace m\xE9moire</p>
</li>
<li>
<p>si on voulait bien faire, il faudrait d\xE9fragmenter pour que les tous les objets utilis\xE9s soient au d\xE9but de la m\xE9moire.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Niveau performance cette approche va d\xE9pendre du nombre d&#8217;objets et de la taille de la m\xE9moire.
Il deviendra vite inefficace pour une grosse application.</p>
</div>
<div class="paragraph">
<p>Les diff\xE9rents garbage collectors vont faire des hypoth\xE8ses sur votre application (ces hyppoth\xE8ses peuvent vari\xE9es en fonction des param\xE8tres que vous pouvez utiliser).
Le but est de minimiser le travail requis pour r\xE9cup\xE9rer les objets inutilis\xE9s.</p>
</div>
<div class="sect2">
<h3 id="_collecte_gen\xE9rationnelle">Collecte gen\xE9rationnelle</h3>
<div class="paragraph">
<p>Le GC se base sur des hypoth\xE8ses (g\xE9n\xE9rationnelles)</p>
</div>
<div class="ulist">
<ul>
<li>
<p>la majorit\xE9 des objets ne survivent que pendant une courte p\xE9riode de temps, l&#8217;ex\xE9cution d&#8217;une m\xE9thode par exemple.</p>
</li>
<li>
<p>d&#8217;autres objets beaucoup moins nombreux vont vivre tout au long de la vie d&#8217;une application jusqu&#8217;\xE0 ce que la VM se termine (exemple des objets statiques, des singletons&#8230;&#8203;).</p>
</li>
<li>
<p>entre ces deux extr\xEAmes on va retrouver quelques objets, qui vont avoir une dur\xE9e de vie variant entre la jeunesse et l&#8217;\xE9ternit\xE9.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Bien \xE9videmment une application peut se comporter diff\xE9remment, mais la tr\xE8s grosse majorit\xE9 suivent ces hypoth\xE8ses.</p>
</div>
<div class="paragraph">
<p>La <code>heap</code> (m\xE9moire totale) va \xEAtre d\xE9coup\xE9e en diff\xE9rentes zones (g\xE9n\xE9rations) qui contiendront des objets d&#8217;\xE2ges diff\xE9rents.
Par exemple pour le <code>Serial Garbage Collector</code> nous avons le d\xE9coupage suivant</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_serial_collector.png" alt="D\xE9coupage m\xE9moire Serial Garbage Collector">
</div>
</div>
<div class="paragraph">
<p>Le GC se lance sur une g\xE9n\xE9ration lorsque la zone est remplie.
Come nous avons des zones plus petites, le travail sera plus rapide.</p>
</div>
<div class="paragraph">
<p>Un objet nouvellement cr\xE9\xE9 (via un new) est plac\xE9 dans la <code>jeune g\xE9n\xE9ration</code> et plus pr\xE9cis\xE9ment dans la sous zone <code>Eden</code>.
Lorque cet espace est plein, le GC tente de nettoyer les objets.
Cette op\xE9ration est appel\xE9e une collecte mineure (Minor collection) car elle implique un nombre limit\xE9 d&#8217;objets.</p>
</div>
<div class="paragraph">
<p>Il existe deux zones Survivor, et sur les deux nous en avons toujours au moins une des deux qui reste vide.
Quand le GC parcourt tous les objets des zones <code>Eden</code> et <code>Survivor</code> (celle occup\xE9e),</p>
</div>
<div class="ulist">
<ul>
<li>
<p>un objet non utilis\xE9 est supprim\xE9</p>
</li>
<li>
<p>un objet encore en vie aura son \xE2ge incr\xE9ment\xE9 de 1 et sera copi\xE9 dans la zone <code>Survivor</code> rest\xE9e vide.</p>
</li>
<li>
<p>un objet du survivor qui a un \xE2ge assez grand est transf\xE9r\xE9 dans la <code>vieille g\xE9n\xE9ration</code>.
Cet \xE2ge (seuil) est calcul\xE9 par le GC</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Quand le GC doit nettoyer la vieille g\xE9n\xE9ration, il lance une collecte majeure sur toute la <code>heap</code> (Major collection).
Cette collecte est bien plus co\xFBteuse qu&#8217;une collecte mineure de la jeune g\xE9n\xE9ration.</p>
</div>
<div class="paragraph">
<p>Sur mon image les zones virtuelles correspondent aux zones disponibles mais non encore allou\xE9es.</p>
</div>
</div>
<div class="sect2">
<h3 id="_logguer_ce_que_fait_le_garbage_collector">Logguer ce que fait le garbage collector</h3>
<div class="paragraph">
<p>Si vous suspectez des probl\xE8mes de GC, vous devez savoir ce qu&#8217;il fait.
Pour activer des logs, vous pouvez ajouter des options comme <code>-verbose:gc</code> lorsque vous lancez votre JVM. Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre>[1,733s][info][gc] GC(4) Pause Young (Normal) (G1 Evacuation Pause) 149M@LAMBDA23M(258M) 8,546ms
[1,760s][info][gc] GC(5) Pause Young (Concurrent Start) (Metadata GC Threshold) 25M@LAMBDA23M(258M) 12,065ms
[1,760s][info][gc] GC(6) Concurrent Cycle
[1,769s][info][gc] GC(6) Pause Remark 24M@LAMBDA24M(258M) 1,524ms
[1,772s][info][gc] GC(6) Pause Cleanup 24M@LAMBDA24M(258M) 0,034ms
[1,773s][info][gc] GC(6) Concurrent Cycle 13,448ms</pre>
</div>
</div>
<div class="paragraph">
<p>Le format est</p>
</div>
<div class="listingblock">
<div class="content">
<pre>[timestamp][niveau log][processus gc] GC(num\xE9ro identification GC) [message avec information sur la m\xE9moire lib\xE9r\xE9e]</pre>
</div>
</div>
<div class="paragraph">
<p>Par exemple <code>149M&#8594;23M(258M)</code> siginifie que 149M \xE9taient utilis\xE9s avant l&#8217;ex\xE9cution du GC et qu&#8217;il reste 23M encore utilis\xE9 apr\xE8s l&#8217;ex\xE9cution sur une taille de heap de 258M</p>
</div>
<div class="paragraph">
<p>Pour avoir encore plus de d\xE9tail vous pouvez utiliser l&#8217;option <code>-Xlog:gc*</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre>[3,526s][info][gc,start      ] GC(9) Pause Young (Concurrent Start) (Metadata GC Threshold)
[3,526s][info][gc,task       ] GC(9) Using 10 workers of 10 for evacuation
[3,534s][info][gc,phases     ] GC(9)   Pre Evacuate Collection Set: 0,1ms
[3,534s][info][gc,phases     ] GC(9)   Evacuate Collection Set: 7,3ms
[3,534s][info][gc,phases     ] GC(9)   Post Evacuate Collection Set: 0,5ms
[3,534s][info][gc,phases     ] GC(9)   Other: 0,1ms
[3,534s][info][gc,heap       ] GC(9) Eden regions: 53@LAMBDA0(141)
[3,534s][info][gc,heap       ] GC(9) Survivor regions: 15@LAMBDA12(20)
[3,534s][info][gc,heap       ] GC(9) Old regions: 23@LAMBDA29
[3,534s][info][gc,heap       ] GC(9) Humongous regions: 0@LAMBDA0
[3,534s][info][gc,metaspace  ] GC(9) Metaspace: 58647K@LAMBDA58647K(307200K)
[3,534s][info][gc            ] GC(9) Pause Young (Concurrent Start) (Metadata GC Threshold) 88M@LAMBDA39M(258M) 8,056ms
[3,534s][info][gc,cpu        ] GC(9) User=0,06s Sys=0,00s Real=0,01s
[3,534s][info][gc            ] GC(10) Concurrent Cycle
[3,534s][info][gc,marking    ] GC(10) Concurrent Clear Claimed Marks
[3,534s][info][gc,marking    ] GC(10) Concurrent Clear Claimed Marks 0,120ms
[3,534s][info][gc,marking    ] GC(10) Concurrent Scan Root Regions
[3,537s][info][gc,marking    ] GC(10) Concurrent Scan Root Regions 3,396ms
[3,537s][info][gc,marking    ] GC(10) Concurrent Mark (3,537s)
[3,537s][info][gc,marking    ] GC(10) Concurrent Mark From Roots
[3,537s][info][gc,task       ] GC(10) Using 3 workers of 3 for marking
[3,551s][info][gc,marking    ] GC(10) Concurrent Mark From Roots 13,685ms
[3,551s][info][gc,marking    ] GC(10) Concurrent Preclean
[3,551s][info][gc,marking    ] GC(10) Concurrent Preclean 0,111ms
[3,551s][info][gc,marking    ] GC(10) Concurrent Mark (3,537s, 3,551s) 13,821ms
[3,551s][info][gc,start      ] GC(10) Pause Remark
[3,553s][info][gc,stringtable] GC(10) Cleaned string and symbol table, strings: 33455 processed, 61 removed, symbols: 177525 processed, 231 removed
[3,553s][info][gc            ] GC(10) Pause Remark 43M@LAMBDA43M(258M) 2,309ms
[3,553s][info][gc,cpu        ] GC(10) User=0,02s Sys=0,00s Real=0,00s
[3,553s][info][gc,marking    ] GC(10) Concurrent Rebuild Remembered Sets
[3,561s][info][gc,marking    ] GC(10) Concurrent Rebuild Remembered Sets 7,794ms
[3,561s][info][gc,start      ] GC(10) Pause Cleanup
[3,561s][info][gc            ] GC(10) Pause Cleanup 44M@LAMBDA44M(258M) 0,046ms
[3,561s][info][gc,cpu        ] GC(10) User=0,00s Sys=0,00s Real=0,00s
[3,561s][info][gc,marking    ] GC(10) Concurrent Cleanup for Next Mark
[3,562s][info][gc,marking    ] GC(10) Concurrent Cleanup for Next Mark 0,093ms
[3,562s][info][gc            ] GC(10) Concurrent Cycle 27,936ms</pre>
</div>
</div>
<div class="paragraph">
<p>Pour \xE9viter de polluer vos logs applicatives, vous pouvez r\xE9orienter ces logs dans un fichier \xE0 part en utilisant l&#8217;option <code>-Xlog:gc*:garbage-collection.log</code></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_m\xE9triques">M\xE9triques</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les param\xE9trages du garbage collector permettent soit de limiter les temps de pause de l&#8217;application (maximum pause-time) soit priviligier le d\xE9bit de l&#8217;application (throughput).</p>
</div>
<div class="sect2">
<h3 id="_maximum_pause_time">Maximum Pause-Time</h3>
<div class="paragraph">
<p>Quand le garbage collector doit analyser la m\xE9moire pour lib\xE9rer de l&#8217;espace, l&#8217;application est mise en pause (ce qui peut \xEAtre g\xE9nant pour des applications pseudo temps r\xE9el).
On parle de mode <code>stop-the-world</code></p>
</div>
<div class="paragraph">
<p>D\xE9finir un temps de pause maximal permet de fixer des limites au garbage collector.
On peut se poser la question de comment est calcul\xE9 ce temps ?</p>
</div>
<div class="paragraph">
<p>Une moyenne des temps d&#8217;ex\xE9cution est calcul\xE9e, mais elle pond\xE9r\xE9e pour que les pauses les plus r\xE9centes comptent le plus.
Au d\xE9marrage votre m\xE9moire est peu remplie et le pass\xE9 r\xE9cent est beaucoup plus int\xE9ressant.</p>
</div>
<div class="paragraph">
<p>L&#8217;objectif de temps de pause maximum est sp\xE9cifi\xE9 en millisecondes avec l&#8217;option <code>-XX: MaxGCPauseMillis=@LTnnn@GT</code>.
Si la moyenne plus la variation du temps de pause est sup\xE9rieure \xE0 l&#8217;objectif de temps de pause maximum, alors le GC consid\xE8re que l&#8217;objectif n&#8217;est pas atteint.</p>
</div>
<div class="paragraph">
<p>Le GC ajuste la taille de la <code>heap</code> ainsi que d&#8217;autres param\xE8tres pour tenter de maintenir cet objectif de pause maximale.</p>
</div>
<div class="paragraph">
<p>Si on r\xE9duit le temps allou\xE9 \xE0 la collecte, le garbage collector sera lanc\xE9 plus souvent, r\xE9duisant ainsi le d\xE9bit global (throughput) de l&#8217;application.</p>
</div>
</div>
<div class="sect2">
<h3 id="_d\xE9bit_de_lapplication_throughput">D\xE9bit de l&#8217;application (throughput)</h3>
<div class="paragraph">
<p>Un d\xE9bit est un ratio entre 2 valeurs.
Le d\xE9bit de l&#8217;application (throughput) est calcul\xE9 en divisant le temps pass\xE9 \xE0 collecter les d\xE9chets (Garbage collection overhead) et le temps pass\xE9 en dehors du GC (temps r\xE9serv\xE9 \xE0 l&#8217;application).</p>
</div>
<div class="paragraph">
<p>Comme pour le temps de pause maximal, vous pouvez d\xE9finir un objectif pour limiter le throughput global <code>-XX: GCTimeRatio=nnn</code>.</p>
</div>
<div class="paragraph">
<p>Par exemple, si ce ratio est d\xE9fini \xE0 <code>19</code>, le rapport entre le temps de garbage collection et le temps d&#8217;application est de <code>1 / (1 + 19)</code> soit 1/20eme soit 5% du temps total.</p>
</div>
<div class="paragraph">
<p>Si l&#8217;objectif de d\xE9bit n&#8217;est pas atteint, le garbage peut augmenter la taille de la <code>heap</code> pour que le temps pass\xE9 dans l&#8217;application puisse \xEAtre plus long.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_performances">Performances</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous pouvons voir que l&#8217;augmentation de la m\xE9moire peut dans les 2 cas am\xE9liorer le temps de pause maximal et le throughput.
Mais ce n&#8217;est pas magique car plus il y a de l&#8217;espace allouable plus le boulot de recyclage est important.</p>
</div>
<div class="sect2">
<h3 id="_taille_de_la_heap_espace_m\xE9moire_global">Taille de la heap (espace m\xE9moire global)</h3>
<div class="paragraph">
<p>Le facteur le plus important affectant les performances du GC est la m\xE9moire totale disponible (la <code>heap</code>).
\xC9tant donn\xE9 que les collectes se produisent lorsque les g\xE9n\xE9rations se remplissent, le d\xE9bit est inversement proportionnel \xE0 la quantit\xE9 de m\xE9moire disponible.</p>
</div>
<div class="paragraph">
<p>Les tailles de <code>heap</code> minimale et maximale que le garbage collector peut utiliser peuvent \xEAtre d\xE9finies \xE0 l&#8217;aide des param\xE8tres</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-Xms=@LTnnn@GT</code> taille minimale</p>
</li>
<li>
<p><code>-Xmx=@LTmmm@GT</code> taille maximale</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si la valeur minimale est inf\xE9rieure \xE0 la valeur maximale, tout l&#8217;espace r\xE9serv\xE9 n&#8217;est pas imm\xE9diatement valid\xE9 par la machine virtuelle.
Si vous regardez l&#8217;image plus haut d\xE9crivant la r\xE9partition g\xE9n\xE9rationnelle de la m\xE9moire, cet espace non valid\xE9 correspond aux zones virtuelles.</p>
</div>
<div class="paragraph">
<p>La machine virtuelle essaye de conserver une proportion d&#8217;espace libre d\xE9finie par les param\xE8tres</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-XX:MinHeapFreeRatio = @LTnnn@GT</code> (n = 40 par d\xE9faut) si le pourcentage d&#8217;espace libre dans une g\xE9n\xE9ration tombe en dessous de 40%, alors elle essaie d&#8217;utiliser plus d&#8217;espace pour maintenir 40% d&#8217;espace libre, jusqu&#8217;\xE0 la taille maximale autoris\xE9e de la g\xE9n\xE9ration.</p>
</li>
<li>
<p><code>-XX:MaxHeapFreeRatio = @LTnnn@GT</code> (n = 70 par d\xE9faut) si l&#8217;espace libre d\xE9passe 70%, alors la g\xE9n\xE9ration lib\xE8re de l&#8217;espace pour ne pas utiliser plus de 70%, sous r\xE9serve de la taille minimale de la g\xE9n\xE9ration.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Les recommandations faites par Oracle sur cette <code>heap</code> sont les suivantes</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Essayez d&#8217;allouer autant de m\xE9moire que possible \xE0 la machine virtuelle.
La taille par d\xE9faut est souvent trop petite.
Bien sur ceci est vrai si vous ne rencontrez pas de probl\xE8mes avec les pauses.</p>
</li>
<li>
<p>Si vous avez des <code>OutOfMemoryException</code> (plus d&#8217;espace) vous avez certainement une fuite m\xE9moire mais vous pouvez compenser en augmentant la taille m\xE9moire</p>
</li>
<li>
<p>Respecter les limites de la machine pour ne pas avoir de swap et \xE9viter les exceptions page faults</p>
</li>
<li>
<p>D\xE9finir -Xms et -Xmx avec la m\xEAme valeur est une bonne pratique et limite le travail de la JVM car elle n&#8217;aura pas besoin de re-dimensionner.
Mais quand vous le faites, la machine virtuelle est alors incapable de compenser si vous avez choisi des mauvaises valeurs.</p>
</li>
<li>
<p>En g\xE9n\xE9ral, il faut augmenter la m\xE9moire au fur et \xE0 mesure que vous augmentez le nombre de processeurs, car l&#8217;allocation peut \xEAtre effectu\xE9e en parall\xE8le.</p>
</li>
<li>
<p>Quand vous avez un espace m\xE9moire limit\xE9 (embarqu\xE9) vous pouvez minimiser la taille de la <code>heap</code> mais aussi jouer les ration <code>MinHeapFreeRatio</code> et <code>MaxHeapFreeRatio</code></p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_taille_de_la_jeune_g\xE9n\xE9ration">Taille de la jeune g\xE9n\xE9ration</h3>
<div class="paragraph">
<p>Apr\xE8s la m\xE9moire totale disponible, le deuxi\xE8me facteur le plus influent sur les performances, est la proportion de la <code>heap</code> consacr\xE9e \xE0 la jeune g\xE9n\xE9ration: plus cet espace est grand, moins les collectes mineures sont fr\xE9quentes.
Mais, si la taille maximale de la <code>heap</code> est limit\xE9e, la vieille g\xE9n\xE9ration sera moins grande et donc la fr\xE9quence des collectes majeures sera plus haute.</p>
</div>
<div class="paragraph">
<p>Le choix optimal d\xE9pend un peu de la nature de l&#8217;application.
Les param\xE8tres pour jouer sur cette taille sont les suivants</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-XX:NewRatio=@LTnnn@GT</code> si nnn=3 ce ratio permet de dire que la jeune g\xE9n\xE9ration utilisera 1 et la vieille g\xE9n\xE9ration 3 (soit 1/4 de la <code>heap</code>)</p>
</li>
<li>
<p><code>-XX:NewSize=@LTnnn@GT</code> taille minimale jeune g\xE9n\xE9ration</p>
</li>
<li>
<p><code>-XX:MaxNewSize=@LTnnn@GT</code> taille maximale jeune g\xE9n\xE9ration</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>La jeune generation est sous d\xE9coup\xE9e en une zone Eden et deux zones Survivor.
L&#8217;option</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-XX:SurvivorRatio=@LTnnn@GT</code> permet de r\xE9gler la taille des zones Survivor.
Si vous choisissez un ratio \xE0 8 la taille d&#8217;un Survivor sera 1/8 de la zone Eden et donc 1/10 de la jeune g\xE9n\xE9ration (nous avons 2 zones Survicor).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si ces espaces Survivor sont trop petits, le GC transfert plus vite les objets vers la vieille g\xE9n\xE9ration.
Si ces espaces sont trop grands, ils sont inutilement vides.</p>
</div>
<div class="paragraph">
<p>Les recommandations faites par Oracle sur cette <code>jeune g\xE9n\xE9ration</code> sont les suivantes</p>
</div>
<div class="ulist">
<ul>
<li>
<p>N&#8217;affinez cet espace que lorsque vous avez d\xE9finis une taille maximale de la <code>heap</code> (<code>-Xmx = @LTmmm@GT</code>)</p>
</li>
<li>
<p>Augmenter la taille de la jeune g\xE9n\xE9ration n\xE9cessite de r\xE9duire la taille de la vieille g\xE9n\xE9ration.
Faite attention que la zone vieille g\xE9n\xE9ration garde suffisamment d&#8217;espace pour contenir toutes les donn\xE9es de l&#8217;application \xE0 un instant t, plus une certaine marge de manoeuvre (10 \xE0 20% ou plus).</p>
</li>
<li>
<p>Augmentez la taille de la jeune g\xE9n\xE9ration \xE0 mesure que vous augmentez le nombre de processeurs, car l&#8217;allocation peut \xEAtre parall\xE9lis\xE9e.</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_serial_collector">Serial Collector</h2>
<div class="sectionbody">
<div class="paragraph">
<p>En fait nous avons d\xE9j\xE0 d\xE9crit son comportement plus haut avec le comportement des g\xE9n\xE9rations et les diff\xE9rentes options disponibles</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_serial_collector.png" alt="D\xE9coupage m\xE9moire Serial Garbage Collector">
</div>
</div>
<div class="paragraph">
<p>Pour l&#8217;activer utilisez l&#8217;option <code>-XX:+UseSerialGC</code></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_parallel_collector">Parallel Collector</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le fonctionnement est tr\xE8s similaire au <a href="java-memoire.html#_serial_collector">Serial Collector</a>.
La diff\xE9rence est que la phase de collecte est r\xE9partie sur plusieurs threads.
Sur une machine mono processeur, le collecteur parall\xE8le ne fonctionnera probablement pas aussi bien que le Serial Collector en raison de la surcharge requise pour l&#8217;ex\xE9cution parall\xE8le (par exemple, la synchronisation).</p>
</div>
<div class="paragraph">
<p>Mais plus vous aurez de processeur plus ce garbage collector deviendra avantageux.
L&#8217;ex\xE9cution en parall\xE8le, devrait raccourcir les temps de pauses des collectes.</p>
</div>
<div class="paragraph">
<p>Dans les collectes mineures, cette ex\xE9cution multi thread peut amener une certaine fragmentation lors de la copie dans la vieille g\xE9n\xE9ration.
R\xE9duire le nombre de threads de ramasse-miettes et augmenter la taille de l&#8217;ancienne g\xE9n\xE9ration r\xE9duira cet effet de fragmentation.</p>
</div>
<div class="paragraph">
<p>Vous pouvez ajuster le nombre de thread ou d&#8217;autres options avec les param\xE8tres suivants</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-XX:+UseParallelGC</code> activation du <code>Parallel Collector</code></p>
</li>
<li>
<p><code>-XX:ParallelGCThreads=@LTN@GT</code> nombre de thread utilis\xE9</p>
</li>
<li>
<p><code>-XX:YoungGenerationSizeIncrement=@LTN@GT</code> pourcentage utilis\xE9 quand la jeune g\xE9n\xE9ration doit \xEAtre augment\xE9e (par d\xE9faut 20%)</p>
</li>
<li>
<p><code>-XX:TenuredGenerationSizeIncrement=@LTN@GT</code> pourcentage utilis\xE9 quand la vielle g\xE9n\xE9ration doit \xEAtre augment\xE9e (par d\xE9faut 20%)</p>
</li>
<li>
<p><code>-XX:AdaptiveSizeDecrementScaleFactor=@LTN@GT</code> pourcentage utilis\xE9 quand une g\xE9n\xE9ration doit \xEAtre r\xE9duite (par d\xE9faut 5%)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Les g\xE9n\xE9rations sont organis\xE9es l\xE9g\xE9rement diff\xE9rement.
Par d\xE9faut la jeune g\xE9neration fait un tiers de la taille totale du tas.
Si vous n&#8217;avez pas surcharg\xE9 les param\xE8tres de la taille maximale ou minimale les valeurs par d\xE9faut sont les suivantes</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-Xms 1/64e de la m\xE9moire physique</code> taille minimale</p>
</li>
<li>
<p><code>-Xmx 1/4 de la m\xE9moire physique</code> taille maximale</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_parallel_collector.png" alt="D\xE9coupage m\xE9moire Parallel Garbage Collector">
</div>
</div>
<div class="paragraph">
<p>Une exception de type <code>OutOfMemoryError</code> sera lev\xE9e si plus de 98% du temps total est pass\xE9 dans la phase de collecte et que moins de 2% du tas est r\xE9cup\xE9r\xE9.
Si n\xE9cessaire, cette fonctionnalit\xE9 peut \xEAtre d\xE9sactiv\xE9e en ajoutant l&#8217;option <code>-XX: -UseGCOverheadLimit</code> \xE0 la ligne de commande mais ce n&#8217;est pas conseill\xE9.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_garbage_first_g1">Garbage-First (G1)</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code>Garbage-First (G1)</code> et <code>Concurrent Mark Sweep (CMS)</code> avant lui, vont r\xE9aliser une partie de leur travail en m\xEAme temps que l&#8217;application (mode concurrent, simultan\xE9).
Le <code>Serial collector</code> et le <code>Parallel collector</code> fonctionnent en mode <code>stop-the-world</code>, c&#8217;est \xE0 dire que l&#8217;ex\xE9cution de l&#8217;application est compl\xE8tement suspendue pendant la collecte.
En mode concurrent le d\xE9bit de l&#8217;application est forc\xE9ment impact\xE9 mais les temps de pause sont consid\xE9rablement r\xE9duit.</p>
</div>
<div class="paragraph">
<p>Le G1 a \xE9t\xE9 cr\xE9\xE9 pour les applications qui utilisent un grand espace m\xE9moire (plusieurs giga).
C&#8217;est tr\xE8s souvent le garbage utilis\xE9 par d\xE9faut par la JVM. S&#8217;il n&#8217;est pas activ\xE9 vous pouvez utiliser l&#8217;option <code>-XX:+UseG1GC</code>.</p>
</div>
<div class="sect2">
<h3 id="_fonctionnement_2">Fonctionnement</h3>
<div class="paragraph">
<p>Le G1 d\xE9coupe la heap en un ensemble de petites zones de m\xEAme taille.
A tout moment, chacune de ces r\xE9gions peut \xEAtre vide (gris clair), ou attribu\xE9e \xE0 une g\xE9n\xE9ration particuli\xE8re (eden, survivor, old).
Au fur et \xE0 mesure que les demandes de m\xE9moire arrivent, le gestionnaire de m\xE9moire distribue des r\xE9gions libres.
Comme pour les autres GC, les efforts de r\xE9cup\xE9ration d&#8217;espace se concentrent sur la jeune g\xE9n\xE9ration l\xE0 o\xF9 il est le plus efficace de le faire, avec parfois bien \xE9videmment des r\xE9cup\xE9rations d&#8217;espace dans les anciennes g\xE9n\xE9rations.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_g1_collector.png" alt="D\xE9coupage m\xE9moire Garbage First Collector">
</div>
</div>
<div class="paragraph">
<p>Lors de la phase de marquage, le G1 va identifi\xE9 les zones qui contiennent le moins d&#8217;objets vivants et les traiter en premier (d&#8217;o\xF9 son nom Garbage First!).
A chaque fois qu&#8217;il va nettoyer une zone il va la vider et recopier les objets restants dans une nouvelle zone disponible.
Cette copie peut \xEAtre une copie</p>
</div>
<div class="ulist">
<ul>
<li>
<p>de Eden \xE0 Survivor,</p>
</li>
<li>
<p>de Survivor \xE0 une zone ancienne g\xE9n\xE9ration</p>
</li>
<li>
<p>d&#8217;une zone ancienne g\xE9n\xE9ration \xE0 une nouvelle zone ancienne g\xE9n\xE9ration</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Ceci permet de limiter la fragmentation et de recompacter les donn\xE9es en m\xE9moire.
De plus il ne traite pas toute la m\xE9moire d&#8217;un coup, il va proc\xE9der en mode incr\xE9mental pour respecter ses objectifs de temps de pause quelque soit la taille de la <code>heap</code>.</p>
</div>
<div class="paragraph">
<p>G1 alterne entre deux phases.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>une phase avec des collectes des jeunes g\xE9n\xE9rations qui remplissent progressivement les zones d&#8217;ancienne g\xE9n\xE9ration.</p>
</li>
<li>
<p>une phase de r\xE9cup\xE9ration d&#8217;espace o\xF9 le G1 r\xE9cup\xE8re progressivement l&#8217;espace de l&#8217;ancienne g\xE9n\xE9ration, en plus de g\xE9rer la jeune g\xE9n\xE9ration.</p>
</li>
<li>
<p>ensuite le cycle red\xE9marre en ne traitant que des zones de type Eden</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si la taille d&#8217;un objet est sup\xE9rieure \xE0 50% d&#8217;une zone, il est consid\xE9r\xE9 comme gigantesque et allou\xE9 directement dans une ou plusieurs zones continues de l&#8217;ancienne g\xE9n\xE9ration en fonction de la taille.
Ces objets ne passent pas par les jeunes g\xE9n\xE9rations pour limiter les copies.</p>
</div>
</div>
<div class="sect2">
<h3 id="_principales_options">Principales options</h3>
<div class="paragraph">
<p>Voici les principales options du G1 avec leur valeur par d\xE9faut.
Quand la valeur est <code>ergonomics</code>, la JVM va ajuster la valeur au cours de l&#8217;ex\xE9cution de l&#8217;application en fonction de son comportement.
Si vous surcharg\xE9 cette valeur vous perdrez ce param\xE8trage dynamique</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-XX:MaxGCPauseMillis=200</code> objectif pour le temps de pause</p>
</li>
<li>
<p><code>-XX:GCPauseTimeInterval=@LTergonomics@GT</code> objectif pour l&#8217;intervalle de temps de pause maximal.</p>
</li>
<li>
<p><code>-XX:ParallelGCThreads=@LTergonomics@GT</code> nombre maximum de threads utilis\xE9s pour le parall\xE9lisme pendant les pauses de r\xE9cup\xE9ration.</p>
</li>
<li>
<p><code>-XX:ConcGCThreads=@LTergonomics@GT</code> nombre maximum de threads utilis\xE9s pour le travail en cours (normalement 1/4 de <code>ParallelGCThreads</code>)</p>
</li>
<li>
<p><code>-XX:+G1UseAdaptiveIHOP -XX:InitiatingHeapOccupancyPercent=45</code> IHOP (Initiating Heap Occupancy Percent) est le seuil \xE0 partir duquel un marquage est d\xE9clench\xE9 et il est d\xE9fini comme un pourcentage de la taille de l&#8217;ancienne g\xE9n\xE9ration.
Ces param\xE9tres indiquent que la d\xE9termination adaptative de cette valeur est activ\xE9e, et que pour les premiers cycles de collecte, G1 utilisera un seuile fix\xE9 \xE0 45%</p>
</li>
<li>
<p><code>-XX:G1HeapRegionSize=@LTergonomics@GT</code> taille des r\xE9gions.
Cette taille d\xE9pend des tailles initiales et maximales de la heap.</p>
</li>
<li>
<p><code>-XX:G1NewSizePercent=5 -XX:G1MaxNewSizePercent=60</code> taille de la jeune g\xE9n\xE9ration qui varie entre ces deux valeurs (qui sont un pourcentage de la heap en cours d&#8217;utilisation)</p>
</li>
<li>
<p><code>-XX:G1HeapWastePercent=5</code> quantit\xE9 acceptable d&#8217;espace non r\xE9cup\xE9r\xE9 lors d&#8217;une collecte.</p>
</li>
<li>
<p><code>-XX:G1MixedGCCountTarget=8</code> longueur attendue de la phase de r\xE9cup\xE9ration d&#8217;espace</p>
</li>
<li>
<p><code>-XX:G1MixedGCLiveThresholdPercent=85</code> les r\xE9gions de l&#8217;ancienne g\xE9n\xE9ration avec plus de 85% d&#8217;objets encore vivants ne sont pas collect\xE9s dans cette phase</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_am\xE9liorer_les_performances_du_g1">Am\xE9liorer les performances du G1</h3>
<div class="paragraph">
<p>Nous allons nous attarder sur le G1 qui est le GC par d\xE9faut.
Dans cette section je me base sur les <a href="https://docs.oracle.com/en/java/javase/11/gctuning/garbage-first-garbage-collector-tuning.html">recommandations</a> faites par Oracle.</p>
</div>
<div class="paragraph">
<p>G1 est con\xE7u pour \xEAtre efficace sans qu&#8217;il soit n\xE9cessaire de sp\xE9cifier des options suppl\xE9mentaires.
Cependant, il existe des cas o\xF9 les configurations par d\xE9faut peuvent \xEAtre am\xE9lior\xE9es.
Pour constater les probl\xE8mes activer les logs comme indiqu\xE9 dans le chapitre d\xE9di\xE9 plus haut.</p>
</div>
<div class="sect3">
<h4 id="_full_gc">Full GC</h4>
<div class="paragraph">
<p>Une collecte majeure (Full GC) prend souvent beaucoup de temps.
Elles sont provoqu\xE9es par une occupation de la <code>heap</code> trop \xE9lev\xE9e.
Si vous avez trop de full GC, les mots <code>Pause Full (Allocation Failure)</code> sont visibles dans les logs.</p>
</div>
<div class="paragraph">
<p>Les full GC se produisent quand l&#8217;application alloue trop d&#8217;objets qui ne peuvent pas \xEAtre r\xE9cup\xE9r\xE9s assez rapidement.
Souvent, la phase de marquage n&#8217;a pas le temps de se terminer \xE0 temps pour d\xE9marrer une phase de r\xE9cup\xE9ration d&#8217;espace.
La probabilit\xE9 de se heurter \xE0 un Full GC peut \xEAtre aggrav\xE9e par l&#8217;attribution de nombreux objets gigantesques.
En raison de la fa\xE7on dont ces objets sont allou\xE9s dans G1, ils peuvent prendre beaucoup plus de m\xE9moire que pr\xE9vu.
Pour laisser plus de temps \xE0 la phase de marquage, vous pouvez diminuer le taux d&#8217;allocation dans l&#8217;ancienne g\xE9n\xE9ration ou vous pouvez accorder plus de temps au marquage simultan\xE9.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>pour voir le nombre de r\xE9gions occup\xE9es par des objets gigantesques dans la <code>heap</code>, augmentez le niveau de log <code>-Xlog:gc=debug</code>.
Les lignes <code>Humongous regions: X&#8594;Y</code> vous donne la quantit\xE9 de r\xE9gions occup\xE9es par des objets gigantesques.
Si ce nombre est \xE9lev\xE9 par rapport au nombre d&#8217;anciennes r\xE9gions, la meilleure option est d&#8217;essayer de r\xE9duire ce nombre d&#8217;objets, en augmentant la taille des r\xE9gions \xE0 l&#8217;aide de l&#8217;option <code>-XX: G1HeapRegionSize</code>.
Pour conna\xEEtre La taille de r\xE9gion actuelle, reportez vous au au d\xE9but des logs</p>
</li>
<li>
<p>augmenter la taille du tas Java permet d&#8217;augmenter le temps accord\xE9 au marquage</p>
</li>
<li>
<p>augmenter le nombre de threads de marquage simultan\xE9s <code>-XX: ConcGCThread</code> est aussi une option.</p>
</li>
<li>
<p>une autre option est de forcer G1 \xE0 commencer le marquage plus t\xF4t.
Le seuil IHOP (Initiating Heap Occupancy Percent) est d\xE9termin\xE9 automatiquement en fonction du comportement ant\xE9rieur de l&#8217;application.
Si le comportement de l&#8217;application change, ces pr\xE9dictions peuvent \xEAtre erron\xE9es.
Vous pouvez d\xE9sactiver le calcul adaptatif de l&#8217;IHOP en le d\xE9finissant manuellement \xE0 l&#8217;aide de -XX: -G1UseAdaptiveIHOP et-XX: InitiatingHeapOccupancyPercent.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_utilisation_temps_syst\xE8me_incoh\xE9rent">Utilisation temps syst\xE8me incoh\xE9rent</h4>
<div class="paragraph">
<p>Chaque pause du GC (<code>stop-the-world</code>), peut se retrouver dans les logs.
Vous trouverez une ligne similaire \xE0 celle ci</p>
</div>
<div class="listingblock">
<div class="content">
<pre>[3,553s][info][gc,cpu        ] GC(10) User=0,19s Sys=0,00s Real=0,01s</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>le temps utilisateur est le temps pass\xE9 dans le code dans la VM.</p>
</li>
<li>
<p>le temps syst\xE8me est le temps pass\xE9 dans le syst\xE8me d&#8217;exploitation.</p>
</li>
<li>
<p>le temps r\xE9el est le temps absolu pass\xE9 pendant la pause</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Il peut y avoir plusieurs causes si le temps syst\xE8me est relativement \xE9lev\xE9</p>
</div>
<div class="ulist">
<ul>
<li>
<p>La VM qui alloue ou restitue de la m\xE9moire \xE0 partir de la m\xE9moire du syst\xE8me d&#8217;exploitation peut entra\xEEner des retards inutiles.
Faites en sorte de fixer le dimensionnement au d\xE9marrage de la VM en utilisant les options <code>-Xms</code> et <code>-Xmx</code> et utilisez l&#8217;option <code>-XX:+AlwaysPreTouch</code> pour allouer toute la m\xE9moire physique utilis\xE9 par la <code>heap</code> \xE0 l\u2019initialisation.</p>
</li>
<li>
<p>Sous Linux, <a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html">Transparent Huge Pages (THP)</a> peut bloquer les processus al\xE9atoirement.
Comme la VM alloue et conserve beaucoup de m\xE9moire, il existe un risque que le processus de la VM se bloque pendant une longue p\xE9riode.
Reportez-vous \xE0 la documentation de votre syst\xE8me d&#8217;exploitation pour savoir comment d\xE9sactiver cette fonctionnalit\xE9.</p>
</li>
<li>
<p>L&#8217;\xE9criture des logs peut aussi \xEAtre un souci si des t\xE2ches bloquent les I/0</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si le temps r\xE9el est d\xE9mesur\xE9ment grand, cela peut indiquer que la VM n&#8217;a pas eu assez de temps CPU pour faire son travail (peut arriver sur un machine surcharg\xE9e)</p>
</div>
</div>
<div class="sect3">
<h4 id="_probl\xE8me_sur_les_collectes_mineures">Probl\xE8me sur les collectes mineures</h4>
<div class="paragraph">
<p>Les collectes mineures sur les jeunes g\xE9n\xE9rations doivent prendre un temps proportionnel \xE0 la taille de ces g\xE9n\xE9rations, ou plus pr\xE9cis\xE9ment au nombre d&#8217;objets vivants qui doivent \xEAtre copi\xE9s ans une zone Survivor.</p>
</div>
<div class="paragraph">
<p>Si cette copie est trop longue vous pouvez diminuez la taille minimale de la jeune g\xE9n\xE9ration avec le param\xE8tre <code>-XX:G1NewSizePercent</code>.
Vous aurez normalement des pauses potentiellement plus courtes.</p>
</div>
<div class="paragraph">
<p>Si les performances de l&#8217;application, et en particulier la quantit\xE9 d&#8217;objets survivant \xE0 une collecte, changent soudainement, vous pouvez avoir des pics dans les temps de pause du GC. Il peut \xEAtre utile de r\xE9duire la taille maximale de la jeune g\xE9n\xE9ration en utilisant <code>-XX:G1MaxNewSizePercent</code> afin de limiter le nombre d&#8217;objets \xE0 traiter pendant une pause.</p>
</div>
</div>
<div class="sect3">
<h4 id="_probl\xE8me_sur_les_collectes_mixtes">Probl\xE8me sur les collectes mixtes</h4>
<div class="paragraph">
<p>Les collectes mixtes sont faites durant la phase 2 du G1 quand les anciennes et les jeunes g\xE9n\xE9rations sont trait\xE9es en parall\xE8le.
Elles permettent au final de r\xE9cup\xE9rer de l&#8217;espace dans l&#8217;ancienne g\xE9n\xE9ration.</p>
</div>
<div class="paragraph">
<p>Vous pouvez obtenir des informations sur les temps d&#8217;\xE9vacuation des zones (jeunes ou vieilles) en activant le mode verbose lors de la configuration des logs.
Nous avons vu dans le chapitre pr\xE9c\xE9dent comment am\xE9liorer les choses pour les jeunes g\xE9n\xE9rations.
Pour r\xE9duire la contribution des zones de l&#8217;ancienne g\xE9n\xE9ration au temps de pause, G1 propose trois options:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>augmenter <code>-XX:G1MixedGCCountTarget</code> (nombre de collectes mixtes lanc\xE9es apr\xE8s un cycle de marquage) pour r\xE9partir la r\xE9cup\xE9ration des r\xE9gions de l&#8217;ancienne g\xE9n\xE9ration sur plus de collectes.</p>
</li>
<li>
<p>jouer sur <code>-XX:G1MixedGCLiveThresholdPercent</code> (limite sup\xE9rieure sur le nombre d&#8217;anciennes r\xE9gions \xE0 collecter pendant une collecte mixte).
Dans de nombreux cas, les r\xE9gions tr\xE8s occup\xE9es prennent beaucoup de temps \xE0 nettoyer.</p>
</li>
<li>
<p>arr\xEAter plus t\xF4t la r\xE9cup\xE9ration de l&#8217;espace sur les anciennes g\xE9n\xE9rations en augmentant <code>-XX:G1HeapWastePercent</code> pour que G1 r\xE9cup\xE8re moins de r\xE9gions surcharg\xE9es.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Ces deux derni\xE8rs param\xE8tres vont diminuer la quantit\xE9 de r\xE9gions candidates aux collectes.
Il ne faut pas aller trop loin pour que G1 puisse \xEAtre en mesure de r\xE9cup\xE9rer suffisamment d&#8217;espace dans l&#8217;ancienne g\xE9n\xE9ration.</p>
</div>
</div>
<div class="sect3">
<h4 id="_r\xE9f\xE9rence_interr\xE9gionale">R\xE9f\xE9rence interr\xE9gionale</h4>
<div class="paragraph">
<p>Une r\xE9f\xE9rence interr\xE9gionale est une r\xE9f\xE9rence entre 2 objets qui sont dans 2 r\xE9gions diff\xE9rentes.
Chaque r\xE9gion poss\xE8de un sous ensemble de ces r\xE9f\xE9rences (on parle de remembered set RS) qui sera mis \xE0 jour lors du d\xE9placement du contenu vers une autre r\xE9gion.
Cette mise \xE0 jour se fait en simultan\xE9.</p>
</div>
<div class="paragraph">
<p>Pour des raisons de performance, G1 ne met met pas imm\xE9diatement \xE0 jour l&#8217;ensemble m\xE9moris\xE9 d&#8217;une r\xE9gion lorsque l&#8217;application cr\xE9e une nouvelle r\xE9f\xE9rence interr\xE9gionale entre deux objets.
Ces demandes de mise \xE0 jour sont retard\xE9es et regroup\xE9es pour plus d&#8217;efficacit\xE9.</p>
</div>
<div class="paragraph">
<p>L&#8217;ajustement de la taille des r\xE9gions \xE0 l&#8217;aide de l&#8217;option <code>-XX:G1HeapRegionSize</code> affecte le nombre de r\xE9f\xE9rences interr\xE9gionales ainsi que la taille de l&#8217;ensemble m\xE9moris\xE9.
La gestion des ensembles m\xE9moris\xE9s pour les r\xE9gions peut \xEAtre une partie importante du travail du GC, ce qui a donc un effet direct sur le temps de pause maximal r\xE9alisable.
Les grandes r\xE9gions ont tendance \xE0 avoir moins de r\xE9f\xE9rences interr\xE9gionales, ce qui limite le temps consacr\xE9 \xE0 leur traitement, m\xEAme si en m\xEAme temps, des r\xE9gions plus grandes peuvent signifier plus d&#8217;objets vivants \xE0 \xE9vacuer, augmentant le temps pour les autres phases.</p>
</div>
<div class="paragraph">
<p>G1 essaie de planifier le traitement simultan\xE9 des mises \xE0 jour de l&#8217;ensemble m\xE9moris\xE9 afin que la phase de mise \xE0 jour RS respecte le pourcentage <code>-XX:G1RSetUpdatingPauseTimePercent</code> du temps de pause maximal autoris\xE9.
En diminuant cette valeur, G1 effectuera plus de mises \xE0 jour de l&#8217;ensemble m\xE9moris\xE9 en simultan\xE9.</p>
</div>
<div class="paragraph">
<p>Des temps de mise \xE0 jour de l&#8217;ensemble m\xE9moris\xE9 \xE9lev\xE9s peuvent \xEAtre caus\xE9s par une optimisation qui tente de r\xE9duire le travail de mise \xE0 jour simultan\xE9e des ensembles m\xE9moris\xE9s en les regroupant.
Si trop de mise \xE0 jour sont report\xE9es et qu&#8217;une collecte se produit, cette phase va \xEAtre allourdie car on a besoin de conna\xEEtre ces r\xE9f\xE9rences.
Utilisez <code>-XX:-ReduceInitialCardMarks</code> pour d\xE9sactiver ce comportement.</p>
</div>
<div class="paragraph">
<p>G1 essaie de compresser les r\xE9f\xE9rences m\xE9moris\xE9es pour maintenir une taille de stockage faible.
Plus l&#8217;ensemble m\xE9moris\xE9 est compact\xE9 en m\xE9moire, plus il faut de temps pour r\xE9cup\xE9rer les valeurs stock\xE9es.
Activez l&#8217;option <code>-XX:G1SummarizeRSetStatsPeriod</code> en combinaison avec <code>gc+remset=trace</code> au niveau des logs pour voir si vous avez ce probl\xE8me.
Vous devez avoir une section <code>Before GC Summary</code> avec une ligne <code>Did @LTX@GT coarsenings</code>.
Si la valeur de X est \xE9lev\xE9e, vous pouvez \xEAtre dans ce cas.
Augmenter significativement <code>-XX:G1RSetRegionEntries</code> peut diminuer ce ph\xE9nom\xE8ne.
Une fois r\xE9solu, revenez \xE0 un niveau de log normal, car la collecte de ces donn\xE9es peut prendre un temps consid\xE9rable.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_z_garbage_collector">Z Garbage Collector</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://wiki.openjdk.java.net/display/zgc">Garbage Collector Z (ZGC)</a> est un garbage collector \xE9volutif \xE0 faible latence.
Il est le successeur programm\xE9 de G1 (JDK15).
ZGC effectue tous les travaux co\xFBteux en simultan\xE9, en limitant au maximum les pauses (arr\xEAt ex\xE9cution des threads d&#8217;application)</p>
</div>
<div class="paragraph">
<p>Pour l&#8217;activer vous devez utiliser les param\xE8tres <code>-XX:+UseZGC -XX:+UnlockExperimentalVMOptions</code></p>
</div>
<div class="paragraph">
<p>Les principaux objectifs de ZGC sont:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>ne pas avoir de temps de pause du GC sup\xE9rieur \xE0 10 ms.</p>
</li>
<li>
<p>\xEAtre capable de g\xE9rer une <code>heap</code> allant de quelques kilooctets \xE0 une m\xE9moire de plusieurs t\xE9raoctets sans augmenter les temps de pause</p>
</li>
<li>
<p>les petits temps de pause sont limit\xE9s \xE0 l&#8217;analyse des donn\xE9es racines (voir description plus loin)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>ZGC ex\xE9cute les les t\xE2ches suivantes simultan\xE9ment</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Marquage</p>
</li>
<li>
<p>Traitement des r\xE9f\xE9rences</p>
</li>
<li>
<p>S\xE9lection du jeu de relocalisation</p>
</li>
<li>
<p>Relocalisation / Compactage</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Deux nouveaux concepts les pointeurs color\xE9s (<code>colored pointers</code>) et les barri\xE8res de charge (<code>load barriers</code>) sont introduits pour pouvoir ex\xE9cuter ces t\xE2ches en parall\xE8le de l&#8217;application.
La t\xE2che n&#8217;est pas simple.
Le GC doit copier des objets vers d&#8217;autres emplacements m\xE9moire en m\xEAme temps qu&#8217;un autre thread pourrait lire ou \xE9crire dans l&#8217;ancien objet.
Si la copie r\xE9ussit, il peut avoir encore de nombreuses r\xE9f\xE9rences arbitraires quelque part dans la <code>heap</code> vers l&#8217;ancienne adresse d&#8217;objet qui doivent \xEAtre mises \xE0 jour vers la nouvelle adresse.</p>
</div>
<div class="sect2">
<h3 id="_d\xE9coupage_de_la_m\xE9moire">D\xE9coupage de la m\xE9moire</h3>
<div class="paragraph">
<p>G1 s\xE9pare la <code>heap</code> en diff\xE9rentes r\xE9gions de taille \xE9gale (Eden, Survivor, Old).
Un objet ne s&#8217;\xE9tend g\xE9n\xE9ralement pas sur plusieurs r\xE9gions, \xE0 l&#8217;exception des grands objets qui ne rentrent pas dans une seule r\xE9gion.</p>
</div>
<div class="paragraph">
<p>ZGC reprend ce principe mais les r\xE9gions sont appel\xE9es des pages.
Elles ne se basent pas sur des hypoth\xE8ses g\xE9n\xE9rationnelles mais sur la taille des objets.
Les pages peuvent avoir des tailles diff\xE9rentes (mais toujours un multiple de 2 Mo) :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>petite (taille 2 Mo) qui contient les petits objets (jusqu&#8217;\xE0 256 Ko)</p>
</li>
<li>
<p>moyenne (taille 32 Mo) qui contient les objets allant jusqu&#8217;\xE0 4 Mo</p>
</li>
<li>
<p>grande (taille @GT 4Mo, multiple de 2 Mo) qui contient les objets de plus de 4 Mo.
Une grande page ne peut stocker qu&#8217;un seul objet, contrairement aux autres (une grande page peut au final \xEAtre plus petite qu&#8217;une page moyenne).</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_zgc_collector.png" alt="D\xE9coupage m\xE9moire ZGC">
</div>
</div>
<div class="paragraph">
<p>Quand ZGC essaie de recycler une page, il va recopier les objets toujours en vie dans une nouvelle page.
Ce m\xE9canisme \xE9vite d&#8217;avoir une trop grosse fragmentation de la m\xE9moire.</p>
</div>
</div>
<div class="sect2">
<h3 id="_coloration_de_r\xE9f\xE9rence_colored_pointer">Coloration de r\xE9f\xE9rence (colored pointer)</h3>
<div class="paragraph">
<p>ZGC a une phase appel\xE9e marquage, o\xF9 le principe est toujours le m\xEAme, identifier les objets qui ne sont plus utilis\xE9s (les objets n&#8217;ayant plus de r\xE9f\xE9rence).</p>
</div>
<div class="paragraph">
<p>G1 stocke ces r\xE9f\xE9rences dans chaque zone dans un ensemble appel\xE9 remembered set (RS).
Mais le maintien des donn\xE9es \xE0 jour dans cet ensemble est tr\xE8s co\xFBteux en temps et n\xE9cessite souvent des pauses.</p>
</div>
<div class="paragraph">
<p>ZGC utilise une approche diff\xE9rente en stockant l&#8217;\xE9tat dans un bit de r\xE9f\xE9rence : on parle de coloration de r\xE9f\xE9rence (<code>colored pointer</code>).
Une partie de la m\xE9moire utilis\xE9e pour stocker l&#8217;objet est utilis\xE9e pour stocker l&#8217;\xE9tat.
Voici un bloc m\xE9moire de 64 bits (ZGC n&#8217;est pas utilisable sur des architectures 32 bits).
Le mat\xE9riel actuel limite une r\xE9f\xE9rence \xE0 48 bits pour les <a href="https://en.wikipedia.org/wiki/X86-64#Virtual_address_space_details">adresses de m\xE9moire virtuelle</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_zgc_colored-pointers.png" alt="colored pointer ZGC">
</div>
<div class="title">Figure 1. <a href="http://hg.openjdk.java.net/zgc/zgc/file/59c07aef65ac/src/hotspot/os_cpu/linux_x86/zGlobals_linux_x86.hpp#l59">source</a></div>
</div>
<div class="paragraph">
<p>ZGC r\xE9serve les 42 premiers bits pour l&#8217;adresse r\xE9elle de l&#8217;objet.
Les bits restants sont utilis\xE9s pour sp\xE9cifier des metadata :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>0001 = <code>Marked0</code>  (utilis\xE9 pour marquer les objets accessibles)</p>
</li>
<li>
<p>0010 = <code>Marked1</code>  (utilis\xE9 pour marquer les objets accessibles)</p>
</li>
<li>
<p>0100 = <code>Remapped</code>  (la r\xE9f\xE9rence est \xE0 jour et pointe vers l&#8217;emplacement actuel de l&#8217;objet)</p>
</li>
<li>
<p>1000 = <code>Finalizable</code> (objet est uniquement accessible via un finaliseur)</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_barri\xE8res_gc_gc_barrier">Barri\xE8res GC (GC barrier)</h3>
<div class="paragraph">
<p>Quand on fait de la programmation parall\xE8le, une <a href="https://en.wikipedia.org/wiki/Barrier_(computer_science)">barri\xE8re</a> signifie que tout thread ou processus doit s&#8217;arr\xEAter \xE0 ce stade et ne peut pas continuer tant que tous les autres threads ou processus n&#8217;ont pas atteint cette barri\xE8re (c&#8217;est un type de m\xE9thode de synchronisation).</p>
</div>
<div class="paragraph">
<p>Une <a href="https://en.wikipedia.org/wiki/Memory_barrier">barri\xE8re de m\xE9moire</a> est un type d&#8217;instruction qui oblige un CPU ou un compilateur \xE0 appliquer une contrainte sur les op\xE9rations de m\xE9moire \xE9mises avant et apr\xE8s l&#8217;instruction de barri\xE8re (lecture ou \xE9criture).</p>
</div>
<div class="paragraph">
<p>Cela signifie g\xE9n\xE9ralement que les op\xE9rations \xE9mises avant la barri\xE8re sont garanties d&#8217;\xEAtre ex\xE9cut\xE9es avant les op\xE9rations \xE9mises apr\xE8s la barri\xE8re.</p>
</div>
<div class="paragraph">
<p>ZGC s&#8217;appuie sur les barri\xE8res de lecture (<code>load barrier</code>) pour la lecture d&#8217;une r\xE9f\xE9rence dans la <code>heap</code>.
En gros quand l&#8217;application a besoin d&#8217;acc\xE9der \xE0 un objet (chargement d&#8217;une r\xE9f\xE9rence), elle d\xE9clenche une barri\xE8re de lecture, qui suit les \xE9tapes suivantes pour renvoyer la r\xE9f\xE9rence correcte:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>V\xE9rifie si le bit de r\xE9f\xE9rence a la valeur <code>Remapped</code>.
Si tel est le cas, cela signifie que la r\xE9f\xE9rence est \xE0 jour, nous pouvons donc la renvoyer en toute s\xE9curit\xE9.</p>
</li>
<li>
<p>Si on est dans la phase de d\xE9placement des objets (<code>relocation</code>), l&#8217;ensemble contenant les donn\xE9es \xE0 d\xE9placer est analys\xE9.
Si l&#8217;objet n&#8217;est pas concern\xE9 le bit de r\xE9f\xE9rence prend la valeur <code>Remapped</code> (pour ne pas refaire ce contr\xF4le) et la r\xE9f\xE9rence est renvoy\xE9e</p>
</li>
<li>
<p>Nous savons ici que l&#8217;objet auquel nous voulons acc\xE9der a \xE9t\xE9 la cible d&#8217;un d\xE9placement.
La seule question est de savoir si ce dernier est effectu\xE9 ou non ?
Si l&#8217;objet n&#8217;a pas \xE9t\xE9 d\xE9plac\xE9, la barri\xE8re de lecture va le d\xE9placer et mettre \xE0 jour une table de transfert pour stocker la nouvelle adresse de l&#8217;objet d\xE9plac\xE9.
Apr\xE8s cela, nous passons \xE0 l&#8217;\xE9tape suivante.</p>
</li>
<li>
<p>Nous savons maintenant que l&#8217;objet a \xE9t\xE9 d\xE9plac\xE9.
Nous mettons \xE0 jour cette r\xE9f\xE9rence au nouvel emplacement de l&#8217;objet en fonction de la valeur dans la table de transfert, le bit de r\xE9f\xE9rence prend la valeur <code>Remapped</code> et la r\xE9f\xE9rence est retourn\xE9e</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Avec ce m\xE9canisme, nous sommes assur\xE9s que chaque fois que nous essayons d&#8217;acc\xE9der \xE0 un objet, nous obtenons la r\xE9f\xE9rence la plus r\xE9cente.
L&#8217;op\xE9ration peut diminuer les performances lorsqu&#8217;on essaie d&#8217;acc\xE9der la premi\xE8re fois \xE0 un objet d\xE9plac\xE9.
Mais c&#8217;est le prix \xE0 payer pour pouvoir r\xE9aliser les op\xE9rations de d\xE9placement sans stopper l&#8217;ex\xE9cution de l&#8217;application.</p>
</div>
</div>
<div class="sect2">
<h3 id="_cycle_de_vie">Cycle de vie</h3>
<div class="paragraph">
<p>Un cycle GC est d\xE9coup\xE9 en 2 phases majeures : le marquage et la relocalisation (d\xE9placement des objets encore en vie).
Ces phases sont en fait elle m\xEAme d\xE9coup\xE9es en plusieurs \xE9tapes d\xE9crites dans les <a href="http://hg.openjdk.java.net/zgc/zgc/file/59c07aef65ac/src/hotspot/share/gc/z/zDriver.cpp#l301">sources du ZGC</a>.
M\xEAme si la majorit\xE9 des \xE9tapes sont faites en parall\xE8le de l&#8217;application, 3 \xE9tapes n\xE9cessitent encore des pauses</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_zgc_clifecycle.png" alt="ZGC lifecycle">
</div>
</div>
<div class="paragraph">
<p>Un cycle GC commence par la phase de marquage, qui marque tous les objets accessibles.
\xC0 la fin de cette phase, nous savons quels objets sont encore vivants et lesquels sont des d\xE9chets.
ZGC stocke ces informations si l&#8217;objet \xE0 l&#8217;index donn\xE9 est fortement accessible et / ou final (pour les objets avec une m\xE9thode finalize), dans un ensemble propre \xE0 chaque page.</p>
</div>
<div class="paragraph">
<p>Pendant la phase de marquage, la barri\xE8re de lecture dans les threads d&#8217;application pousse les r\xE9f\xE9rences non marqu\xE9es dans un buffer local au thread.
D\xE8s que ce buffer est plein, les threads GC se l&#8217;approprient et parcourent de mani\xE8re r\xE9cursive tous les objets accessibles.
Le marquage dans un thread d&#8217;application pousse simplement la r\xE9f\xE9rence dans un buffer, les threads GC sont responsables de parcourir le graphe des objets et de mettre \xE0 jour les informations.</p>
</div>
<div class="paragraph">
<p>Une fois le marquage fini, ZGC d\xE9termine quelles pages vont \xEAtre \xE9vacu\xE9es en fonction de certains crit\xE8res (comme par exemple, les pages contenant le plus de d\xE9chets).
Ces pages d\xE9finissent l&#8217;ensemble de relocalisation.
Un objet est d\xE9plac\xE9 par un thread GC ou un thread d&#8217;application (voir le chapitre pr\xE9c\xE9dent).
ZGC cr\xE9e une table de transfert pour chaque page concern\xE9e par une relocalisation.
Cette table contient la nouvelle adresse de chaque objet d\xE9plac\xE9.</p>
</div>
<div class="paragraph">
<p>Les threads GC parcourent parcourent les objets de l&#8217;ensemble de relocalisation et d\xE9placent tous les objets qui n&#8217;ont pas encore \xE9t\xE9 d\xE9plac\xE9s.
Si un thread d&#8217;application et un thread GC essaient de d\xE9placer le m\xEAme objet en m\xEAme temps, le premier thread \xE0 d\xE9placer l&#8217;objet l&#8217;emporte.</p>
</div>
<div class="paragraph">
<p>Il existe 2 bits de marquage (Marked0 et Marked1).
Apr\xE8s la phase de relocalisation, il se peut qu&#8217;il y ait encore des r\xE9f\xE9rences dans l&#8217;ensemble de relocalisation qui n&#8217;ont pas \xE9t\xE9 remapp\xE9es et qui ont donc toujours le bit du dernier cycle de marquage d\xE9fini.
Chaque cycle alterne entre ces 2 bits.
Si la nouvelle phase de marquage utilise le m\xEAme bit de marquage, la barri\xE8re de lecture d\xE9tecte cette r\xE9f\xE9rence comme d\xE9j\xE0 marqu\xE9e</p>
</div>
</div>
<div class="sect2">
<h3 id="_principales_options_2">Principales options</h3>
<div class="paragraph">
<p>Voici les options principales</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-XX:ConcGCThreads=@LTnumber@GT</code> d\xE9finit la quantit\xE9 de temps processeur \xE0 affecter aux threads ZGC. Ce param\xE8tre permet de contr\xF4ler la fr\xE9quence \xE0 laquelle le GC va rentrer en action.
Une valeur plus \xE9lev\xE9e laissera moins de temps CPU pour votre application.
Une valeur trop basse peut \xEAtre probl\xE9matique car votre application peut g\xE9n\xE9rer plus de d\xE9chets que ce qui est collect\xE9 par ZGC.</p>
</li>
<li>
<p><code>-XX:+UseLargePages</code> active la gestion de grandes pages</p>
</li>
<li>
<p><code>-XX:+UseNUMA</code> est capable d&#8217;utiliser NUMA (Non-uniform memory access) un moyen de configurer un cluster de microprocesseurs afin que la m\xE9moire puisse \xEAtre partag\xE9e localement et que les performances puissent \xEAtre am\xE9lior\xE9es et la capacit\xE9 du syst\xE8me \xE9tendue.</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_epsilon_garbage_collector">Epsilon Garbage Collector</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Ce chapitre va \xEAtre tr\xE8s rapide car l&#8217;id\xE9e de <a href="https://openjdk.java.net/jeps/318">Epsilon Garbage Collector</a> est de propos\xE9 un GC qui g\xE8re l&#8217;allocation de m\xE9moire mais n&#8217;impl\xE9mente aucun m\xE9canisme de r\xE9cup\xE9ration de m\xE9moire.
Une fois que la <code>heap</code> est pleine et n&#8217;a plus de place, la JVM s&#8217;arr\xEAte avec un <code>OutOfMemoryError</code>.</p>
</div>
<div class="paragraph">
<p>Ce GC a \xE9t\xE9 mis \xE0 disposition pour avoir un d\xE9bit applicatif optimal sur une p\xE9riode limit\xE9e.
Il est destin\xE9 \xE0 diff\xE9rents tests mais \xE9galement aux applications qui sont utilis\xE9es tr\xE8s peu de temps.
Nous pouvons prendre l&#8217;exemple de <a href="https://www.jbang.dev/">jbang</a> la solution pour \xE9crire simplement vos scripts en Java plut\xF4t qu&#8217;en shell.
Un script est amen\xE9 a \xEAtre ex\xE9cut\xE9 qu&#8217;une seule fois et la r\xE9cup\xE9ration de la m\xE9moire peut ne pas \xEAtre importante</p>
</div>
<div class="paragraph">
<p>Pour l&#8217;activer vous devez utiliser les param\xE8tres <code>-XX:+UseEpsilonGC -XX:+UnlockExperimentalVMOptions</code></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_shenandoah_garbage_collector">Shenandoah Garbage Collector</h2>
<div class="sectionbody">
<div class="paragraph">
<p>En introduction, j&#8217;ai pr\xE9cis\xE9 que je ne m&#8217;attardais que sur la version LTS de Java, la version 11. Mais comme la prochaine version LTS n&#8217;est plus tr\xE8s loin, je vais tout de m\xEAme abord\xE9 le GC <a href="https://wiki.openjdk.java.net/display/shenandoah">Shenandoah</a>.
La particularit\xE9 de ce dernier est de ne pas avoir \xE9t\xE9 pouss\xE9 par Oracle mais par RedHat.
Au final Shenandoah est un projet OpenJDK qui est devenu une partie de la distribution OpenJDK 12 et comme RedHat est beaucoup impliqu\xE9 dans la maintenance des versions LTS, il a \xE9t\xE9 r\xE9troport\xE9 <a href="https://wiki.openjdk.java.net/display/shenandoah/Main#Main-JDKSupport">vers JDK 8 et 11</a>.</p>
</div>
<div class="paragraph">
<p>Il \xE9t\xE9 con\xE7u</p>
</div>
<div class="ulist">
<ul>
<li>
<p>en reprenant le concept des r\xE9gions introduites avec le G1 (sans reprendre les g\xE9n\xE9rations),</p>
</li>
<li>
<p>utilise comme G1 un marquage en mode concurrent,</p>
</li>
<li>
<p>mais contrairement \xE0 G1, Shenandoah relocalise (d\xE9placement + compactage) les donn\xE9es en mode concurrent afin de pouvoir traiter plus de zones.
Pour respecter des temps de pause correct, G1 recycle une sous s\xE9lection des zones en essayant de traiter celles qui permettent de lib\xE9rer le plus de m\xE9moire.
Shenandoah n&#8217;a pas cette limite.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le concept des <a href="java-memoire.html#_barri\xE8res_gc_gc_barrier">barri\xE8res de lecture</a>, et des <a href="java-memoire.html#_coloration_de_r\xE9f\xE9rence_colored_pointer">r\xE9ferences color\xE9es</a> introduites dans le chapitre ZGC ont \xE9t\xE9 repris dans Shenandoah depuis les mises \xE0 jour <a href="https://developers.redhat.com/blog/2019/06/27/shenandoah-gc-in-jdk-13-part-1-load-reference-barriers/">JDK13</a> et <a href="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/">JDK14</a>.</p>
</div>
<div class="paragraph">
<p>Pour l&#8217;activer vous devez utiliser les param\xE8tres <code>-XX:+UseShenandoahGC -XX:+UnlockExperimentalVMOptions</code></p>
</div>
<div class="sect2">
<h3 id="_fonctionnement_3">Fonctionnement</h3>
<div class="paragraph">
<p>Shenandoah d\xE9coupe la heap en diff\xE9rentes r\xE9gions de m\xEAme taille mais ne reprend pas les g\xE9n\xE9rations (jeune ou vieille).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_shenandoah_collector.png" alt="Shenandoah region">
</div>
</div>
<div class="paragraph">
<p>La plupart des phases sont non bloquantes mais il reste des \xE9tapes qui n\xE9cessite d&#8217;arr\xEAter l&#8217;application</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2021/jvm_memory_shenandoah_clifecycle.png" alt="Shenandoah life cycle">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Init Mark</code> pr\xE9pare la <code>heap</code> et les threads d&#8217;application pour le marquage, puis analyse l&#8217;ensemble des donn\xE9es racines.
Cette analyse des objets de base du graphe des objets de l&#8217;application a besoin de se faire en mode stop-the-world.
L&#8217;ensemble des donn\xE9es racines comprend: les variables locales, les r\xE9f\xE9rences int\xE9gr\xE9es dans le code g\xE9n\xE9r\xE9, les cha\xEEnes de caract\xE8res, les r\xE9f\xE9rences issues du class loader, les r\xE9f\xE9rences finales statiques, les r\xE9f\xE9rences JNI, les r\xE9f\xE9rences JVMTI&#8230;&#8203;</p>
</li>
<li>
<p><code>Mark</code> Le marquage parcourt la <code>heap</code> et identifie les objets vivants.
Cette phase se d\xE9roule parall\xE8lement \xE0 l&#8217;application et sa dur\xE9e d\xE9pend du nombre d&#8217;objets vivants et de la structure du graphe d&#8217;objets.
Puisque l&#8217;application est libre d&#8217;allouer de nouvelles donn\xE9es pendant cette phase, l&#8217;occupation de la <code>heap</code> augmente pendant le marquage simultan\xE9.</p>
</li>
<li>
<p><code>Final Mark</code> termine le marquage en vidant toutes les files d&#8217;attente de marquage et en r\xE9analysant l&#8217;ensemble des donn\xE9es racine.
C&#8217;est aussi dans cette phase que les r\xE9gions \xE0 \xE9vacuer (ensemble de collecte) sont d\xE9termin\xE9es.
Shenandoah s\xE9lectionne toutes les r\xE9gions les plus fructueuses, c&#8217;est-\xE0-dire les r\xE9gions qui ont tr\xE8s peu d&#8217;objets vivants ou, au contraire, beaucoup d&#8217;espace mort.</p>
</li>
<li>
<p><code>Concurrent Cleanup</code> r\xE9cup\xE8re les r\xE9gions o\xF9 plus aucun objet actif n&#8217;est pr\xE9sent</p>
</li>
<li>
<p><code>Concurrent Evacuation</code> copie les objets de l&#8217;ensemble de collecte vers d&#8217;autres r\xE9gions sans interrompre l&#8217;application qui est donc libre d&#8217;allouer.
Les objets sont allou\xE9s avec un espace r\xE9serv\xE9 pour un pointeur d&#8217;indirection.
Lorsque les threads Java acc\xE8dent \xE0 l&#8217;objet, ils lisent d&#8217;abord le pointeur d&#8217;indirection pour voir si l&#8217;objet s&#8217;est d\xE9plac\xE9.
Lorsque le garbage collector d\xE9place un objet, il met \xE0 jour le pointeur d&#8217;indirection pour qu&#8217;il pointe vers le nouvel emplacement.
Les nouveaux objets sont allou\xE9s avec un pointeur d&#8217;indirection qui pointe vers eux-m\xEAmes.
Ce pointeur d&#8217;indirection n&#8217;est pas gratuit.
La lecture du pointeur et la recherche de l&#8217;emplacement actuel de l&#8217;objet ont un co\xFBt en temps et en espace.</p>
</li>
<li>
<p><code>Init Update Refs</code> initialise la phase de mise \xE0 jour des r\xE9f\xE9rences en s&#8217;assurant que tous les threads du GC et les threads de l&#8217;application ont termin\xE9 l&#8217;\xE9vacuation.
Cette \xE9tape de synchronisation se fait en mode stop-the-world mais cette phase est tr\xE8s courte.</p>
</li>
<li>
<p><code>Update Refs</code> le GC parcourt la <code>heap</code> et met \xE0 jour les r\xE9f\xE9rences des objets qui ont \xE9t\xE9 d\xE9plac\xE9s.</p>
</li>
<li>
<p><code>Finalize Update Refs</code> remet \xE0 jour les donn\xE9es racines.
Il recycle \xE9galement les r\xE9gions de l&#8217;ensemble de collecte, car la <code>heap</code> ne contient d\xE9sormais plus de r\xE9f\xE9rences aux objets plus utilis\xE9s.
Il s&#8217;agit de la derni\xE8re pause du cycle et sa dur\xE9e d\xE9pend de la taille des donn\xE9es racines.</p>
</li>
<li>
<p><code>Cleanup</code> r\xE9cup\xE8re les r\xE9gions de l&#8217;ensemble de collecte, qui n&#8217;ont maintenant plus de r\xE9f\xE9rence.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_principales_options_3">Principales options</h3>
<div class="paragraph">
<p>Les principales options JVM recommand\xE9es sont:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>-XX:+AlwaysPreTouch</code> : active la mise en m\xE9moire des pages dans la <code>heap</code> permet de r\xE9duire la latence</p>
</li>
<li>
<p><code>-Xms</code> et <code>-Xmx</code>: rendre la <code>heap</code> non redimensionnable avec <code>-Xms=-Xmx</code> r\xE9duit les temps li\xE9 au redimensionnement.</p>
</li>
<li>
<p><code>-XX:+UseLargePages</code> l&#8217;utilisation de grandes pages am\xE9liore consid\xE9rablement les performances sur les grandes <code>heap</code>. <code>-XX:+UseTransparentHugePages</code> l&#8217;active de mani\xE8re transparente.</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les GC sont de plus en plus performants mais aussi de plus en plus complexes.
Si vous avez des probl\xE8mes de performance vous devez</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Activer les logs du GC</p>
</li>
<li>
<p>Mesurer et identifier ce qui bloque</p>
</li>
<li>
<p>Exp\xE9rimenter les param\xE9trages du GC s\xE9lectionn\xE9 par la JVM. Si ce dernier n&#8217;est pas satisfaisant vous pouvez en utiliser un autre</p>
</li>
<li>
<p>Gardez \xE0 l&#8217;esprit que la JVM s&#8217;adapte au runtime \xE0 votre application.
Si vous fixez des param\xE8tres vous pouvez emp\xEAcher cette adaptation car la JVM essaiera de remplir le contrat que vous lui avez sp\xE9cifier</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Tr\xE8s souvent quand une application a des probl\xE8mes de performance, on incrimine tr\xE8s (trop) vite la base de donn\xE9es, le GC&#8230;&#8203; alors que le probl\xE8me est dans le code de l&#8217;application.</p>
</div>
<div class="paragraph">
<p>Je n&#8217;ai pas non plus \xE9t\xE9 exhaustif sur tous les param\xE8tres disponibles pour chaque GC. Consultez la documentation li\xE9e \xE0 la JVM que vous utilisez.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_r\xE9f\xE9rences">R\xE9f\xE9rences</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Voici un r\xE9sum\xE9 des liens que j&#8217;ai utilis\xE9s dans les diff\xE9rents chapitre et qui m&#8217;on servi de r\xE9f\xE9rences pour \xE9crire cet article</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/Java_version_history">Les diff\xE9rentes versions de Java</a></p>
</li>
<li>
<p><a href="https://medium.com/@hasithalgamge/seven-types-of-java-garbage-collectors-6297a1418e82">Les diff\xE9rents GC</a> article \xE9crit sur medium</p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/gctuning/available-collectors.html">Doc Oracle sur Serial Collector</a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/gctuning/parallel-collector1.htm">Doc Oracle sur Parallel Collector</a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/gctuning/concurrent-mark-sweep-cms-collector.html">Doc Oracle sur CMS</a></p>
</li>
<li>
<p><a href="https://docs.oracle.com/en/java/javase/11/gctuning/garbage-first-garbage-collector.html">Doc Oracle sur G1</a></p>
</li>
<li>
<p><a href="https://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf">Memory whitepaper</a> un vieux document Oracle qui parle des ergonomics (chap13)</p>
</li>
<li>
<p><a href="https://openjdk.java.net/jeps/333">JEP introduisant Z garbage collector</a></p>
</li>
<li>
<p><a href="https://wiki.openjdk.java.net/display/zgc">Garbage Collector Z (ZGC)</a> : wiki Open JDK</p>
</li>
<li>
<p><a href="https://openjdk.java.net/jeps/318">JEP introduisant Epsilon garbage collector</a></p>
</li>
<li>
<p><a href="https://openjdk.java.net/jeps/189">JEP introduisant Shenandoah garbage collector</a></p>
</li>
<li>
<p><a href="https://wiki.openjdk.java.net/display/shenandoah">Garbage Collector Shenandoah</a> : wiki Open JDK</p>
</li>
<li>
<p><a href="https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html">Transparent Hugepage Support</a></p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/X86-64#Virtual_address_space_details">Virtual address space details</a></p>
</li>
<li>
<p><a href="http://hg.openjdk.java.net/zgc/zgc/file/59c07aef65ac/src/hotspot/os_cpu/linux_x86/zGlobals_linux_x86.hpp#l59">Colored pointer</a> : fichier en AsciiArt dispo sur OpenJDK (ZGC)</p>
</li>
<li>
<p><a href="http://hg.openjdk.java.net/zgc/zgc/file/59c07aef65ac/src/hotspot/share/gc/z/zDriver.cpp#l301">Code source ZGC</a> d\xE9crit les phases de ZGC</p>
</li>
<li>
<p>Les <a href="https://en.wikipedia.org/wiki/Barrier_(computer_science)">barri\xE8res</a> et <a href="https://en.wikipedia.org/wiki/Memory_barrier">Barri\xE8re de m\xE9moire</a> utilis\xE9es dans ZGC et Shenandoah</p>
</li>
<li>
<p><a href="https://developers.redhat.com/blog/2019/06/27/shenandoah-gc-in-jdk-13-part-1-load-reference-barriers/">Blog Redhat</a> am\xE9lioration shenandoah dans JDK13</p>
</li>
<li>
<p><a href="https://developers.redhat.com/blog/2020/03/04/shenandoah-gc-in-jdk-14-part-1-self-fixing-barriers/">Blog Redhat</a> am\xE9lioration shenandoah dans JDK14</p>
</li>
</ul>
</div>
</div>
</div>`;var kv=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_etape_1_mettre_en_place_un_serveur_web">Etape 1 : Mettre en place un serveur web</a></li>
<li><a class="link" fragment="#_etape_2_servir_des_ressources_statiques">Etape 2 : Servir des ressources statiques</a></li>
<li><a class="link" fragment="#_etape_3_une_classe_pour_g\xE9rer_nos_donn\xE9es">Etape 3 : Une classe pour g\xE9rer nos donn\xE9es</a></li>
<li><a class="link" fragment="#_etape_4_mettre_en_place_des_r\xE8gles_de_routage_et_un_syst\xE8me_de_templating">Etape 4 : Mettre en place des r\xE8gles de routage et un syst\xE8me de templating</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_template_de_pages">Template de pages</a></li>
<li><a class="link" fragment="#_routes">Routes</a></li>
<li><a class="link" fragment="#_mise_\xE0_jour_de_la_configuration">Mise \xE0 jour de la configuration</a></li>
<li><a class="link" fragment="#_cr\xE9er_todoroute">Cr\xE9er TodoRoute</a></li>
<li><a class="link" fragment="#_les_templates_handlebars">Les templates handlebars</a></li>
</ul>
</li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Nous avons vu dans l&#8217;<a href="https://dev-mind.fr/blog/2019/start_typescript_project_and_test_with_jest.html">article pr\xE9c\xE9dent</a>, comment d\xE9marrer un nouveau projet en TypeScript et le tester avec Jest. Essayons d&#8217;aller plus loin et de mettre en place une application web.</p>
</div>
<div class="paragraph">
<p>Pour illustrer cet article, nous allons mettre en place une application permettant de g\xE9rer une liste de t\xE2ches \xE0 faire (todo list). Le code illustrant cet article est disponible sous <a href="https://gitlab.com/javamind/typescript-web">Gitlab</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/web_typescript0.png" alt="Webapp en TypeScript">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_1_mettre_en_place_un_serveur_web">Etape 1 : Mettre en place un serveur web</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Ma solution se base sur <a href="https://expressjs.com/fr/">ExpressJS</a>. Pour plus d&#8217;informations, vous pouvez lire <a href="https://dev-mind.fr/blog/2018/objectif_clever_cloud_js.html">mon article</a>, dans lequel j&#8217;explique comment d\xE9marrer avec <a href="https://expressjs.com/fr/">ExpressJS</a>, comment le configurer pour la production et comment d\xE9ployer votre application sur <a href="https://www.clever-cloud.com/en/">Clever Cloud</a>. Aujourd&#8217;hui le but est de reprendre la m\xEAme chose mais en TypeScript.</p>
</div>
<div class="paragraph">
<p>Commen\xE7ons par le d\xE9but : cr\xE9ons un serveur ExpressJs et cr\xE9ons un handler de requ\xEAte qui affichera un message <code>Hello World</code>.</p>
</div>
<div class="paragraph">
<p>On initie le projet en cr\xE9ant l&#8217;arborescence, et en lan\xE7ant le client <code>npm</code> pour configurer notre nouveau projet <a href="https://nodejs.org/en/">NodeJS</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450778.8506">mkdir -p myproject/src/main/typescript
mkdir -p myproject/src/test/typescript
cd myproject
npm init</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450778.8506')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous pouvons maintenant installer les d\xE9pendances avec <code>npm</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450778.0098">npm install typescript
npm install express @types/express serve-static
npm install errorhandler @types/errorhandler express-handlebars @types/express-handlebars</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450778.0098')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour information nous chargeons aussi les fichiers descriptor TypeScript (<code>@types/&#8230;&#8203;</code>) qui permettent d&#8217;utiliser des sources JavaScript dans votre projet. Ces fichiers d\xE9crivent les types, les classes et les m\xE9thodes utilis\xE9es dans un fichier JavaScript. Ainsi le compilateur peut trouver les diff\xE9rents types d\xE9finis dans les librairies JS, les IDEs peuvent proposer de la compl\xE9tion&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Configurons maintenant TypeScript. Lan\xE7ons la commande <code>./node_modules/.bin/tsc --init</code> pour initialiser un fichier <code>tsconfig.json</code>. Le contenu du fichier peut \xEAtre recopi\xE9 de l&#8217;<a href="https://dev-mind.fr/blog/2019/start_typescript_project_and_test_with_jest.html">article pr\xE9c\xE9dent</a>.</p>
</div>
<div class="paragraph">
<p>Nous allons cr\xE9er une classe qui repr\xE9sentera notre application Express dans le fichier <code>express.ts</code> et le r\xE9pertoire <code>src/main/typescript</code>. Nous cr\xE9ons aussi une interface qui d\xE9crit les param\xE8tres attendus par notre classe</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450786.2703"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;
<span class="hljs-keyword">import</span> errorHandler = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;errorhandler&quot;</span>);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServerOptions</span> {
    <span class="hljs-comment">// Path contenant toutes les ressources statiques (css, js...)</span>
    <span class="hljs-attr">static</span>: <span class="hljs-built_in">string</span>;
    <span class="hljs-comment">// Port de votre serveur</span>
    <span class="hljs-attr">port</span>: <span class="hljs-built_in">number</span>;
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Express</span> {

    <span class="hljs-keyword">public</span> <span class="hljs-attr">app</span>: express.<span class="hljs-property">Application</span>;

    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> options: ServerOptions</span>) {
        <span class="hljs-comment">//create expressjs application</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span> = <span class="hljs-title function_">express</span>();
        <span class="hljs-comment">//configure application</span>
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">config</span>();
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;port&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">port</span>);
    }

    <span class="hljs-comment">/**
     * Configure application
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">config</span>(<span class="hljs-params"></span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>
            .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>))
            .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">errorHandler</span>());
    }

    <span class="hljs-comment">/**
     * Bootstrap the application.
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">bootstrap</span>(<span class="hljs-attr">options</span>: <span class="hljs-title class_">ServerOptions</span>): <span class="hljs-title class_">Express</span> {
        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Try to start server&quot;</span>);
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Express</span>(options);
    }

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450786.2703')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour le moment le contenu de cette classe est simplifi\xE9e et le but est d&#8217;enrichir la m\xE9thode <code>config()</code> au fur et \xE0 mesure de l&#8217;avanc\xE9e de cet article. Dans ce premier exemple, nous avons d\xE9fini un handler http associ\xE9 \xE0 l&#8217;URL <code>/</code> et retournant <code>Hello World</code>.</p>
</div>
<div class="paragraph">
<p>Nous pouvons maintenant cr\xE9er un fichier <code>app.ts</code> qui sera utilis\xE9 pour d\xE9marrer notre serveur (le mettre au m\xEAme niveau)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450787.3633"><span class="hljs-keyword">import</span> {<span class="hljs-title class_">Express</span>, <span class="hljs-title class_">ServerOptions</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./express&#x27;</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> http <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;http&#x27;</span>;

<span class="hljs-keyword">const</span> options = {
    <span class="hljs-attr">static</span>: <span class="hljs-meta">@backtick</span><span class="hljs-meta">@src</span>/main/<span class="hljs-keyword">static</span><span class="hljs-meta">@backtick</span>@,
    <span class="hljs-attr">port</span>: <span class="hljs-number">8081</span>
} <span class="hljs-keyword">as</span> <span class="hljs-title class_">ServerOptions</span>;

<span class="hljs-keyword">const</span> server = <span class="hljs-title class_">Express</span>.<span class="hljs-title function_">bootstrap</span>(options).<span class="hljs-property">app</span>;

http.<span class="hljs-title function_">createServer</span>(server)
    .<span class="hljs-title function_">listen</span>(options.<span class="hljs-property">port</span>)
    .<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;listening&quot;</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">debug</span>(<span class="hljs-string">&#x27;Listening on &#x27;</span> + options.<span class="hljs-property">port</span>));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450787.3633')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour simplifier le lancement de l&#8217;application, la propri\xE9t\xE9 <code>script</code> du fichier <code>package.json</code> peut contenir une entr\xE9e <code>start</code> qui lancera la compilation TypeScript via <code>tsc</code> et ex\xE9cutera le fichier JS compil\xE9</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" id="1732912450788.549"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;devmind-typescript&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tsc; node ./build/app.js&quot;</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-comment">// ...</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450788.549')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Gr\xE0ce \xE0 ce nouveau param\xE9trage, l&#8217;application peut \xEAtre lanc\xE9e via la commande <code>npm run start</code>. Vous pouvez tester : un message <code>Listening on 8081</code> doit s&#8217;afficher dans la concole et l&#8217;URL <code><a href="http://localhost:8081/" class="bare">http://localhost:8081/</a></code> retourne un message <code>Hello world</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_2_servir_des_ressources_statiques">Etape 2 : Servir des ressources statiques</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Un site web a souvent besoin de servir des ressources statiques : des fichiers HTML, JavaScript, CSS&#8230;&#8203; Nous allons modifier la configuration de notre serveur pour que les ressources du r\xE9pertoire <code>src/main/static</code> soient expos\xE9es. Notez que nous avons d\xE9fini plus haut ce chemin dans l&#8217;interface de configuration <code>ServerOptions</code>.</p>
</div>
<div class="paragraph">
<p>Modifions la m\xE9thode <code>config()</code> de notre classe Express</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450789.1648"><span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>
  .<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">static</span>))
  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>))
  .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">errorHandler</span>());</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450789.1648')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour am\xE9liorer la mise en forme des pages de l&#8217;application, nous t\xE9l\xE9chargeons <a href="https://getbootstrap.com/docs/4.3/getting-started/download/">Bootstrap</a> dans <code>src/main/static</code>. Ces ressources CSS peuvent \xEAtre utilis\xE9es dans une page <code>hello.html</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450789.543">@LThtml@GT
@LThead@GT
    @LTlink rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;@GT
@LT/head@GT
@LTbody@GT
    @LTh1@GTHello TypeScript@LT/h1@GT
@LT/body@GT
@LT/html@GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450789.543')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_3_une_classe_pour_g\xE9rer_nos_donn\xE9es">Etape 3 : Une classe pour g\xE9rer nos donn\xE9es</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans un futur article je vous expliquerai comment utiliser une base de donn\xE9es. Pour le moment nous allons g\xE9rer les donn\xE9es d&#8217;une mani\xE8re triviale et proposer un DAO qui g\xE9rera une liste de donn\xE9es en m\xE9moire</p>
</div>
<div class="paragraph">
<p>Cr\xE9ons un fichier <code>todo.dao.ts</code> qui contiendra le type <code>Todo</code> (t\xE2che \xE0 faire), objet de base de notre application. Les donn\xE9es seront stock\xE9es pour notre exemple en m\xE9moire dans un tableau <code>TODO_DATA</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450790.6875"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Todo</span> {
    <span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>;
    <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;
    <span class="hljs-attr">checked</span>: <span class="hljs-built_in">boolean</span>;
}

<span class="hljs-keyword">let</span> sequence = <span class="hljs-number">1</span>;
<span class="hljs-keyword">const</span> <span class="hljs-attr">TODO_DATA</span>: <span class="hljs-title class_">Todo</span>[] = [
    {<span class="hljs-attr">id</span>: sequence++, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Ecrire un article&#x27;</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">true</span>},
    {<span class="hljs-attr">id</span>: sequence++, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Veille techno sur TypeScript&#x27;</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span>},
    {<span class="hljs-attr">id</span>: sequence++, <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Voir la derni\xE8re release de ExpressJS&#x27;</span>, <span class="hljs-attr">checked</span>: <span class="hljs-literal">false</span>}
];</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450790.6875')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La classe permettant de manipuler les donn\xE9es peut avoir cette forme</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450792.8606"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoDao</span> {

    <span class="hljs-title function_">findAll</span>(): <span class="hljs-title class_">Todo</span>[] {
        <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">TODO_DATA</span>;
    }

    <span class="hljs-title function_">findById</span>(<span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">Todo</span> {
        <span class="hljs-keyword">const</span> todos = <span class="hljs-variable constant_">TODO_DATA</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">elt</span> =&gt;</span> elt.<span class="hljs-property">id</span> === id);
        <span class="hljs-keyword">return</span> todos.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> ? todos[<span class="hljs-number">0</span>] : <span class="hljs-literal">undefined</span>;
    }

    <span class="hljs-title function_">save</span>(<span class="hljs-attr">todo</span>: <span class="hljs-title class_">Todo</span>): <span class="hljs-title class_">Todo</span> {
        <span class="hljs-keyword">const</span> <span class="hljs-attr">updated</span>: <span class="hljs-title class_">Todo</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findById</span>(todo.<span class="hljs-property">id</span>) || {<span class="hljs-attr">id</span>: ++sequence} <span class="hljs-keyword">as</span> <span class="hljs-title class_">Todo</span>;
        updated.<span class="hljs-property">label</span> = todo.<span class="hljs-property">label</span>;
        updated.<span class="hljs-property">checked</span> = todo.<span class="hljs-property">checked</span> !== <span class="hljs-literal">undefined</span>;
        <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">TODO_DATA</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">elt</span> =&gt;</span> elt.<span class="hljs-property">id</span> === todo.<span class="hljs-property">id</span>)){
            <span class="hljs-variable constant_">TODO_DATA</span>.<span class="hljs-title function_">push</span>(updated);
        }
        <span class="hljs-keyword">return</span> updated;
    }

    <span class="hljs-title function_">deleteById</span>(<span class="hljs-params">id: <span class="hljs-built_in">number</span></span>) {
        <span class="hljs-keyword">const</span> index = <span class="hljs-variable constant_">TODO_DATA</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">elt</span> =&gt;</span> elt.<span class="hljs-property">id</span>).<span class="hljs-title function_">indexOf</span>(id);
        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) {
            <span class="hljs-variable constant_">TODO_DATA</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450792.8606')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_4_mettre_en_place_des_r\xE8gles_de_routage_et_un_syst\xE8me_de_templating">Etape 4 : Mettre en place des r\xE8gles de routage et un syst\xE8me de templating</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Il est temps d&#8217;aller plus loin et de param\xE9trer des routes et des templates de page.</p>
</div>
<div class="sect2">
<h3 id="_template_de_pages">Template de pages</h3>
<div class="paragraph">
<p>Quand nous cr\xE9ons une application nous ne voulons pas dupliquer la structuration des pages HTML (headers, footer, mise en forme g\xE9n\xE9rale&#8230;&#8203;.). Nous voulons aussi par exemple passer des valeurs dynamiques : par exemple envoyer une liste d&#8217;\xE9l\xE9ments \xE0 une page pour afficher le d\xE9tail.</p>
</div>
<div class="paragraph">
<p>La solution est d&#8217;utiliser un syt\xE8me de template. Dans cet exemple nous utiliserons <a href="https://handlebarsjs.com/">handlebars</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_routes">Routes</h3>
<div class="paragraph">
<p>Nous allons aussi mettre en place un syt\xE8me de routage "intelligent" permettant de naviguer dans l&#8217;application. Le syst\xE8me de routage est aussi capable d&#8217;aller r\xE9cup\xE9rer des arguments dans les URL. Pour chaque route vous pouvez donner la m\xE9thode HTTP (GET, POST&#8230;&#8203;) qui l&#8217;active.</p>
</div>
<div class="paragraph">
<p>Dans notre exemple, nous allons mettre en place ce syt\xE8me de routes.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>GET <code>/todos</code> renverra la liste des todos</p>
</li>
<li>
<p>GET <code>/todos/:id</code> affichera le d\xE9tail du todo ayant l&#8217;identifiant <code>id</code></p>
</li>
<li>
<p>POST <code>/todos/:id/delete</code> supprimera le todo ayant l&#8217;identifiant <code>id</code></p>
</li>
<li>
<p>GET <code>/todos/create</code> affichera</p>
</li>
<li>
<p>POST <code>/todos</code> permettra de cr\xE9er un nouveau todo</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Nous n&#8217;utilisons que les m\xE9thodes GET et POST car nous n&#8217;allons faire que des formulaires HTML et en HTML, ce sont les seules m\xE9thodes accept\xE9es par la balise <code>@LTform@GT</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_mise_\xE0_jour_de_la_configuration">Mise \xE0 jour de la configuration</h3>
<div class="paragraph">
<p>Modifions notre configuration Express (la classe TodoRoute sera cr\xE9\xE9e plus tard)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450794.4717"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> express <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express&#x27;</span>;
<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> handlebars <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;express-handlebars&#x27;</span>;
<span class="hljs-keyword">import</span> errorHandler = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;errorhandler&quot;</span>);
<span class="hljs-keyword">import</span> {<span class="hljs-title class_">TodoRoute</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./todo.route&quot;</span>;
<span class="hljs-keyword">import</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;body-parser&quot;</span>);

<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Express</span> {

  <span class="hljs-comment">// ...</span>
  <span class="hljs-keyword">public</span> <span class="hljs-title function_">config</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();

    <span class="hljs-title class_">TodoRoute</span>.<span class="hljs-title function_">create</span>(router);

    <span class="hljs-variable language_">this</span>.<span class="hljs-property">app</span>
        .<span class="hljs-title function_">engine</span>(<span class="hljs-string">&#x27;handlebars&#x27;</span>, <span class="hljs-title function_">handlebars</span>())
        .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;handlebars&#x27;</span>)
        .<span class="hljs-title function_">enable</span>(<span class="hljs-string">&#x27;view cache&#x27;</span>)
        .<span class="hljs-title function_">enable</span>(<span class="hljs-string">&#x27;trust proxy&#x27;</span>)
        .<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, <span class="hljs-meta">@backtick</span>@<span class="hljs-meta">@dollar</span>@{__dirname}/../src/main/views/<span class="hljs-meta">@backtick</span>@)
        .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">bodyParser</span>())
        .<span class="hljs-title function_">use</span>(router)
        .<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>.<span class="hljs-property">static</span>))
        .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>))
        .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">errorHandler</span>());
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450794.4717')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><code>handlebars</code> est configurer pour aller chercher les templates de pages dans le r\xE9pertoire <code>src/main/views</code>.</p>
</li>
<li>
<p>bodyParser() permet \xE0 Express de parser les requ\xEAtes HTTP pour lire les param\xE8tres envoy\xE9s dans le corps de la requ\xEAte</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_cr\xE9er_todoroute">Cr\xE9er TodoRoute</h3>
<div class="paragraph">
<p>Nous devons maintenant cr\xE9er nos premi\xE8res routes. Elle seront d\xE9finies dans le fichier <code>todo.route.ts</code> dans le r\xE9pertoire <code>src/main/typescript</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450798.7434"><span class="hljs-keyword">import</span> {<span class="hljs-title class_">Request</span>, <span class="hljs-title class_">Response</span>, <span class="hljs-title class_">Router</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;express&quot;</span>;
<span class="hljs-keyword">import</span> {<span class="hljs-title class_">Todo</span>, <span class="hljs-title class_">TodoDao</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./todo.dao&quot;</span>;


<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TodoRoute</span>{

    <span class="hljs-attr">dao</span>:<span class="hljs-title class_">TodoDao</span>;

    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">dao: TodoDao</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dao</span> = dao;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">router: Router</span>) {
        <span class="hljs-keyword">const</span> route = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TodoRoute</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TodoDao</span>());
        router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/todos&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req: Request, res: Response</span>) =&gt;</span> route.<span class="hljs-title function_">findAll</span>(req, res));
        router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/todos/:id&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req: Request, res: Response</span>) =&gt;</span> route.<span class="hljs-title function_">findById</span>(req, res, (req.<span class="hljs-property">params</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).<span class="hljs-property">id</span>));
        router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/todos/:id/delete&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req: Request, res: Response</span>) =&gt;</span> route.<span class="hljs-title function_">deleteById</span>(req, res, (req.<span class="hljs-property">params</span> <span class="hljs-keyword">as</span> <span class="hljs-built_in">any</span>).<span class="hljs-property">id</span>));
        router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/todos/create&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req: Request, res: Response</span>) =&gt;</span> route.<span class="hljs-title function_">findById</span>(req, res, <span class="hljs-literal">undefined</span>));
        router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/todos&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req: Request, res: Response</span>) =&gt;</span> route.<span class="hljs-title function_">save</span>(req, res, req.<span class="hljs-property">body</span>));
    }

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">viewOne</span>(<span class="hljs-params">req: Request, res: Response, todo:Todo</span>){
        res.<span class="hljs-property">locals</span>[<span class="hljs-string">&#x27;title&#x27;</span>] = todo.<span class="hljs-property">id</span> ? <span class="hljs-string">&#x27;Modification Todo&#x27;</span> : <span class="hljs-string">&#x27;Ajout Todo&#x27;</span>;
        res.<span class="hljs-property">locals</span>[<span class="hljs-string">&#x27;todo&#x27;</span>] = <span class="hljs-variable language_">this</span>.<span class="hljs-property">dao</span>.<span class="hljs-title function_">findById</span>(todo.<span class="hljs-property">id</span>) || {} <span class="hljs-keyword">as</span> <span class="hljs-title class_">Todo</span>;
        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;todo_view&#x27;</span>);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">viewAll</span>(<span class="hljs-params">req: Request, res: Response, todos:Todo[]</span>){
        res.<span class="hljs-property">locals</span>[<span class="hljs-string">&#x27;title&#x27;</span>] = <span class="hljs-string">&#x27;Liste des todos&#x27;</span>;
        res.<span class="hljs-property">locals</span>[<span class="hljs-string">&#x27;todos&#x27;</span>] = todos;
        res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;todo_list_view&#x27;</span>);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params">req: Request, res: Response</span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">viewAll</span>(req, res, <span class="hljs-variable language_">this</span>.<span class="hljs-property">dao</span>.<span class="hljs-title function_">findAll</span>());
    }

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">findById</span>(<span class="hljs-params">req: Request, res: Response, id: <span class="hljs-built_in">number</span></span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">viewOne</span>(req, res, <span class="hljs-variable language_">this</span>.<span class="hljs-property">dao</span>.<span class="hljs-title function_">findById</span>(id) || {} <span class="hljs-keyword">as</span> <span class="hljs-title class_">Todo</span>);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">deleteById</span>(<span class="hljs-params">req: Request, res: Response, id: <span class="hljs-built_in">number</span></span>) {
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dao</span>.<span class="hljs-title function_">deleteById</span>(id);
        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findAll</span>(req, res);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">save</span>(<span class="hljs-params">req: Request, res: Response, todo: Todo</span>) {
        <span class="hljs-keyword">if</span>(!todo.<span class="hljs-property">label</span>){
            res.<span class="hljs-property">locals</span>[<span class="hljs-string">&#x27;errors&#x27;</span>] = {
                <span class="hljs-attr">has</span>: <span class="hljs-literal">true</span>,
                <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;Le libell\xE9 est obligatoire&#x27;</span>
            };
            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">viewOne</span>(req, res, todo);
        }
        <span class="hljs-keyword">else</span>{
            <span class="hljs-variable language_">this</span>.<span class="hljs-property">dao</span>.<span class="hljs-title function_">save</span>(todo);
            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findAll</span>(req, res);
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450798.7434')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans la premi\xE8re partie, nous cr\xE9ons les associations entre les m\xE9thodes HTTP, les chemins et les m\xE9thodes qui vont g\xE9r\xE9r l&#8217;affichage.</p>
</div>
<div class="paragraph">
<p>Les m\xE9thodes <code>view&#8230;&#8203;</code> permettent d&#8217;afficher un template <code>handlebar</code> via la m\xE9thode render. Pour envoyer des param\xE8tres \xE0 ce template nous ajoutons des valeurs dans le tableau <code>res.locals</code> de l&#8217;objet <code>response</code> (correspond \xE0 la r\xE9ponse HTTP qui sera retourn\xE9e par le serveur).</p>
</div>
<div class="paragraph">
<p>Les autres m\xE9thodes font simplement appel \xE0 notre DAO d\xE9fini plus haut.</p>
</div>
</div>
<div class="sect2">
<h3 id="_les_templates_handlebars">Les templates handlebars</h3>
<div class="paragraph">
<p>Dans la classe d\xE9finie dans le paragraphe pr\xE9c\xE9dent, deux templates sont appel\xE9s : <code>todo_view</code> et <code>todo_list_view</code>. Les extensions des fichiers (<code>.handlebars</code>) n&#8217;ont pas besoin d&#8217;\xEAtre pr\xE9cis\xE9es dans la classe <code>TodoRoute</code>.</p>
</div>
<div class="paragraph">
<p>Pour configurer <code>handlebars</code> un premier template <code>main.handlebars</code> d\xE9finissant la structure g\xE9n\xE9rale de la page doit \xEAtre cr\xE9\xE9 dans le r\xE9pertoire <code>src/main/views/layouts</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450799.1094">@LT!DOCTYPE html@GT
@LThtml@GT
@LThead@GT
  @LTtitle@GT{{ title }}@LT/title@GT
  @LTlink rel=&quot;stylesheet&quot; href=&quot;/css/bootstrap.min.css&quot;@GT
@LT/head@GT
@LTbody@GT
  @LTdiv class=&quot;container&quot;@GT
    @LTh1@GT{{ title }}@LT/h1@GT
    @LThr@GT
    {{{body}}}
  @LT/div@GT
@LT/body@GT
@LT/html@GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450799.1094')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><code>handlebars</code> utilise des moustaches <code>{{ &#8230;&#8203; }}</code> pour afficher le contenu de variables quand le template est compil\xE9 en HTML. <code>{{ title }}</code> est pass\xE9 dans le code du routeur plus haut et <code>{{ body }}</code> fait r\xE9f\xE9rence au template \xE0 afficher. Par exemple quand on veut g\xE9rer la liste des todos, nous allons cr\xE9er un fichier <code>todo_list_view.handlebars</code> dans le r\xE9pertoire <code>src/main/views</code>.</p>
</div>
<div class="paragraph">
<p>Ce template peut avoir cette forme</p>
</div>
<div class="ulist">
<ul>
<li>
<p>un lien pour cr\xE9er un nouveau todo</p>
</li>
<li>
<p>une it\xE9ration sur la liste des todos pass\xE9e en param\xE8tre <code>{{#todos}}&#8230;&#8203;{{/todos}}</code></p>
</li>
<li>
<p>v\xE9rifier si une valeur est valoris\xE9e <code>{{#checked}}&#8230;&#8203;{{/checked}}</code> ou non valoris\xE9e <code>{{^checked}}&#8230;&#8203;{{/checked}}</code></p>
</li>
<li>
<p>des liens pour modifier ou supprimer des todos existants</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450799.124">@LTa href=&quot;/todos/create&quot; class=&quot;btn btn-dark&quot;@GTCr\xE9er Todo@LT/a@GT
@LTbr@GT
@LTtable class=&quot;table&quot;@GT

    @LTthead@GT
    @LTtr@GT
        @LTth@GTLibell\xE9@LT/th@GT
        @LTth width=&quot;25%&quot;@GTActions@LT/th@GT
    @LT/tr@GT
    @LT/thead@GT
    @LTtbody@GT
    {{#todos}}
        @LTtr@GT
            @LTtd@GT
                {{#checked}}@LTs@GT{{label}}@LT/s@GTAAA{{/checked}}
                {{^checked}}{{label}}{{/checked}}
            @LT/td@GT
            @LTtd@GT
                @LTform action=&quot;/todos/{{id}}/delete&quot; method=&quot;post&quot; onsubmit=&quot;return confirm(&#x27;Voulez vous vraiment supprimer ce todo ? &#x27;)&quot;@GT
                    @LTa href=&quot;/todos/{{id}}&quot; class=&quot;btn btn-dark&quot;@GT
                        Modifier
                    @LT/a@GT
                    @LTbutton class=&quot;btn btn-dark&quot;@GT
                        Supprimer
                    @LT/button@GT
                @LT/form@GT
            @LT/td@GT
        @LT/tr@GT
    {{/todos}}
    @LT/tbody@GT
@LT/table@GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450799.124')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Et le template pour modifier ou cr\xE9er un nouveau Todo aura cette forme</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450799.8672">@LTform action=&quot;/todos&quot; method=&quot;post&quot;@GT
{{#errors.has}}
@LTdiv class=&quot;alert alert-danger&quot;@GTVous avez une erreur dans votre formulaire@LT/div@GT{{/errors.has}}

    @LTinput type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;{{todo.id}}&quot;@GT

    @LTdiv class=&quot;form-group row&quot;@GT
        @LTlabel for=&quot;label&quot; class=&quot;col-sm-3 col-form-label&quot;@GTLibell\xE9@LT/label@GT
        @LTdiv class=&quot;col-sm-9&quot;@GT
            @LTinput type=&quot;text&quot; placeholder=&quot;Libell\xE9 du todo&quot; name=&quot;label&quot; id=&quot;label&quot; value=&quot;{{todo.label}}&quot;
                   class=&quot;form-control {{#errors.label}}is-invalid{{/errors.label}}&quot;@GT
            @LTsmall class=&quot;invalid-feedback&quot;@GT{{errors.label}}@LT/small@GT
        @LT/div@GT
    @LT/div@GT
    @LTdiv class=&quot;form-group row&quot;@GT
        @LTlabel for=&quot;checked&quot; class=&quot;col-sm-3 col-form-label&quot;@GTT\xE2che effectu\xE9e@LT/label@GT
        @LTdiv class=&quot;col-sm-9&quot;@GT
            @LTdiv class=&quot;form-check&quot;@GT
                @LTinput class=&quot;form-check-input&quot; type=&quot;checkbox&quot;  id=&quot;checked&quot; name=&quot;checked&quot;
                       {{#todo.checked}}checked{{/todo.checked}}@GT
            @LT/div@GT
        @LT/div@GT
    @LT/div@GT
    @LTdiv style=&quot;display: inline-flex&quot;@GT
        @LTbutton class=&quot;btn btn-dark&quot;@GTSave@LT/button@GT<span class="hljs-symbol">&amp;amp;</span>nbsp;<span class="hljs-symbol">&amp;amp;</span>nbsp;
        @LTa class=&quot;btn btn-outline-secondary&quot; href=&quot;/todos&quot;@GTCancel@LT/a@GT
    @LT/div@GT
@LT/form@GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450799.8672')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez relancer votre serveur pour tester l&#8217;application.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/web_typescript1.png" alt="Ecran liste des todos">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/web_typescript2.png" alt="Modifier un todo">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Cet article \xE9tait un peu long mais j&#8217;ai essay\xE9 de vous montrer beaucoup de code. Comme je le disais plus haut, le code est disponible sous <a href="https://gitlab.com/javamind/typescript-web">Gitlab</a>.</p>
</div>
<div class="paragraph">
<p>J&#8217;esp\xE8re vous avoir donn\xE9 les bases pour d\xE9marrer une application web rapidement en TypeScript. Personnellement j&#8217;ai utilis\xE9 cette techno pour g\xE9rer ce site web. Le code est d&#8217;ailleurs libre si vous voulez vous en inspirer <a href="https://github.com/Dev-Mind/dev-mind.fr" class="bare">https://github.com/Dev-Mind/dev-mind.fr</a></p>
</div>
</div>
</div>`;var _v=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_etape_1_nodejs">Etape 1 : NodeJS</a></li>
<li><a class="link" fragment="#_etape_2_cr\xE9er_un_projet">Etape 2 : Cr\xE9er un projet</a></li>
<li><a class="link" fragment="#_etape_2_installer_typescript">Etape 2 : Installer typescript</a></li>
<li><a class="link" fragment="#_etape_3_ecrire_du_code_en_typescript">Etape 3 : Ecrire du code en TypeScript</a></li>
<li><a class="link" fragment="#_etape_4_tester_notre_code_avec_jest">Etape 4 : Tester notre code avec Jest</a></li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Si vous \xEAtes un d\xE9veloppeur web, vous avez forc\xE9ment entendu parler de <a href="https://www.typescriptlang.org">TypeScript</a>. Ce langage se d\xE9finit comme un sur-ensemble de <a href="https://www.javascript.com/">JavaScript</a>. Votre code est compil\xE9 en JavaScript standard pour pouvoir \xEAtre ex\xE9cut\xE9 sur un moteur JavaScript (node, navigateur).</p>
</div>
<div class="paragraph">
<p><a href="https://www.typescriptlang.org">TypeScript</a> comble beaucoup de manque du langage <a href="https://www.javascript.com/">JavaScript</a>, en introduisant les types et bien d&#8217;autres fonctionnalit\xE9s. Avec <a href="https://www.typescriptlang.org">TypeScript</a> vous b\xE9n\xE9ficiez d&#8217;une meilleure exp\xE9rience de d\xE9veloppement avec une meilleure compl\xE9tion, une remont\xE9e des erreurs plus rapide&#8230;&#8203; De nombreux frameworks l&#8217;ont adopt\xE9 (<a href="https://angular.io/">Angular</a>, <a href="https://aurelia.io/">Aurelia</a>, <a href="https://www.nativescript.org/">NativeScript</a>&#8230;&#8203;) car comme pour les langages C# ou Java le langage a un r\xE9el avantage en entreprise.</p>
</div>
<div class="paragraph">
<p>Dans cet article, nous allons voir comment lancer un projet <a href="https://www.typescriptlang.org">TypeScript</a>, le compiler, \xE9x\xE9cuter des tests via <a href="https://jestjs.io/">Jest</a>. Il existe pas mal de ressources sur le web sur ce sujet mais tr\xE8s souvent les choses sont complexifi\xE9es.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/laissez_tomber_javascript1.png" alt="laissez_tomber_javascript">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_1_nodejs">Etape 1 : NodeJS</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://www.javascript.com/">JavaScript</a> est un langage qui est ex\xE9cut\xE9 sur un moteur JavaScript. Les navigateurs Internet int\xE8grent tous aujourd&#8217;hui des moteurs JavaScript. Quand vous voulez cr\xE9er une application en dehors d&#8217;un navigateur, vous allez utiliser NodeJs qui fournit un moteur JavaScript autonome.</p>
</div>
<div class="paragraph">
<p><a href="https://nodejs.org/">NodeJS</a> est disponible pour toutes les plateformes <a href="https://nodejs.org/en/download/" class="bare">https://nodejs.org/en/download/</a></p>
</div>
<div class="paragraph">
<p><a href="https://nodejs.org/">NodeJS</a> fourni un gestionnaire de paquet <code>npm</code> qui permet de t\xE9l\xE9charger et mettre \xE0 jour les d\xE9pendances d&#8217;un projet.</p>
</div>
<div class="paragraph">
<p>Une fois que vous avez install\xE9 NodeJs vous lancer dans un terminal <code>npm</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450839.2622">@dollar@ npm

Usage: npm &lt;command&gt;

where &lt;command&gt; is one of:
    access, adduser, audit, bin, bugs, c, cache, ci, cit,
    clean-install, clean-install-test, completion, config,
    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,
    edit, explore, get, help, help-search, hook, i, init,
    install, install-ci-test, install-test, it, link, list, ln,
    login, logout, ls, org, outdated, owner, pack, ping, prefix,
    profile, prune, publish, rb, rebuild, repo, restart, root,
    run, run-script, s, se, search, set, shrinkwrap, star,
    stars, start, stop, t, team, test, token, tst, un,
    uninstall, unpublish, unstar, up, update, v, version, view,
    whoami

npm &lt;command&gt; -h  quick help on &lt;command&gt;
npm -l            display full usage info
npm help &lt;term&gt;   search for help on &lt;term&gt;
npm help npm      involved overview&lt;/term&gt;&lt;/term&gt;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450839.2622')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez lancer la commande <code>node</code> qui permet de lancer une console node</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450840.1582">@dollar@ node
<span class="hljs-meta prompt_">&gt; </span><span class="language-bash">const name = <span class="hljs-string">&#x27;Guillaume&#x27;</span></span>
undefined
<span class="hljs-meta prompt_">&gt; </span><span class="language-bash">console.log(name)</span>
Guillaume
<span class="hljs-meta prompt_">&gt;</span><span class="language-bash">
(To <span class="hljs-built_in">exit</span>, press ^C again or <span class="hljs-built_in">type</span> .<span class="hljs-built_in">exit</span>)</span>
<span class="hljs-meta prompt_">&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450840.1582')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_2_cr\xE9er_un_projet">Etape 2 : Cr\xE9er un projet</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous allons commencer par cr\xE9er l&#8217;arborescence de notre projet <code>myproject</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450840.0662">mkdir -p myproject/src/main/typescript
mkdir -p myproject/src/test/typescript</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450840.0662')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous allons utiliser NodeJS dans notre projet pour b\xE9n\xE9ficier du gestionnaire de paquet <code>npm</code> mais aussi ex\xE9cuter notre code. Pour initialiser notre projet nous allons utiliser le client fournit avec <code>npm</code>. Le client va g\xE9n\xE9rer un fichier <code>package.json</code> \xE0 la racine de votre projet en fonction des r\xE9ponses que vous aurez donn\xE9</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450840.6199">@dollar@ cd myproject
@dollar@ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See @backtick@npm help json@backtick@ for definitive documentation on these fields
and exactly what they do.

Use @backtick@npm install &lt;pkg&gt;@backtick@ afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (myproject)
version: (1.0.0)
description: My first example in TypeScript
entry point: (index.js)
test command:
git repository:
keywords:
author: Guillaume EHRET
license: (ISC) MIT
About to write to /home/devmind/Workspace/web/myproject/package.json:

{
  &quot;name&quot;: &quot;myproject&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;My first example in TypeScript&quot;,
  &quot;main&quot;: &quot;index.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo &quot;Error: no test specified&quot; &amp;&amp; exit 1&quot;
  },
  &quot;author&quot;: &quot;Guillaume EHRET&quot;,
  &quot;license&quot;: &quot;MIT&quot;
}&lt;/pkg&gt;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450840.6199')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><code>npm</code> permet d&#8217;installer des packages et des librairies. Par exemple pour installer typescript vous lancerez</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450841.7036">npm install typescript</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450841.7036')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Cettte commande va ajouter un bloc <code>dependencies</code> dans le fichier <code>package.json</code>. Comme vous n&#8217;avez pas sp\xE9cifier de version <code>npm</code> prend la derni\xE8re disponible. <code>npm</code> utilise les num\xE9ros de version s\xE9mantique. Dans l&#8217;exemple ci dessous le <code>^</code> (caret) indique que <code>npm</code> t\xE9l\xE9chargera au moins une version @GT= 3.5.3 et @LT 4.0.0</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" id="1732912450841.984"><span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;typescript&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.5.3&quot;</span>
<span class="hljs-punctuation">}</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450841.984')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si vous utilisez un <code>~</code> \xE0 la place de <code>^</code>, <code>npm</code> ne pourra t\xE9l\xE9charger que les versions @GT= 3.5.3 et @LT 3.6.0
Si vous n&#8217;utilisez aucune marque <code>npm</code> chargera la version sp\xE9cifi\xE9e.</p>
</div>
<div class="paragraph">
<p>Il existe plusieurs autres possibilit\xE9s et vous trouverez plus d&#8217;informations sur <a href="https://semver.org/" class="bare">https://semver.org/</a></p>
</div>
<div class="paragraph">
<p><code>npm</code> t\xE9l\xE9charge les librairies dans le r\xE9pertoire <code>node_modules</code> de votre projet. Ce r\xE9pertoire <code>node_modules</code> ne doit jamais \xEAtre commit\xE9 dans git car il peut \xEAtre tr\xE8s volumineux et on pr\xE9f\xE9rera le r\xE9installer lors d&#8217;un clone d&#8217;un projet via</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450841.0571">npm install</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450841.0571')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_2_installer_typescript">Etape 2 : Installer typescript</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous avons utilis\xE9 <code>npm</code> dans l&#8217;\xE9tape pr\xE9c\xE9dente pour installer TypeScript.</p>
</div>
<div class="paragraph">
<p>Nous pouvons personnaliser la configuration TypeScript en ajoutant un fichier <code>tsconfig.json</code>. Pour cel\xE0 vous pouvez ex\xE9cuter <code>./node_modules/.bin/tsc --init</code>. Les diff\xE9rentes valeurs possibles sont d\xE9finies sur cette <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">page</a>.</p>
</div>
<div class="paragraph">
<p>Par exemple dans notre cas nous allons pr\xE9ciser plusieurs options de compilation</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" id="1732912450842.2578"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;compilerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-comment">/* Specify ECMAScript target version: &#x27;ES3&#x27; (default). Here ES5 to be compatible with all web browsers */</span>
    <span class="hljs-attr">&quot;target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ES5&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-comment">/* Specify module code generation: &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27; or &#x27;es2015&#x27;. */</span>
    <span class="hljs-attr">&quot;module&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;commonjs&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-comment">/* Specify library files to be included in the compilation:  */</span>
    <span class="hljs-attr">&quot;lib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">&quot;esnext&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-string">&quot;dom&quot;</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-comment">/* We want to generate a sourcemap  */</span>
    <span class="hljs-attr">&quot;sourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>
    <span class="hljs-comment">/* All files will be compiled in build directory  */</span>
    <span class="hljs-attr">&quot;outDir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./build&quot;</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;include&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">&quot;src/**/*&quot;</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;exclude&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;node_modules&quot;</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450842.2578')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En gros avec cette configuration, nous indiquons au compilateur de prendre les fichiers TypeScript dans le r\xE9pertoire <code>src</code> et les compiler en EcmaScript 5 dans le r\xE9pertoire <code>build  en utilisant @backtick@commonjs</code> comme gestionnaire de modules.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_3_ecrire_du_code_en_typescript">Etape 3 : Ecrire du code en TypeScript</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le syst\xE8me de types est la caract\xE9ristique essentielle du langage. Si vous avez une fonction</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450842.9888"><span class="hljs-title function_">great</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>){
    <span class="hljs-keyword">return</span> <span class="hljs-meta">@backtick</span><span class="hljs-meta">@Hi</span>, <span class="hljs-meta">@dollar</span>@{name}<span class="hljs-meta">@backtick</span>@;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450842.9888')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En Javascript vous pourriez \xE9crire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450842.0876"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">great</span>(<span class="hljs-number">123</span>));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450842.0876')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Mais en TypeScript le compilateur va retourner l&#8217;erreur "Argument type 123 is not assignable to type string". Dans les IDE vous allez avoir l&#8217;erreur au moment ou vous \xE9crivez votre code (ceci \xE9vite bon nombre de bugs). TypeScript fait aussi de l&#8217;inf\xE9rence de type. Dans le code ci dessous le langage d\xE9duit que le type de la variable <code>age</code> est un num\xE9rique et donc il va vous emp\xEAcher de lui attribuer une autre valeur. Vous aurez \xE9galement une erreur de type sur la deuxi\xE8me ligne</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450842.923"><span class="hljs-keyword">let</span> age = <span class="hljs-number">42</span>;
age = <span class="hljs-string">&quot;inconnu&quot;</span>;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450842.923')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous allons cr\xE9er deux fichiers dans <code>src/main/typescript</code>. Le premier <code>person.ts</code> contiendra la d\xE9finition d&#8217;une interface <code>Person</code> (qui est export\xE9e pour pouvoir l&#8217;utiliser dans d&#8217;autres fichiers). En TypeScript vous pouvez d\xE9finir des <a href="https://www.typescriptlang.org/docs/handbook/interfaces.html">interfaces</a> et des types customs. Ceci est tr\xE8s pratique pour \xE9tendre le syst\xE8me de types. Nous d\xE9finissons aussi une <a href="https://www.typescriptlang.org/docs/handbook/classes.html">classe</a>  <code>Greater</code> exposant une m\xE9thode pour saluer une personne</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450843.3633"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Person</span> {
    <span class="hljs-attr">firstName</span>: <span class="hljs-built_in">string</span>;
    <span class="hljs-attr">lastName</span>: <span class="hljs-built_in">string</span>;
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreaterService</span> {
    <span class="hljs-title function_">great</span>(<span class="hljs-params">person: Person</span>){
        <span class="hljs-keyword">return</span> <span class="hljs-meta">@backtick</span><span class="hljs-meta">@Hi</span>, <span class="hljs-meta">@dollar</span>@{person.<span class="hljs-property">firstName</span>} <span class="hljs-meta">@dollar</span>@{person.<span class="hljs-property">lastName</span>}<span class="hljs-meta">@backtick</span>@;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450843.3633')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez maintenant cr\xE9er un second fichier <code>index.ts</code> dans lequel nous allons importer ce que nous venons de cr\xE9er et l&#8217;appeler</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450844.6982"><span class="hljs-keyword">import</span> {<span class="hljs-title class_">GreaterService</span>, <span class="hljs-title class_">Person</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./person&quot;</span>;

<span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>:<span class="hljs-title class_">Person</span> = {
    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Guillaume&#x27;</span>,
    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;EHRET&#x27;</span>
}

<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GreaterService</span>().<span class="hljs-title function_">great</span>(person));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450844.6982')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Il ne nous reste plus qu&#8217;\xE0 compiler (via <code>tsc</code>) notre projet et lancer <code>index.js</code> qui r\xE9sulte de cette compilation (dans notre fichier de configuration TypeScript nous avon pr\xE9ciser que le r\xE9pertoire de compilation \xE9tait <code>build</code>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450844.0686">@dollar@ tsc
@dollar@ node build/index.js</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450844.0686')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Cet exemple est simpliste mais permet de voir rapidement comment le langage fonctionne. Pour d\xE9marrer sur TypeScript je vous conseille la <a href="https://www.typescriptlang.org/docs/home.html">documentation officielle</a> qui n&#8217;est pas trop mal faite \xE0 mon sens.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_etape_4_tester_notre_code_avec_jest">Etape 4 : Tester notre code avec Jest</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Il existe de nombreuses librairies pour \xE9crire des tests de votre code JavaScript ou TypeScript. <a href="https://jestjs.io/">Jest</a> a \xE9t\xE9 cr\xE9\xE9 par Facebook pour ses projets <a href="https://reactjs.org/">React</a> et le but est d&#8217;\xEAtre le plus simple possible tout en \xE9tant le plus performant. Au final vous pouvez utiliser Jest dans d&#8217;autres projets que des projets React et c&#8217;est ce que nous allons faire.</p>
</div>
<div class="paragraph">
<p>Nous allons \xE9crire des tests unitaires pour v\xE9rifier le comportement de chaque partie de notre code. Quand une portion de code a des d\xE9pendances vers d&#8217;autres parties nous allons utiliser des mocks pour simuler le fonctionnement de ces d\xE9pendances.</p>
</div>
<div class="paragraph">
<p><strong>Comment installer Jest</strong></p>
</div>
<div class="paragraph">
<p>Nous devons installer le package principal et celui d\xE9di\xE9 \xE0 TypeScript</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450844.8904">npm install jest @types/jest ts-jest -D</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450844.8904')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour param\xE9trer Jest nous allons utiliser le client</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450844.7063">jest --init

\u2714 Would you like to use Jest when running &quot;test&quot; script in &quot;package.json&quot;? \u2026 yes
\u2714 Choose the test environment that will be used for testing \u203A node
\u2714 Do you want Jest to add coverage reports? \u2026 yes
\u2714 Automatically clear mock calls and instances between every test? \u2026 yes


\u270F\uFE0F  Modified /home/devmind/Workspace/web/dev-mind.fr/package.json
\u{1F4DD}  Configuration file created at /home/devmind/Workspace/web/dev-mind.fr/jest.config.js</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450844.7063')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Jest a \xE9t\xE9 con\xE7u pour ex\xE9cuter par d\xE9faut du JavaScript. Pour param\xE9trer vos tests en TypeScript vous allez devoir modifier le fichier de configuration <code>jest.config.js</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" id="1732912450844.7395"><span class="hljs-punctuation">[</span>source<span class="hljs-punctuation">,</span> shell<span class="hljs-punctuation">,</span> subs=<span class="hljs-string">&quot;none&quot;</span><span class="hljs-punctuation">]</span>
transform<span class="hljs-punctuation">:</span>  <span class="hljs-punctuation">{</span>
<span class="hljs-attr">&quot;\\.(ts)@dollar@&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ts-jest&quot;</span>
<span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450844.7395')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si vous voulez lancer les tests via <code>yarn test</code> ou <code>npm run test</code> vous pouvez modifier votre fichier <code>package.json</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-json" id="1732912450844.483"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jest&quot;</span>
<span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450844.483')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Utiliser Jest</strong></p>
</div>
<div class="paragraph">
<p>Nous allons tester le code typescript que nous avons \xE9crit plus haut. Pour cel\xE0 cr\xE9ons <code>person.spec.ts</code> dans le r\xE9pertoire <code>src/test/typescript</code>. La syntaxe jasmine est disponible si vous souhaitez par exemple migrer votre suite de tests existantes. Mais les <a href="https://jestjs.io/docs/en/using-matchers">assertions</a> sont l\xE9g\xE9\xE8rement diff\xE9rentes</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-typescript" id="1732912450845.9634"><span class="hljs-keyword">import</span> {<span class="hljs-title class_">GreaterService</span>, <span class="hljs-title class_">Person</span>} <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../main/typescript/person&quot;</span>;

<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Test person.ts&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-keyword">let</span> <span class="hljs-attr">service</span>: <span class="hljs-title class_">GreaterService</span>;

    <span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">() =&gt;</span> service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreaterService</span>());

    <span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;should say&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
        <span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">Person</span> = {
            <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Guillaume&#x27;</span>,
            <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;EHRET&#x27;</span>
        };
        <span class="hljs-title function_">expect</span>(service.<span class="hljs-title function_">great</span>(person)).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">&#x27;Hi, Guillaume EHRET&#x27;</span>);
    })
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450845.9634')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez maintenant la lancer la commande <code>jest</code> pour ex\xE9cuter vos tests. Jest permet aussi de <a href="https://jestjs.io/docs/en/mock-functions.html">mocker</a> les d\xE9pendances d&#8217;une classe. Vous pouvez \xE9galement appeler du code <a href="https://jestjs.io/docs/en/asynchronous">asynchrone</a> dans vos tests.</p>
</div>
<div class="paragraph">
<p><strong>Couverture du code par les tests</strong></p>
</div>
<div class="paragraph">
<p>Jest comprend tout ce qu&#8217;il faut pour v\xE9rifier que votre code est bien tester. Vous pouvez ajouter l&#8217;option <code>--coverage</code> ppour g\xE9n\xE9rer un rapport</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450845.4575">devmind@devmind:~/Workspace/web/myproject@dollar@ jest --coverage
PASS  src/test/typescript/person.spec.ts
Test person.ts
\u2713 should say (4ms)

-----------|----------|----------|----------|----------|-------------------|
File       |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |
-----------|----------|----------|----------|----------|-------------------|
All files  |      100 |      100 |      100 |      100 |                   |
person.ts  |      100 |      100 |      100 |      100 |                   |
-----------|----------|----------|----------|----------|-------------------|
Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        1.358s, estimated 2s
Ran all test suites.</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450845.4575')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vous pouvez donc maintenant commencer \xE0 coder en <a href="https://www.typescriptlang.org/docs/home.html">TypeScript</a> et tester votre code avec Jest. Je vous ai laiss\xE9 les diff\xE9rents points d&#8217;entr\xE9e si vous voulez aller plus loin.</p>
</div>
<div class="paragraph">
<p>Au niveau des tests unitaires <a href="https://jestjs.io/">Jest</a> est beaucoup plus rapide que Karma car les tests ne sont pas lanc\xE9s dans un navigateur headless ou non</p>
</div>
<div class="paragraph">
<p>Si vous voulez plus d&#8217;infos vous pouvez consulter ce repo <a href="https://gitlab.com/javamind/typescript-starter">Gitlab</a></p>
</div>
</div>
</div>`;var xv=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_ecosyst\xE8me_android">Ecosyst\xE8me Android</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_android_los_le_plus_utilis\xE9">Android l&#8217;OS le plus utilis\xE9</a></li>
<li><a class="link" fragment="#_principe_de_la_programmation_mobile">Principe de la programmation mobile</a></li>
</ul>
</li>
<li><a class="link" fragment="#_plateforme_android">Plateforme Android</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_noyau_linux">Noyau Linux</a></li>
<li><a class="link" fragment="#_couche_dabstraction_hardware">Couche d&#8217;abstraction hardware</a></li>
<li><a class="link" fragment="#_langages_de_programmation">Langages de programmation</a></li>
<li><a class="link" fragment="#_s\xE9curit\xE9">S\xE9curit\xE9</a></li>
</ul>
</li>
<li><a class="link" fragment="#_la_fragmentation">La fragmentation</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_fragmentation_au_niveau_des_versions">Fragmentation au niveau des versions</a></li>
<li><a class="link" fragment="#_fragmentation_au_niveau_des_\xE9crans">Fragmentation au niveau des \xE9crans</a></li>
<li><a class="link" fragment="#_fragmentation_au_niveau_mat\xE9riel">Fragmentation au niveau mat\xE9riel</a></li>
</ul>
</li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Mon objectif est de vous montrer comment d\xE9velopper une application Android de A \xE0 Z en utilisant les derni\xE8res pr\xE9conisations de Google. Il y a beaucoup de choses \xE0 \xE9crire sur le sujet et je le ferai dans plusieurs articles. Dans cette premi\xE8re partie nous allons parler de l&#8217;\xE9cosyst\xE8me Android et de la plateforme : chose essentielle si vous voulez comprendre les sp\xE9cificit\xE9s du d\xE9veloppement Android.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_pf_00.png" alt="Comprendre la programmation Android">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ecosyst\xE8me_android">Ecosyst\xE8me Android</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_android_los_le_plus_utilis\xE9">Android l&#8217;OS le plus utilis\xE9</h3>
<div class="paragraph">
<p>Il y a deux acteurs majeurs dans le monde du mobile : Apple (<a href="https://www.apple.com/fr/ios/">iOS</a>) et Google (<a href="https://www.android.com/">Android</a>). Android est aujourd&#8217;hui l&#8217;OS sur mobile le plus utilis\xE9 dans le monde. Pr\xE8s de 70% des utilisateurs dans les pays occidentaux utilisent cette plateforme. En Afrique ou en Asie, la politique tarifaire d&#8217;Apple, fait que les parts de march\xE9 Android sont encore plus fortes et continuent \xE0 grimper.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_eco_01.png" alt="R\xE9partition des OS mobiles">
</div>
<div class="title">R\xE9partition des OS mobiles (source statscounter 2019)</div>
</div>
<div class="paragraph">
<p>Faire de la programmation mobile a un int\xE9r\xEAt. L&#8217;acc\xE8s \xE0 l&#8217;informatique (web ou autre) se fait de plus en plus avec des mobiles et tablettes. Android est devenu l&#8217;OS le plus utilis\xE9 au niveau mondial tout syst\xEAme confondu</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_eco_03.png" alt="Desktop vs mobile">
</div>
<div class="title">R\xE9partition mobile vs desktop (source statscounter 2019)</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_eco_02.png" alt="R\xE9partition des OS">
</div>
<div class="title">R\xE9partition des OS (source statscounter 2019)</div>
</div>
</div>
<div class="sect2">
<h3 id="_principe_de_la_programmation_mobile">Principe de la programmation mobile</h3>
<div class="paragraph">
<p>La mobilit\xE9 a transform\xE9 les devices que nous utilisons. Quand vous \xEAtes sur un PC fixe ou un portable vous avez toujours \xE0 peu pr\xE8s les m\xEAmes composants : CPU, carte graphique, disque dur, lecteur carte photo, ports d&#8217;entr\xE9e/sortie. Sur un mobile vous allez avoir plus de composants pour vous aider dans ce contexte de mobilit\xE9 : GPS, cam\xE9ra, appareil photo, acc\xE9lom\xE8tre, podom\xE8tre&#8230;&#8203; Nous avons de plus en plus de capteurs pour interpr\xE9ter le contexte d&#8217;utilisation du device</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_eco_04.png" alt="Capteurs des devices mobiles">
</div>
<div class="title">Capteurs des devices mobiles</div>
</div>
<div class="paragraph">
<p>La sp\xE9cificit\xE9 de la programmation mobile, est de proposer des applications qui r\xE9cup\xE9rent et aggr\xE8gent les donn\xE9es \xE9mises par les diff\xE9rents capteurs pour r\xE9pondre \xE0 un besoin utilisateur. Quand vous voulez vous interfacer avec ces capteurs, apporter de la r\xE9activit\xE9 dans vos application, le d\xE9veloppement natif est la solution.</p>
</div>
<div class="paragraph">
<p>Cr\xE9er une application mobile pour simplement afficher du contenu statique n&#8217;a pas de sens. Pour ce besoin, on pr\xE9f\xE9rera les applications web responsives (PWA) qui sont beaucoup plus optimales et moins co\xFBteuses. Une application native doit \xEAtre dynamique et profiter des API et des capteurs expos\xE9s par les devices.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_plateforme_android">Plateforme Android</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Voici une image simplifi\xE9e de la plateforme Android</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_pf_01.png" alt="Android se base sur Linux">
</div>
</div>
<div class="sect2">
<h3 id="_noyau_linux">Noyau Linux</h3>
<div class="paragraph">
<p>Android a \xE9t\xE9 construit sur un <a href="https://www.kernel.org/">noyau Linux</a>. Mais Android n&#8217;est pas totalement Open Source. Seule une <a href="https://source.android.com/">partie</a> est libre de droit.</p>
</div>
<div class="paragraph">
<p>Android s&#8217;appuie sur les forces de Linux pour fournir un OS stable et fiable : gestion de la m\xE9moire, gestion des processus, s\xE9curit\xE9&#8230;&#8203;</p>
</div>
</div>
<div class="sect2">
<h3 id="_couche_dabstraction_hardware">Couche d&#8217;abstraction hardware</h3>
<div class="paragraph">
<p>Android d\xE9finit une couche abstraite pour s&#8217;interfacer avec les diff\xE9rents capteurs ou \xE9lements de bas niveau d&#8217;un device :  HAL (Hardware Abstraction Layer). Les diff\xE9rents constructeurs de mobile doivent impl\xE9menter cette couche pour que leur t\xE9l\xE9phone puisse fonctionner. Ils doivent \xE9galement prouver que leurs t\xE9l\xE9phones sont capables de r\xE9pondre aux exigences de tests demand\xE9es par Google. Il existe des tests de compatibilit\xE9s avec une version de l&#8217;OS (<a href="https://source.android.com/compatibility/cts">CTS compatibility test suite</a>) et des d&#8217;autres tests compl\xE9mentaires (<a href="https://source.android.com/compatibility/vts">VTS Vendor test suite</a>).</p>
</div>
<div class="paragraph">
<p>Ces d\xE9veloppements peuvent \xEAtre longs et co\xFBteux. C&#8217;est pour cette raison, que les constructeurs ne font pas \xE9voluer leurs t\xE9l\xE9phones. Leur but est de vendre toujours plus de nouveaux devices, et non de maintenir les anciens. Ces probl\xE8mes de mises \xE0 jour entra\xEEnent une grosse fragmentation dans l&#8217;utilisation des versions de l&#8217;OS. Cette fragmentation li\xE9e aux versions du syst\xE8me d&#8217;exploitation, est moins pr\xE9sente dans le monde iOS. Comme Apple est \xE0 la fois \xE9diteur et constructeur, tout est fait pour que chaque nouvelle version soit support\xE9e par les anciens devices (troll: sauf quand ils introduident de l&#8217;obsolescence programm\xE9e).</p>
</div>
</div>
<div class="sect2">
<h3 id="_langages_de_programmation">Langages de programmation</h3>
<div class="paragraph">
<p>Le coeur d&#8217;Android est \xE9crit en <a href="http://www.open-std.org/jtc1/sc22/wg21/">C ou C++</a> et plusieurs librairies natives sont accessibles (<a href="https://developer.android.com/ndk/">NDK Native development kit</a>). Vous pouvez \xE9crire vos applications en C mais pour faciliter la mise en place d&#8217;applications, Google a pouss\xE9 les d\xE9veloppeurs \xE0 utiliser le langage Java depuis les d\xE9buts. Java est parfois verbeux mais il a l&#8217;avantage d&#8217;\xEAtre simple et d&#8217;amener un cadre de d\xE9veloppement.</p>
</div>
<div class="sect3">
<h4 id="_machine_virtuelle">Machine virtuelle</h4>
<div class="paragraph">
<p>Android propose donc une machine virtuelle pour ex\xE9cuter du bytecode. Ce n&#8217;est pas une JVM classique. Les ing\xE9nieurs de chez Google ont essay\xE9 de travailler sur un bytecode avec une plus faible empreinte m\xE9moire. En Android le compilateur va cr\xE9er des fichier .dex (Dalvik executable). <a href="https://javamind-fr.blogspot.com/2012/10/dalvik-la-vm-android.html">Dalvik</a> \xE9tait le premier compilateur utilis\xE9 sur la plateforme. Comme les JVM actuelles, Dalvik transformait le bytecode en langage machine \xE0 l&#8217;ex\xE9cution : compilation Just In Time (JIT).</p>
</div>
<div class="paragraph">
<p>Aujourd&#8217;hui cette machine virtuelle a \xE9t\xE9 remplac\xE9e par <a href="http://javamind-fr.blogspot.com/2014/06/art-nouvelle-machine-virtuelle-java.html">ART (Android Runtime)</a>. La transformation en langage machine est faite \xE0 l&#8217;installation de l&#8217;application : compilation AOT (ahead of time). Comme le bytecode est compil\xE9 plus t\xF4t en langage machine, les applications se lancent plus vite et le CPU est moins solliciter lors de l&#8217;ex\xE9cution (et donc pr\xE9servation de votre batterie).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_pf_02.png" alt="Android compilation">
</div>
</div>
<div class="paragraph">
<p>J&#8217;ai volontairement fait un abus de langage en indiquant que le bytecode \xE9tait transform\xE9 en langage machine. Ce n&#8217;est pas vraiment le cas. Si nous avions vraiment du langage machine nous n&#8217;aurions plus besoin de VM. En fait \xE0 l&#8217;installation le bytecode est transform\xE9 en un format interm\xE9diaire : fichiers .oat (ahead of time). La VM est n\xE9cessaire car elle va g\xE9rer les allocations m\xE9moires et la lib\xE9ration de l&#8217;espace avec le Garbage collector. M\xEAme si la compilation n&#8217;est plus Just In Time, des optimisations sont toujours faites \xE0 l&#8217;ex\xE9cution pour que le code s&#8217;ex\xE9cute le plus vite possible.</p>
</div>
<div class="paragraph">
<p>Vous trouverez plus d&#8217;informations dans la <a href="https://source.android.com/devices/tech/dalvik/index.html">documentation</a>.</p>
</div>
<div class="paragraph">
<p>Toutes ces adaptations par rapport \xE0 une machine virtuelle Java sont au coeur du proc\xE8s entre Google et Oracle. Oracle n&#8217;a pas rachet\xE9 Java \xE0 Sun pour se lancer dans l&#8217;Open Source. Ils l&#8217;ont surtout rachet\xE9 en pensant faire payer des licences \xE0 Google pour chaque appareil vendus. Cette guerre commerciale est en train \xE0 mon sens de tuer l&#8217;utilisation de Java sur la plateforme. Mais pour une fois c&#8217;est aussi dans l&#8217;int\xE9r\xEAt des d\xE9veloppeurs car l&#8217;aspect financier a certainement \xE9t\xE9 un catalyseur pour l&#8217;adoption de Kotlin.</p>
</div>
</div>
<div class="sect3">
<h4 id="_langage_kotlin">Langage Kotlin</h4>
<div class="paragraph">
<p>En 2017 une grande annonce a \xE9t\xE9 faite \xE0 Google IO. Le langage <a href="https://kotlinlang.org/">Kotlin</a> devenait le deuxi\xE8me langage de r\xE9f\xE9rence pour d\xE9velopper des applications. 2 ans apr\xE8s 50% des d\xE9veloppeurs utilisent Kotlin et Google a <a href="https://android-developers.googleblog.com/2019/05/google-io-2019-empowering-developers-to-build-experiences-on-Android-Play.html">annonc\xE9 \xE0 Google I/O 2019</a> que la plateforme devenait Kotlin-first. Ils pr\xE9conisent de d\xE9marrer les nouveaux d\xE9veloppements en Kotlin.</p>
</div>
<div class="paragraph">
<p>Si vous voulez en savoir plus sur le langage Kotlin et les avantages \xE0 l&#8217;utiliser sur la plateforme Android, vous pouvez lire <a href="https://dev-mind.fr/blog/2019/kotlin_et_android.html">mon article</a> sur le sujet.</p>
</div>
</div>
<div class="sect3">
<h4 id="_studio_de_d\xE9veloppement">Studio de d\xE9veloppement</h4>
<div class="paragraph">
<p>Initialement le studio de d\xE9veloppement pr\xE9conis\xE9 \xE9tait Eclipse mais plus les fonctionnalit\xE9s s&#8217;enrichissaient, plus l&#8217;IDE \xE9tait long et devenait inutilisable. Google a donc travaill\xE9 en partenariat avec <a href="https://www.jetbrains.com/">JetBrains</a> (\xE9diteur de Webstorm, IntelliJ, Kotlin) pour adapter leur version Open Source et cr\xE9er <a href="https://developer.android.com/studio/">Android Studio</a>.</p>
</div>
<div class="paragraph">
<p>Vous trouverez \xE0 l&#8217;int\xE9rieur de cet IDE toutes les fonctionnalit\xE9s n\xE9c\xE9ssaires aux d\xE9veloppements. Vous avez des utilitaires pour</p>
</div>
<div class="ulist">
<ul>
<li>
<p>v\xE9rifier votre code</p>
</li>
<li>
<p>g\xE9rer les diff\xE9rentes versions du SDK Android</p>
</li>
<li>
<p>lancer un device virtuel sur votre machine pour tester manuellement ou automatiquement votre code</p>
</li>
<li>
<p>monitorer et debugguer votre application</p>
</li>
<li>
<p>packager votre application afin de la publier sur le store Google</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_s\xE9curit\xE9">S\xE9curit\xE9</h3>
<div class="paragraph">
<p>Comme Android est bas\xE9 sur un noyau Linux, la plateforme b\xE9n\xE9ficie de la s\xE9curit\xE9 impl\xE9ment\xE9e au niveau du noyau.</p>
</div>
<div class="paragraph">
<p>Quand une application est install\xE9e, Android lui assigne un user ID. Chaque application est lanc\xE9e dans un processus s\xE9par\xE9 et utilise sa propre instance d\u2019ART (machine virtuel). Les droits d\u2019ex\xE9cution sont propres \xE0 cet utilisateur applicatif. L\u2019application n\u2019a pas de notion de cet ID. Ainsi une application ne peut pas acc\xE9der aux donn\xE9es d\u2019une autre application car tout est boucl\xE9 par cet artifice. C\u2019est la m\xEAme chose pour les applications natives.</p>
</div>
<div class="paragraph">
<p>Chaque application est donc isol\xE9e des autres et poss\xE8dent ses propres ressources CPU, m\xE9moire&#8230;&#8203;.</p>
</div>
<div class="paragraph">
<p>Au dessus de cette s\xE9curit\xE9 "bas niveau", Android a ajout\xE9 au fil du temps un niveau de s\xE9curit\xE9 plus "haut niveau". Chaque action externe pouvant \xEAtre demand\xE9e par votre application doit \xEAtre d\xE9clar\xE9e dans un fichier manifest. Par exemple</p>
</div>
<div class="ulist">
<ul>
<li>
<p>lire les contacts,</p>
</li>
<li>
<p>prendre une photo,</p>
</li>
<li>
<p>acc\xE9der \xE0 Internet</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Un utilisateur peut choisir de laisser les droits demand\xE9s \xE0 l&#8217;installation, mais il peut aussi choisir d&#8217;enlever certains droits. Personnellement je limite le nombre d&#8217;application pouvant se connecter au r\xE9seau, pouvant utiliser mes contacts, mes fichiers&#8230;&#8203;. (sur un Android sans surcouche vous devez aller dans les param\xE8tres dans le menu "Appli et notifications", dans les options avanc\xE9es et sur l&#8217;entr\xE9e "Autorisation des applications").</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_la_fragmentation">La fragmentation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>La fragmentation est un r\xE9el probl\xE8me sur la plateforme et en tant que d\xE9veloppeur vous devrez faire des choix en fonction de votre cible utilisateur.</p>
</div>
<div class="paragraph">
<p>Android est un OS utilisable par n&#8217;importe quel fabricant de t\xE9l\xE9phone (on mettra \xE0 part le cas <a href="https://www.frandroid.com/marques/huawei/595661_huawei-android-google-et-les-etats-unis-toutes-les-reponses-a-vos-questions">Huawei</a>). Comme je l&#8217;ai dit plus haut, le coup pour adapter une version \xE0 un device n&#8217;est pas n\xE9gligeable. C&#8217;est pour cette raison  que les constructeurs limitent ces mises \xE0 jour. Leur int\xE9r\xEAt est de vendre de nouveaux devices et non de les maintenir.</p>
</div>
<div class="paragraph">
<p>La fragmentation n&#8217;est pas li\xE9e qu&#8217;aux versions de l&#8217;OS mais nous avons \xE9galement une fragmentation li\xE9e aux devices et \xE0 leurs composants. En fonction des gammes de prix, chaque device peut avoir des caract\xE9ristiques techniques diff\xE9rentes.</p>
</div>
<div class="sect2">
<h3 id="_fragmentation_au_niveau_des_versions">Fragmentation au niveau des versions</h3>
<div class="paragraph">
<p>Depuis quelques ann\xE9es, Google sort une nouvelle version d&#8217;Android par an. G\xE9n\xE9ralement les d\xE9veloppeurs peuvent commencer \xE0 tester et faire des retours sur le second et troisi\xE8me trimestre et la version est mise \xE0 disposition au dernier trimestre d&#8217;une ann\xE9e civile.</p>
</div>
<div class="paragraph">
<p>Chaque nouvelle version est associ\xE9e \xE0 une lettre (qui s&#8217;incr\xE9mente \xE0 chaque version) et \xE0 un dessert (choisi par l&#8217;\xE9quipe Android).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_fg_01.png" alt="Versions Android">
</div>
</div>
<div class="paragraph">
<p>Vous pouvez voir que certains de ces desserts sont des desserts fran\xE7ais. Depuis les d\xE9buts, l&#8217;\xE9quipe Android comprend plusieurs fran\xE7ais. Vous connaissez peut \xEAtre <a href="https://twitter.com/romainguy">Romain Guy</a> qui est r\xE9guli\xE8rement pr\xE9sent dans les conf\xE9rences.</p>
</div>
<div class="paragraph">
<p>Quand vous d\xE9marrez un nouveau d\xE9veloppement vous devez faire un choix de version. En fait vous devez faire deux choix</p>
</div>
<div class="ulist">
<ul>
<li>
<p>d\xE9finir une version cible : g\xE9n\xE9ralement vous devez toujours choisir la derni\xE8re version de l&#8217;OS</p>
</li>
<li>
<p>d\xE9finir une version minimale : vous d\xE9finissez quelle est la version minimale de l&#8217;OS support\xE9e. Le compilateur est capable de vous alertez quand vous essayez d&#8217;utiliser une API qui n&#8217;est pas support\xE9e</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_fg_02.png" alt="Choix de la version Android">
</div>
</div>
<div class="paragraph">
<p>Les statistiques d&#8217;utilisation des versions sont publi\xE9es r\xE9guli\xE8rement sur <a href="https://developer.android.com/about/dashboards/">ce tableau de bord</a> qui compile les donn\xE9es remont\xE9es par Google Store (la source officielle des applications Android).</p>
</div>
<div class="paragraph">
<p>Dans le monde du web, vous pouvez utiliser des polyfills pour utiliser les derni\xE8res nouveaut\xE9s du langage dans des navigateurs qui n&#8217;impl\xE9mentent pas encore ces fonctionnalit\xE9s. Dans le monde Android, Google vous propose aussi d&#8217;utiliser des objets particuliers qui g\xE8rent cette r\xE9trocompatibilit\xE9. La classe de base pour d\xE9velopper un \xE9cran est <code>android.app.Activity</code>, mais dans la pratique nous utiliserons toujours <code>androidx.appcompat.app.AppCompatActivity</code> qui a \xE9t\xE9 d\xE9velopp\xE9e pour porter les derni\xE8res nouveaut\xE9s sur les anciennes releases Android.</p>
</div>
</div>
<div class="sect2">
<h3 id="_fragmentation_au_niveau_des_\xE9crans">Fragmentation au niveau des \xE9crans</h3>
<div class="paragraph">
<p>Apr\xE8s les versions, la plus grosse diff\xE9rence entre les devices concerne la qualit\xE9 et la taille de l&#8217;\xE9cran.</p>
</div>
<div class="paragraph">
<p>Pour rappel</p>
</div>
<div class="ulist">
<ul>
<li>
<p>la <strong>r\xE9solution d&#8217;un \xE9cran</strong> repr\xE9sente le nombre de pixels en horizontal multipl\xE9 par le nombre de pixel en vertical. Par exemple (800 x 600)</p>
</li>
<li>
<p>la <strong>taille d&#8217;un \xE9cran</strong> est le nombre de pouce de la diagonale de l&#8217;\xE9cran</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Android propose une classification li\xE9e \xE0 la largeur d&#8217;un \xE9cran.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_fg_03.png" alt="taille ecran Android">
</div>
</div>
<div class="paragraph">
<p>Comme dans le monde du web, vous devez adpater votre UI soit en utilisant des composants et layout redimensionnable, soit en utilisant des layouts diff\xE9rents en fonction de la taille (en Android vous pouvez utiliser des fragments)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_fg_04.png" alt="UI flexible sous Android">
</div>
</div>
<div class="paragraph">
<p>La <strong>densit\xE9 de pixels</strong> est le nombre de points par pouce (dot per inch &#8658; dpi). La densit\xE9 est importante sur un device. Par exemple si vous affichez une image exprim\xE9e en pixel sur 2 \xE9crans de densit\xE9 diff\xE9rentes vous n&#8217;aurez pas le m\xEAme rendu</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_fg_05.png" alt="Densit\xE9 sous Android avec image en px">
</div>
</div>
<div class="paragraph">
<p>Si on affiche les m\xEAmes images exprim\xE9es avec l&#8217;unit\xE9 <strong>dp</strong> (density-independent pixels) vous aurez le rendu suivant</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_fg_06.png" alt="Densit\xE9 sous Android avec image en dp">
</div>
</div>
<div class="paragraph">
<p>La r\xE8gle est de ne <strong>jamais exprimer des tailles en px dans une application mais toujours en dp</strong> (dans le monde du web on utilisera l&#8217;unit\xE9 em). Pour exprimer la taille des polices d&#8217;\xE9criture, vous utiliserez plut\xF4t l&#8217;unit\xE9 <strong>sp</strong> (scalable pixels) qui a l&#8217;avantage de grossir en fonction des param\xE8tres d&#8217;accessibilit\xE9 utilisateur.</p>
</div>
<div class="paragraph">
<p>Vous allez pouvoir cr\xE9er des ressources diff\xE9rentes en fonction de la taille. Quand vous avez un bel \xE9cran avec une bonne r\xE9solution, une forte densit\xE9, vous attendrez des images de qualit\xE9. Ces m\xEAmes images n&#8217;ont aucun int\xE9r\xEAt sur des \xE9crans qui ne sont pas capables de les afficher.</p>
</div>
</div>
<div class="sect2">
<h3 id="_fragmentation_au_niveau_mat\xE9riel">Fragmentation au niveau mat\xE9riel</h3>
<div class="paragraph">
<p>Nous nous sommes arr\u1EBFt\xE9s sur les 2 plus grosses diff\xE9rences entre device mais on pourrait aller plus loin car vous avez aussi une grosse diff\xE9rence de qualit\xE9 et de performances au niveau des composants de base d&#8217;un mobile ou d&#8217;une tablette. Vous n&#8217;avez pas les m\xEAmes composants dans les devices d&#8217;entr\xE9e de gamme et ceux plus luxueux</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_fg_07.png" alt="Fragmentation mat\xE9rielle">
</div>
</div>
<div class="paragraph">
<p>Pour offrir une bonne exp\xE9rience utilisateur, vous pouvez appliquer quelques r\xE8gles simples</p>
</div>
<div class="paragraph">
<p>Comme vos utilisateurs peuvent et ont pour la plupart des ressources limit\xE9es essayer de</p>
</div>
<div class="ulist">
<ul>
<li>
<p>limiter les appels r\xE9seaux qui consomment beaucoup de ressources et donc usent la batterie,</p>
</li>
<li>
<p>veiller \xE0 avoir un livrable d&#8217;une taille raisonnable. Si vous int\xE9grez beaucoup d&#8217;images faites plusieurs archives avec des cibles diff\xE9rentes en fonction de la qualit\xE9 des devices</p>
</li>
<li>
<p>\xE9viter de stocker trop de donn\xE9es sur le t\xE9l\xE9phone de vos utilisateurs (que ce soit sur le disque ou dans la base de donn\xE9es partag\xE9es). Si vous devez stocker des \xE9l\xE9ments pr\xE9voyer de purger les \xE9l\xE9ments inutiles</p>
</li>
<li>
<p>privil\xE9gier des UI sombres qui pr\xE9servent la batterie</p>
</li>
<li>
<p>appliquer le principe KISS (keep it simple, stupid)</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous venons de voir comment la plateforme a \xE9t\xE9 construite et les probl\xE8mes li\xE9s \xE0 la fragementation. Dans le prochain article nous rentrerons dans le concret et nous regarderons comment d\xE9velopper une premi\xE8re application Android.</p>
</div>
<div class="paragraph">
<p>Si la plateforme vous int\xE9resse je vous conseille de suivre quelques passionn\xE9s (Googlers ou non) : <a href="https://twitter.com/chethaase">Chet Haase</a>, <a href="https://twitter.com/JakeWharton">Jake Wharton</a>, <a href="https://twitter.com/romainguy">Romain Guy</a>, <a href="https://twitter.com/cyrilmottier">Cyril Mottier</a></p>
</div>
<div class="paragraph">
<p>Si vous voulez plus d&#8217;informations vous pouvez consulter <a href="https://developer.android.com" class="bare">https://developer.android.com</a> et si vous \xEAtes fan de podcast en fran\xE7ais je vous conseille de suivre <a href="http://androidleakspodcast.com/" class="bare">http://androidleakspodcast.com/</a></p>
</div>
</div>
</div>`;var Cv=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_kotlin_simplifie_la_syntaxe">Kotlin simplifie la syntaxe</a></li>
<li><a class="link" fragment="#_null_safety">Null safety</a></li>
<li><a class="link" fragment="#_immutabilit\xE9">Immutabilit\xE9</a></li>
<li><a class="link" fragment="#_valeurs_par_d\xE9faut">Valeurs par d\xE9faut</a></li>
<li><a class="link" fragment="#_classes">Classes</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_classes_pojo">Classes POJO</a></li>
<li><a class="link" fragment="#_classes_internes">Classes internes</a></li>
<li><a class="link" fragment="#_classes_anonymes">Classes anonymes</a></li>
</ul>
</li>
<li><a class="link" fragment="#_extensions_de_fonction">Extensions de fonction</a></li>
<li><a class="link" fragment="#_fonctions_dordre_sup\xE9rieur">Fonctions d\u2019ordre sup\xE9rieur</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_exemple_dans_le_langage">Exemple dans le langage</a></li>
<li><a class="link" fragment="#_ecrire_un_dsl">Ecrire un DSL</a></li>
<li><a class="link" fragment="#_android">Android</a></li>
</ul>
</li>
<li><a class="link" fragment="#_coroutines">Coroutines</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>En 2017 une grande annonce a \xE9t\xE9 faite \xE0 <a href="https://www.youtube.com/watch?v=fPzxfeDJDzY&amp;list=PLWz5rJ2EKKc-odHd6XEaf7ykfsosYyCKp&amp;index=51&amp;t=0s">Google IO</a>. Le langage <a href="https://kotlinlang.org/">Kotlin</a> devenait le deuxi\xE8me langage de r\xE9f\xE9rence pour d\xE9velopper des applications Android. <a href="https://kotlinlang.org/">Kotlin</a> a \xE9t\xE9 cr\xE9\xE9 par la soci\xE9t\xE9 <a href="https://www.jetbrains.com/">JetBrains</a>, \xE9diteur de <a href="https://developer.android.com/studio/">Android Studio</a> (IDE de r\xE9f\xE9rence pour le d\xE9veloppement Android). <a href="https://www.jetbrains.com/">JetBrains</a> collabore depuis plusieurs ann\xE9e avec Google pour toujours am\xE9liorer ce studio de d\xE9veloppement. Ce studio a \xE9t\xE9 initialement \xE9t\xE9 \xE9crit en Java puis en Kotlin.</p>
</div>
<div class="paragraph">
<p>Pourquoi Google a t&#8217;il fait cette annonce ? Etait ce li\xE9 au proc\xE8s avec la soci\xE9t\xE9 Oracle sur l&#8217;utilisation de Java ?  Etait ce li\xE9 aux possibilit\xE9s offertes par ce langage ? Etait ce li\xE9 aux possibilit\xE9s offertes par cette collabiration \xE9troite entre les deux soci\xE9t\xE9s ?</p>
</div>
<div class="paragraph">
<p>Personnellement je pense que Kotlin a \xE9t\xE9 adopt\xE9 pour toutes ces raisons. <a href="https://kotlinlang.org/">Kotlin</a> a essay\xE9 de m\xEAler le meilleur de diff\xE9rents langages et je trouve qu&#8217;il a v\xE9ritablement redonn\xE9 un coup de boost aux d\xE9veloppeurs Android (moi le premier). Deux ans apr\xE8s, <a href="https://android-developers.googleblog.com/2019/05/kotlin-is-everywhere-join-global-event.html">50% des d\xE9veloppeurs Android</a> utilisent Kotlin.</p>
</div>
<div class="paragraph">
<p>En mai \xE0 Google I/O 2019, Google a <a href="https://android-developers.googleblog.com/2019/05/google-io-2019-empowering-developers-to-build-experiences-on-Android-Play.html">annonc\xE9</a> une nouvelle \xE9tape dans l&#8217;adoption de Kotlin. Les d\xE9veloppements Android deviennent Kotlin-first. Google conseille aux d\xE9veloppeurs d&#8217;utiliser Kotlin pour les nouveaux d\xE9veloppements. En interne, les librairies commencent aussi \xE0 \xEAtre \xE9crite directement en Kotlin. Comme Kotlin est 100% interop\xE9rable avec Java ce virage ne va pas p\xE9naliser les projets existants.</p>
</div>
<div class="paragraph">
<p>Dans cet article, nous allons revenir sur les int\xE9r\xEAts du langage pour comprendre pourquoi Kotlin est devenu le langage de r\xE9f\xE9rence pour les d\xE9veloppements Android.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/kotlin_et_android.png" alt="Kotlin et Android">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_kotlin_simplifie_la_syntaxe">Kotlin simplifie la syntaxe</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quand nous utilisons le langage Java et tout particuli\xE8rement quand nous devons \xE9crire une application Android, nous devons \xE9crire beaucoup de code fastidieux. Kotlin met en avant le pragmatisme et la simplicit\xE9.</p>
</div>
<div class="paragraph">
<p>La philosophie de Kotlin est :</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Tout ce qui peut \xEAtre d\xE9duit par le compilateur, n&#8217;a pas besoin d&#8217;\xEAtre \xE9crit par le d\xE9veloppeur.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Prenons l&#8217;exemple d&#8217;une classe Java permettant d&#8217;\xEAtre ex\xE9cut\xE9e et d&#8217;afficher un message <code>Hello World</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450824.234"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Dev-Mind&quot;</span>;
        System.out.println(<span class="hljs-string">&quot;Hello world &quot;</span> + name);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450824.234')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En Kotlin vous pouvez faire la m\xEAme chose en \xE9crivant</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450824.7922"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{
    <span class="hljs-keyword">val</span> name = <span class="hljs-string">&quot;Dev-Mind&quot;</span>
    println(<span class="hljs-string">&quot;Hello world @dollar@name&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450824.7922')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>La visibilit\xE9 <code>public</code> est celle par d\xE9faut et donc plus besoin de la d\xE9finir \xE0 chaque fois</p>
</li>
<li>
<p>Vous pouvez \xE9crire des fonctions non attach\xE9es \xE0 une classe (le compilateur le fera pour vous)</p>
</li>
<li>
<p>Les points virgules ne sont plus n\xE9c\xE9ssaires</p>
</li>
<li>
<p>Kotlin fait beaucoup d&#8217;inf\xE9rence de type et vous n&#8217;avez pas besoin de d\xE9finir le type si le compilateur peut le d\xE9duire (exemple du name)</p>
</li>
<li>
<p>Vous pouvez utiliser des templates de String et directement acc\xE9der au contenu d&#8217;une variable avec <code>@dollar@</code></p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_null_safety">Null safety</h2>
<div class="sectionbody">
<div class="paragraph">
<p>L&#8217;erreur la plus courante pour un d\xE9veloppeur Java, est de se retrouver avec un programme qui plante suite \xE0 une exception <code>Null Pointer Exception</code>. En Java, un objet non allou\xE9 \xE0 une r\xE9f\xE9rence nulle. En Kotlin le null est interdit. Vous aurez une erreur de compilation si vous d\xE9clarer un objet et que ce dernier n&#8217;est pas initilialis\xE9. Si vraiment vous voulez g\xE9rer une valeur nulle, tout le syst\xE8me de type a \xE9t\xE9 doubl\xE9 et vous pouvez ajouter <code>?</code> \xE0 un type pour dire qu&#8217;une valeur peut \xEAtre nulle</p>
</div>
<div class="paragraph">
<p>Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450824.8716"><span class="hljs-keyword">var</span> name:String         <span class="hljs-comment">// Erreur de compilation</span>
<span class="hljs-keyword">var</span> name:String = <span class="hljs-literal">null</span>  <span class="hljs-comment">// Erreur de compilation</span>
<span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Dev-Mind&quot;</span>   <span class="hljs-comment">// Valide et pas besoin de d\xE9finir un type car le compilateur peut le deviner</span>
<span class="hljs-keyword">var</span> name:String? = <span class="hljs-literal">null</span> <span class="hljs-comment">// Valide car on utilise le type String? qui veut dire String nullable</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450824.8716')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Au premier abord, cette fonctionnalit\xE9 peut para\xEEtre contraignante mais c&#8217;est un r\xE9el plaisir \xE0 l&#8217;utiliser et ceci \xE9vite bon nombre de bugs d&#8217;inadvertance.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_immutabilit\xE9">Immutabilit\xE9</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Une autre force de Kotlin est de pr\xE9coniser l&#8217;immutabilit\xE9. Quand vous d\xE9finissez une valeur avec le mot cl\xE9 <code>val</code> elle est non mutable. Si vous voulez changer une r\xE9f\xE9rence plus tard vous devrez utiliser le mot cl\xE9 <code>var</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450824.722"><span class="hljs-keyword">val</span> name = <span class="hljs-string">&quot;Dev-Mind&quot;</span>
name = <span class="hljs-string">&quot;Guillaume&quot;</span>      <span class="hljs-comment">// Erreur de compilation car immutable</span>

<span class="hljs-keyword">var</span> name2 = <span class="hljs-string">&quot;Dev-Mind&quot;</span>
name2 = <span class="hljs-string">&quot;Guillaume&quot;</span>     <span class="hljs-comment">// OK car mutable</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450824.722')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Kotlin impl\xE9mente les API Java pour les listes mais distingue les listes mutables et non mutables. Par d\xE9faut tout est immutable. Si vous voulez une liste mutable vous devez le pr\xE9ciser</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450824.1287"><span class="hljs-keyword">val</span> names = listOf(<span class="hljs-string">&quot;Dev-Mind&quot;</span>, <span class="hljs-string">&quot;Guillaume&quot;</span>)
names.add(<span class="hljs-string">&quot;NewName&quot;</span>)    <span class="hljs-comment">// Erreur de compilation car add n&#x27;existe pas sur une liste immutable</span>


<span class="hljs-keyword">val</span> names = mutableListOf(<span class="hljs-string">&quot;Dev-Mind&quot;</span>, <span class="hljs-string">&quot;Guillaume&quot;</span>)
names.add(<span class="hljs-string">&quot;NewName&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450824.1287')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>M\xEAme si Kotlin distingue les listes mutables et non mutables, Kotlin n&#8217;a pas r\xE9invent\xE9 de nouvelles classes pour g\xE9rer les listes. Kotlin s&#8217;appuie sur les types existants Java.</p>
</div>
<div class="paragraph">
<p>Kotlin vous pousse \xE0 appliquer des principes de la programmation fonctionnelle (dont l&#8217;immutabilit\xE9) pour le plus grand bien de votre code.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_valeurs_par_d\xE9faut">Valeurs par d\xE9faut</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Kotlin vous permet de pr\xE9ciser des valeurs par d\xE9faut \xE0 vos diff\xE9rents param\xE8tres de vos m\xE9thodes</p>
</div>
<div class="paragraph">
<p>Par exemple avec le code suivant,</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450824.846"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">formatDate</span><span class="hljs-params">(string: <span class="hljs-type">Date</span>, format: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>, addDay: <span class="hljs-type">Int</span> =<span class="hljs-number">0</span>)</span></span> : String</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450824.846')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>vous pouvez avoir diff\xE9rentes mani\xE8res d&#8217;appeler cette m\xE9thode</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450825.5435">formatDate(Date())              <span class="hljs-comment">// On ne pr\xE9cise pas les valeurs si celles par d\xE9faut sont suffisantes</span>
formatDate(Date(), <span class="hljs-string">&quot;yyyy&quot;</span>)      <span class="hljs-comment">// Dans mon cas je ne change que la deuxi\xE8me valeur</span>
formatDate(Date(), addDay = <span class="hljs-number">2</span>)  <span class="hljs-comment">// Si je veux pr\xE9ciser une valeur particuli\xE8re je peux u tiliser les param\xE8tres nomm\xE9s</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.5435')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Les param\xE8tres nomm\xE9s (comme sur la derni\xE8re ligne de notre exemple) sont tr\xE8s pratiques quand vous voulez apporter plus de lisibilit\xE9 \xE0 votre code. Par exemple si vous avez la m\xE9thode suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450825.6785"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findSpeaker</span><span class="hljs-params">(firstname: <span class="hljs-type">String</span>, lastname: <span class="hljs-type">String</span>)</span></span>: Speaker</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.6785')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Quand vous appelez votre m\xE9thode sans nommer les param\xE8tres vous ne savez jamais si c&#8217;est le nom ou pr\xE9nom qui est en premier. Il suffit que votre coll\xE8gue change la signature et inverse l&#8217;ordre des param\xE8tres et vous avez un bug totalement transparent.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450825.5154"><span class="hljs-keyword">val</span> speaker1 = findSpeaker(<span class="hljs-string">&quot;Chet&quot;</span>, <span class="hljs-string">&quot;Haase&quot;</span>)
<span class="hljs-keyword">val</span> speaker1 = findSpeaker(firstname = <span class="hljs-string">&quot;Chet&quot;</span>, lastname = <span class="hljs-string">&quot;Haase&quot;</span>)  <span class="hljs-comment">// les param\xE8tres nomm\xE9s am\xE8nent plus de lisibilit\xE9</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.5154')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_classes">Classes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les classes sont bien \xE9videmment disponible en Kotlin. Prenons un exemple pour regarder les diff\xE9rences avec les classes Java.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450825.6987"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>{ }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.6987')">Copy</button></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450825.546"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Parent</span>{}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.546')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En Java ces deux classes publiques doivent \xEAtre d\xE9finies dans 2 fichiers .java diff\xE9rent. En Kotlin vous pouvez \xE9crire le tout dans un seul fichier</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450825.7246"><span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> : <span class="hljs-type">Parent</span>()</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.7246')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Notez que la classe m\xE8re doit \xEAtre pr\xE9c\xE9d\xE9e du mot cl\xE9 <code>open</code>. Par d\xE9faut les classes Kotlin sont d\xE9finies comme <code>public final</code>. Si vous voulez ouvrir une classe \xE0 la surcharge, vous devrez le pr\xE9ciser.</p>
</div>
<div class="sect2">
<h3 id="_classes_pojo">Classes POJO</h3>
<div class="paragraph">
<p>Un POJO (Plain Old Java Object) est une simple classe qui va contenir des donn\xE9es. G\xE9n\xE9ralement sur ce type d&#8217;objet</p>
</div>
<div class="ulist">
<ul>
<li>
<p>nous d\xE9finissons des propri\xE9t\xE9s private</p>
</li>
<li>
<p>nous g\xE9n\xE9rons des constructeurs avec les valeurs obligatoires</p>
</li>
<li>
<p>nous g\xE9n\xE9rons des m\xE9thodes pour lire et modifier ces propri\xE9t\xE9s: getter, setter</p>
</li>
<li>
<p>nous g\xE9n\xE9rons des m\xE9thodes hashcode, equals, copy</p>
</li>
<li>
<p>et parfois nous \xE9crivons aussi des builders pour cr\xE9er rapidement et partiellement une instance de notre objet</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si j&#8217;essaie de cr\xE9er une classe <code>Speaker</code> avec 4 propri\xE9t\xE9s <code>id</code>, <code>firstname</code>, <code>lastname</code> et <code>age</code> je vais me retrouver avec une classe d&#8217;environ 100 lignes.</p>
</div>
<div class="paragraph">
<p>Kotlin propose les <code>data class</code> pour lesquelles le compilateur va faire tout ce travail de g\xE9n\xE9ration pour vous. Le Pojo speaker se r\xE9sume au code suivant</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450825.0144"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Speaker</span>(<span class="hljs-keyword">val</span> firstname: String,
                   <span class="hljs-keyword">val</span> lastname: String,
                   <span class="hljs-keyword">val</span> age: <span class="hljs-built_in">Int</span>? = <span class="hljs-literal">null</span>,
                   <span class="hljs-keyword">val</span> id: String = UUID.randomUUID().toString())</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.0144')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Quand votre classe a un seul constructeur vous pouvez le pr\xE9ciser dans la signature de la classe (comme dans notre classe Speaker). La suppression de tout le code inutile am\xE9liore la libilit\xE9.</p>
</div>
<div class="paragraph">
<p>Revenons \xE0 notre exemple, vous pouvez ainsi \xE9crire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450825.4846"><span class="hljs-keyword">val</span> s1 = Speaker(<span class="hljs-string">&quot;Chet&quot;</span>, <span class="hljs-string">&quot;Haase&quot;</span>)
<span class="hljs-keyword">val</span> s2 = Speaker(firstname = <span class="hljs-string">&quot;Chet&quot;</span>, lastname = <span class="hljs-string">&quot;Haase&quot;</span>)
<span class="hljs-keyword">val</span> s3 = Speaker(firstname = <span class="hljs-string">&quot;Chet&quot;</span>, lastname = <span class="hljs-string">&quot;Haase&quot;</span>, id = <span class="hljs-string">&quot;123&quot;</span>)

<span class="hljs-keyword">val</span> s4 = s1.copy(age = <span class="hljs-number">999</span>)
<span class="hljs-keyword">val</span> s5 = s1.copy()</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.4846')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le langage propose aussi la surcharge des op\xE9rateurs. L&#8217;op\xE9rateur <code>==</code> est surcharg\xE9 et fait appel \xE0 la m\xE9thode <code>equals</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450825.4272">s1 == s5   <span class="hljs-comment">// @ARROW renvoie true car Kotlin fait appel \xE0 la m\xE9thode equals</span>
s1 === s5  <span class="hljs-comment">// @ARROW renverra faux car === permet de comparer des r\xE9f\xE9rences</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450825.4272')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_classes_internes">Classes internes</h3>
<div class="paragraph">
<p>Quand vous programmez une application Android en Java, vous utilisez tr\xE8s souvent des classes internes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450826.5896"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> {

    <span class="hljs-keyword">public</span> String name(){
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dev-Mind&quot;</span>;
    }

    <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> {
        <span class="hljs-keyword">public</span> void hello(){
            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello world&quot;</span> + name()); <span class="hljs-comment">// NE COMPILE PAS car la m\xE9thode name() n&#x27;est pas visible</span>
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450826.5896')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Les classes internes en Java (<code>inner class</code>) sont non statiques par d\xE9faut et vous pouvez donc utiliser les m\xE9thodes ou attributs globaux de la classe englobante dans la classe interne. Par exemple dans la classe <code>A</code> je peux utiliser la m\xE9thode <code>name()</code> de ma classe englobante <code>HelloWorld</code>.</p>
</div>
<div class="paragraph">
<p>Une classe interne non statique a une r\xE9f\xE9rence vers sa classe englobante. Si cette derni\xE8re n&#8217;est plus utilis\xE9e, le garbage collector ne peut pas faire son travail et la supprimer. En effet elle consid\xE9r\xE9e active (utilis\xE9e par la classe interne). Dans un serveur d&#8217;application, quand nous utilisons des singletons ce concept ne pose pas de probl\xE8me. Dans le monde Android, sur un device avec des ressources limit\xE9es, c&#8217;est plus probl\xE9matique. Surtout si nous utilisons des classes internes dans des objets qui sont tr\xE8s souvent d\xE9truits et reconstruits (les activit\xE9s sont supprim\xE9es et recr\xE9\xE9es apr\xE8s chaque changement de configuration). De nombreux d\xE9veloppeurs se font avoir et introduisent des fuites m\xE9moires de cette mani\xE8re dans leurs applications</p>
</div>
<div class="paragraph">
<p>En Java pour \xE9viter le probl\xE8me vous devez utiliser des <code>static inner class</code>. En Kotlin quand vous cr\xE9ez une nested class vous n&#8217;avez pas acc\xE8s aux variables et m\xE9thodes de la classe (\xE9quivalent d&#8217;une classe interne statique)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450826.259"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> {

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span> = <span class="hljs-string">&quot;Dev-Mind&quot;</span>

    <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> {
        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span> {
            println(<span class="hljs-string">&quot;Hello world&quot;</span> + name())
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450826.259')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez tout de m\xEAme cr\xE9er l&#8217;\xE9quivalent d&#8217;une inner class en utilisant la syntaxe <code>internal inner class</code>. Une fois encore le langage a pris le parti de simplifier le cas d&#8217;utilisation le plus courant.</p>
</div>
</div>
<div class="sect2">
<h3 id="_classes_anonymes">Classes anonymes</h3>
<div class="paragraph">
<p>En Android nous \xE9crivons souvent des classes anonymes. Par exemple \xE0 chaque fois que nous \xE9crivons un listener d&#8217;\xE9v\xE9nement. Nous avons le m\xEAme probl\xE8me de r\xE9f\xE9rence entre la classe englobante et la classe anonyme.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450826.146">button.setOnClickListener{
      <span class="hljs-comment">// votre code</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450826.146')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Kotlin ne propose pas de solution dans ce cas, mais vous devez garder conscience que vous devrez toujours casser cette r\xE9f\xE9rence \xE0 la classe englobante quand l&#8217;objet sera arr\xEAt\xE9 ou recycl\xE9.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450826.0466"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onStop</span><span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">super</span>.onStop()
    button.setOnClickListener(<span class="hljs-literal">null</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450826.0466')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_extensions_de_fonction">Extensions de fonction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quand nous programmons nous utilisons de nombreuses librairies externes sur lesquelles nous n&#8217;avons pas la main. Prenons un cas d&#8217;utilisation. Nous somme l&#8217;INSEE et nous devons faire des statistiques par \xE2ge</p>
</div>
<div class="paragraph">
<p>Un citoyen est d\xE9fini par la data class suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450826.524"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Citizen</span>(<span class="hljs-keyword">val</span> inseeNumber: String,
                   <span class="hljs-keyword">val</span> firstname: String,
                   <span class="hljs-keyword">val</span> lastname: String,
                   <span class="hljs-keyword">val</span> sexe: Sexe,
                   <span class="hljs-keyword">val</span> birthdate: LocalDate)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450826.524')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour d\xE9terminer l&#8217;\xE2ge vous pouvez \xE9crire une classe utilitaire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450826.0767"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAge</span><span class="hljs-params">(date: <span class="hljs-type">LocalDate</span>)</span></span> = LocalDate.now().year - date.year</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450826.0767')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Avec Kotlin vous pouvez aussi \xE9tendre la classe <code>LocalDate</code> et cr\xE9er une nouvelle m\xE9thode (extension de fonction) qui vous sera propre et que vous pourrez utiliser dans tout votre projet. Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450826.786"><span class="hljs-function"><span class="hljs-keyword">fun</span> LocalDate.<span class="hljs-title">getAge</span><span class="hljs-params">()</span></span> = LocalDate.now().year - <span class="hljs-keyword">this</span>.year

<span class="hljs-comment">// Ce qui permet d&#x27;\xE9crire</span>
LocalDate.parse(<span class="hljs-string">&quot;1977-01-01&quot;</span>).getAge()</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450826.786')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Mieux au lieu d&#8217;exposer une fonction vous pouvez exposer une propri\xE9t\xE9</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450826.694"><span class="hljs-keyword">val</span> LocalDate.age
    <span class="hljs-keyword">get</span>() = LocalDate.now().year - <span class="hljs-keyword">this</span>.year

<span class="hljs-comment">// Ce qui permet d&#x27;\xE9crire</span>
LocalDate.parse(<span class="hljs-string">&quot;1977-01-01&quot;</span>).age</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450826.694')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Prenons un autre exemple li\xE9 \xE0 Android. Tr\xE8s souvent quand nous cr\xE9ons une application, nous surchargeons l&#8217;objet <code>Application</code> Android pour cr\xE9er notre propre instance. Pour \xE9viter les cast \xE0 r\xE9p\xE9tition dans les activit\xE9s vous pouvez \xE9crire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450827.6685"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DevMindApplication</span> : <span class="hljs-type">Application</span>() {
   <span class="hljs-comment">// code...</span>
}
<span class="hljs-keyword">val</span> AppCompatActivity.devmindApp
    <span class="hljs-keyword">get</span>() = <span class="hljs-keyword">this</span>.application <span class="hljs-keyword">as</span> DevMindApplication</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450827.6685')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ainsi dans vos activit\xE9s vous pouvez directement faire appel \xE0 votre instance de l&#8217;application en utilisant <code>devmindApp</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fonctions_dordre_sup\xE9rieur">Fonctions d\u2019ordre sup\xE9rieur</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Une fonction d&#8217;ordre sup\xE9rieure est une fonction qui prend une fonction comme argument.</p>
</div>
<div class="paragraph">
<p>Dans ce cas vous n&#8217;avez pas besoin de passer une lambda lors de l&#8217;appel \xE0 la m\xE9thode mais vous pouvez ajouter un bloc d&#8217;ex\xE9cution juste apr\xE8s l&#8217;appel de la m\xE9thode</p>
</div>
<div class="paragraph">
<p>Dit comme \xE7a vous devez \xEAtre perdu et c&#8217;est normal</p>
</div>
<div class="sect2">
<h3 id="_exemple_dans_le_langage">Exemple dans le langage</h3>
<div class="paragraph">
<p>Kotlin s&#8217;est servi des fonctions d&#8217;ordre sup\xE9rieur (et des extension) pour simplifier l&#8217;utilisation des stream Java</p>
</div>
<div class="listingblock">
<div class="title">Issu de kotlin.collections</div>
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450828.6687"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> @LTT@GT Iterable@LTT@GT.<span class="hljs-title">find</span><span class="hljs-params">(predicate: (<span class="hljs-type">T</span>) @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Boolean</span>)</span></span>: T? {
    <span class="hljs-keyword">return</span> firstOrNull(predicate)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450828.6687')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si nous avons une collection de speakers nous pouvons s\xE9lectionner le premier qui a le pr\xE9nom Guillaume via ce code</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450828.77"><span class="hljs-keyword">val</span> guillaume = speakers.firstOrNull {
    it.firstname == <span class="hljs-string">&quot;Guillaume&quot;</span>  <span class="hljs-comment">// it correpond \xE0 l&#x27;item en cours</span>
}

<span class="hljs-comment">// Vous auriez pu aussi \xE9crire</span>
<span class="hljs-keyword">val</span> guillaume = speakers.firstOrNull { speaker <span class="hljs-meta">@LAMBDA</span>
    speaker.firstname == <span class="hljs-string">&quot;Guillaume&quot;</span>
}

<span class="hljs-comment">// Ici la syntaxe Java (o\xF9 vous passez une lambda provoque une erreur de compilation)</span>
<span class="hljs-keyword">val</span> guillaume = speakers.firstOrNull(speaker <span class="hljs-meta">@LAMBDA</span> speaker.firstname == <span class="hljs-string">&quot;Guillaume&quot;</span>) <span class="hljs-comment">// ne compile pas</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450828.77')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En Java, pour rappel vous auriez \xE9crit</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450828.229"><span class="hljs-keyword">val</span> guillaumeSpeakers = speakers.stream()
                                .filter(s <span class="hljs-meta">@LAMBDA</span> s.getFirstname().equals(<span class="hljs-string">&quot;Guillaume&quot;</span>))
                                .findFirst()
                                .orElse(<span class="hljs-literal">null</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450828.229')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>L&#8217;API Stream Java est tr\xE8s agr\xE9able \xE0 utiliser, mais les collections et les fonctions d&#8217;extensions Kotlin le sont encore plus.</p>
</div>
</div>
<div class="sect2">
<h3 id="_ecrire_un_dsl">Ecrire un DSL</h3>
<div class="paragraph">
<p>Kotlin est de plus en plus connu pour la souplesse offerte pour \xE9crire un DSL avec un typage fort. <a href="https://github.com/gradle/kotlin-dsl">Gradle</a> est en train par exemple de remplacer Groovy par Kotlin pour avoir un DSL plus puissant</p>
</div>
<div class="paragraph">
<p>Un exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450828.9272"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cell</span>(<span class="hljs-keyword">val</span> content: String)

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Row</span>(<span class="hljs-keyword">val</span> cells: <span class="hljs-symbol">MutableList@</span><span class="hljs-symbol">LTCell@</span>GT = mutableListOf()) {
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cell</span><span class="hljs-params">(adder: () @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Cell</span>)</span></span>: Row {
        cells.add(adder())
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span>(<span class="hljs-keyword">val</span> rows: <span class="hljs-symbol">MutableList@</span><span class="hljs-symbol">LTRow@</span>GT = mutableListOf()) {
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">row</span><span class="hljs-params">(adder: () @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Row</span>)</span></span>: Table {
        rows.add(adder())
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450828.9272')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans ma classe <code>Table</code> j&#8217;ai ajout\xE9 une fonction <code>row</code> (avec une fonction en argument) qui permet d&#8217;ajouter une ligne. La m\xEAme chose a \xE9t\xE9 faite dans la classe <code>Row</code> pour une cellule. Du coup je peux \xE9crire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450829.1372"><span class="hljs-keyword">val</span> table = Table()
    .row { Row().cell { Cell(<span class="hljs-string">&quot;Test&quot;</span>) }}
    .row { Row().cell { Cell(<span class="hljs-string">&quot;Test2&quot;</span>) }}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450829.1372')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_android">Android</h3>
<div class="paragraph">
<p>Android b\xE9n\xE9ficie beaucoup des fonctions d&#8217;ordre sup\xE9rieur et des extensions. Ces fonctionnalit\xE9s du langage ont permis de consid\xE9rablement simplfier le langage. Prenons des exemples</p>
</div>
<div class="paragraph">
<p>Ecriture d&#8217;un listener d&#8217;\xE9v\xE9nement</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450829.3616">itemView.setOnClickListener {
     <span class="hljs-comment">// Code du listener directement</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450829.3616')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Quand vous devez it\xE9rer et enchainer l&#8217;appel \xE0 plusieurs setters d&#8217;un objet</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450829.8015">holder.speakerName.text = user.fullname
holder.speakerBio.text = user.descriptionFr
holder.speakerBirthday.text = user.birthday

<span class="hljs-comment">// @ARROW devient</span>
holder.apply {
    speakerName.text = user.fullname
    speakerBio.text = user.descriptionFr
    speakerBirthday.text = user.birthday
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450829.8015')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Et il y a des dizaines d&#8217;autres exemples.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_coroutines">Coroutines</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Une coroutine est un bloc de traitement qui permet d&#8217;ex\xE9cuter du code non bloquant en asynchrone. C&#8217;est un thread all\xE9g\xE9. Vous pouvez lancer plein de couroutines sur un m\xEAme thread. Vous pouvez aussi d\xE9marrer un traitement sur un thread et finir son ex\xE9cution sur un autre.</p>
</div>
<div class="paragraph">
<p>Commen\xE7ons par faire un rappel sur le d\xE9veloppement Android. Quand une application est lanc\xE9e, elle est lanc\xE9e sur un thread principal. On parle de main thread ou UI thread. En effet le rendering, les \xE9v\xE9nements, les appels syst\xE8mes sont g\xE9r\xE9s sur ce thread.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/android_thread.png" alt="Android Main Thread">
</div>
</div>
<div class="paragraph">
<p>Si vous lancez un traitement m\xE9tier plus ou moins long (calcul, r\xE9cup\xE9ration de donn\xE9es, acc\xE8s \xE0 une base), vous ne devez pas encombrer ce thread principal pour ne pas bloquer l&#8217;utilisateur. Par exemple si vous lancez une requ\xEAte base de donn\xE9es, tout est fig\xE9 tant que la r\xE9ponse n&#8217;est pas trait\xE9e. Android est d&#8217;ailleurs intol\xE9rable la dessus. Si votre application bloque le thread principal, le syst\xE8me killera votre application.</p>
</div>
<div class="paragraph">
<p>Sans Kotlin, vous devez lancer tous les traitements plus ou moins longs dans un autre thread. Et quand vous avez un r\xE9sultat vous devez interagir avec la vue dans le thread principal pour que les donn\xE9es soient actualis\xE9es. Niveau code vous devez \xE9crire un bon nombre de ligne pour \xE9crire tout \xE7a.</p>
</div>
<div class="paragraph">
<p>En Kotlin vous pouvez passer par les Coroutines. Dans l&#8217;exemple si dessous nous d\xE9clarons une activit\xE9 qui va lanc\xE9 un acc\xE8s \xE0 la base dans une coroutine et quand le r\xE9sultat est l\xE0 nous nous raccrochons au thread principal pour mettre \xE0 jour la vue.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450829.396"><span class="hljs-comment">// Votre activit\xE9 implemente l&#x27;interface CoroutineScope</span>
<span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyActivity</span> : <span class="hljs-type">AppCompatActivity</span>(), CoroutineScope {

   <span class="hljs-comment">// Si vous lancez votre coroutine vous devez indiquer dans quel thread elle sera lanc\xE9. Par d\xE9faut un nouveau</span>
   <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> coroutineContext: CoroutineContext
       <span class="hljs-keyword">get</span>() = Dispatchers.Default

   <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
       <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)

       <span class="hljs-comment">// ...</span>

       <span class="hljs-comment">// Lancement de la coroutine</span>
       launch {

          <span class="hljs-comment">// Vous faites un traitement plus ou moins long (appel base de donn\xE9es)</span>
		  <span class="hljs-keyword">val</span> speaker = speakerDao.readOne(speakerUiid)

          <span class="hljs-comment">// Quand vous avez un r\xE9sultat vous vous rattachez au thread principal</span>
          <span class="hljs-comment">// pour mettre \xE0 jour la vue</span>
		  withContext(Dispatchers.Main){
             speaker.apply {
                  speakerLastname.text = speaker.lastname
                  speakerCountry.text = speaker.country
             }
          }
 	   }
   }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450829.396')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Les couroutines simplifient tous les appels acynchrones, ou les appels synchrones pouvant \xEAtre longs de votre application. Le code est plus restreint, plus lisible mais aussi plus performant car les couroutines sont beaucoup plus l\xE9g\xE8res qu&#8217;un thread.</p>
</div>
<div class="sect2">
<h3 id="_conclusion">Conclusion</h3>
<div class="paragraph">
<p>J&#8217;ai essay\xE9 de vous montrer dans cet article pourquoi Kotlin est bien plus qu&#8217;une alternative \xE0 Java pour l&#8217;\xE9criture des applications Android.</p>
</div>
<div class="paragraph">
<p>Je vous conseille cette <a href="https://www.youtube.com/watch?v=UhDtYFt64HM">vid\xE9o</a> de Jean Baptiste Nizet qui montre l&#8217;int\xE9r\xEAt de ce que je viens de dire en livecoding (sauf l&#8217;aspect coroutine).</p>
</div>
<div class="paragraph">
<p>Personnellement je pense que le langage Java va petit \xE0 petit dispara\xEEtre sur Android. Si vous voulez utiliser Kotlin en dehors d&#8217;Android vous pouvez le faire sans probl\xE8me. Kotlin fait aussi partie des langages support\xE9s par le framework Spring.</p>
</div>
<div class="paragraph">
<p>Pour plus d&#8217;informations sur Kotlin &amp; Android vous pouvez aller sur <a href="https://developer.android.com/kotlin/" class="bare">https://developer.android.com/kotlin/</a></p>
</div>
</div>
</div>
</div>`;var Sv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Les derni\xE8res \xE9volutions de la plateforme Android et l&#8217;adoption du langage Kotlin m&#8217;ont donn\xE9 envie de cr\xE9er une <a href="https://play.google.com/store/apps/details?id=com.devmind.score">application disponible</a> \xE0 tous sur le store Google. Vous pouvez tester l&#8217;application et me faire des retours si vous le souhaitez.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pourquoi_une_application">Pourquoi une application ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Cette application est en fait la r\xE9\xE9criture d&#8217;une ancienne application, que j&#8217;avais \xE9crite en 2013. Comme je me suis replong\xE9 dans le d\xE9veloppement Android depuis quelques mois j&#8217;ai d\xE9cid\xE9 d&#8217;apporter les changements qui m&#8217;avaient \xE9t\xE9 demand\xE9s.</p>
</div>
<div class="paragraph">
<p>En ce d\xE9but d&#8217;ann\xE9e 2019, DevMind vous fait donc cadeau de cette application gratuite. Elle est destin\xE9e aux joueurs qui pr\xE9f\xE8rent utiliser leur t\xE9l\xE9phone ou tablette, plut\xF4t qu&#8217;une feuille de papier pour marquer les scores d&#8217;un jeu de soci\xE9t\xE9.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/score_00.png" alt="Appication score">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_utiliser_lapplication">Comment utiliser l&#8217;application ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vous pouvez t\xE9l\xE9charger l&#8217;application sur le store Google</p>
</div>
<div class="paragraph">
<p>Une fois install\xE9e, vous pouvez cr\xE9er des joueurs. Seul le surnom est obligatoire</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/score_01.png" alt="Cr\xE9er un joueur" width="70%">
</div>
</div>
<div class="paragraph">
<p>Sur la liste des parties, vous pouvez utiliser le bouton <strong>+</strong> pour ajouter une nouvelle partie. Vous pouvez choisir le type de la partie. Par exemple vous pouvez choisir une partie de Yams. Vous devez ensuite s\xE9lectionner les joueurs qui vont jouer</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/score_02.png" alt="Liste des parties et choix du type de la partie et choix des joueurs" width="70%">
</div>
</div>
<div class="paragraph">
<p>A tout moment vous pouvez supprimer une partie, en recommencer une en utilisant le menu contextuel en haut \xE0 droite</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/score_03.png" alt="Menu contextuel" width="70%">
</div>
</div>
<div class="paragraph">
<p>Quand vous s\xE9lectionnez une partie vous avez un r\xE9sum\xE9 des scores. Vous pouvez acc\xE9der \xE0 la grille des scores pour voir le d\xE9tail des diff\xE9rentes manches, des diff\xE9rents tours. Par exemple pour le Yams la grille est pr\xE9remplie, les totaux et bonus sont calcul\xE9s automatiquement. Quand vous cliquez sur un \xE9l\xE9ment de la grille vous pouvez mettre \xE0 jour le score des personnes. Pour le Yams par exemple les r\xE8gles pour compter les points sont rappel\xE9es</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/score_04.png" alt="Partie et saisie des scores" width="70%">
</div>
</div>
<div class="paragraph">
<p>Il ne vous reste plus qu&#8217;\xE0 jouer&#8230;&#8203; Si vous avez besoin d&#8217;avoir plus de types de jeux vous pouvez me contacter via le menu et la page "A propos".</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2019/score_05.png" alt="Page \xE0 propos" width="35%">
</div>
</div>
</div>
</div>`;var Tv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Une application web est constitu\xE9e de ressources, d&#8217;images, de fichiers JavaScript, de feuilles de styles&#8230;&#8203; Pour pouvoir r\xE9pondre \xE0 des requ\xEAtes HTTP nous avons besoin d&#8217;un serveur Web. Les plus connus sont peut \xEAtre <a href="http://httpd.apache.org/">Apache</a> et <a href="http://nginx.org/">nginx</a>. Souvent, nous avons besoin de coupler \xE0 nos sites, une application c\xF4t\xE9 serveur (pour g\xE9rer la s\xE9curit\xE9, stocker des donn\xE9es, lancer des traitements&#8230;&#8203;). Nous devons mettre en place un serveur d&#8217;application, qui jouera double r\xF4le : serveur web g\xE9rant les ressources statiques et application effectuant des actions et g\xE9n\xE9rant des r\xE9ponses \xE0 la vol\xE9e en fonction des actions utilisateurs.</p>
</div>
<div class="paragraph">
<p>Dans cet article, j&#8217;explique comment \xE9crire ce serveur en JS et comment d\xE9ployer le tout sur <a href="https://www.clever-cloud.com">Clever Cloud</a>. Vous pouvez voir un exemple concret avec mon <a href="https://github.com/Dev-Mind/dev-mind.fr">site web</a>. Nous verrons \xE9galement les aspects  s\xE9curit\xE9 et optimisation des performances.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/objectif_clever_cloud_00.png" alt="Conf\xE9rence">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_serveur_application_javascript">Serveur application JavaScript</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le JavaScript s&#8217;ex\xE9cute sur une machine virtuelle qui est pr\xE9sente dans votre navigateur Internet. Quand on fait du JavaScript c\xF4t\xE9 serveur, nous avons aussi besoin d&#8217;une machine virtuelle JavaScript. Nous pouvons utiliser la plateforme <a href="https://nodejs.org">Node.js</a> qui se base sur le moteur <a href="https://v8.dev/">V8</a> de Google Chrome. Il fournit \xE9galement plusieurs librairies pour r\xE9pondre aux besoins des d\xE9veloppeurs c\xF4t\xE9 serveur. Nous avons notamment l&#8217;int\xE9gration de la librairie <a href="https://nodejs.org/api/http.html">http</a> qui permet de g\xE9rer un serveur Web</p>
</div>
<div class="paragraph">
<p>Le code suivant permet de lancer un serveur sur le port 8080 et d&#8217;afficher un message <code>HelloWorld</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450940.0479"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);

<span class="hljs-comment">//create a server object which listens on port 8080</span>
http.<span class="hljs-title function_">createServer</span>((req, res) @<span class="hljs-variable constant_">ARROW</span> {
  <span class="hljs-comment">//write a response to the client</span>
  res.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>);
  <span class="hljs-comment">//end the response</span>
  res.<span class="hljs-title function_">end</span>();
}).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450940.0479')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour lancer ce script (appel\xE9 par exemple <code>app.js</code>) vous pouvez lancer la commande et ensuite ouvrir http:localhost:8080 dans votre navigateur Internet</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450940.439">node app.js</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450940.439')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le module <a href="https://nodejs.org/api/http.html">http</a> est un peu minimaliste. Quand nous voulons \xE9crire une application nous avons besoin de plus de fonctionnalit\xE9s. <a href="http://expressjs.com/">Express JS</a> fournit plusieurs utilitaires pour</p>
</div>
<div class="ulist">
<ul>
<li>
<p>\xE9tendre ce serveur <a href="https://nodejs.org/api/http.html">http</a>  de base</p>
</li>
<li>
<p>ajouter des routes et ex\xE9cuter un traitement en fonction de cette route</p>
</li>
<li>
<p>servir des ressources statiques</p>
</li>
<li>
<p>facilement ex\xE9cuter des traitements sur les requ\xEAtes entrantes et sortantes. En Java dans le monde des servlets, nous parlons de <code>filters</code>. En express nous utilisons plut\xF4t le terme de <code>middlewares</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Modifiez le premier exemple de cette mani\xE8re</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450941.9531"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);

<span class="hljs-title function_">express</span>()
  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, (req, res) @<span class="hljs-variable constant_">ARROW</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)) <span class="hljs-comment">// (1)</span>
  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/users/:userName&#x27;</span>, (req, res) @<span class="hljs-variable constant_">ARROW</span> res.<span class="hljs-title function_">send</span>(@backtick@<span class="hljs-title class_">Hello</span> @dollar@{req.<span class="hljs-property">params</span>.<span class="hljs-property">userName</span>}!@backtick@)) <span class="hljs-comment">// (2)</span>
  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8085</span>); <span class="hljs-comment">// (3)</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450941.9531')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1). le message <code>Hello World!</code> s&#8217;affiche quand vous lancez <code><a href="http://localhost:8085" class="bare">http://localhost:8085</a></code></p>
</li>
<li>
<p>(2). on peut r\xE9cup\xE9rer des \xE9lements dans la route sp\xE9cifi\xE9e. Ici on affichera <code>Hello Guillaume!</code> quand <code><a href="http://localhost:8085/users/Guillaume" class="bare">http://localhost:8085/users/Guillaume</a></code> sera utilis\xE9e</p>
</li>
<li>
<p>(3). permet de sp\xE9cifier le port d&#8217;\xE9coute</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si vous voulez servir un r\xE9pertoire contenant des ressources statiques (ressources CSS, JS, HTML&#8230;&#8203;) vous pouvez ajouter</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450941.32">.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(@backtick@build/dist@backtick@))</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450941.32')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_assurer_les_performances_de_son_serveur_web">Comment assurer les performances de son serveur web</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous venons de voir comment param\xE9trer un serveur JS de base. Mais si vous voulez mettre votre application en production vous allez devoir en faire plus.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Si vous n&#8217;\xEAtes pas familier avec les performances d&#8217;une application Web vous pouvez suivre <a href="https://www.dev-mind.fr/formation_optimiser.html">la formation Dev-Mind</a> ou suivre la vid\xE9o de mon intervention \xE0 <a href="https://www.youtube.com/watch?time_continue=2&amp;v=9PRPPJFaF_o">Devoxx 2017</a>.</p>
</div>
</blockquote>
</div>
<div class="sect2">
<h3 id="_mesurer_les_performances">Mesurer les performances</h3>
<div class="paragraph">
<p>Si vous utilisez Chrome, vous pouvez utiliser Lighthouse qui est int\xE9gr\xE9 aux ChromeDevTools (Ctrl+Shift+I)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/objectif_clever_cloud_01.png" alt="Lighthouse">
</div>
</div>
<div class="paragraph">
<p>Lighthouse va analyser votre site sur mobile ou desktop et vous proposer des rapports de performance. Il vous indique ce qui est bon ou moins bon, et propose des chemins de r\xE9solution quand des probl\xE8mes sont d\xE9tect\xE9s. Par exemple</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/objectif_clever_cloud_02.png" alt="Rapport Lighthouse">
</div>
</div>
<div class="paragraph">
<p>Il existe d&#8217;autres outils en ligne comme <a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed</a>, <a href="https://www.webpagetest.org/">WebpageTest</a>&#8230;&#8203;</p>
</div>
</div>
<div class="sect2">
<h3 id="_la_compression">La compression</h3>
<div class="paragraph">
<p>Le plus gros probl\xE8me sur un site web est la taille des ressources. La taille moyenne des ressources utilis\xE9es sur une page, ne fait que grossir depuis des ann\xE9es. Pour limiter la quantit\xE9 de donn\xE9es \xE0 envoyer, vous pouvez faire de la compression. Les pages HTML, CSS ou JS sont \xE9crites au format texte qui est facilement compressable. De plus tous les navigateurs aujourd&#8217;hui acceptent des ressources compress\xE9es.</p>
</div>
<div class="paragraph">
<p>Pour activer la compression avec express.js, vous pouvez utiliser le middleware  <a href="https://www.npmjs.com/package/compression">compression</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450942.6475"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);
<span class="hljs-keyword">const</span> compression = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;compression&#x27;</span>);

<span class="hljs-title function_">express</span>()
  .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">compression</span>())
  .<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(@backtick@build/dist@backtick@))
  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, (req, res) @<span class="hljs-variable constant_">ARROW</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>))
  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/users/:userName&#x27;</span>, (req, res) @<span class="hljs-variable constant_">ARROW</span> res.<span class="hljs-title function_">send</span>(@backtick@<span class="hljs-title class_">Hello</span> @dollar@{req.<span class="hljs-property">params</span>.<span class="hljs-property">userName</span>}!@backtick@))
  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8085</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450942.6475')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_le_cache">Le cache</h3>
<div class="paragraph">
<p>Comme le dit <a href="https://twitter.com/addyosmani">Addy Osmani</a>, la ressource web la plus optimis\xE9e est celle que l&#8217;on ne transfert pas du serveur au client web. Pour mettre en place cette magie, vous devez activer le cache de ressources, et donner des informations au navigateur sur la dur\xE9e de validit\xE9 de chaque fichier.</p>
</div>
<div class="paragraph">
<p>Voici par exemple la configuration utilis\xE9e sur mon site</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450944.3992"><span class="hljs-keyword">const</span> nocache = (res) @<span class="hljs-variable constant_">ARROW</span> {
  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;private, no-cache, no-store, must-revalidate&#x27;</span>);
  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Expires&#x27;</span>, <span class="hljs-string">&#x27;-1&#x27;</span>);
  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Pragma&#x27;</span>, <span class="hljs-string">&#x27;no-cache&#x27;</span>);
};

<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CACHE_MIDDLEWARE</span> = (res, path) @<span class="hljs-variable constant_">ARROW</span> {
  <span class="hljs-keyword">switch</span>(serveStatic.<span class="hljs-property">mime</span>.<span class="hljs-title function_">lookup</span>(path)){
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;application/xhtml+xml&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;text/html&#x27;</span>:
      <span class="hljs-title function_">nocache</span>(res);
      <span class="hljs-keyword">break</span>;

    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;text/javascript&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;application/x-javascript&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;application/javascript&#x27;</span>:
      <span class="hljs-keyword">if</span>(path.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;sw.js&#x27;</span>) @<span class="hljs-variable constant_">GT</span>= <span class="hljs-number">0</span>){
        <span class="hljs-title function_">nocache</span>(res);
      }
      <span class="hljs-keyword">else</span>{
        res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;private, max-age=14400&#x27;</span>);
      }
      <span class="hljs-keyword">break</span>;

    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;text/css&#x27;</span>:
      <span class="hljs-keyword">if</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;prod&#x27;</span>){
        res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;private, max-age=14400&#x27;</span>);
      }
      <span class="hljs-keyword">else</span>{
        <span class="hljs-title function_">nocache</span>(res);
      }
      <span class="hljs-keyword">break</span>;

    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/gif&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/jpg&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/jpeg&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/png&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/tiff&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/svg+xml&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/webp&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/vnd.microsoft.icon&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/icon&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/ico&#x27;</span>:
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;image/x-ico&#x27;</span>:
      res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Cache-Control&#x27;</span>, <span class="hljs-string">&#x27;public, max-age=691200&#x27;</span>);
      <span class="hljs-keyword">break</span>;

    <span class="hljs-attr">default</span>:
  }
};</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450944.3992')">Copy</button></pre>
</div>
</div>
<div class="olist arabic small">
<ol class="arabic">
<li>
<p>il est important de ne pas mettre vos pages HTML en cache. Une page HTML est le point d&#8217;entr\xE9e de votre site et il est important que les utilisateurs puissent charger les derni\xE8res versions. Contrairement aux autres ressources, avec lesquelles vous pouvez faire du cache busting, le nom des pages HTML doit \xEAtre fixe. Si ce n&#8217;est pas le cas, les robotos ne pourront pas index\xE9 votre site. Pour optimiser le chargement vous pouvez passer par les services workers</p>
</li>
<li>
<p>pour le JS vous pouvez mettre une dur\xE9e de cache de quelques heures. Par contre il est important de ne pas mettre de cache sur votre fichier de configuration des services workers. Ce fichier est tr\xE8s sensible et il vaut mieux que le navigateur essaie de le recharger tout le temps afin de r\xE9cup\xE9rer les derni\xE8res mises \xE0 jour. Les services workers viennent avec un autre syst\xE8me de cache</p>
</li>
<li>
<p>en production plusieurs optimisations sont faites quand la variable d&#8217;environnement <code>NODE_ENV</code> a la valeur <code>prod</code>. Dans mon cas j&#8217;ajoute un cache sur les ressources CSS</p>
</li>
<li>
<p>pour les images vous pouvez mettre une dur\xE9e de cache plus longue.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Avec Express.js vous pouvez indiquer dans la configuration, l&#8217;emplacement de vos ressources statiques et indiquer la politique de cache. Dans mon cas elles sont dans <code>build/dist</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450945.7605">.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(@backtick@build/dist@backtick@, {<span class="hljs-attr">setHeaders</span>: <span class="hljs-variable constant_">CACHE_MIDDLEWARE</span>}))</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450945.7605')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_autres_optimisations">Autres optimisations</h3>
<div class="paragraph">
<p>Pour plus d&#8217;informations vous pouvez suivre la <a href="http://expressjs.com/fr/advanced/best-practice-performance.html">page d\xE9di\xE9e aux performances</a> de express.js. Vous pouvez aussi mettre en place des services workers. Si vous ne savez pas comment faire, vous pouvez suivre <a href="https://www.dev-mind.fr/blog/2017/workboxjs.html">cet article</a></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_s\xE9curiser_son_serveur_web">Comment s\xE9curiser son serveur web</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_conna\xEEtre_les_probl\xE8mes">Conna\xEEtre les probl\xE8mes</h3>
<div class="paragraph">
<p>Comme pour les performances, avant de faire quelque chose, il faut savoir qu&#8217;elles sont les probl\xE8mes de votre site. Je vous conseille d&#8217;utiliser le site de Mozilla <a href="https://observatory.mozilla.org/" class="bare">https://observatory.mozilla.org/</a>. Cet outil en ligne parse votre site et v\xE9rifie le param\xE9trage</p>
</div>
<div class="ulist">
<ul>
<li>
<p>des redirections</p>
</li>
<li>
<p>des cookies</p>
</li>
<li>
<p>de l&#8217;HTTPS</p>
</li>
<li>
<p>des diff\xE9rents headers</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Il existe plusieurs solutions pour simplifier cette configuration. Je suis parti sur le middleware <a href="https://github.com/helmetjs/helmet">helmet</a> qui</p>
</div>
<div class="ulist">
<ul>
<li>
<p>contr\xF4le la pr\xE9lecture DNS du navigateur (<a href="https://helmetjs.github.io/docs/dns-prefetch-control">dnsPrefetchControl</a>)</p>
</li>
<li>
<p>pr\xE9munit votre site du clickjacking (<a href="https://helmetjs.github.io/docs/frameguard/">frameguard</a>)</p>
</li>
<li>
<p>supprime l&#8217;en-t\xEAte X-Powered-By (<a href="https://helmetjs.github.io/docs/hide-powered-by">hidePoweredBy</a>)</p>
</li>
<li>
<p>contr\xF4le HTTPS (<a href="https://helmetjs.github.io/docs/hsts/">hsts</a>)</p>
</li>
<li>
<p>d\xE9finit les options de t\xE9l\xE9chargement pour IE8 (<a href="https://helmetjs.github.io/docs/ienoopen">ieNoOpen</a>)</p>
</li>
<li>
<p>emp\xEAche les clients de renifler le type MIME (<a href="https://helmetjs.github.io/docs/dont-sniff-mimetype">noSniff</a>)</p>
</li>
<li>
<p>ajoute quelques petites protections XSS (<a href="https://helmetjs.github.io/docs/xss-filter">xssFilter</a>)</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450946.0496"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);
<span class="hljs-keyword">const</span> helmet = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;helmet&#x27;</span>);

<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SECURITY_POLICY</span> = {
  <span class="hljs-attr">directives</span>: {
    <span class="hljs-attr">defaultSrc</span>: [<span class="hljs-string">&quot;&#x27;self&#x27;&quot;</span>],
    <span class="hljs-comment">// We have to authorize inline CSS used to improve firstload</span>
    <span class="hljs-attr">styleSrc</span>: [<span class="hljs-string">&quot;&#x27;unsafe-inline&#x27;&quot;</span>, <span class="hljs-string">&quot;&#x27;self&#x27;&quot;</span>],
    <span class="hljs-comment">// We have to authorize data:... for SVG images</span>
    <span class="hljs-attr">imgSrc</span>: [<span class="hljs-string">&quot;&#x27;self&#x27;&quot;</span>, <span class="hljs-string">&#x27;data:&#x27;</span>, <span class="hljs-string">&#x27;https:&#x27;</span>],
    <span class="hljs-comment">// We have to authorize inline script used to load our JS app</span>
    <span class="hljs-attr">scriptSrc</span>: [<span class="hljs-string">&quot;&#x27;self&#x27;&quot;</span>, <span class="hljs-string">&quot;&#x27;unsafe-inline&#x27;&quot;</span>, <span class="hljs-string">&#x27;https://www.google-analytics.com/analytics.js&#x27;</span>,
      <span class="hljs-string">&quot;https://storage.googleapis.com/workbox-cdn/*&quot;</span>,
      <span class="hljs-string">&quot;https://storage.googleapis.com/workbox-cdn/releases/3.6.3/workbox-core.prod.js&quot;</span>]
  }
};

<span class="hljs-title function_">express</span>()
  .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">helmet</span>())
  .<span class="hljs-title function_">use</span>(helmet.<span class="hljs-title function_">contentSecurityPolicy</span>(<span class="hljs-variable constant_">SECURITY_POLICY</span>))
  <span class="hljs-comment">// Reste de la config</span>
  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8085</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450946.0496')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez et vous devez encore aller plus loin. Si vous utilisez de l&#8217;authentification vous devez pr\xE9ciser comment les cookies seront g\xE9r\xE9s lorsqu&#8217;une session sera ouverte</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450947.2566"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);
<span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>);

<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()
  .<span class="hljs-title function_">enable</span>(<span class="hljs-string">&#x27;trust proxy&#x27;</span>)
  .<span class="hljs-title function_">use</span>(<span class="hljs-title function_">session</span>({
      <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;zezaeazezaeza&#x27;</span>,
      <span class="hljs-comment">// A session life is 3h</span>
      <span class="hljs-attr">duration</span>: <span class="hljs-number">3</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,
      <span class="hljs-comment">// We don&#x27;t authorize a session resave</span>
      <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,
      <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span>,
      <span class="hljs-comment">// Secured cookies are only set in production</span>
      <span class="hljs-attr">cookie</span>: {
        <span class="hljs-attr">secure</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> === <span class="hljs-string">&#x27;prod&#x27;</span>,
        <span class="hljs-attr">maxAge</span>: <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>,
        <span class="hljs-attr">sameSite</span>: <span class="hljs-literal">true</span>
      },
      <span class="hljs-comment">// User by default is empty</span>
      <span class="hljs-attr">user</span>: {}
    })
  <span class="hljs-comment">// Reste de la config</span>
  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8085</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450947.2566')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez aussi r\xE9orienter les utilisateurs qui n&#8217;utilisent pas le HTTPS, param\xE9trer le CORS, ouvrir une page 404 quand un utilisateur essaye d&#8217;acc\xE9der \xE0 une mauvaise ressource</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450950.1958"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);

<span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()
  .<span class="hljs-title function_">enable</span>(<span class="hljs-string">&#x27;trust proxy&#x27;</span>)
  <span class="hljs-comment">// Reorientation pour ceux qui ne font pas de HTTPS</span>
  .<span class="hljs-title function_">use</span>((req, res, next) @<span class="hljs-variable constant_">ARROW</span> {
         <span class="hljs-keyword">const</span> httpInForwardedProto = req.<span class="hljs-property">headers</span> &amp;amp;&amp;amp; req.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;x-forwarded-proto&#x27;</span>] &amp;amp;&amp;amp; req.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;x-forwarded-proto&#x27;</span>] === <span class="hljs-string">&#x27;http&#x27;</span>;
         <span class="hljs-keyword">const</span> httpInReferer = req.<span class="hljs-property">headers</span> &amp;amp;&amp;amp; req.<span class="hljs-property">headers</span>.<span class="hljs-property">referer</span> &amp;amp;&amp;amp; req.<span class="hljs-property">headers</span>.<span class="hljs-property">referer</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;http://&#x27;</span>) @<span class="hljs-variable constant_">GT</span>=<span class="hljs-number">0</span>;
         <span class="hljs-keyword">const</span> isHtmlPage = req.<span class="hljs-property">url</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;.html&quot;</span>) @<span class="hljs-variable constant_">GT</span>= <span class="hljs-number">0</span>;

         <span class="hljs-keyword">if</span>((isHtmlPage || req.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/&#x27;</span>)  &amp;amp;&amp;amp; (httpInForwardedProto || httpInReferer)){
           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;User is not in HTTP, he is redirected&#x27;</span>);
           res.<span class="hljs-title function_">redirect</span>(<span class="hljs-string">&#x27;https://dev-mind.fr&#x27;</span> + req.<span class="hljs-property">url</span>);
         }
         <span class="hljs-keyword">else</span>{
           <span class="hljs-title function_">next</span>();
         }
     })
  <span class="hljs-comment">// Param\xE9trage CORS</span>
  <span class="hljs-title function_">use</span>((req, res, next) @<span class="hljs-variable constant_">ARROW</span> {
          res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);
          res.<span class="hljs-title function_">header</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Origin, X-Requested-With, Content-Type, Accept&#x27;</span>);
          <span class="hljs-title function_">next</span>();
        })
  <span class="hljs-comment">// Reste de la config</span>
  <span class="hljs-comment">// En dernier on dit que pour toutes les autres requ\xEAtes on ouvre une page 404</span>
  .<span class="hljs-title function_">all</span>(<span class="hljs-string">&#x27;*&#x27;</span>, (req, res) @<span class="hljs-variable constant_">ARROW</span> res.<span class="hljs-title function_">redirect</span>(@backtick@/<span class="hljs-number">404.</span>html@backtick@));
  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8085</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450950.1958')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_d\xE9ployer_sur_clever_cloud">D\xE9ployer sur Clever Cloud</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Maintenant que notre application fonctionne, nous pouvons la d\xE9ployer sur clever cloud. Pour cel\xE0 vous devez identifier les scripts qui seront lanc\xE9s par la plateforme dans le fichier <code>package.json</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450951.657">{
  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;dev-mind.com&quot;</span>,
  <span class="hljs-string">&quot;scripts&quot;</span>: {
    <span class="hljs-string">&quot;install&quot;</span>: <span class="hljs-string">&quot;gulp&quot;</span>,
    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;node app.js&quot;</span>,
    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;gulp serve&quot;</span>
  },
  <span class="hljs-string">&quot;dependencies&quot;</span>: { }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450951.657')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Sur Clever Cloud vous deveez cr\xE9er une application Node.js</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/objectif_clever_cloud_03.png" alt="Node JS">
</div>
</div>
<div class="paragraph">
<p>Vous n&#8217;avez qu&#8217;\xE0 suivre les instructions par contre il est important de param\xE9trer les variables d&#8217;environnement suivantes</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450951.4495"><span class="hljs-variable constant_">NODE_BUILD_TOOL</span>=yarn
<span class="hljs-variable constant_">NODE_ENV</span>=prod
<span class="hljs-variable constant_">PORT</span>=<span class="hljs-number">8080</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450951.4495')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>La premi\xE8re ligne permet d&#8217;indiquer \xE0 la plateforme que vous utilisez Yarn plut\xF4t que Npm pour charger les d\xE9pendances Node.</p>
</li>
<li>
<p>Vous devez ensuite activer le mode <code>prod</code> et</p>
</li>
<li>
<p>d\xE9marrer votre application sur le port 8080. Si vous n&#8217;utilisez pas ce port votre application ne fonctionnera pas.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Voila c&#8217;est \xE0 vous de jouer&#8230;&#8203;</p>
</div>
</div>
</div>`;var Ev=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Un bon artisan doit avoir les bons outils. En tant que d\xE9veloppeur j&#8217;ai d\xE9cid\xE9 de changer mon portable pour avoir un peu plus de m\xE9moires et de CPU. Mon choix c&#8217;est port\xE9 sur un XPS15. Voici ce que j&#8217;ai du faire pour le mettre sous Ubuntu</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_quelle_machine_choisir">Quelle machine choisir ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>J&#8217;utilisais au quotidien un XPS 15 depuis plus de 3 ans. Je me suis donc logiquement port\xE9 sur la m\xEAme gamme.</p>
</div>
<div class="paragraph">
<p>Mon premier choix portait sur un Core i9. Ce choix n&#8217;a pas \xE9t\xE9 tr\xE8s opportun car ces toutes derni\xE8res machines ne sont pas capable de supporter des processeurs aussi rapide. Quand vous utilisez votre portable 10h par jour en lan\xE7ant beaucoup de compilations, le CPU a tendance \xE0 \xEAtre utilis\xE9&#8230;&#8203; au final au bout de 2 jours d&#8217;utilisation le portable se mettait en s\xE9curit\xE9 car le CPU chauffait&#8230;&#8203; 2 jours plus tard l&#8217;alimentation a grill\xE9&#8230;&#8203; et donc retour \xE0 l&#8217;envoyeur.</p>
</div>
<div class="paragraph">
<p>Pour ma deuxi\xE8me tentative je me suis rabattu sur XPS15 core i7. La machine se comporte beaucoup mieux malgr\xE9 quelques probl\xE8mes avec le Wifi qui devraient \xEAtre r\xE9solus rapidement.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/ubuntun00.png" alt="Installer Ubuntu sous XPS15">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_quel_os_choisir">Quel OS choisir ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>En tant que d\xE9veloppeur, je trouve que l&#8217;OS le plus int\xE9ressant est Linux. Malheureusement Dell ne livre pas de PC de cette gamme sous Linux. Comme la gamme XPS 13 comporte une machine sur Ubuntu, j&#8217;ai choisi d&#8217;utiliser la m\xEAme \xE9dition afin de b\xE9n\xE9ficier des drivers pour les composants communs aux XPS13 et XPS15.</p>
</div>
<div class="paragraph">
<p>Vous pouvez \xE9craser le disque et n&#8217;installer qu&#8217;un Ubuntu. Mais si vous avez un probl\xE8me mat\xE9riel, le support Dell ne ma\xEEtrise que les outils install\xE9s sous Windows. J&#8217;ai fait le choix de faire cohabiter les deux syst\xE8mes</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_installer_ubuntu">Comment installer Ubuntu ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Je ne vais pas vous d\xE9crire la proc\xE9dure ici car vous trouverez de nombreux forum vous expliquant comment installer <a href="http://releases.ubuntu.com/18.04/">Ubuntu 18.04</a> sur votre laptop. Je vais plut\xF4t revenir sur les commandes "non standards" que j&#8217;ai du faire pour installer Ubuntu \xE0 c\xF4t\xE9 de Windows.</p>
</div>
<div class="paragraph">
<p>En effet les postes sont packag\xE9s pour Windows et le mode Secure Boot est activ\xE9 pour bloquer tout \xE9l\xE9ment \xE9tranger au syst\xE8me (comme un autre syst\xE8me d\u2019exploitation). Autre probl\xE8me, votre syst\xE8me est configur\xE9 pour prot\xE9ger votre disque et le disque dur n&#8217;est pas visible par d\xE9faut quand vous lancez un live CD pour l&#8217;installation \xE0 partir d&#8217;une cl\xE9 ou d&#8217;un disque externe.</p>
</div>
<div class="paragraph">
<p>Si vous \xEAte dans le m\xEAme cas que moi, voici la proc\xE9dure \xE0 suivre</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pr\xE9parer_windows_\xE0_accepter_un_petit_nouveau">Pr\xE9parer Windows \xE0 accepter un petit nouveau ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour pouvoir installer Ubuntu sur le disque syst\xE8me, il faut lui faire de la place! Pour le moment, 100% de l\u2019espace disque est occup\xE9 par Windows et ses partitions : une partition EFI, une partition MSR, une partition Syst\xE8me et une partition Windows. Ce qu\u2019on va faire, c\u2019est r\xE9duire la taille de la partition Windows afin qu\u2019Ubuntu puisse s\u2019installer dans l\u2019espace libre d\xE9sormais disponible.</p>
</div>
<div class="paragraph">
<p>Vous devez pour cel\xE0</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>lancer le gestionnaire de disque Windows,</p>
</li>
<li>
<p>s\xE9lectionner le disque C, r\xE9duire l&#8217;espace</p>
</li>
</ol>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/ubuntun02.png" alt="Changer taille partition C:">
</div>
</div>
<div class="paragraph">
<p>Normalement apr\xE8s cette op\xE9ration vous avez la taille n\xE9c\xE9ssaire \xE0 l&#8217;installation de Ubuntu</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/ubuntun01.png" alt="Changer taille partition C:">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_modifier_les_options_de_d\xE9marrage">Modifier les options de d\xE9marrage</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Ubuntu ne sait pas encore acc\xE9der aux disques en technologie <a href="https://fr.wikipedia.org/wiki/RAID_%28informatique%29">RAID</a> souvent utilis\xE9s par windows. Il faut donc casser ce mode d&#8217;acc\xE8s. D\xE9marrez sous Windows et ouvrez une console PowerShell en mode admin (clic droit sur l&#8217;ic\xF4ne windows en bas \xE0 gauche)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/ubuntun03.png" alt="Ouvrir console PowerShell">
</div>
</div>
<div class="paragraph">
<p>Vous devez lancer la commande suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450898.491">bcdedit /set &quot;&quot;{current}&quot; safeboot minimal</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450898.491')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Il faut ensuite rebooter et aller dans les options dans le bios de votre machine (F2) et choisir option AHCI</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/ubuntun04.png" alt="BIOS d\xE9sactiver RAID">
</div>
</div>
<div class="paragraph">
<p>Vous pouvez aussi en profiter pour d\xE9sactiver le SecureBoot</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/ubuntun05.png" alt="BIOS d\xE9sactiver SecureBoot">
</div>
</div>
<div class="paragraph">
<p>Booter ensuite sous Windows et lancez dans une console PowerShell en mode admin la commande</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450898.2417">bcdedit /deletevalue &quot;{current}&quot; safeboot</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450898.2417')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez red\xE9marrer votre machine pour v\xE9rifier que tout est op\xE9rationnel.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_installer_ubuntu">Installer Ubuntu</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vous pouvez maintenant installer Ubuntu via ue cl\xE9 USB. Pour pouvoir la lancer n&#8217;oubliez pas de changer le boot sequence. Dans mon cas j&#8217;ai pass\xE9 mon disque USB Toshiba en premier</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/ubuntun06.png" alt="Changer boot sequence">
</div>
</div>
<div class="paragraph">
<p>Vous n&#8217;avez plus qu&#8217;\xE0 suivre les instructions de Ubuntu pour installer votre syst\xEAme</p>
</div>
</div>
</div>`;var Dv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Je ne sais pas si vous faites souvent des pr\xE9sentations avec des slides. Pour du one shot j&#8217;utilise beaucoup Google Drive ou Impress (Libre office). Mais ces solutions sont limit\xE9es si je souhaite</p>
</div>
<div class="ulist">
<ul>
<li>
<p>afficher des exemples de code sans avoir \xE0 me battre avec le formatage</p>
</li>
<li>
<p>lancer mes slides en local quand je n&#8217;ai pas de r\xE9seau</p>
</li>
<li>
<p>avoir les sources de mes slides au format texte pour faciliter le suivi des mises \xE0 jour dans Git, et faciliter le mode collaboratif</p>
</li>
<li>
<p>g\xE9n\xE9rer des slides en HTML et pouvoir ex\xE9cuter des exemples de code en JavaScript dans mes slides</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/reveal_00.png" alt="Reveal.js">
</div>
</div>
<div class="paragraph">
<p>Depuis plusieurs mois j&#8217;ai test\xE9 plusieurs g\xE9n\xE9rateurs de Slides avant de tomber sur <a href="https://github.com/hakimel/reveal.js">Reveal.js</a>. Il existe de nombreuses solutions mais elles ne sont pas toujours personnalisables. <a href="https://github.com/hakimel/reveal.js">Reveal.js</a> a l&#8217;aventage d&#8217;offrir un bon nombre de fonctionnalit\xE9s : navigation, customisation, notes speakers, API pour \xE9tendre l&#8217;utilisation, export PDF&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Vous pouvez tester les possibilit\xE9s  <a href="http://revealjs.com/">en ligne</a>. Reveal.js est un script que vous importez dans votre page HTML pour que votre page s&#8217;affiche sous forme de Slides. Si comme moi vous n&#8217;\xEAtes pas fan du c\xF4t\xE9 verbeux de HTML, et des classes CSS \xE0 apprendre, vous pouvez utiliser du markdown et le g\xE9n\xE9rateur de page HTML. Et encore mieux vous pouvez \xE9crire vos slides en Asciidoctor avec ce  <a href="https://github.com/asciidoctor/asciidoctor-reveal.js/">plugin asciidoctor</a>.</p>
</div>
<div class="paragraph">
<p>Maintenant que nous avons une solution il nous reste \xE0 la personnaliser. L&#8217;outil vient avec pleins d&#8217;options mais il me manquait plusieurs choses, comme la possibilit\xE9</p>
</div>
<div class="ulist">
<ul>
<li>
<p>d&#8217;avoir des bandeaux en haut et en bas avec des informations g\xE9n\xE9rales</p>
</li>
<li>
<p>de changer un peu les styles pour sortir du moule Reveal.js et rester original</p>
</li>
<li>
<p>d&#8217;ex\xE9cuter des scripts \xE0 l&#8217;int\xE9rieur de mes slides</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Vous pouvez trouver plein d&#8217;informations sur les pages Github <a href="https://github.com/hakimel/reveal.js">Reveal.js</a> et du  <a href="https://github.com/asciidoctor/asciidoctor-reveal.js/">plugin asciidoctor</a>. Mon but n&#8217;est pas de r\xE9p\xE9ter ce qui est dit sur ces pages. Je vais essayer de compl\xE9ter ces informations en m&#8217;appuyant sur l&#8217;abstract que j&#8217;utilise pour cr\xE9er mes slides. Ce dernier est libre d&#8217;acc\xE8s sous <a href="https://github.com/Dev-Mind/devmind-revealjs">Github</a> et vous pouvez le reprendre pour le personnaliser</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_\xE9crire_vos_slides">Comment \xE9crire vos slides</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Revenons sur la syntaxe utilis\xE9e. Voici un exemple de pr\xE9sentation \xE9crit en asciidoctor dans laquelle je vais avoir</p>
</div>
<div class="ulist">
<ul>
<li>
<p>un titre &#8658; Title Slide</p>
</li>
<li>
<p>plusieurs propri\xE9t\xE9s Reveal.js surcharg\xE9es dans les m\xE9tadata Asciidoc : <em>th\xE8me utilis\xE9, higlighter utilis\xE9 pour la mise en forme du code source), affichage barre de progression et du num\xE9ro des slides, le th\xE8me custom qui me permet de surcharger le th\xE8me par d\xE9faut</em></p>
</li>
<li>
<p>un premier slide avec une liste d&#8217;\xE9l\xE9ments et des notes speakers</p>
</li>
<li>
<p>un second slide avec du texte simple et des notes speakers</p>
</li>
<li>
<p>un troisi\xE8me slide ou je surcharge la couleur de fond par d\xE9faut</p>
</li>
<li>
<p>un quatri\xE8me slide qui affiche une image en plein \xE9cran sans titre</p>
</li>
<li>
<p>un cinqui\xE8me slide ou on change la transition et on applique un effet zoom</p>
</li>
<li>
<p>un sixi\xE8me slide ou on change la vitesse de transition</p>
</li>
<li>
<p>un septi\xE8me slide ou les \xE9l\xE9ments de la liste sont affich\xE9s dynamiquement \xE0 chaque fois que vous avancez</p>
</li>
<li>
<p>un huiti\xE8me slide avec du code affich\xE9</p>
</li>
<li>
<p>un neuvi\xE8me slide qui contient un sous slide que l&#8217;on peut lancer via la fl\xEAche bas. C&#8217;est un exemple de double navigation</p>
</li>
<li>
<p>un dixi\xE8me slide avec une animation JavaScript.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-adoc" id="1732912450996.9727"><span class="hljs-section">= Title Slide</span>
<span class="hljs-meta">:source-highlighter:</span> highlightjs
<span class="hljs-meta">:revealjs_theme:</span> league
<span class="hljs-meta">:revealjs_progress:</span> true
<span class="hljs-meta">:revealjs_slideNumber:</span> true
<span class="hljs-meta">:revealjs_history:</span> true
<span class="hljs-meta">:revealjs_customtheme:</span> css/dm_league.css


<span class="hljs-section">== Slide One</span>

<span class="hljs-bullet">* </span>Foo
<span class="hljs-bullet">* </span>Bar
<span class="hljs-bullet">* </span>World

<span class="hljs-meta">[NOTE.speaker]</span>
<span class="hljs-bullet">--
</span><span class="hljs-section">this my notes
--</span>

<span class="hljs-section">== Slide Two</span>

Hello World - How are you ?

<span class="hljs-meta">[NOTE.speaker]</span>
<span class="hljs-bullet">--
</span><span class="hljs-section">Nothing to say
--</span>

<span class="hljs-meta">[background-color=&quot;#25b5f7&quot;]</span>
<span class="hljs-section">== Slide Three</span>

With another background color

<span class="hljs-meta">[%notitle]</span>
<span class="hljs-section">== Slide Four</span>

image::<span class="hljs-link">https://www.dev-mind.fr/img/logo/logo_1500.png</span>[<span class="hljs-string">canvas,size=contain</span>]


<span class="hljs-meta">[transition=zoom, %notitle]</span>
<span class="hljs-section">== Slide Five</span>

This slide will override the presentation transition and zoom!

<span class="hljs-meta">[transition-speed=fast, %notitle]</span>
<span class="hljs-section">== Slide Six</span>

Choose from three transition speeds: default, fast or slow!

<span class="hljs-section">== Slide Seven</span>

<span class="hljs-meta">[%step]</span>
<span class="hljs-bullet">* </span>this
<span class="hljs-bullet">* </span>is
<span class="hljs-bullet">* </span>revealed
<span class="hljs-bullet">* </span>gradually

<span class="hljs-section">== Slide Height</span>

Uses highlighted code

<span class="hljs-meta">[source, python]</span>
<span class="hljs-code"> ----</span>
print &quot;Hello World&quot;
<span class="hljs-code"> ----</span>

<span class="hljs-section">== Slide Nine</span>

Top slide

<span class="hljs-section">=== Slide Nine.One</span>

This is a vertical subslide

<span class="hljs-meta">[state=dynamic]</span>
<span class="hljs-section">== Slide Ten js...</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450996.9727')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si vous voulez voir le rendu, vous pouvez faire un clone du projet <a href="https://github.com/Dev-Mind/devmind-revealjs">Github</a> et lancer les commandes (ces scripts s&#8217;appuient sur nodeJS que vous devez avoir sur votre poste ainsi que de yarn et de gulp)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight">yarn install
gulp serve</pre>
</div>
</div>
<div class="paragraph">
<p>Ce document sera converti par Asciidoctor en une page HTML important le script reveal.js. Comme pour tout document Asciidoc vous \xE9crivez de mani\xE8re hi\xE9rachique votre contenu.</p>
</div>
<div class="paragraph">
<p>Le document est converti via cette commande</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight">     <span class="hljs-keyword">const</span> attributes = {<span class="hljs-string">&#x27;revealjsdir&#x27;</span>: <span class="hljs-string">&#x27;node_modules/reveal.js@&#x27;</span>};
     <span class="hljs-keyword">const</span> options = {<span class="hljs-attr">safe</span>: <span class="hljs-string">&#x27;safe&#x27;</span>, <span class="hljs-attr">backend</span>: <span class="hljs-string">&#x27;revealjs&#x27;</span>, <span class="hljs-attr">attributes</span>: attributes};
     asciidoctor.<span class="hljs-title function_">convertFile</span>(filepath, options);</pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez utiliser l&#8217;application Asciidoctor en Ruby ou la nouvelle version en JavaScript.</p>
</div>
<div class="paragraph">
<p>Les notes speakers sont \xE0 mon sens tr\xE8s bien r\xE9ussies. Si vous cliquez sur la touche s, elles apparaissent dans une nouvelle fen\xEAtre. La navigation dans cette fen\xEAtre est syncronis\xE9e avec l&#8217;autre et chose pratique, vou disposez d&#8217;un compteur pour afficher le temps</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/reveal_speaker.png" alt="Speaker note">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_outil_pour_automatiser_la_construction">Un outil pour automatiser la construction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour me simplifier l&#8217;utilisation de ces outils, j&#8217;utilise Gulp. Gulp me permet de</p>
</div>
<div class="ulist">
<ul>
<li>
<p>convertir mes fichiers asciidoctor en HTML \xE0 la sauce "Reveal.js"</p>
</li>
<li>
<p>packager les d\xE9pendances</p>
</li>
<li>
<p>g\xE9n\xE9rer un mini site avec les fichiers HTML g\xE9n\xE9r\xE9s, mes images, mes styles personnalis\xE9s</p>
</li>
<li>
<p>injecter mes scripts Javascript personnalis\xE9s pour les slides dynamiques</p>
</li>
<li>
<p>lancer un serveur web qui recharge \xE0 la vol\xE9e les pages quand je fais des modifications \xE0 l&#8217;int\xE9rieur</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Ce script est disponible sous <a href="https://github.com/Dev-Mind/devmind-revealjs/blob/master/gulpfile.js">Github</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_personnaliser_les_styles">Personnaliser les styles</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans les metadata de la page vous pouvez sp\xE9cifier un th\xE8me \xE0 la pr\xE9sentation : black (d\xE9faut), white, league, beige, sky, night, serif, simple, solarized. Si les th\xE8mes ne vous conviennent pas, vous pouvez surcharger les propri\xE9t\xE9s dans un fichier externe. Les metadata peuvent \xEAtre les suivantes</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-adoc" id="1732912450997.3628"><span class="hljs-meta">:revealjs_theme:</span> league
<span class="hljs-meta">:revealjs_customtheme:</span> css/custom.css</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450997.3628')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voici ce que vous pouvez faire dans ce fichier custom.css</p>
</div>
<div class="sect2">
<h3 id="_utiliser_sa_propre_police_d\xE9criture">Utiliser sa propre police d&#8217;\xE9criture</h3>
<div class="paragraph">
<p>Le mieux est de t\xE9l\xE9charger une police via un CDN. Nous faisons un import de cette police d&#8217;\xE9criture dans la feuille de style. C&#8217;est une mauvaise pratique sur un site grand public mais dans notre cas nous voulons simplement ex\xE9cuter notre pr\xE9sentation en local</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450997.1077"><span class="hljs-keyword">@import</span> url(<span class="hljs-attribute">https</span>://fonts.googleapis.com/css?family=<span class="hljs-attribute">Roboto</span>:<span class="hljs-number">400</span>,<span class="hljs-number">700</span>,<span class="hljs-number">400</span>italic,<span class="hljs-number">700</span>italic);
<span class="hljs-selector-tag">body</span> {
  <span class="hljs-attribute">background</span>: <span class="hljs-number">#52a83b</span>;
  <span class="hljs-attribute">font-family</span>: Roboto, Arial, sans-serif;
}

<span class="hljs-selector-class">.reveal</span> {
  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;Lato&quot;</span>, sans-serif;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;
  <span class="hljs-attribute">font-weight</span>: normal;
  <span class="hljs-attribute">color</span>: <span class="hljs-number">#eee</span>; }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450997.1077')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_ajouter_des_bandeaux_en_haut_et_en_bas_de_chaque_slide">Ajouter des bandeaux en haut et en bas de chaque slide</h3>
<div class="paragraph">
<p>Quand je fais des slides j&#8217;aime beaucoup ajouter des informations dans des bandeaux en haut et ou en bas des slides, comme sur l&#8217;image ci dessous</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/reveal_bandau.png" alt="Bandeau en haut et en base de chaque page">
</div>
</div>
<div class="paragraph">
<p>On ne peut pas le faire avec Reveal.js mais c&#8217;est tr\xE8s facile de le faire en css</p>
</div>
<div class="paragraph">
<p>Le code ci dessous permet d&#8217;ajouter un bandeau en bas de chaque slide avec un copyright (<code><em>body:before</em></code>), et une image flottante \xE0 gauche avec dans mon cas mon logo (<code><em>body:before</em></code>).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450998.7305"><span class="hljs-selector-tag">body</span><span class="hljs-selector-pseudo">:after</span> {
  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27; &#x27;</span>;
  <span class="hljs-attribute">position</span>: fixed;
  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">1em</span>;
  <span class="hljs-attribute">left</span>: <span class="hljs-number">1em</span>;
  <span class="hljs-attribute">width</span>: <span class="hljs-number">6em</span>;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">8em</span>;
  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/logo.svg</span>);
  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">6em</span>;
  <span class="hljs-attribute">background-repeat</span>: no-repeat;
  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">3%</span> <span class="hljs-number">96%</span>; }

<span class="hljs-selector-tag">body</span><span class="hljs-selector-pseudo">:before</span> {
  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;\xA9 Dev-Mind 2018&#x27;</span>;
  <span class="hljs-attribute">position</span>: fixed;
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span>;
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">1em</span>;
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#424242</span>;
  <span class="hljs-attribute">color</span>: white;
  <span class="hljs-attribute">text-align</span>: center;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9rem</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450998.7305')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si vous voulez ajouter un bandeau en haut vous ne pouvez plus surcharger le style de la balise body vu qu&#8217;on vient de le faire juste avant. Ce n&#8217;est pas tr\xE8s grave car chaque page correspond \xE0 une section d&#8217;une page HTML ayant une classe de style nomm\xE9e <code>reveal</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450999.9553"><span class="hljs-selector-class">.reveal</span><span class="hljs-selector-pseudo">:before</span> {
  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;Reveal.js par la pratique&#x27;</span>;
  <span class="hljs-attribute">position</span>: fixed;
  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span>;
  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;
  <span class="hljs-attribute">height</span>: <span class="hljs-number">1em</span>;
  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#424242</span>;
  <span class="hljs-attribute">color</span>: white;
  <span class="hljs-attribute">text-align</span>: center;
  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9rem</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450999.9553')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez vous amuser \xE0 surcharger ou ajouter d&#8217;autres choses dans les styles. Mais si CSS peut \xEAtre obscur, il permet en quelques lignes de personnaliser le contenu de n&#8217;importe qu&#8217;elle page HTML.</p>
</div>
</div>
<div class="sect2">
<h3 id="_ajouter_une_touche_de_dynamisme">Ajouter une touche de dynamisme</h3>
<div class="paragraph">
<p>Il reste un use case qui n&#8217;est pas couvert par la documentation officielle. Ajouter une ou plusieurs pages dynamiques pour une d\xE9mo web par exemple. Si vous faites du reveal.js pur en \xE9crivant du HTML, vous n&#8217;avez pas trop de souci car vous pouvez simplement importer vos propres scripts dans vos pages. Avec le plugin asciidoctor, vous devrez ruser un peu plus</p>
</div>
<div class="paragraph">
<p>Commencez par ajouter un \xE9tat au slide concern\xE9. Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-adoc" id="1732912450999.6863"><span class="hljs-meta">[state=dynamic-example]</span>
<span class="hljs-section">== Slide Ten js...</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450999.6863')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>L&#8217;API reveal.js permet d&#8217;interagir avec cet \xE9tat. Lorsque le slide sera charg\xE9 un \xE9v\xE9nement portant le m\xEAme nom que l&#8217;\xE9tat sera \xE9mis</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-adoc" id="1732912450999.738">Reveal.addEventListener( <span class="hljs-emphasis">&#x27;dynamic-example&#x27;</span>, function() {
<span class="hljs-code">    //</span>
}, false );</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450999.738')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez \xE9crire un fichier javascript <code>js/custom.js</code>. Pour agir avec le slide, vous pouvez utiliser l&#8217;id g\xE9n\xE9r\xE9 \xE0 partir du titre que vous avez d\xE9fini. Dans l&#8217;exemple ci dessous, je cr\xE9e en Javascript une page avec deux boutons, et le clic sur un bouton change la couleur du paragraphe. Un innerHTML permet de peupler le HTML final</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912451000.15"><span class="hljs-title class_">Reveal</span>.<span class="hljs-title function_">addEventListener</span>( <span class="hljs-string">&#x27;dynamic&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) {

  <span class="hljs-keyword">const</span> html = @backtick@
    &lt;h1&gt;<span class="hljs-title class_">Dynamic</span> slide&lt;/h1&gt;
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My paragraph<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myparagraph&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>Choose a color<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>
    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;myparagraph&#x27;).style.color =&#x27;red&#x27;&quot;</span>&gt;</span>Red<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;myparagraph&#x27;).style.color =&#x27;blue&#x27;&quot;</span>&gt;</span>Blue<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>
  @backtick@;

  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;slide_ten_js&#x27;</span>).<span class="hljs-property">innerHTML</span> = html;
}, <span class="hljs-literal">false</span> );</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451000.15')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Malheureusement je n&#8217;ai pas trouv\xE9 le moyen d&#8217;indiquer \xE0 Asciidoctor qu&#8217;il fallait prendre en compte ce fichier Javascript. Mais Gulp peut nous aider. Dans mon cas je rajoute le chargement du script apr\xE8s la convertion asciidoctor &#8594; HTML</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912451002.425">gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;copy-html&#x27;</span>, <span class="hljs-function">() =&gt;</span>
  gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;src/**/*.html&#x27;</span>)
    .<span class="hljs-title function_">pipe</span>(@dollar@.<span class="hljs-title function_">tap</span>(<span class="hljs-function">(<span class="hljs-params">file, cb</span>) =&gt;</span> {
      <span class="hljs-keyword">const</span> newFile = file.<span class="hljs-property">contents</span>.<span class="hljs-title function_">toString</span>();
      <span class="hljs-keyword">const</span> newContents = newFile.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&lt;script src=&quot;js/custom.js&quot;&gt;&lt;/script&gt;&#x27;</span>);
      file.<span class="hljs-property">contents</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(newContents);
      <span class="hljs-keyword">return</span> file;
    }))
    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;build/dist&#x27;</span>))
);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451002.425')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez utiliser ce hack pour introduire tous les scripts que vous souhaitez, comme par exemple inclure votre framework favori que vous pr\xE9sentez dans vos slides.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Je pourrai encore d\xE9crire d&#8217;autres cas d&#8217;utilisations plus courants mais je ne souhaite pas copier les documentations officielles <a href="https://github.com/hakimel/reveal.js">Reveal.js</a> ou du  <a href="https://github.com/asciidoctor/asciidoctor-reveal.js/">plugin asciidoctor</a>. Elles sont beaucoup plus compl\xE8tes que cet article et je vous laisse les parcourir</p>
</div>
</div>
</div>`;var qv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>La premi\xE8re \xE9dition de <a href="http://itogo.cleverapps.io">ITogo.conf</a> s&#8217;est d\xE9roul\xE9e le 9 juin 2017 \xE0 Lom\xE9 au Togo. Je ne connaissais pas ce petit pays de la corne de l&#8217;Afrique avant de conna\xEEtre Horacio, un des organisateurs de la conf\xE9rence. Je vais donc vous parler de cette conf\xE9rence et un peu de ce petit pays.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_00.png" alt="Conf\xE9rence">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_la_petite_histoire_de_la_conf\xE9rence">La petite histoire de la conf\xE9rence</h2>
<div class="sectionbody">
<div class="paragraph">
<p>La conf\xE9rence est n\xE9e d&#8217;un r\xEAve fait par trois potes informaticiens de Lom\xE9 il y a plusieurs ann\xE9es. M\xEAme s&#8217;ils se sont crois\xE9s au d\xE9but de leur parcours professionnel et associatif, leur avenir professionnel les a \xE9loign\xE9</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://www.twitter.com/deovince">D\xE9wo Atsu</a> travaille chez le deuxi\xE8me op\xE9rateur de t\xE9l\xE9phonie du Togo, <a href="https://www.moov.tg/">Moov</a>. Il a quitt\xE9 par la force des choses le d\xE9veloppement mais il est toujours passionn\xE9 par le code.</p>
</li>
<li>
<p><a href="https://www.twitter.com/horalass">Horacio Lassey</a> a pour passion de triturer de la donn\xE9e. Il est aujourd&#8217;hui sp\xE9cialis\xE9 \xE0 Paris dans le d\xE9cisionnel et le big data.</p>
</li>
<li>
<p><a href="https://www.twitter.com/samgolchi">Sam Mawusee Komla Foli-Awli</a> est un d\xE9veloppeur qui a fond\xE9 sa propre strucure au Togo,  <a href="http://www.macedilleplus.com">macedilleplus</a>. Ses passions tournent autour du d\xE9veloppement Web et de la transmission de son savoir</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_organisateurs.jpg" alt="Les organisateurs de la conf\xE9rence">
</div>
</div>
<div class="paragraph">
<p>Ces trois comparses se sont beaucoup cot\xF4y\xE9s lors des meetups qu&#8217;ils essayaient d&#8217;organiser \xE0 Lom\xE9. Alors comment passe t-on d&#8217;un r\xEAve \xE0 une conf\xE9rence ? Le plus gros probl\xE8me dans cette r\xE9gion d&#8217;Afrique est d&#8217;attirer des speakers reconnus. C&#8217;est pour eux le seul moyen de trouver des sponsors qui financent ce genre d&#8217;\xE9v\xE9nement. Il faut donc avoir un r\xE9seau qui permet de les toucher.</p>
</div>
<div class="paragraph">
<p>Tout \xE0 basculer le jour ou Horacio a eu un contact sur Twitter avec <a href="https://twitter.com/agnes_crepet">Agn\xE8s Crepet</a>. Elle donnait \xE0 cette p\xE9riode des formations en C\xF4te d&#8217;Ivoire, avec son conjoint <a href="https://twitter.com/clacote">Cyril Lacote</a>. Agnes et Cyril sont venus \xE0 Lom\xE9 animer une session au JUG (g\xE9r\xE9 \xE0 l&#8217;\xE9poque par Horacio).</p>
</div>
<div class="paragraph">
<p>Il se trouve que nous faisons partie Agn\xE8s, Cyril et moi m\xEAme, de l&#8217;organisation de la conf\xE9rence <a href="https://mixitconf.org/">MiXiT</a>. En 2014 Agn\xE8s a eu la tr\xE8s bonne id\xE9e d&#8217;inviter Horacio pour venir parler de la vie des informaticiens en Afrique de l&#8217;ouest. Cette conf\xE9rence est accessible sur le <a href="https://www.infoq.com/fr/presentations/communautes-monde-it-sous-autres-cieux?utm_source=presentations_about_mix-it2014&amp;utm_medium=link&amp;utm_campaign=mix-it2014">site d&#8217;infoQ</a>.</p>
</div>
<div class="paragraph">
<p>Horacio a profit\xE9 de <a href="https://mixitconf.org">MiXiT</a> et de <a href="https://www.devoxx.fr/">Devoxx</a>, pour nouer des contacts avec des speakers. Lors de notre rencontre, j&#8217;ai \xE9t\xE9 frapp\xE9 par le fait qu&#8217;il connaissait d\xE9j\xE0 beaucoup de personnes. Il les suivait tous sur Twitter ou lisait leurs blogs. Je pense que c&#8217;est la seule personne que j&#8217;ai rencontr\xE9e qui connaissait autant mes articles de blogs.</p>
</div>
<div class="paragraph">
<p>Horacio, apr\xE8s avoir travaill\xE9 au Togo et au B\xE9nin, est venu faire des \xE9tudes en France pour compl\xE9ter ses comp\xE9tences. Il a ensuite \xE9t\xE9 embauch\xE9 par une ESN sur Paris. C&#8217;est lors d&#8217;une discussion que nous avons eu d\xE9but 2017, qu&#8217;il m&#8217;a parl\xE9 de son r\xEAve de conf\xE9rence. J&#8217;ai d\xE9cid\xE9 de lui donner un coup de main pour trouver des speakers. Malheureusement je n&#8217;ai pas \xE9t\xE9 tr\xE8s bon&#8230;&#8203; A la fin je n&#8217;\xE9tais plus que le seul europ\xE9en sur la liste. Mais la petite graine avait germ\xE9 et les trois amis se sont coordonn\xE9s \xE0 distance pour monter la conf\xE9rence ITogo.conf.</p>
</div>
<div class="paragraph">
<p>Cette premi\xE8re \xE9dition \xE9tait \xE0 mes yeux un succ\xE8s. M\xEAme si le public n&#8217;\xE9tait pas tr\xE8s nombreux, elle a permis de faire avancer les choses. Des speakers sont venus du B\xE9nin, du Burkina Faso, du Togo pour prendre la parole. L&#8217;antenne locale de l&#8217;Internet Society a sponsoris\xE9 la conf\xE9rence. Clever Cloud en France a apport\xE9 sa petite part en h\xE9bergeant le site web.</p>
</div>
<div class="paragraph">
<p>Si vous \xEAtes speakers, l&#8217;Afrique a besoin de vous. Les \xE9v\xE9nements sur ce continent sont trop rares et les personnes sont avides d&#8217;apprendre. C&#8217;est la premi\xE8re conf\xE9rence o\xF9 j&#8217;ai eu autant d&#8217;\xE9change avec les participants et les autres speakers. Je ne regrette \xE0 aucun moment d&#8217;\xEAtre venu ici et j&#8217;en garderai un tr\xE8s bon souvenir. A tel point que je redonnerai certainement un coup de main  \xE0 cette conf\xE9rence \xE0 l&#8217;avenir.</p>
</div>
<div class="paragraph">
<p>Par contre, si vous voulez venir parler, la conf\xE9rence ne pourra certainement pas prendre en charge vos frais de transports. Ce n&#8217;est pas une question de volont\xE9 mais de moyens. Il faut d&#8217;abord, qu&#8217;ils arrivent \xE0 trouver des sponsors avant de pouvoir le faire. Personnellement je suis pass\xE9 freelance pour avoir plus de temps \xE0 donner \xE0 la communaut\xE9 en France ou ailleurs et ce projet de conf\xE9rence en Afrique correspondait pleinement \xE0 ma philosophie.</p>
</div>
<div class="paragraph">
<p>Vous pouvez consulter le site web \xE0 l&#8217;adresse suivante <a href="http://itogo.cleverapps.io" class="bare">http://itogo.cleverapps.io</a> pour avoir le r\xE9sum\xE9 des diff\xE9rentes sessions que nous avons eu.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_conf1.jpg" alt="Speakers">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_conf2.jpg" alt="Speakers">
</div>
</div>
<div class="paragraph">
<p>Par rapport aux deux conf\xE9rences que j&#8217;ai anim\xE9es, vous trouverez les ressources aux adresses suivantes</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Cr\xE9er une application Android en 50 minutes : <a href="https://speakerdeck.com/javamind/mettre-en-place-une-application-android-en-50-minutes">slides</a>, <a href="https://github.com/Dev-Mind/kotlinInAction">kotlinInAction</a>, <a href="https://github.com/Dev-Mind/androidInAction">androidInAction</a></p>
</li>
<li>
<p>Am\xE9liorer les performances de votre webapp : <a href="https://speakerdeck.com/javamind/itogo-conf-optimiser-les-performances-d-une-webapp">slides</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mixteen">Mixteen</h2>
<div class="sectionbody">
<div class="paragraph">
<p>C&#8217;est pour moi, le moment le plus marquant de mon s\xE9jour ici.  Celui qui m&#8217;a laiss\xE9 le plus d&#8217;ondes positives. Le jeudi 7 mai, nous avons organis\xE9 avec Horacio, le premier Mixteen d\xE9localis\xE9 dans un coll\xE8ge de la banlieue de Lom\xE9, \xE0 Agbodrafo. Malheureusement <a href="https://twitter.com/titimoby">Thierry Chantier</a> (autre membre de la team Mixteen), n&#8217;a pu se joindre \xE0 cette aventure cette fois ci, mais il \xE9tait tout de m\xEAme pr\xE9sent par la pens\xE9e.</p>
</div>
<div class="paragraph">
<p>Horacio a \xE9t\xE9 contact\xE9, il y a plus d&#8217;un an par son ancien proviseur de coll\xE8ge monsieur Daroux. Ce proviseur essaie depuis une trentaine d&#8217;ann\xE9es, de pousser son coll\xE8ge et les enfants vers le haut, en essayant de renouveler les enseignements. Le constat est le suivant. En Afrique comme ailleurs dans le monde la r\xE9volution du num\xE9rique et de l&#8217;Internet est en marche. Tout le monde veut aussi acc\xE9der \xE0 la toile.</p>
</div>
<div class="paragraph">
<p>Sauf qu&#8217;il est compliqu\xE9 pour les \xE9tudiants de faire des m\xE9tiers du num\xE9rique.  Ils ne touchent des ordinateurs qu&#8217;\xE0 partir du lyc\xE9e ou plus tard. L&#8217;utilisation du num\xE9rique en Afrique se fait essentiellement par le biais du mobile. Le r\xE9seau filaire n&#8217;est pas bon et le mobile est parfois la seule porte d&#8217;entr\xE9e sur la toile.</p>
</div>
<div class="paragraph">
<p>Monsieur Daroux pousse pour essayer de combler ce manque. Les anciens \xE9l\xE8ves ont financ\xE9 une salle informatique et il restait \xE0 l&#8217;inaugurer et voir comment transmettre des \xE9l\xE9ments aux enseignants. Le but n&#8217;\xE9tait pas de faire un seul \xE9v\xE9nement mais d&#8217;essayer de rendre autonome les enseignants. Notre souhait le plus profond est de simplement offrir une chance aux enfants de comprendre le monde autour d&#8217;eux et d&#8217;\xEAtre acteur de leur avenir.</p>
</div>
<div class="paragraph">
<p>Nous avons mont\xE9 un atelier en deux parties et le mat\xE9riel et les supports a \xE9t\xE9 laiss\xE9 \xE0 l\xE9quipe enseignante.</p>
</div>
<div class="sect2">
<h3 id="_comment_marche_un_ordinateur">Comment marche un ordinateur</h3>
<div class="paragraph">
<p>La premi\xE8re partie consistait \xE0 expliquer aux enfants comment fonctionnait un ordinateur, un t\xE9l\xE9phone, un \xE9cran, un clavier&#8230;&#8203; Nous leur avons fait assembler un ordinateur via des <a href="http://www.raspberrypi-france.fr/">Raspberry Pi</a>. Au d\xE9part nous pensions avoir une quinzaine d&#8217;enfants, mais nous avons essay\xE9 de donner une chance \xE0 plus d&#8217;enfants en doublant les participants.</p>
</div>
<div class="paragraph">
<p>Malheureusement nous n&#8217;avons touch\xE9 que la moiti\xE9 des 4\xE8mes. Les enfants ont \xE9t\xE9 s\xE9lectionn\xE9s au m\xE9rite en fonction de leurs notes et de leurs capacit\xE9s en math\xE9mtiques et physiques. Une chose qui est devenue inconcevable en France, mais qui est ici en Afrique tout \xE0 fait naturel.</p>
</div>
<div class="paragraph">
<p>La rencontre a \xE9t\xE9 br\xE8ve mais j&#8217;ai beaucoup aim\xE9 la discussion sur l&#8217;enseignement  en Afrique avec le proviseur.</p>
</div>
<div class="paragraph">
<p>Vous pouvez trouver le support de la pr\xE9sentation <a href="https://speakerdeck.com/javamind/comment-marche-un-ordinateur">ici</a> et n&#8217;h\xE9sitez pas \xE0 me contacter ou \xE0 contacter l&#8217;association MixTeen pour plus d&#8217;informations.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_mixteen1.jpg" alt="Cr\xE9er son ordinateur \xE0 base de RasberryPi">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_utiliser_un_ordinateur">Utiliser un ordinateur</h3>
<div class="paragraph">
<p>Dans la deuxi\xE8me partie les \xE9l\xE8ves se sont r\xE9partis par binomes ou trinomes et nous leur avons pr\xE9sent\xE9 <a href="https://scratch.mit.edu/">Scratch</a>. Scratch permet de faire de la programmation par blocs et permet de programmer des actions d\xE9clench\xE9es par des \xE9v\xE9nements : \xE9v\xE9nement sur le clavier, sur un des personnages import\xE9s dans l&#8217;outil&#8230;&#8203;.</p>
</div>
<div class="paragraph">
<p>Une chose qui \xE9tait assez marquante c&#8217;est que la plupart des \xE9l\xE8ves n&#8217;avaient jamais touch\xE9 un ordinateur de leur vie. La d\xE9couverte de la souris est toujours particulier mais c&#8217;est assez dingue, de voir \xE0 quelle vitesse ils ont capt\xE9 le truc. Beaucoup sont partis avec la peur de l&#8217;\xE9chec.</p>
</div>
<div class="paragraph">
<p>A part la p\xE9riode de mise en route pour comprendre comment utiliser la souris, et o\xF9 \xE9tait dispos\xE9 les choses, les enfants ont mis la m\xEAme ferveur \xE0 d\xE9vorer les exercices que l&#8217;on retrouve dans les ateliers que nous organisons dans la r\xE9gion lyonnaise.</p>
</div>
<div class="paragraph">
<p>Il existe des milliers d&#8217;exercices ou exemples disponibles sur le site de Scratch. Pour cet atelier nous avons choisi d&#8217;utiliser ce <a href="http://scratchfr.free.fr/Scratchfr_v2014/Scratch_Cards_v2.0frA4_January27th.pdf">jeu de cartes</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_mixteen2.jpg" alt="Scratch en action">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_et_apr\xE8s">Et apr\xE8s ?</h3>
<div class="paragraph">
<p>Faire ce genre d&#8217;atelier est super pour les enfants que nous avons sensibilis\xE9s. Mais il faut que cette d\xE9marche perdure dans le temps. Nous avons essay\xE9 d&#8217;expliquer ce que nous avons fait aux professeurs mais comme les enfants certains d&#8217;entre eux n&#8217;ont jamais manipul\xE9 aucun ordinateur.</p>
</div>
<div class="paragraph">
<p>Le directeur de l&#8217;\xE9cole en a pris conscience et va essayer de les former. En attendant Horacio et peut \xEAtre d&#8217;autres anciens \xE9l\xE8ves du coll\xE8ge vont essayer d&#8217;apporter leur soutien pour entretenir cette flemme, et faire en sorte, que chaque enfant qui sorte du coll\xE8ge puisse avoir manipuler un ordinateur auparavant.</p>
</div>
<div class="paragraph">
<p>D&#8217;autres associations sur place essaient de faire la m\xEAme chose et montent aussi des ateliers avec Scratch. Croisons les doigts pour que ces mouvements se g\xE9n\xE9ralisent et s&#8217;\xE9tendent bien plus loin que la capitale Lom\xE9.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_mixteen3.jpg" alt="Transfert aux professeurs">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_togo">Le Togo</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Je ne peux pas, ne pas parler du Togo dans cet article. Certes je ne peux pas le d\xE9crire pr\xE9cis\xE9ment, car je ne suis rest\xE9 qu&#8217;une semaine et j&#8217;ai beaucoup navigu\xE9 dans le sud du Pays. Mais voici ce que j&#8217;en ai retenu.</p>
</div>
<div class="paragraph">
<p>La c\xF4te maritime ne fait que 50km et le Togo est l&#8217;\xE9quivalent en surface \xE0 la r\xE9gion Rh\xF4ne Alpes (sans l&#8217;Auvergne). Le Togo n&#8217;est pas un pays sec et la v\xE9g\xE9tation est vraiment riche. La richesse historique du Togo est le phosphate mais cette denr\xE9e ne rapporte plus autant qu&#8217;avant, les structures ont tendance a se d\xE9grader. Le gros probl\xE8me du Togo comme de l&#8217;Afrique est qu&#8217;ils vendent des mati\xE8res premi\xE8res, mais qu&#8217;ils sont oblig\xE9s d&#8217;acheter et d&#8217;importer les produits finis. La balance commerciale leur est donc d\xE9favorable.</p>
</div>
<div class="paragraph">
<p>L&#8217;autre richesse du Togo est son port en eaux profondes. C&#8217;est le seul sur cette partie de l&#8217;Afrique. Malheureusement ce dernier est g\xE9r\xE9 par une entreprise fran\xE7aise, Bollor\xE9 et d&#8217;ailleurs les conditions d&#8217;attribution de ce march\xE9 <a href="https://togotribune.com/news/togo-la-mafia-bollore-fait-perdre-plusieurs-milliards-au-budget-de-letat/">sont plut\xF4t douteuses</a>.</p>
</div>
<div class="paragraph">
<p>Les personnes ici sont tr\xE8s sympatiques et ce qui m&#8217;a marqu\xE9 c&#8217;est que les Togolais ne sont pas une seule nation mais un ensemble de peuples, de cultures, de langues, de traditions et de religions diff\xE9rentes. Tout le monde se c\xF4toie de mani\xE8re cordiale et le fran\xE7ais est la langue qui lie les personnes. Malheureursement ce ne sont que les personnes qui ont pu aller \xE0 l&#8217;\xE9cole qui savent parler fran\xE7ais. Une bonne partie de la population ne parle que les dialectes locaux.</p>
</div>
<div class="paragraph">
<p>Au niveau des visites je vous partage quelques photos : de la plage, du march\xE9 de Lom\xE9, de la maison des esclaves \xE0 Agbodrafo (lieu o\xF9 \xE9tait enferm\xE9 les esclaves avant leur envoi vers les antilles ou l&#8217;am\xE9rique)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_ocean.jpg" alt="Oc\xE9an atlantique au Togo">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_marche.jpg" alt="March\xE9 de Lom\xE9">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/itogo_maison_esclave.jpg" alt="Maison des esclaves">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Voila je souhaite bon vent \xE0 cette nouvelle conf\xE9rence <a href="http://itogo.cleverapps.io">ITogo.conf</a> et j&#8217;esp\xE8re que d&#8217;autres \xE9ditions auront lieu. Merci encore aux organisateurs pour avoir cr\xE9er ce moment. Au del\xE0 de l&#8217;informatique le Togo est un pays qui vaut le d\xE9tour notamment pour rencontrer les togolais qui sont tr\xE8s accueillants.</p>
</div>
</div>
</div>`;var Iv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Quand nous commen\xE7ons \xE0 travailler pour un nouvel employeur nous sommes tous remplis de motivation et de bonnes ondes. Comment peut on arriver quelques mois plus tard \xE0 \xEAtre compl\xE9tement d\xE9motiv\xE9 ? Est ce un probl\xE8me personnel, est ce un probl\xE8me de management, de contexte ? Peut \xEAtre les 3 \xE0 la fois.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/motivation_00.png" alt="La motivation au travail">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_satisfaction_ou_insatisfaction">Satisfaction ou insatisfaction</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="http://fr.wikipedia.org/wiki/Frederick_Herzberg">Frederick Herzberg</a>, psychologue am\xE9ricain s\u2019est pench\xE9 sur les conditions de travail et les relations humaines en milieu industriel (livre Le travail et la nature de l\u2019homme, 1978). Son travail a d\xE9bouch\xE9 sur la th\xE9orie de la motivation.</p>
</div>
<div class="paragraph">
<p>Quand on travaille au contact des autres, la compr\xE9hension de sa personnalit\xE9 ou de celles de ses collaborateurs est la cl\xE9 pour d\xE9velopper les qualit\xE9s humaines de chacun comme le leadership, la motivation, l\u2019empathie\u2026</p>
</div>
<div class="paragraph">
<p>Mieux se conna\xEEtre permet de comprendre comment les autres nous per\xE7oivent et comment ils peuvent r\xE9agir \xE0 notre personnalit\xE9 ou \xE0 notre style. Ainsi il est plus facile d\u2019adapter sa fa\xE7on d\u2019\xEAtre pour travailler plus facilement avec les autres.</p>
</div>
<div class="paragraph">
<p>La satisfaction et l\u2019insatisfaction au travail d\xE9coule de plusieurs facteurs. G\xE9n\xE9ralement les facteurs amenant de la satisfaction sont li\xE9s \xE0 l\u2019ex\xE9cution du travail alors que les facteurs d\u2019insatisfaction sont plut\xF4t li\xE9s \xE0 un contexte. Le contraire de la satisfaction pour Herzberg n\u2019est pas l&#8217;insatisfaction mais l\u2019absence de satisfaction. De m\xEAme pour l&#8217;insatisfaction, son contraire est l\u2019absence d\u2019insatisfaction.</p>
</div>
<div class="paragraph">
<p>Il distingue deux cat\xE9gories de facteurs :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>ceux apportant de la satisfaction et dit facteurs de motivations</p>
<div class="ulist">
<ul>
<li>
<p>la reconnaissance</p>
</li>
<li>
<p>l\u2019accomplissement ou la sensation d\u2019avoir bien r\xE9alis\xE9 son travail</p>
</li>
<li>
<p>la responsabilisation</p>
</li>
<li>
<p>l\u2019autonomie accord\xE9e</p>
</li>
<li>
<p>le plan de carri\xE8re</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</li>
<li>
<p>ceux li\xE9s \xE0 l\u2019insatisfaction dit facteurs d\u2019hygi\xE8ne.</p>
<div class="ulist">
<ul>
<li>
<p>la relation avec ses sup\xE9rieurs,</p>
</li>
<li>
<p>le respect de la vie priv\xE9e,</p>
</li>
<li>
<p>les conditions de travail,</p>
</li>
<li>
<p>le salaire</p>
</li>
<li>
<p>les relations professionnelles</p>
</li>
<li>
<p>la couverture sociale : mutuelle</p>
</li>
<li>
<p>la s\xE9curit\xE9 du travai</p>
</li>
<li>
<p>la vision de l\u2019entreprise, d\u2019un projet</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Pour <a href="http://www.businessballs.com/herzberg.htm">Herzberg</a>, la motivation vient de la satisfaction et de l\u2019absence d\u2019insatisfaction (<a href="http://fr.wikipedia.org/wiki/Th%C3%A9orie_des_deux_facteurs">th\xE9orie des deux facteurs</a>).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pyramide_de_maslow">Pyramide de Maslow</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quand on parle de motivation, on peut aussi \xE9voquer les travaux de <a href="http://fr.wikipedia.org/wiki/Abraham_Maslow">Abraham Maslow</a> autre psychologue am\xE9ricain qui ont d\xE9bouch\xE9 sur la pyramide des besoins.</p>
</div>
<div class="paragraph">
<p>Maslow estime qu\u2019une personne cherche \xE0 b\xE2tir la pyramide ci dessous</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/motivation_01.png" alt="Pyramide de Maslow">
</div>
</div>
<div class="paragraph">
<p>Il commence par satisfaire les besoins \xE9l\xE9mentaires et gravir ensuite les \xE9chelons pour arriver \xE0 son accomplissement personnel. Un besoin d&#8217;ordre sup\xE9rieur ne peut \xEAtre satisfait que si les pr\xE9c\xE9dents le sont.</p>
</div>
<div class="paragraph">
<p>Pour faire un parall\xE8le avec le monde professionnel, rien ne sert de vouloir motiver les salari\xE9s au niveau de l&#8217;estime, si des menaces de licenciements portent atteinte \xE0 la s\xE9curit\xE9, ou si les salaires sont insuffisants pour satisfaire les besoins physiologiques.</p>
</div>
<div class="paragraph">
<p>Au cours de la vie des \xE9v\xE9nemnts peuvent venir \xE9branler cette pyramide. A chaque fois ces chamboulements peuvent conduire \xE0 des baisses de motivation.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_secrets_de_la_motivation">Les secrets de la motivation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous allons maintenant nous focaliser sur la gestion de la motivation au sein d&#8217;une \xE9quipe. Qu&#8217;est ce que je dois faire ou ne pas faire pour avoir des \xE9quipes motiv\xE9es ?</p>
</div>
<div class="paragraph">
<p>Je vais pour cel\xE0 m&#8217;appuyer sur la tr\xE8s bonne pr\xE9sentation de Matthew Richter, faite entre autre \xE0 Agile Lyon 2018. Les slides sont disponibles sur son <a href="http://www.thiagi.com/agilelyon">site</a>. Sa mani\xE8re de pr\xE9senter en faisant interagir la salle est tr\xE8s efficace. Le principe \xE9tait simple : faire \xE9merger les secrets de la motivation via des jeux simples.</p>
</div>
<div class="sect2">
<h3 id="_secret_n1_exemplarit\xE9">Secret n\xB01 : exemplarit\xE9</h3>
<div class="paragraph">
<p>Ce n&#8217;est pas simple de reproduire un jeu par \xE9crit mais nous allons tout de m\xEAme le faire afin de vous remettre dans l&#8217;ambiance. Ce premier jeu est le <a href="http://chrisdeniaud.com/wikiAGFr/index.php?title=1_2_3_GO_!">1, 2, 3 go</a>&#8230;&#8203; Si vous animez ce jeu vous devez</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>demander aux participants de se lever et de se tenir face \xE0 vous bras tendus</p>
</li>
<li>
<p>leur expliquer "Je vais compter jusqu&#8217;\xE0 3 et ensuite je dirai "go". A ce moment l\xE0 tout le monde devra taper une fois dans ses mains".</p>
</li>
<li>
<p>d\xE9buter le jeu, en comptant 1, 2, 3 et en tapant dans vos mains</p>
</li>
<li>
<p>faire une pause de 2, 3 secondes et dire "go". La majorit\xE9 des personnes ont normalement frapp\xE9 dans leurs mains avant le "go". Faites leur remarquer qu&#8217;ils n&#8217;ont pas suivi les consignes</p>
</li>
<li>
<p>rejouer le jeu et contaster qu&#8217;encore une fois, bon nombre de personnes n&#8217;ont pas suivi</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Ce jeu montre que les personnes reproduisent ce que vous leur montrez, pas ce que vous dites. En tant que manager il est important de faire ce que vous dites pour que votre message soit clair et compris.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n2_mettre_du_sens">Secret n\xB02 : mettre du sens</h3>
<div class="paragraph">
<p>En tant que manager vous devez mettre du sens dans votre discours. Si les personnes qui vous \xE9coutent ne vous comprennent pas ou ne comprennent pas l&#8217;int\xE9r\xEAt de ce que vous dites, elles ne seront pas motiv\xE9es pour effectuer vos dires.</p>
</div>
<div class="paragraph">
<p>Inversement si vos collaborateurs donnent du sens et de la valeur \xE0 ce qu&#8217;ils font, ils seront motiv\xE9s. La motivation est quelque chose qui vient de soi mais qui peut s&#8217;effriter facilement. Faites leur confiance et laissez les faire.</p>
</div>
<div class="paragraph">
<p>Plus ils seront matern\xE9s moins ils seront motiv\xE9s.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n3_\xE9vitez_la_frustration">Secret n\xB03 : \xE9vitez la frustration</h3>
<div class="paragraph">
<p>Dans le jeu num\xE9ro 2, vous demandez</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>de r\xE9p\xE9ter les jours de la semaine aussi vite que vous : Lundi, mardi, mercredi, jeudi, vendredi, samedi, dimanche&#8230;&#8203; Normalement l&#8217;assistance r\xE9p\xE8te la m\xEAme chose</p>
</li>
<li>
<p>de dire aussi vite que possible les jours class\xE9s dans l&#8217;ordre inverse : dimanche, samedi, vendredi, jeudi, mercredi, mardi, lundi</p>
</li>
<li>
<p>puis de dire les jours en les classant par nombre de lettres d\xE9croissantes : dimanche, vendredi, mercredi, samedi, jeudi, mardi, lundi</p>
</li>
<li>
<p>normalement l&#8217;assistance d\xE9croche \xE0 la deuxi\xE8me question, non par manque de comp\xE9tence mais par manque de pr\xE9paration</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Matthew avait demand\xE9 \xE0 sa fille de venir. Comme elle ne parle pas fran\xE7ais, la frustration de ne pas arriver \xE0 faire l&#8217;exercice \xE9tait encore renforc\xE9e. Mettre ces collaborateurs dans des situations ind\xE9licates, non anticip\xE9es am\xE8ne de la frustration et de la d\xE9motivation.</p>
</div>
<div class="paragraph">
<p>La cl\xE9 est de trouver la balance entre comment bouger vos collaborateurs de leur zone de confort pour les aider \xE0 progresser et les rassurer pour ne pas aller vers de la frustration.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n4_comp\xE9tition_ou_collaboration">Secret n\xB04 : comp\xE9tition ou collaboration</h3>
<div class="paragraph">
<p>Pour illustrer ce point, les participants devaient constituer des bin\xF4mes. Chaque personne se met face \xE0 face, main contre main. Une personne n&#8217;a pas le droit de bouger les pieds. Le but est de d\xE9stabilliser l&#8217;autre par la force des bras. Les gagnants sont ceux qui d\xE9stabilisent leur adversaire.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/motivation_02.png" alt="Comp\xE9tition ou collaboration">
</div>
</div>
<div class="paragraph">
<p>Le jeu commence. Si tout le monde joue le jeu vous pouvez voir des personnes qui sont pr\xEAtes \xE0 tout pour y arriver&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Au final on pourrait penser que la comp\xE9tition motive certaines personnes. Mais dans le cas du jeu, la personne qui ne gagne pas, reste frustr\xE9e. En fait les r\xE8gle du jeu \xE9taient "Les gagnants sont ceux qui d\xE9stabilisent leur adversaire". Pourquoi personne n&#8217;a collabor\xE9 pour bouger en m\xEAme temps et au final gagner \xE0 2 ?</p>
</div>
<div class="paragraph">
<p>La comp\xE9tition peut \xEAtre stimulante et amusante mais sur le long terme la collaboration est beaucoup plus productive. Faites collaborer les personnes plut\xF4t que de les mettre en comp\xE9tition.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n5_la_parole_et_lengagement">Secret n\xB05 : la parole et l&#8217;engagement</h3>
<div class="paragraph">
<p>Dans une \xE9quipe, les personnes qui parlent le plus sont les personnes qui vont f\xE9d\xE9rer le plus.  Elles se sentent le plus concern\xE9es. Vous devez vous appuyer sur ces personnes, et les laisser prendre la parole.</p>
</div>
<div class="paragraph">
<p>Mais vous devez aussi donner la parole \xE0 ceux qui ne la prennent pas, afin de les impliquer. Essayez de faire parler les personnes entre elles.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n6_la_passion">Secret n\xB06 : la passion</h3>
<div class="paragraph">
<p>Quand une personne fait quelque chose par passion, elle va \xEAtre actrice. Quand on demande de faire quelque chose \xE0 une personne, elle va plut\xF4t \xEAtre passive.
L&#8217;autonomie est donc la cible \xE0 atteindre. Essayez de d\xE9l\xE9guer les t\xE2ches et laisser de l&#8217;autonomie \xE0 vos \xE9quipes.</p>
</div>
<div class="paragraph">
<p>La passion peut \xEAtre contagieuse. Essayez de transmettre la votre.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n7_flexibilit\xE9">Secret n\xB07 : flexibilit\xE9</h3>
<div class="paragraph">
<p>Pour illustrer ce nouveau secret, Matthew a voulu faire un "tour de magie" en devinant la carte choisie par une personne prise au hasard dans la salle. Si vous voulez r\xE9aliser ce jeu, cachez une carte quelque part : par exemple la dame de coeur. Le principe est d&#8217;orienter la personne pour la faire converger vers cette carte. Vous pouvez poser ce type de questions</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Quelle couleur pr\xE9f\xE9rez vous ? Si la personne dit rouge vous lui demandez de garder les rouges, sinon si elle dit noir vous lui demandez d&#8217;enlever les noirs. 2 actions diff\xE9rentes pour un m\xEAme r\xE9sultat</p>
</li>
<li>
<p>Quelle type de carte pr\xE9f\xE8re t&#8217;elle dans les cartes restantes ? Coeur ou carreau ? Pareil le but est de lui faire garder les coeurs en main</p>
</li>
<li>
<p>Pr\xE9f\xE8re t&#8217;elle les carte des habill\xE9s ou les cartes num\xE9rot\xE9es ?</p>
</li>
<li>
<p>A ce moment il ne doit lui rester que le roi, le valet et la dame de coeur.</p>
</li>
<li>
<p>Vous pouvez maintenant lui demander s&#8217;il pr\xE9f\xE8re les habill\xE9s typ\xE9s masculins (valet, roi) ou f\xE9minin</p>
</li>
<li>
<p>Il ne doit rester que la dame de coeur et \xE0 ce moment vous pouvez r\xE9v\xE9ler que vous le saviez d\xE8s le d\xE9part.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>En fait tout au long de ce jeu, vous devez changer les questions en fonction des personnes en face de vous. Le but est d&#8217;arriver \xE0 l&#8217;objectif de d\xE9part. Quand ce dernier est clair il existe plusieurs chemins pour y arriver. Tout d\xE9pend des personnes qui doivent le r\xE9aliser. En tant que manager, vous devez rester flexible sur le chemin pour arriver \xE0 l&#8217;objectif. Encore une fois le principe est de laisser de l&#8217;autonomie aux personnes, tout en les guidant.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n8_bannir_les_r\xE9compenses_individuelles">Secret n\xB08 : bannir les r\xE9compenses individuelles</h3>
<div class="paragraph">
<p>Nouvelle exp\xE9rience qui cette fois a co\xFBt\xE9 quelques euros \xE0 l&#8217;animateur.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Demandez dans l&#8217;assistance si une personne est motiv\xE9e pour venir chanter sur sc\xE8ne. Dans un contexte o\xF9 les gens ne se connaissent pas, g\xE9n\xE9ralement personne n&#8217;est motiv\xE9e. Si une personne est motiv\xE9e laissez l\xE0 faire</p>
</li>
<li>
<p>Proposez 10 euros pour venir chanter pour encourager les personnes. Une personne va se d\xE9vouer plus vite</p>
</li>
<li>
<p>Retentez l&#8217;exp\xE9rience en proposant cette fois 40 euros. Les volontaires vont venir encore plus vite</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Au premier abord on peut penser que les primes sont motivantes, car plus on propose d&#8217;argent plus les gens sont volontaires pour remplir le d\xE9fi. Mais que ressent la personne qui est venue chanter pour rien, ou pour un plus petit montant ? Comment se sent la personne qui sait chanter mais qui n&#8217;osait pas le faire en public ?</p>
</div>
<div class="paragraph">
<p>Les r\xE9compenses individuelles, les distinctions individuelles (comme l&#8217;employ\xE9 du mois aux Etats Unis) nuisent \xE0 la motivation intrins\xE8que de l&#8217;\xE9quipe. Elles montent les gens les uns contre les autres, et cr\xE9ent de la jalousie et de la d\xE9motivation. Les r\xE9compenses doivent \xEAtre collectives et \xE9quitables, pas forc\xE9ment p\xE9cuni\xE8res.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n9_r\xE9flexion_sur_lexp\xE9rience">Secret n\xB09 : r\xE9flexion sur l&#8217;exp\xE9rience</h3>
<div class="paragraph">
<p>Pour illustrer ce secret, le jeu \xE9tait une variante du <a href="http://www.wilderdom.com/games/descriptions/HeliumStick.html">b\xE2ton d&#8217;h\xE9lium</a>. Le principe est de poser un baton (assez l\xE9ger) sur le doigt tendu de plusieurs participants. Le but du jeu est d&#8217;amener le b\xE2ton au sol en gardant toujours le contact entre le b\xE2ton et le doigt. Ce jeu demande de la collaboration. Si les gens ne s&#8217;entendent pas le b\xE2ton aura tendance \xE0 monter plut\xF4t qu&#8217;\xE0 descendre.</p>
</div>
<div class="paragraph">
<p>Les personnes ne peuvent se sortir du d\xE9fi qu&#8217;en collaborant, en essayant diff\xE9rentes strat\xE9gies. On n&#8217;apprend pas d&#8217;une exp\xE9rience, on apprend de la r\xE9flexion sur une exp\xE9rience que nous avons faite. Il est important dans une \xE9quipe de se poser et de r\xE9fl\xE9chir sur les actions qui ont \xE9t\xE9 r\xE9alis\xE9es. On parle \xE0 la fois des exp\xE9riences positives et n\xE9gatives. Car l&#8217;\xE9chec n&#8217;est pas important si on en tire des le\xE7ons pour ne pas le reproduire.</p>
</div>
</div>
<div class="sect2">
<h3 id="_secret_n10_perspective">Secret n\xB010 : perspective</h3>
<div class="paragraph">
<p>Les personnes ne per\xE7oivent pas la r\xE9alit\xE9 de la m\xEAme mani\xE8re. Nos sens envoient des informations \xE0 notre cerveau, et ce dernier fait des interpr\xE9tations pour reconstiuer sa r\xE9alit\xE9. Il se base sur son v\xE9cu, sur les informations re\xE7ues pour envoyer l&#8217;information la plus fiable possible.</p>
</div>
<div class="paragraph">
<p>Il faut en avoir conscience et accepter que ces collaborateurs n&#8217;interpr\xE8tent pas les choses de la m\xEAme mani\xE8re que vous. Encore une fois s&#8217;ils se sentent incompris il perdront de leur motivation.</p>
</div>
<div class="paragraph">
<p>Quand on travaille au contact des autres, la compr\xE9hension de sa personnalit\xE9 ou de celles de ses collaborateurs est la cl\xE9 pour d\xE9velopper les qualit\xE9s humaines de chacun.</p>
</div>
</div>
</div>
</div>`;var Av=`<div class="sect1">
<h2 id="_recherche_fulltext">Recherche fulltext</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Une recherche fulltext essaye de rechercher un ou plusieurs mots cl\xE9s dans un ensemble de documents. J&#8217;emploie le terme "essaye" car l&#8217;op\xE9ration n&#8217;est pas toujours facile. Une recherche fulltext est similaire aux recherches que vous pouvez lancer sur un moteur de recherche tel que Google ou Qwant. Nous pouvons avoir des ambigu\xEFt\xE9s dans les r\xE9sultats. Par exemple si vous cherchez le mot <code><em>serveur</em></code>, il peut d\xE9signer une machine pour un informaticien et un employ\xE9 de restaurant pour le commun des mortels.</p>
</div>
<div class="paragraph">
<p>Les recherches full text se distinguent des recherches classiques pour essayer de limiter ces ambigu\xEFt\xE9s.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>En fonction des languages certains mots de liaison sont tr\xE8s fr\xE9quents et non pertinents dans une recherche. Ils sont tout simplement filtr\xE9s. En fran\xE7ais nous pouvons avoir (le, la, un, une&#8230;&#8203;).</p>
</li>
<li>
<p>Une recherche ne doit pas \xEAtre sensible \xE0 la casse. Un utilisateur qui tape <em>@backtick@Cheval@backtick@</em>, <em>@backtick@CHEVAL@backtick@</em> ou <em>@backtick@cheval@backtick@</em> devra avoir les m\xEAmes r\xE9sultats</p>
</li>
<li>
<p>La recherche peut \xEAtre vaste il est important d&#8217;avoir un syst\xE8me de scoring qui permet de noter les r\xE9sultats selon la pertinence.</p>
</li>
<li>
<p>L&#8217;utilisateur peut \xEAtre plus ou moins pr\xE9cis quand il tape un mot cl\xE9 : utilisation ou non d&#8217;un accent, singulier/plueriel, faute d&#8217;orthographe, utilisation d&#8217;un verbe conjugu\xE9. Le stemmming permet de r\xE9duire les mots \xE0 leur racine et de r\xE9pondre \xE0 ce besoin</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Aujourd&#8217;hui la plupart des bases de donn\xE9es du march\xE9 propose des r\xE9ponses \xE0 ce besoin. Certes les r\xE9sultats ne sont pas toujours aussi bon que lorsque vous utilisez des vrais moteurs d&#8217;indexation et de recherche comme Lucene et Elastic, mais ils sont une solution \xE0 moindre co\xFBt car vous n&#8217;avez qu&#8217;\xE0 utiliser des fonctionnalit\xE9s de votre base de donn\xE9es existantes.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_faire">Comment faire ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Si vous voulez faire des recherches pertinentes sur un grand nombre de documents, des solutions comme <a href="https://www.elastic.co/">Elastic Search</a> ou <a href="http://lucene.apache.org/solr/">Solr</a> sont certainement les plus pertinentes. Mais ces solutions introduisent de la complexit\xE9 (notamment sur votre architecture applicative).</p>
</div>
<div class="paragraph">
<p>L&#8217;autre solution est d&#8217;utiliser les fonctionnalit\xE9s offertes par votre solution de base de donn\xE9es. Les r\xE9sultats seront peut \xEAtre moins bon ou plus long, mais vous pouvez ainsi r\xE9pondre \xE0 un besoin de recherche fulltext rapidement en utilisant votre infrastructure en place. Cette solution <em>na\xEFve</em> peut \xEAtre un bon point de d\xE9part avant de faire plus compliqu\xE9.</p>
</div>
<div class="paragraph">
<p>Il est temps de prendre un exemple concret. Pour cel\xE0 je vais me baser sur du code Kotlin et une base de donn\xE9es MongoDb. Comme je participe au d\xE9veloppement du site de la conf\xE9rence MiXiT, notre use case est tout trouver : rechercher des mots cl\xE9s dans le descriptif des conf\xE9rences ou dans les bios des speakers&#8230;&#8203;. Le code est Open Source est est disponible sous <a href="https://github.com/mixitconf/mixit">Github</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/mongo_full_text_index_00.png" alt="Recherche full text avec MongoDB">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mongodb">MongoDB</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans le cadre du site MiXiT, nous avons choisi MongoDB pour plusieurs raisons. MongoDB</p>
</div>
<div class="ulist">
<ul>
<li>
<p>est une bases de donn\xE9es NoSQL reconnue, offrant de bonnes performances, souple niveau sch\xE9ma et offrant des capacit\xE9s d&#8217;indexation.</p>
</li>
<li>
<p>propose un driver Java non bloquant permettant dand notre cas d&#8217;avoir une application r\xE9active non bloquante du client jusqu&#8217;\xE0 la base de donn\xE9es. Ce n&#8217;est pas le sujet de cet artile mais nous avons utilis\xE9 le nouveau framework <a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web-reactive.html#spring-webflux">WebFlux</a> de Spring.</p>
</li>
<li>
<p>permet de lancer des recherches full text depuis la version 2.4.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Nous allons nous focaliser sur cette derni\xE8re fonctionnalit\xE9. Pour la recherche fulltext, MongoDB</p>
</div>
<div class="ulist">
<ul>
<li>
<p>permet d&#8217;indexer diff\xE9rents champs en vous laissant la possibilit\xE9 de d\xE9finir des poids (weighting) qui seront utilis\xE9s pour calculer un score pour les r\xE9sultats retourn\xE9s</p>
</li>
<li>
<p>supporte diff\xE9rents langages comme fran\xE7ais, anglais, allemand, espagnol&#8230;&#8203;</p>
</li>
<li>
<p>permet d&#8217;utiliser des requ\xEAtes avanc\xE9es similaires \xE0 ce que vous pouvez faire dans google. Par exemple <em>+chat</em> <em>-cheval</em> cherchera les champs qui contiennent chat et non cheval.</p>
</li>
<li>
<p>impl\xE9mente le stemming (voir le premier paragraphe) pour \xEAtre souple dans les recherches</p>
</li>
<li>
<p>supprime les mots fr\xE9quents du langage (Stop words).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>La commande ci dessous, permet de cr\xE9er un index sur la collection <em>conference</em> sur le champ <em>description</em></p>
</div>
<div class="literalblock">
<div class="content">
<pre>db.conferences.createIndex( { description: "text" } )</pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez d\xE9finir plusieurs champs et des poids. Les poids sont utilis\xE9s pour classer par pertinence les r\xE9sultats. Pour chaque champ index\xE9 MongoDB applique un poids par d\xE9faut de 1. Le score est la somme des points d&#8217;un document.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>db.blog.createIndex(
   {
     content: "text",
     keywords: "text",
     about: "text"
   },
   {
     weights: {
       content: 10,
       keywords: 5
     }
   }
 )</pre>
</div>
</div>
<div class="paragraph">
<p>Pour plus d&#8217;information sur les possibilit\xE9s offertes par MongoDB sur l&#8217;indexation, je vous laisse vous reporter \xE0 la <a href="https://docs.mongodb.com/manual/core/index-text/">documentation officielle</a>. Nous allons voir maintenant comment g\xE9rer l&#8217;interaction dans notre code Java ou Kotlin. Le tout via le framework Spring.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utiliser_spring_data_mongo">Utiliser Spring Data Mongo</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le projet <a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/">Spring Data MongoDB</a> permet de simplifier les interactions entre votre base de donn\xE9es MongoDB et votre application Spring.</p>
</div>
<div class="paragraph">
<p>Commen\xE7ons par ajouter les d\xE9pendances dans le script de configuration Gradle. Nous ajoutons des d\xE9pendances pour utiliser SpringBoot, WebFlux, SpringData pour Mongo et MongoDb</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450930.9092">compile(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-webflux&quot;</span>)
compile(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-data-mongodb-reactive&quot;</span>)
runtime(<span class="hljs-string">&quot;de.flapdoodle.embed:de.flapdoodle.embed.mongo&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450930.9092')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Comme vous pouvez le voir nous avons fait le choix en d\xE9veloppement d&#8217;utiliser <code><em>de.flapdoodle.embed.mongo</em></code> qui est une base de donn\xE9es embarqu\xE9e. Cette solution vous \xE9vite de devoir installer une base de donn\xE9es avant de faire des tests. Comme nous utilisons Spring Boot, vous n&#8217;avez pas plus de param\xE8tres \xE0 donner. En effet la classe <code><em>org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration</em></code> va automatiquement configurer la base de donn\xE9es en appliquant les conventions de base.</p>
</div>
<div class="paragraph">
<p>Vous pouvez maintenant d\xE9finir un document MongoDb (\xE9quivalent d&#8217;une table si nous devions faire un parall\xE8le avec une base de donn\xE9es relationnelles classique)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450930.372"><span class="hljs-meta">@Document</span>
<span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Talk</span>(
        <span class="hljs-keyword">val</span> format: TalkFormat,
        <span class="hljs-meta">@TextIndexed(weight = 10F)</span> <span class="hljs-keyword">val</span> title: String,
        <span class="hljs-meta">@TextIndexed(weight = 5F)</span> <span class="hljs-keyword">val</span> summary: String,
        <span class="hljs-keyword">val</span> speakerIds: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTString@</span>GT = emptyList(),
        <span class="hljs-keyword">val</span> language: Language = Language.FRENCH,
        <span class="hljs-meta">@TextIndexed</span> <span class="hljs-keyword">val</span> description: String? = <span class="hljs-literal">null</span>,
        <span class="hljs-keyword">val</span> start: LocalDateTime? = <span class="hljs-literal">null</span>,
        <span class="hljs-keyword">val</span> end: LocalDateTime? = <span class="hljs-literal">null</span>,
        <span class="hljs-meta">@Id</span> <span class="hljs-keyword">val</span> id: String? = <span class="hljs-literal">null</span>
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450930.372')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>L&#8217;annotation <code><em>@TextIndexed</em></code> permet de d\xE9finir les champs qui devront \xEAtre index\xE9s par MongoDB. Vous pouvez pr\xE9ciser un poids \xE0 chaque champ. Dans cet exemple, je donne plus de poids quand le texte recherch\xE9 est trouv\xE9 dans le titre d&#8217;une session.</p>
</div>
<div class="paragraph">
<p>Il ne reste plus qu&#8217;\xE0 lancer une requ\xEAte fullText via MongoDB. Spring Data propose une abstraction pour lancer des requ\xEAtes</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450931.5168"><span class="hljs-meta">@Repository</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">TalkRepository</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> template: ReactiveMongoTemplate) {

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findOne</span><span class="hljs-params">(id: <span class="hljs-type">String</span>)</span></span> = template.<span class="hljs-symbol">findById@</span><span class="hljs-symbol">LTTalk@</span>GT(id)

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findFullText</span><span class="hljs-params">(criteria: <span class="hljs-type">List</span>@<span class="hljs-type">LTString</span>@<span class="hljs-type">GT</span>)</span></span>: <span class="hljs-symbol">Flux@</span><span class="hljs-symbol">LTTalk@</span>GT {
        <span class="hljs-keyword">val</span> textCriteria = TextCriteria()
        criteria.forEach { textCriteria.matching(it) }

        <span class="hljs-keyword">val</span> query = TextQuery(textCriteria).sortByScore()
        <span class="hljs-keyword">return</span> template.find(query)
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450931.5168')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En quelques lignes nous venons de voir comment lancer une recherche fullText dans une applicaton Spring Boot Kotlin. Le code en Java est tr\xE8s similaire de ce qui a \xE9t\xE9 montr\xE9 ici.</p>
</div>
</div>
</div>`;var Mv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Je n&#8217;avais encore jamais publi\xE9 une librairie sous <a href="http://search.maven.org/">Maven Central</a>, afin de la rendre accessible \xE0 tous. Il existe plusieurs mani\xE8res de faire. J&#8217;ai choisi le mode classique, pr\xE9conis\xE9 par <a href="https://www.sonatype.com/">SonaType</a>, la soci\xE9t\xE9 qui g\xE8re <a href="http://search.maven.org/">Maven Central</a> et les produits <a href="https://www.sonatype.com/nexus-lifecycle">Nexus</a>.</p>
</div>
<div class="paragraph">
<p>Tout mes exemples sont d\xE9finis avec <a href="https://gradle.org/">Gradle</a> et le code source pr\xE9sent\xE9 dans cet article est disponible sous <a href="https://github.com/Dev-Mind/mockwebserver">Github</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utiliser_la_m\xE9thode_sonatype">Utiliser la m\xE9thode Sonatype</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les diff\xE9rentes versions des librairies open source Java sont d\xE9ploy\xE9es sous  OSSRH (OSS Repository Hosting). OSSRH utilise Nexus Repository Manager pour g\xE9rer les librairies. La plateforme g\xE8re tout le cycle de vie des versions d&#8217;une librairie</p>
</div>
<div class="ulist">
<ul>
<li>
<p>les versions de d\xE9veloppements (snapshots) peuvent \xEAtre d\xE9ploy\xE9es</p>
</li>
<li>
<p>les versions taggu\xE9es sont pouss\xE9es dans un d\xE9p\xF4t staging (recette)</p>
</li>
<li>
<p>vous pouvez ensuite indiquer qu&#8217;une version de recette est releas\xE9e. La plateforme lance \xE0 ce moment plusieurs contr\xF4les de qualit\xE9 et pousse les binaires sur le d\xE9p\xF4t central (<a href="http://search.maven.org/">Maven Central</a>).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>La documentation officielle est assez compl\xE8te et vous la trouverez <a href="http://central.sonatype.org/pages/ossrh-guide.html">ici</a>. Mais comme toute documentation il y a souvent un d\xE9calage entre le moment o\xF9 elle a \xE9t\xE9 d\xE9crite et le moment o\xF9 vous l&#8217;appliquez. Sur une version r\xE9cente de Linux et en utilisant les derni\xE8res versions de Gradle vous avez plusieurs points \xE0 savoir.</p>
</div>
<div class="paragraph">
<p>Commen\xE7ons par le d\xE9but. La documentation vous demande</p>
</div>
<div class="ulist">
<ul>
<li>
<p>de cr\xE9er un compte sur le <a href="https://issues.sonatype.org/secure/Signup!default.jspa">Jira</a> de SonaType. Les identifiants de ce compte seront les m\xEAmes que vous utiliserez pour pousser vos artefacts</p>
</li>
<li>
<p>d&#8217;ouvrir une issue dans laquelle vous demandez la cr\xE9ation d&#8217;un nouveau projet. Les \xE9quipes Nexus vont faire un check manuel de votre demande. Ils sont assez r\xE9actifs</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/mavencentral_01.png" alt="Ticket pour la cr\xE9ation d&#8217;un projet">
</div>
</div>
<div class="paragraph">
<p>M\xEAme si nous allons utiliser Gradle, nous allons construire un descripteur de projet Maven (<code><em>pom.xml</em></code>), car Maven Central contenait \xE0 la base que des ressources pour les projes Maven.</p>
</div>
<div class="paragraph">
<p>Une fois que les \xE9quipes SonaType ont valid\xE9 votre projet, vous pouvez envoyer votre librairie sur leurs serveurs. Mais diff\xE9rents checks seront faits afin d&#8217;assurer une qualit\xE9 minimale des librairies</p>
</div>
<div class="ulist">
<ul>
<li>
<p>vous devez d\xE9finir les metadata du projet dans un descripteur <code><em>pom.xml</em></code> avec les identifiants (<code><em>artifactId</em></code>, <code><em>version</em></code>, <code><em>groupId</em></code>), le type de packaging, les d\xE9pendances transitives et optionelles</p>
</li>
<li>
<p>en plus de votre artefact vous devez envoyer les sources et la javadoc</p>
</li>
<li>
<p>tous les artefacts doivent \xEAtre sign\xE9s avec GPG/PGP</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_param\xE9trer_gradle">Param\xE9trer Gradle</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Regardons comment faire cel\xE0 avec Gradle. Vous devez importer les plugins suivants pour votre projet Java</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450978.6753">apply plugin: <span class="hljs-string">&#x27;java&#x27;</span>
apply plugin: <span class="hljs-string">&#x27;signing&#x27;</span>
apply plugin: <span class="hljs-string">&#x27;maven&#x27;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450978.6753')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le plugin <code><em>signing</em></code> va \xEAtre utilis\xE9 pour signer les artefacts.</p>
</div>
<div class="paragraph">
<p>Le plugin maven permet de g\xE9n\xE9rer un descripteur de projet Maven (<code><em>pom.xml</em></code>) et de publier vos artefacts sur Maven Central</p>
</div>
<div class="paragraph">
<p>Vous pouvez d\xE9finir les metadata de votre projet&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450978.3047">group = <span class="hljs-string">&#x27;fr.dev-mind&#x27;</span>
archivesBaseName = <span class="hljs-string">&quot;mockwebserver&quot;</span>
version = rootProject.<span class="hljs-type">version</span>
<span class="hljs-variable">sourceCompatibility</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.8</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450978.3047')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>puis les t\xE2ches pour g\xE9n\xE9rer les diff\xE9rents artefacts :  jar, sources et javadocs. Les artefacts peuvent contenir un fichier Manifest avec les infos essentielles de votre projet</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450979.0398">ext.sharedManifest = manifest {
    attributes(
            <span class="hljs-string">&quot;Implementation-Title&quot;</span>: project.name,
            <span class="hljs-string">&quot;Implementation-Version&quot;</span>: version,
            <span class="hljs-string">&quot;Implementation-Vendor&quot;</span>: project.group,
            <span class="hljs-string">&quot;Bundle-Vendor&quot;</span>: project.group
    )
}

task <span class="hljs-title function_">sourcesJar</span><span class="hljs-params">(type: Jar)</span> {
    from sourceSets.main.allJava
    manifest {
        from sharedManifest
    }
}

task <span class="hljs-title function_">javadocJar</span><span class="hljs-params">(type: Jar, dependsOn: javadoc)</span> {
    classifier = <span class="hljs-string">&#x27;javadoc&#x27;</span>
    from javadoc
    manifest {
        from sharedManifest
    }
}

javadoc {
    source = sourceSets.main.<span class="hljs-type">allJava</span>
    <span class="hljs-variable">classpath</span> <span class="hljs-operator">=</span> configurations.compile
    options.linkSource <span class="hljs-literal">true</span>
    options.addBooleanOption(<span class="hljs-string">&#x27;Xdoclint:all,-missing&#x27;</span>, <span class="hljs-literal">true</span>)
}

jar {
    manifest {
        from sharedManifest
    }
}

artifacts {
    archives javadocJar, sourcesJar
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450979.0398')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous devez ensuite param\xE9trer la signature des artefacts. Dans l&#8217;exemple ci dessous, ceci n&#8217;est fait que lorsque la t\xE2che <code><em>uploadArchives</em></code> est lanc\xE9e (t\xE2che permettant de publier vos librairies).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450979.16">signing {
    required { gradle.taskGraph.hasTask(<span class="hljs-string">&quot;uploadArchives&quot;</span>) }
    sign configurations.archives
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450979.16')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Il ne reste plus qu&#8217;\xE0 param\xE9trer cette t\xE2che <code><em>uploadArchives</em></code> avec les informations que l&#8217;on veut voir dans le <code><em>pom.xml</em></code> et les d\xE9p\xF4ts que vous allez utiliser</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450979.857">uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment <span class="hljs-meta">@LAMBDA</span> signing.signPom(deployment) }

            repository(url: <span class="hljs-string">&quot;https://oss.sonatype.org/service/local/staging/deploy/maven2/&quot;</span>) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: <span class="hljs-string">&quot;https://oss.sonatype.org/content/repositories/snapshots/&quot;</span>) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name project.name
                packaging <span class="hljs-string">&#x27;jar&#x27;</span>
                description <span class="hljs-string">&quot;A scriptable web server for testing HTTP clients&quot;</span>
                url <span class="hljs-string">&#x27;https://github.com/Dev-Mind/mockwebserver&#x27;</span>

                scm {
                    connection <span class="hljs-string">&#x27;scm:git:git://github.com/Dev-Mind/mockwebserver&#x27;</span>
                    developerConnection <span class="hljs-string">&#x27;scm:git:git://github.com/Dev-Mind/mockwebserver&#x27;</span>
                    url <span class="hljs-string">&#x27;https://github.com/Dev-Mind/mockwebserver&#x27;</span>
                }

                licenses {
                    license {
                        name <span class="hljs-string">&#x27;The Apache License, Version 2.0&#x27;</span>
                        url <span class="hljs-string">&#x27;http://www.apache.org/licenses/LICENSE-2.0.txt&#x27;</span>
                    }
                }

                developers {
                    developer {
                        id <span class="hljs-string">&#x27;javamind&#x27;</span>
                        name <span class="hljs-string">&#x27;Guillaume EHRET&#x27;</span>
                        email <span class="hljs-string">&#x27;guillaume@dev-mind.fr&#x27;</span>
                    }
                }
            }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450979.857')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_erreur_avec_gpg2">Erreur avec gpg2</h2>
<div class="sectionbody">
<div class="paragraph">
<p>J&#8217;ai suivi la <a href="http://central.sonatype.org/pages/working-with-pgp-signatures.html">documentation</a> pour tout d&#8217;abord g\xE9n\xE9rer une cl\xE9 via</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450979.034"><span class="hljs-meta">@dollar</span>@ gpg2 --key-gen</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450979.034')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Lorsque vous g\xE9n\xE9rez votre cl\xE9 vous devez sp\xE9cifier une <code>passphrase</code>. Personnellement j&#8217;ai du saisir des <code>passphrase</code> sans espace pour ne pas avoir de probl\xE8me par la suite quand j&#8217;avais \xE0 resaisir ces informations.</p>
</div>
<div class="paragraph">
<p>J&#8217;utilise une version r\xE9cente de Linux qui utilise une version 2.1.15</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450979.4216"><span class="hljs-meta">@dollar</span>@ gpg2 --version</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450979.4216')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Plusieurs choses ont \xE9t\xE9 am\xE9lior\xE9es dans les versions @GT 2.1 de gpg. Si vous affichez les cl\xE9s cr\xE9\xE9es, la taille de ces cl\xE9s a \xE9t\xE9 augment\xE9e et la nouvelle taille n&#8217;est pas encore support\xE9e par le plugin Gradle. Le plugin se base sur les librairies Java <code><em>org.bouncycastle</em></code> et il faut qu&#8217;ils migrent vers les derni\xE8res versions de cette librairie</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450979.3481"><span class="hljs-meta">@dollar</span>@ gpg2 --list-secret-keys

/home/devmind/.gnupg/pubring.kbx
------------------------------
pub   rsa2048 <span class="hljs-number">2018</span>-<span class="hljs-number">01</span>-<span class="hljs-number">13</span> [SC]
      6933FACC1931DD8A89CED163582D3134
uid         [ultimate] Guillaume EHRET <span class="hljs-meta">@LTguillaume</span><span class="hljs-meta">@dev</span>-mind.fr<span class="hljs-meta">@GT</span>
sub   rsa2048 <span class="hljs-number">2018</span>-<span class="hljs-number">01</span>-<span class="hljs-number">13</span> [E]</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450979.3481')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour retrouver un format de cl\xE9 court utilisez la commande suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450980.1545"><span class="hljs-meta">@dollar</span>@ gpg2 --list-secret-keys --keyid-format <span class="hljs-type">short</span>

/home/devmind/.gnupg/pubring.kbx
--------------------------------
pub   rsa2048/C6EED57A <span class="hljs-number">2018</span>-<span class="hljs-number">01</span>-<span class="hljs-number">13</span> [SC]
uid         [ultimate] Guillaume EHRET <span class="hljs-meta">@LTguillaume</span><span class="hljs-meta">@dev</span>-mind.fr<span class="hljs-meta">@GT</span>
sub   rsa2048/7DY5B54F <span class="hljs-number">2018</span>-<span class="hljs-number">01</span>-<span class="hljs-number">13</span> [E]</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450980.1545')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez maintenant publier votre cl\xE9 publique sur un serveur de cl\xE9</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450980.6826"><span class="hljs-meta">@dollar</span>@ gpg2 --keyserver hkp:<span class="hljs-comment">//pool.sks-keyservers.net --send-keys C6EED57A</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450980.6826')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez reporter ces informations dans le fichier <code><em>gradle.properties</em></code> global (elles ne doivent pas \xEAtre envoy\xE9es dans votre d\xE9p\xF4t de sources public). Ce fichier devra \xE9galement contenir les identifiants que vous avez utiliser sur Sonatype</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450980.367">signing.keyId=C6EED57A
signing.password=CeciEstMonpassword
signing.secretKeyRingFile=/home/devmind/.gnupg/secring.gpg

ossrhUsername=devmind
ossrhPassword=CeciEstMonpassword</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450980.367')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Apr\xE8s avoir fait cette action mon build Gradle ne fonctionnait toujours pas et retournait l&#8217;erreur suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450980.9636">* What went wrong:
Execution failed <span class="hljs-keyword">for</span> task <span class="hljs-string">&#x27;:signArchives&#x27;</span>.
<span class="hljs-meta">@GT</span> Unable to read secret key from file: /home/devmind/.gnupg/secring.gpg (it may not be a PGP secret key ring)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450980.9636')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le stockage des cl\xE9s \xE0 chang\xE9. Il ne se fait plus dans un fichier <code><em>secring.gpg</em></code> mais sous forme de sous-r\xE9pertoires dans le r\xE9pertoire <code><em>.gnupg</em></code>. Heureusement il est encore possible de g\xE9n\xE9rer ce fichier pour assurer la r\xE9trocompatibilit\xE9.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450980.7842"><span class="hljs-meta">@dollar</span>@ gpg2 --export-secret-keys <span class="hljs-meta">@GT</span> ~/.gnupg/secring.gpg</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450980.7842')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Un <a href="https://github.com/gradle/gradle/issues/888">ticket</a> a \xE9t\xE9 ouvert pour modifier le plugin signin de Gradle et une solution a \xE9t\xE9 apport\xE9e \xE0 partir de Gradle 4.5.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_a_partir_de_gradle_4_5">A partir de Gradle 4.5</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Une autre solution a \xE9t\xE9 mise en place dans la derni\xE8re version de Gradle, la <a href="https://docs.gradle.org/4.5/release-notes.html#signing-artifacts-with-gpg-agent">version 4.5</a>. Le plugin <code><em>signing</em></code> utilise une impl\xE9mentation Java pour g\xE9rer les signatures va GPG. Cette impl\xE9mentation ne peut pas utiliser <code><em>gpg-agent</em></code> pour g\xE9rer les cl\xE9s priv\xE9es. Avec Gradle 4.5 vous pouvez maintenant utiliser cet agent en utilisant <code><em>useGpgCmd()</em></code> (GnuPG doit bien \xE9videmment \xEAtre install\xE9).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450980.608">signing {
    required { gradle.taskGraph.hasTask(<span class="hljs-string">&quot;uploadArchives&quot;</span>) }
    useGpgCmd()
    sign configurations.archives
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450980.608')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous devez toujours g\xE9n\xE9rer votre cl\xE9 et l&#8217;enregistrer sur le serveur de cl\xE9. Vous n&#8217;avez plus besoin par contre de g\xE9n\xE9rer un fichier pour assurer la r\xE9trocompatibilit\xE9. Sans autre configuration, le plugin <em>@backtick@signing@backtick@</em> trouvera <em>@backtick@gpg2@backtick@</em> dans le path et vous demandera de saisir la passphrase via une boite de dialogue</p>
</div>
<div class="paragraph">
<p>Pour automatiser le tout vous pouvez ajouter la configuration suivante dans votre build.gradle global</p>
</div>
<div class="listingblock">
<div class="content">
<pre>signing.gnupg.executable=gpg
signing.gnupg.useLegacyGpg=false
signing.gnupg.keyName=C6EED57A
signing.gnupg.passphrase=CeciEstMonpassword

ossrhUsername=devmind
ossrhPassword=CeciEstMonpassword</pre>
</div>
</div>
<div class="paragraph">
<p>Pour plus d&#8217;informations vous pouvez lire la <a href="https://docs.gradle.org/4.5/userguide/signing_plugin.html#sec:using_gpg_agent">documentation</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_publier_sous_sonatype">Publier sous Sonatype</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Une fois que les probl\xE8mes vus au paragraphe pr\xE9c\xE9dent ont \xE9t\xE9 r\xE9gl\xE9s, vous pouvez publier vos artefacts chez Sonatype.</p>
</div>
<div class="paragraph">
<p>Les versions suffix\xE9es par <code><em>-SNAPSHOT</em></code> sont envoy\xE9es vers  <a href="https://oss.sonatype.org/content/repositories/snapshots/" class="bare">https://oss.sonatype.org/content/repositories/snapshots/</a></p>
</div>
<div class="paragraph">
<p>Les versions taggu\xE9es (sans <code><em>-SNAPSHOT</em></code>) sont envoy\xE9es vers  <a href="https://oss.sonatype.org/service/local/staging/deploy/maven2/" class="bare">https://oss.sonatype.org/service/local/staging/deploy/maven2/</a></p>
</div>
<div class="paragraph">
<p>Par contre les versions taggu\xE9es ne sont pas encore disponible de tous \xE0 cette \xE9tape. Comme nous l&#8217;avons vu au d\xE9but de l&#8217;article les librairies publi\xE9es passe d&#8217;abord par une phase de recette (staging).</p>
</div>
<div class="paragraph">
<p>Vous devez lancer le Nexus de Sonatype : <a href="https://oss.sonatype.org/#stagingRepositories" class="bare">https://oss.sonatype.org/#stagingRepositories</a> et s\xE9lectionner votre librairie dans le bas de la liste</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/mavencentral_02.png" alt="Sonatype staging repository">
</div>
</div>
<div class="paragraph">
<p>Dans la barre de bouton le bouton <code><em>Drop</em></code> permet de supprimer votre librairie et le bouton <code><em>Close</em></code> de passer \xE0 la phase suivante&#8230;&#8203; Je vous l&#8217;accorde ce n&#8217;est pas tr\xE8s parlant ce nommage de bouton.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/mavencentral_03.png" alt="Sonatype staging repository boutons">
</div>
</div>
<div class="paragraph">
<p>Une fois que vous avez confirm\xE9 le passage \xE0 l&#8217;\xE9tape suivante, les contr\xF4les de validit\xE9 du projet sont lanc\xE9s.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/mavencentral_04.png" alt="Sonatype staging checks">
</div>
</div>
<div class="paragraph">
<p>Vous pouvez cliquer sur le bouton <code><em>Refresh</em></code> pour mettre \xE0 jour l&#8217;\xE9tat de votre librairie. Si tout s&#8217;est bien pass\xE9 le bouton <code><em>Release</em></code> dans la barre de bouton s&#8217;est activ\xE9. En cliquant dessus votre librairie sera publi\xE9e et dupliqu\xE9e sur les diff\xE9rents serveurs Sonatype pour \xEAtre accessible dans un d\xE9lai maximal de 2h.</p>
</div>
</div>
</div>`;var Rv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>En jouant avec le dernier framework <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html">WebFlux</a> de Spring et notamment <a href="https://docs.spring.io/spring-framework/docs/5.0.0.M3/javadoc-api/org/springframework/web/client/reactive/WebClient.html">Web Client</a>, j&#8217;ai d\xE9couvert la librairie <a href="https://square.github.io/okhttp/">okhttp</a> \xE9crite par la soci\xE9t\xE9 <a href="http://square.github.io/">Square</a>. <a href="https://squareup.com/">Square</a> est sp\xE9cialis\xE9 dans le paiement \xE9lectronique et ils mettent \xE0 disposition des commer\xE7ants des mini lecteur de carte de cr\xE9dits. Ils d\xE9veloppement beaucoup pour toutes les plateformes mobiles et notamment pour Android et donc indirectement Java.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/mockwebserver_00.png" alt="MockServer et WebClient">
</div>
</div>
<div class="paragraph">
<p><a href="https://square.github.io/okhttp/">Okhttp</a> est un mini client HTTP et vous trouvez aussi dans ce projet un mini serveur "mockable" que vous pouvez utiliser dans vos tests.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tester_web_client_en_junit4">Tester <a href="https://docs.spring.io/spring-framework/docs/5.0.0.M3/javadoc-api/org/springframework/web/client/reactive/WebClient.html">Web Client</a> en Junit4</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Prenons un exemple Spring WebFlux utilisant <a href="https://docs.spring.io/spring-framework/docs/5.0.0.M3/javadoc-api/org/springframework/web/client/reactive/WebClient.html">Web Client</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450922.3708"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticMailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmailSender</span> {

    <span class="hljs-keyword">private</span> WebClient webClient;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ElasticMailSender</span><span class="hljs-params">()</span> {
        webClient = WebClient.create(<span class="hljs-string">&quot;https://api.elasticemail.com&quot;</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ElasticMailSender</span><span class="hljs-params">(WebClient webClient)</span> {
        <span class="hljs-built_in">this</span>.webClient = webClient;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(EmailMessage email)</span> {
        <span class="hljs-type">ElasticEmailResponseDTO</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> webClient.post()
            .uri(String.format(<span class="hljs-string">&quot;/%s/email/send&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>))
            .body(BodyInserters
                 .fromFormData(<span class="hljs-string">&quot;apikey&quot;</span>, <span class="hljs-string">&quot;MYAPISECRET&quot;</span>)
                 .with(<span class="hljs-string">&quot;from&quot;</span>, <span class="hljs-string">&quot;guillaume@dev-mind.fr&quot;</span>)
                 .with(<span class="hljs-string">&quot;fromName&quot;</span>, <span class="hljs-string">&quot;Dev-Mind&quot;</span>)
                 .with(<span class="hljs-string">&quot;to&quot;</span>, email.getTo())
                 .with(<span class="hljs-string">&quot;subject&quot;</span>, email.getSubject())
                 .with(<span class="hljs-string">&quot;isTransactional&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>)
                 .with(<span class="hljs-string">&quot;body&quot;</span>, email.getContent())
            )
            .accept(MediaType.APPLICATION_JSON)
            .retrieve()
            .bodyToMono(ElasticEmailResponseDTO.class)
            .block();

        <span class="hljs-keyword">if</span> (response.getSuccess() == <span class="hljs-literal">false</span>) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(response.getError());
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450922.3708')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si nous voulons tester cette classe nous devons simuler le comportement de WebClient. Nous pouvons utiliser un framework de mock mais dans ce cas l\xE0 nous ne testons pas le flux HTTP. Utilisons donc un simulacre de serveur web&#8230;&#8203; C&#8217;est l\xE0 que rentre en compte  <a href="https://github.com/square/okhttp/tree/master/mockwebserver">MockWebServer</a></p>
</div>
<div class="paragraph">
<p>Pour l&#8217;utiliser rien de plus simple. Commencez par ins\xE9rer cette d\xE9pendance dans votre build Gradle</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450922.8362">testCompile(<span class="hljs-string">&quot;com.squareup.okhttp3:mockwebserver:3.9.1&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450922.8362')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>MockWebserver est en fait une <a href="http://javamind-fr.blogspot.fr/2014/05/junit-et-les-rules-comment-mutualiser.html#!">Rule Junit 4</a> et \xE9tend la classe <a href="http://junit.org/junit4/javadoc/4.12/org/junit/rules/ExternalResource.html">ExternalResource</a>. Votre test peut s&#8217;\xE9crire de cette mani\xE8re</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450923.8606"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticMailSenderTest</span> {
    <span class="hljs-meta">@Rule</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">MockWebServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockWebServer</span>();
    <span class="hljs-keyword">private</span> WebClient webClient;
    <span class="hljs-keyword">private</span> ElasticMailSender elasticMailSender;

    <span class="hljs-meta">@Before</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span>{
        <span class="hljs-built_in">this</span>.webClient = Mockito.spy(WebClient.create(<span class="hljs-built_in">this</span>.server.url(<span class="hljs-string">&quot;/&quot;</span>).toString()));
        elasticMailSender = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticMailSender</span>(webClient);
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> {
        prepareResponse(response <span class="hljs-meta">@LAMBDA</span> response
                .setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)
                .setBody(<span class="hljs-string">&quot;{ &quot;success&quot; : true }&quot;</span>));

        elasticMailSender.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmailMessage</span>(
                <span class="hljs-string">&quot;guillaume@test.fr&quot;</span>,
                <span class="hljs-string">&quot;Email test&quot;</span>,
                <span class="hljs-string">&quot;@LTh1@GTHi Guillaume@LT/h1@GT@LTp@GTWaow... you are able to send an email@LT/p@GT&quot;</span>)
        );

        verify(webClient, atLeastOnce()).post();
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendWithError</span><span class="hljs-params">()</span> {
        prepareResponse(response <span class="hljs-meta">@LAMBDA</span> response
                .setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)
                .setBody(<span class="hljs-string">&quot;{ &quot;success&quot; : false, &quot;error&quot; : &quot;error expected&quot; }&quot;</span>));

        assertThatThrownBy(() <span class="hljs-meta">@LAMBDA</span> elasticMailSender.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmailMessage</span>(
                <span class="hljs-string">&quot;guillaume@test.fr&quot;</span>,
                <span class="hljs-string">&quot;Email test&quot;</span>,
                <span class="hljs-string">&quot;@LTh1@GTHi Guillaume@LT/h1@GT@LTp@GTWaow... you are able to send an email@LT/p@GT&quot;</span>)))
                .isExactlyInstanceOf(RuntimeException.class)
                .hasMessage(<span class="hljs-string">&quot;error expected&quot;</span>);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareResponse</span><span class="hljs-params">(Consumer<span class="hljs-meta">@LTMockResponse</span><span class="hljs-meta">@GT</span> consumer)</span> {
        <span class="hljs-type">MockResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockResponse</span>();
        consumer.accept(response);
        <span class="hljs-built_in">this</span>.server.enqueue(response);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450923.8606')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Une fois que la <code><em>Rule</em></code> est cr\xE9\xE9e on initialise un <code><em>WebClient</em></code> avec une URL qui sera servie par <code><em>MockWebServer</em></code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450923.5115">WebClient.create(<span class="hljs-built_in">this</span>.server.url(<span class="hljs-string">&quot;/&quot;</span>).toString())</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450923.5115')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ensuite la m\xE9thode <code><em>prepareResponse()</em></code> permet de constuire une r\xE9ponse qui sera renvoy\xE9e quand WebClient appelera cette URL.</p>
</div>
<div class="paragraph">
<p>Jusque l\xE0 tout va bien mais que ce passe t&#8217;il si nous voulons passer \xE0 Junit 5 ?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tester_web_client_en_junit5">Tester <a href="https://docs.spring.io/spring-framework/docs/5.0.0.M3/javadoc-api/org/springframework/web/client/reactive/WebClient.html">Web Client</a> en Junit5</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Si vous souhaitez utiliser Junit 5 dans votre application vous pouvez commencer par lire <a href="https://www.dev-mind.fr/blog/2018/junit5_and_springboot.html">mon article</a> sur le sujet :-).  Pour ne plus avoir de d\xE9pendance vers des anciennes versions de Junit, vous pouvez ajouter \xE0 votre projet Gradle cette configuration</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450923.6921">configurations {
	all {
		exclude <span class="hljs-keyword">module</span>: <span class="hljs-string">&quot;junit&quot;</span>
	}
}
testCompile(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter-api&quot;</span>)
testRuntime(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter-engine&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450923.6921')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Mais dans ce cas l\xE0 vous ne pourrez plus utiliser la librairie pr\xE9c\xE9dente car elle a besoin de Junit 4 pour compiler. Il faut savoir que les versions 5 et 4 ne sont pas r\xE9trocompatibles et les Rule Junit4 ont \xE9t\xE9 remplac\xE9es par des extensions dans Junit 5.</p>
</div>
<div class="paragraph">
<p>Junit 5 a \xE9t\xE9 r\xE9\xE9crit pour profiter pleinement de Java 8. Le <a href="https://developer.android.com/studio/write/java8-support.html">support Java 8</a> est encore \xE0 ses d\xE9buts dans Android, et Square ne va pas faire \xE9voluer tout de suite sa librairie pour \xEAtre compatible Junit 5. Pour palier \xE0 ce probl\xE8me vous pouvez utiliser le fork mis en place par <a href="https://github.com/Dev-Mind/mockwebserver">Dev-Mind</a>. Ce projet utilise le projet <a href="https://square.github.io/okhttp/">okhttp</a> mais ne d\xE9pend pas de Junit 4, et propose deux extensions pour vos tests.</p>
</div>
<div class="paragraph">
<p>Vous pouvez charger cette librairie sur <a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22fr.dev-mind%22">Maven Central</a>. Pour l&#8217;utiliser dans un projet Gradle vous pouvez d\xE9clarer cette d\xE9pendance</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450923.6091">testCompile(<span class="hljs-string">&quot;com.devmind:mockwebserver:0.1.0&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450923.6091')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La premi\xE8re extension <code><em>MockWebServerExtension</em></code> se charge d&#8217;instancier un serveur web, de le d\xE9marrer et de l&#8217;arr\xEAter avant et apr\xE8s chaque test.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450924.1904"><span class="hljs-meta">@ExtendWith(MockWebServerExtension.class)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpringWebfluxServiceTest</span> {

    <span class="hljs-keyword">private</span> MockWebServer server;
    <span class="hljs-keyword">private</span> WebClient webClient;
    <span class="hljs-keyword">private</span> MySpringWebfluxService service;

    <span class="hljs-meta">@BeforeEach</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(MockWebServer server)</span> {
        <span class="hljs-built_in">this</span>.webClient = WebClient.create(server.url(<span class="hljs-string">&quot;/&quot;</span>).toString());
        <span class="hljs-built_in">this</span>.service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySpringWebfluxService</span>(webClient);
        <span class="hljs-built_in">this</span>.server = server;
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mytest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        prepareResponse(response <span class="hljs-meta">@LAMBDA</span> response
                .setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)
                .setBody( <span class="hljs-string">&quot;{
&quot;</span> +
                          <span class="hljs-string">&quot;  &quot;error_message&quot; : &quot;The provided API key is invalid.&quot;,
&quot;</span> +
                          <span class="hljs-string">&quot;  &quot;predictions&quot; : [],
&quot;</span> +
                          <span class="hljs-string">&quot;  &quot;status&quot; : &quot;REQUEST_DENIED&quot;
&quot;</span> +
                          <span class="hljs-string">&quot;}&quot;</span>));

        StepVerifier.create(service.myMethod())
                .expectComplete()
                .verify(Duration.ofSeconds(<span class="hljs-number">3</span>));
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareResponse</span><span class="hljs-params">(Consumer consumer)</span> {
        <span class="hljs-type">MockResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockResponse</span>();
        consumer.accept(response);
        <span class="hljs-built_in">this</span>.server.enqueue(response);
    }

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450924.1904')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Avec la deuxi\xE8me extension <code><em>MockSimpleWebServerExtension</em></code> plus basique, vous g\xE9rez vous m\xEAme l&#8217;arr\xEAt relance du serveur. Ceci permet par exemple de lancer le serveur avant le lancement de tous les tests et de l&#8217;arr\xEAter \xE0 la fin de l&#8217;ex\xE9cution</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450925.5117"><span class="hljs-meta">@ExtendWith(MockSimpleWebServerExtension.class)</span>
<span class="hljs-meta">@TestInstance(TestInstance.Lifecycle.PER_CLASS)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">MySpringWebfluxServiceTest</span> {

    <span class="hljs-keyword">private</span> MockWebServer server;
    <span class="hljs-keyword">private</span> WebClient webClient;
    <span class="hljs-keyword">private</span> MySpringWebfluxService service;

    <span class="hljs-meta">@BeforeAll</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(MockWebServer server)</span> <span class="hljs-keyword">throws</span> IOException {
        server.start();
        <span class="hljs-built_in">this</span>.server = server;
    }

    <span class="hljs-meta">@AfterAll</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException {
        server.shutdown();
    }

    <span class="hljs-meta">@BeforeEach</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">(MockWebServer server)</span> {
        <span class="hljs-built_in">this</span>.webClient = WebClient.create(server.url(<span class="hljs-string">&quot;/&quot;</span>).toString());
        <span class="hljs-built_in">this</span>.service = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySpringWebfluxService</span>(webClient);
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mytest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        prepareResponse(response <span class="hljs-meta">@LAMBDA</span> response
                .setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)
                .setBody( <span class="hljs-string">&quot;{
&quot;</span> +
                          <span class="hljs-string">&quot;  &quot;error_message&quot; : &quot;The provided API key is invalid.&quot;,
&quot;</span> +
                          <span class="hljs-string">&quot;  &quot;predictions&quot; : [],
&quot;</span> +
                          <span class="hljs-string">&quot;  &quot;status&quot; : &quot;REQUEST_DENIED&quot;
&quot;</span> +
                          <span class="hljs-string">&quot;}&quot;</span>));

        StepVerifier.create(service.myMethod())
                .expectComplete()
                .verify(Duration.ofSeconds(<span class="hljs-number">3</span>));
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareResponse</span><span class="hljs-params">(Consumer<span class="hljs-meta">@LTMockResponse</span><span class="hljs-meta">@GT</span> consumer)</span> {
        <span class="hljs-type">MockResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockResponse</span>();
        consumer.accept(response);
        <span class="hljs-built_in">this</span>.server.enqueue(response);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450925.5117')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voila vous n&#8217;avez plus d&#8217;excuse pour ne pas tester vos services Spring utilisant WebClient en Junit 5. Le fork propos\xE9 par Dev-Mind peut \xEAtre utilis\xE9 en attendant que Square mette \xE0 jour sa librairie.</p>
</div>
</div>
</div>`;var Lv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Le projet Junit a \xE9t\xE9 en suspend pendant pas mal de temps (version 4 a \xE9t\xE9 cr\xE9\xE9e en 2006 et la derni\xE8re grosse mise \xE0 jour date de 2011) mais il reste une des librairies Java les plus utilis\xE9es quelque soit les projets. Quelques personnes ont repris le projet en main pour \xE9crire une librairie offrant toutes les possibilit\xE9s de Java 8 et beaucoup plus modulaire.</p>
</div>
<div class="paragraph">
<p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p>
</div>
<div class="ulist">
<ul>
<li>
<p>JUnit Platform est le socle pour lancer des frameworks de tests sur la JVM. Une API a \xE9t\xE9 d\xE9finie et chacun est libre de l&#8217;impl\xE9menter. Ce module contient aussi tous les plugins pour pouvoir lancer des tests et notamment les plugins Maven et Gradle.</p>
</li>
<li>
<p>JUnit Jupiter est une impl\xE9mentation de l&#8217;API d\xE9finie dans JUnit Platform</p>
</li>
<li>
<p>JUnit Vintage est le projet qui permet d&#8217;assurer la r\xE9trocompatibilit\xE9 avec Junit 4 et Junit 3</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/junit5_00.png" alt="Junit dans SpringBoot">
</div>
</div>
<div class="paragraph">
<p>Nous allons voir comment utiliser cette nouvelle version dans un projet Spring Boot 2. Les sources du code montr\xE9 ici, sont disponibles <a href="https://github.com/Dev-Mind/devmind-junit5">sous Github</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_description_de_lexemple">Description de l&#8217;exemple</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Ce projet exemple est minimaliste et comprend un bean de propri\xE9t\xE9s qui va injecter la propri\xE9t\xE9 <code><em>devmin.name</em></code> dans le code et notre test consiste \xE0 v\xE9rifier que ce bean est bien peupl\xE9</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450910.3728"><span class="hljs-meta">@ConfigurationProperties(&quot;devmind&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Junit5ApplicationProperties</span> {
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> { <span class="hljs-keyword">return</span> name; }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> { <span class="hljs-built_in">this</span>.name = name; }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450910.3728')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ce bean est initialis\xE9 dans le bean de bootstrap de l&#8217;application</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450910.5579"><span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-meta">@EnableConfigurationProperties(Junit5ApplicationProperties.class)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Junit5Application</span> {
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
		SpringApplication.run(Junit5Application.class, args);
	}
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450910.5579')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Et le test Junit 4 peut \xEAtre \xE9crit de cette mani\xE8re. J&#8217;ai indiqu\xE9 les packages pour que vous puissiez voir les diff\xE9rences plus loin</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450910.6077"><span class="hljs-keyword">import</span> org.assertj.core.api.Assertions;
<span class="hljs-keyword">import</span> org.junit.Test;
<span class="hljs-keyword">import</span> org.junit.runner.RunWith;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;
<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;

<span class="hljs-meta">@RunWith(SpringRunner.class)</span>
<span class="hljs-meta">@SpringBootTest</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Junit5ApplicationTests</span> {

	<span class="hljs-meta">@Autowired</span>
	<span class="hljs-keyword">private</span> Junit5ApplicationProperties properties;

	<span class="hljs-meta">@Test</span>
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> {
		Assertions.assertThat(properties.getName()).isEqualTo(<span class="hljs-string">&quot;Dev-Mind&quot;</span>);
	}

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450910.6077')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous allons maintenant \xE9crire ce m\xEAme test avec Junit 5.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_param\xE9trer_gradle_pour_pouvoir_utiliser_junit_5_dans_un_projet_spring_boot">Param\xE9trer Gradle pour pouvoir utiliser Junit 5 dans un projet Spring Boot</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Votre descripteur de build Gradle (<code><em>build.gradle</em></code>) doit pour le moment ressembler \xE0</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450911.554">buildscript {
	ext {
		springBootVersion = <span class="hljs-string">&#x27;2.0.0.M7&#x27;</span>
	}
	repositories {
		mavenCentral()
		maven { url <span class="hljs-string">&quot;https://repo.spring.io/milestone&quot;</span> }
	}
	dependencies {
		classpath(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-gradle-plugin:@dollar@{springBootVersion}&quot;</span>)
	}
}

apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;java&#x27;</span>
apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span>
apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;io.spring.dependency-management&#x27;</span>

group = <span class="hljs-string">&#x27;com.devmind&#x27;</span>
version = <span class="hljs-string">&#x27;0.0.1-SNAPSHOT&#x27;</span>
sourceCompatibility = <span class="hljs-number">1.8</span>

repositories {
	mavenCentral()
	maven { url <span class="hljs-string">&quot;https://repo.spring.io/milestone&quot;</span> }
}


dependencies {
	compile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter&#x27;</span>)
	testCompile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450911.554')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous allons indiquer \xE0 Gradle qu&#8217;il doit utiliser le plugin <code><em>JUnit Platform</em></code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450911.561">classpath(<span class="hljs-string">&quot;org.junit.platform:junit-platform-gradle-plugin:@dollar@{junitPlatformVersion}&quot;</span>)
apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&quot;org.junit.platform.gradle.plugin&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450911.561')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour \xEAtre s\xFBr de ne plus utiliser l&#8217;ancienne version de Junit, nous allons exclure la d\xE9pendance junit tir\xE9e par <code><em>spring-boot-starter-test</em></code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450911.3232">testCompile(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>) {
	exclude <span class="hljs-attr">module:</span> <span class="hljs-string">&quot;junit&quot;</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450911.3232')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>ou m\xEAme mieux vous pouvez le faire d&#8217;une mani\xE8re globale</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450911.73">configurations {
	all {
		exclude <span class="hljs-attr">module:</span> <span class="hljs-string">&quot;junit&quot;</span>
	}
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450911.73')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous devons maintenant ajouter les d\xE9pendances Junit5 pour que notre projet puisse lancer les tests</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450911.2104">testCompile(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter-api&quot;</span>)
testRuntime(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter-engine&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450911.2104')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Votre code avec les d\xE9pendances Junit4 ne doit plus compiler! Vous pouvez maintenant lire la documentation Junit sur comment <a href="http://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4">migrer de Junit4 \xE0 Junit5</a>.</p>
</div>
<div class="paragraph">
<p>Quand vous avez un gros projet vous voulez peut \xEAtre faire cohabiter les 2 versions et migrer au fur et \xE0 mesure vos tests. Dans ce cas, gardez la d\xE9pendance junit pour que votre code compile et ajouter la d\xE9pendance suivante dans votre script Gradle</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450911.4124">testRuntime(<span class="hljs-string">&quot;org.junit.vintage:junit-vintage-engine:4.12.2&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450911.4124')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_migrer_ces_tests_junit4_\xE0_junit5">Comment migrer ces tests Junit4 \xE0 Junit5 ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour la partie pure Junit, vous pouvez suivre la <a href="http://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4">documentation officielle</a>. Pour r\xE9sumer voici les principales \xE9volutions</p>
</div>
<div class="sect2">
<h3 id="_renommages_et_changements_de_package">Renommages et changements de package</h3>
<div class="ulist">
<ul>
<li>
<p>Les annotations, les assertions et les hypoth\xE8ses (Assumptions) ont \xE9t\xE9 d\xE9plac\xE9es dans le package <code><em>org.junit.jupiter.api</em></code>. Personnellement je n&#8217;utilise pas les assertions Junit et je pr\xE9f\xE8re les assertions offertes par le projet <a href="https://joel-costigliola.github.io/assertj/">AssertJ</a>. Pour les Assumptions je ne suis pas fan car je pr\xE9f\xE8re qu&#8217;un test en \xE9chec soit bloquant.</p>
</li>
<li>
<p>Les annotations <code><em>@Before</em></code> et <code><em>@After</em></code> ont \xE9t\xE9 remplac\xE9es par <code><em>@BeforeEach</em></code> et <code><em>@AfterEach</em></code></p>
</li>
<li>
<p>Les annotations <code><em>@BeforeClass</em></code> et <code><em>@AfterClass</em></code> ont \xE9t\xE9 remplac\xE9es par <code><em>@BeforeAll</em></code> et <code><em>@AfterAll</em></code></p>
</li>
<li>
<p>L&#8217;annotation <code><em>@Ignore</em></code> a \xE9t\xE9 remplac\xE9e par <code><em>@Disabled</em></code>. Petite remarque, un projet ne devrait pas avoir de test ignor\xE9s. S&#8217;ils ne sont plus valides ils doivent \xEAtre supprim\xE9s.</p>
</li>
<li>
<p>Les cat\xE9gories <code><em>@Category</em></code> ont \xE9t\xE9 remmplac\xE9es par les <code><em>@Tag</em></code></p>
</li>
<li>
<p>L&#8217;annotation <code><em>@RunWith</em></code> est remplac\xE9e par <code><em>@ExtendWith</em></code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Ces renommages permettent d&#8217;avoir des noms d&#8217;annotation plus parlant. Par contre vous mixez peut \xEAtre des tests TestNg et des tests Junit dans vos projets ? Si c&#8217;est le cas je vous conseille aussi de migrer vos tests TestNg vers Junit. TestNg \xE9tait tr\xE8s int\xE9ressant il y a quelques ann\xE9es quand il permettait de combler les manques de Junit. Aujourd&#8217;hui le projet ne bouge plus beaucoup.</p>
</div>
</div>
<div class="sect2">
<h3 id="_les_rules_junit">Les Rules Junit</h3>
<div class="paragraph">
<p>Pour les amoureux des r\xE8gles Junit, elles ne sont pas encore disponibles. Pour rappel, elles permettaient de combler les manques de Junit o\xF9 on ne pouvait pas faire de composition de <code><em>@RunWith</em></code>. En gros une fois que vous aviez d\xE9clar\xE9 <code><em>@RunWith(SpringRunner.class)</em></code> sur votre classe vous ne pouviez pas ajouter un <code>@RunWith(MockitoJUnitRunner.class)</code>. Les r\xE8gles Junit vous offrait un moyen simple de factoriser du comportement entre les tests.</p>
</div>
<div class="paragraph">
<p>Mais Junit5 s&#8217;appuie sur Java 8 et n&#8217;est d&#8217;ailleurs pas compatible avec les versions ant\xE9rieures. Depuis Java 8 des annotations peuvent \xEAtre <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Repeatable.html">"Repeatable"</a>. C&#8217;est le cas de <a href="http://junit.org/junit5/docs/current/api/org/junit/jupiter/api/extension/ExtendWith.html">ExtendWith</a>. Vous pouvez maintenant \xE9crire par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450911.9358"><span class="hljs-meta">@ExtendWith(MockitoExtension.class)</span>
<span class="hljs-meta">@ExtendWith(SpringExtension.class)</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450911.9358')">Copy</button></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>Par contre <code><em>MockitoExtension</em></code> n&#8217;existe pas encore. Vous pouvez voir cette issue <a href="https://github.com/mockito/mockito/issues/445">Github</a> et <code><em>MockitoExtension</em></code> devrait arriver avec Mockito 3.0</p>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_quen_est_il_de_la_partie_spring_boot">Qu&#8217;en est il de la partie Spring Boot ?</h3>
<div class="paragraph">
<p>Spring Boot propose plusieurs annotations pour les tests et elles sont toujours utilisables. Vous pouvez suivre la <a href="https://docs.spring.io/spring/docs/5.0.3.BUILD-SNAPSHOT/spring-framework-reference/testing.html#integration-testing-annotations-junit-jupiter">doc officielle</a> mais nous allons voir comment migrer notre exemple pr\xE9sent\xE9 au d\xE9but de cet article.</p>
</div>
<div class="paragraph">
<p>Mon exemple devient</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450912.9817"><span class="hljs-keyword">import</span> org.assertj.core.api.Assertions;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;
<span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;

<span class="hljs-meta">@ExtendWith(SpringExtension.class)</span>
<span class="hljs-meta">@SpringBootTest</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Junit5ApplicationTests</span> {

	<span class="hljs-meta">@Autowired</span>
	<span class="hljs-keyword">private</span> Junit5ApplicationProperties properties;

	<span class="hljs-meta">@Test</span>
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> {
		Assertions.assertThat(properties.getName()).isEqualTo(<span class="hljs-string">&quot;Dev-Mind&quot;</span>);
	}

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450912.9817')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si vous rencontrez des probl\xE8mes avec IntelliJ pour lancer les tests je vous laisse lire <a href="https://discuss.gradle.org/t/junit-5-gradle-and-intellij-publishing-test-events-for-tooling-api-consumers/21349">ce post</a> sur le forum de Gradle et <a href="https://blog.jetbrains.com/idea/2016/08/using-junit-5-in-intellij-idea/">celui-ci</a> sur le site de JetBrains.</p>
</div>
<div class="paragraph">
<p>Au niveau de Spring ne passez pas \xE0 c\xF4t\xE9 des annotations compos\xE9es qui peuvent aider \xE0 la lecture de vos tests. Par exemple si vous utilisez toujours une multitude d&#8217;annotation sur vos tests comme dans cet exemple issu de la doc de Spring</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450912.8325"><span class="hljs-meta">@ExtendWith(SpringExtension.class)</span>
<span class="hljs-meta">@ContextConfiguration({&quot;/app-config.xml&quot;, &quot;/test-data-access-config.xml&quot;})</span>
<span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span>
<span class="hljs-meta">@Transactional</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderRepositoryTests</span> { }

<span class="hljs-meta">@ExtendWith(SpringExtension.class)</span>
<span class="hljs-meta">@ContextConfiguration({&quot;/app-config.xml&quot;, &quot;/test-data-access-config.xml&quot;})</span>
<span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span>
<span class="hljs-meta">@Transactional</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepositoryTests</span> { }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450912.8325')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez cr\xE9er une annotation</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450912.0056"><span class="hljs-meta">@Target(ElementType.TYPE)</span>
<span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>
<span class="hljs-meta">@ExtendWith(SpringExtension.class)</span>
<span class="hljs-meta">@ContextConfiguration({&quot;/app-config.xml&quot;, &quot;/test-data-access-config.xml&quot;})</span>
<span class="hljs-meta">@ActiveProfiles(&quot;dev&quot;)</span>
<span class="hljs-meta">@Transactional</span>
<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> TransactionalDevTestConfig { }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450912.0056')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>et reprendre vos tests pour ne plus avoir que</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450912.2852"><span class="hljs-meta">@TransactionalDevTestConfig</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderRepositoryTests</span> { }

<span class="hljs-meta">@TransactionalDevTestConfig</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepositoryTests</span> { }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450912.2852')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_les_fonctionnalit\xE9s_sympas_de_junit_5">Les fonctionnalit\xE9s sympas de Junit 5</h3>
<div class="paragraph">
<p>Apr\xE8s avoir vu comment migrer des tests existants, nous pouvons maintenant nous attarder sur quelques nouvelles fonctionnalit\xE9s</p>
</div>
</div>
<div class="sect2">
<h3 id="_am\xE9liorer_la_lisibit\xE9_de_ses_tests_avec_nested_et_displayname">Am\xE9liorer la lisibit\xE9 de ses tests avec @Nested et @DisplayName</h3>
<div class="paragraph">
<p>A force d&#8217;\xE9crire des tests en JavaScript, j&#8217;\xE9tais toujours frustr\xE9 du code \xE9crit en Junit4. Pour avoir des rapports d&#8217;ex\xE9cution lisible on essaye d&#8217;utiliser des noms \xE0 rallonge dans les m\xE9thodes des tests.</p>
</div>
<div class="paragraph">
<p>Par exemple si nous voulions tester cette interface</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450912.4001"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CallForPaperService</span> {
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">submit</span><span class="hljs-params">(Proposal proposal)</span>;
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Proposal proposal)</span>;
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">refuse</span><span class="hljs-params">(Proposal proposal)</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450912.4001')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>On pourrait imaginer les tests suivants</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450913.8123"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CallForPaperServiceTests</span> {

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitShouldFailWhenRequiredDataAreAbsent</span><span class="hljs-params">()</span>{  }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitShouldFailWhenConfirmationMailIsNtSend</span><span class="hljs-params">()</span>{  }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitShouldSendEmail</span><span class="hljs-params">()</span>{  }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptShouldSendEmailToSessionSpeakers</span><span class="hljs-params">()</span>{  }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptShouldFailWhenSpeakerEmailCantBeSend</span><span class="hljs-params">()</span>{  }

    <span class="hljs-comment">// ... on peut imaginer des dizaines de tests suppl\xE9mentaires avec des noms beaucoup plus long</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450913.8123')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ce qui donnerait le rapport suivant</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/junit5_01.png" alt="Suite de tests">
</div>
</div>
<div class="paragraph">
<p>En Javascript vous pouvez \xE9crire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450913.4846"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;submit should fail when required data are absent&#x27;</span>, <span class="hljs-function">() =&gt;</span> { });</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450913.4846')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez migrer votre code en Kotlin qui permet de d\xE9finir des m\xE9thodes avec des phrases :-)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450913.5981"><span class="hljs-meta">@Test</span>
fun <span class="hljs-meta">@backtick</span><span class="hljs-meta">@submit</span> should fail when required data are absent<span class="hljs-meta">@backtick</span>@() {  }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450913.5981')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Maintenant avec Junit5 vous pourrez ajouter l&#8217;annotation <code><em>@DisplayName</em></code> et dissocier les messages attendus dans les rapports des noms de vos m\xE9thode. Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450914.5938"><span class="hljs-meta">@DisplayName(&quot;Test service CallForPaperService&quot;)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">CallForPaperServiceTests</span> {

    <span class="hljs-meta">@Test</span>
    <span class="hljs-meta">@DisplayName(&quot;submit should fail when required data are absent&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitFailOnBadArgument</span><span class="hljs-params">()</span>{ }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-meta">@DisplayName(&quot;submit should fail when confirmation email is not send&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitFailOnEmailError</span><span class="hljs-params">()</span>{ }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-meta">@DisplayName(&quot;submit should send email&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitSendEmail</span><span class="hljs-params">()</span>{ }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-meta">@DisplayName(&quot;accept should send email to session speakers&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptSendEmailToSessionSpeakers</span><span class="hljs-params">()</span>{ }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-meta">@DisplayName(&quot;accept should fail when speaker email can&#x27;t be send&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptFailOnEmailError</span><span class="hljs-params">()</span>{ }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450914.5938')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ce qui donnerait le rapport suivant</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/junit5_02.png" alt="Suite de tests avec DisplayName">
</div>
</div>
<div class="paragraph">
<p>Nous avons r\xE9solu un premier probl\xE8me. Quand vous multipliez les tests vous ne savez pas forc\xE9ment \xE0 quelle m\xE9thode de votre classe test\xE9e se r\xE9f\xE8re. En Javascript avec Jasmine, vous pouvez faire des sous suites de tests au sein d&#8217;une suite de tests. Maintenant avec @Nested vous allez pouvoir faire la m\xEAme chose</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450915.8518"><span class="hljs-meta">@DisplayName(&quot;Test service CallForPaperService&quot;)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">CallForPaperServiceTests</span> {

    <span class="hljs-meta">@Nested</span>
    <span class="hljs-meta">@DisplayName(&quot;submit&quot;)</span>
    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Submit</span>{
        <span class="hljs-meta">@Test</span>
        <span class="hljs-meta">@DisplayName(&quot;should fail when required data are absent&quot;)</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitFailOnBadArgument</span><span class="hljs-params">()</span>{  }

        <span class="hljs-meta">@Test</span>
        <span class="hljs-meta">@DisplayName(&quot;should fail when confirmation email is not send&quot;)</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitFailOnEmailError</span><span class="hljs-params">()</span>{  }

        <span class="hljs-meta">@Test</span>
        <span class="hljs-meta">@DisplayName(&quot;should send email&quot;)</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">submitSendEmail</span><span class="hljs-params">()</span>{  }
    }

    <span class="hljs-meta">@Nested</span>
    <span class="hljs-meta">@DisplayName(&quot;accept&quot;)</span>
    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Accept</span>{
        <span class="hljs-meta">@Test</span>
        <span class="hljs-meta">@DisplayName(&quot;should send email to session speakers&quot;)</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptSendEmailToSessionSpeakers</span><span class="hljs-params">()</span>{  }

        <span class="hljs-meta">@Test</span>
        <span class="hljs-meta">@DisplayName(&quot;should fail when speaker email can&#x27;t be send&quot;)</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptFailOnEmailError</span><span class="hljs-params">()</span>{  }
    }

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450915.8518')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ce code donnera en sortie</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/junit5_03.png" alt="Suite de tests avec Nested">
</div>
</div>
<div class="paragraph">
<p>Au final nous avons un code plus verbeux mais l&#8217;organisation permet d&#8217;avoir quelque chose de beaucoup plus lisible que ce soit au niveau du code m\xEAme, des tests, mais ausi des rapports.</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9peter_les_tests">R\xE9peter les tests</h3>
<div class="paragraph">
<p>Quand nous voulions ex\xE9cuter plusieurs fois un m\xEAme test pour v\xE9rifier la performance ou autre, nous devions batailler avec les anciennes versions de Junit, ou utiliser l&#8217;annotation <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/annotation/Repeat.html">Repeat</a> de <code><em>spring-test</em></code> ou alors \xE9crire des tests avec d&#8217;autres frameworks comme TestNg par exemple.</p>
</div>
<div class="paragraph">
<p>Maintenant rien de plus simple vous \xE9crivez</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450915.488"><span class="hljs-meta">@Test</span>
<span class="hljs-meta">@DisplayName(&quot;should send email to session speakers&quot;)</span>
<span class="hljs-meta">@RepeatedTest(10)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acceptSendEmailToSessionSpeakers</span><span class="hljs-params">()</span>{
    assertThat(<span class="hljs-literal">true</span>).isTrue();
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450915.488')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Et en sortie vous aurez votre test ex\xE9cut\xE9 1 fois et r\xE9peter 10 fois</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/junit5_04.png" alt="Suite de tests avec RepeatedTest">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_les_tags">Les tags</h3>
<div class="paragraph">
<p>Vous pouviez ajouter une cat\xE9gorie \xE0 vos tests avec la version pr\xE9c\xE9dente de Junit. Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450916.2397"><span class="hljs-meta">@Category({IntegrationTest.class, Exernal.class})</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450916.2397')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Avec Junit 5 vous pouvez maintenant utiliser l&#8217;annotation @Tag</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450916.3735"><span class="hljs-meta">@Tag(&quot;integration&quot;)</span>
<span class="hljs-meta">@Tag(&quot;exernal&quot;)</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450916.3735')">Copy</button></pre>
</div>
</div>
<div class="sidebarblock">
<div class="content">
<div class="paragraph">
<p>N&#8217;oubliez pas les annotation compos\xE9es. Par exemple ici on pourrait cr\xE9er une annotation @IntegrationTestWithExternalSystem pour jumeler ces tags</p>
</div>
</div>
</div>
<div class="paragraph">
<p>Ces tags peuvent ensuite jouer sur le runtime</p>
</div>
<div class="paragraph">
<p>Quand vous configurez Gradle et le plugin junitPlatform vous pouvez sp\xE9cifier plusieurs options comme les tags exclus ou inclus</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450916.5527">junitPlatform {
    filters {
        tags {
            include <span class="hljs-string">&#x27;fast&#x27;</span>, <span class="hljs-string">&#x27;smoke&#x27;</span>
            exclude <span class="hljs-string">&#x27;slow&#x27;</span>, <span class="hljs-string">&#x27;ci&#x27;</span>
        }
        packages {
            include <span class="hljs-string">&#x27;com.sample.included1&#x27;</span>, <span class="hljs-string">&#x27;com.sample.included2&#x27;</span>
        }
        includeClassNamePattern <span class="hljs-string">&#x27;.*Spec&#x27;</span>
        includeClassNamePatterns <span class="hljs-string">&#x27;.*Test&#x27;</span>, <span class="hljs-string">&#x27;.*Tests&#x27;</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450916.5527')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Comme nous avons pu le voir vous pouvez d\xE8s aujourd&#8217;hui adopter Junit 5 dans vos projets Spring Boot ou autre projet Java. Cette refonte de Junit apporte \xE0 mon sens plein de petits plus dans l&#8217;\xE9criture des tests. D&#8217;autres \xE9volutions qui sont encore au stade exp\xE9rimentations peuvent \xEAtre utilis\xE9es par parcimonie. Mais rien ne dit si elles seront conserv\xE9es ou non dans les futures versions (voir la <a href="http://junit.org/junit5/docs/current/user-guide/#api-evolution-experimental-apis">liste</a>)</p>
</div>
</div>
</div>`;var Pv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Qui installe encore ces propres serveurs de mail pour envoyer les mails de ces applications ? Il existe aujourd&#8217;hui plusieurs services en ligne qui sont tr\xE8s simples \xE0 utiliser. Regardons comment le faire dans une application Java Spring Boot.</p>
</div>
<div class="paragraph">
<p>Tous le code source montr\xE9 ci dessous, peut \xEAtre r\xE9cup\xE9r\xE9 sous <a href="https://github.com/Dev-Mind/devmind-email">Github</a>. Nous allons voir diff\xE9rentes mani\xE8res d&#8217;\xE9crire un service qui impl\xE9mente l&#8217;interface ci dessous</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451009.5808"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EmailSender</span> {
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(EmailMessage email)</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451009.5808')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Un <code><em>EmailMessage</em></code> est un bean Java comportant trois propri\xE9t\xE9s : destinataire, sujet et contenu du mail.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/email_00.png" alt="Envoi mail">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_the_old_way_smtp">The old way : SMTP</h2>
<div class="sectionbody">
<div class="paragraph">
<p>SMTP (Simple Mail Transfer Protocol) porte bien son nom car il permet d&#8217;envoyer simplement des mails. Nous verrons plus loin que cette simplicit\xE9 se retrouve aussi dans les autres moyens de faire. Pour limiter les spams et mon\xE9tier leur service, les fournisseurs de mails peuvent mettre certaines limites. Par exemple Gmail limite le nombre de mails quotidien envoy\xE9s via SMTP \xE0 500. Pour en envoyer plus vous devez passer par leur API et payer un abonnement en fonction de vos besoins.</p>
</div>
<div class="paragraph">
<p>Revenons \xE0 nos moutons. Pour ajouter la gestion des mails dans une application Spring Boot, vous devez ajouter le module Gradle ou Maven <code><em>spring-boot-starter-mail</em></code>. Par exemple en Gradle</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451009.1362">  compile(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-mail&#x27;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451009.1362')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez ensuite param\xE9trer les acc\xE8s SMTP dans les param\xE8tres de l&#8217;application. Par exemple dans le fichier <code><em>application.yml</em></code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451009.9026">spring:
  mail:
    protocol: smtp
    host: smtp.gmail.com
    port: <span class="hljs-number">587</span>
    username: guillaume<span class="hljs-meta">@dev</span>-mind.fr
    password: mypassword
    properties:
      mail:
        smtp:
          auth: <span class="hljs-literal">true</span>
          starttls:
            enable: <span class="hljs-literal">true</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451009.9026')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez maintenant injecter un objet <code><em>JavaMailSender</em></code> dans votre code et votre service peut s&#8217;\xE9crire tout simplement de cette mani\xE8re</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451009.9292"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GmailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmailSender</span> {

    <span class="hljs-keyword">private</span> JavaMailSender javaMailSender;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GmailSender</span><span class="hljs-params">(JavaMailSender javaMailSender)</span> {
        <span class="hljs-built_in">this</span>.javaMailSender = javaMailSender;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(EmailMessage email)</span> {
        <span class="hljs-keyword">try</span> {
            <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> javaMailSender.createMimeMessage();
            <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(message, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);
            helper.setTo(email.getTo());
            helper.setSubject(email.getSubject());
            helper.setFrom(<span class="hljs-string">&quot;guillaume@dev-mind.fr&quot;</span>);
            message.setContent(email.getContent(), <span class="hljs-string">&quot;text/html&quot;</span>);
            javaMailSender.send(message);
        }
        <span class="hljs-keyword">catch</span> (MessagingException e) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451009.9292')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utiliser_lapi_send_grid">Utiliser l&#8217;API Send Grid</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Depuis que tout se d\xE9ploie dans le Cloud il existe un grand nombre d&#8217;API qui nous permettent de simplifier consid\xE9rablement notre d\xE9veloppement. Elles sont facilement int\xE9grables dans tout type d&#8217;application car elles proposent souvent des acc\xE8s HTTP via une cl\xE9 d&#8217;API.</p>
</div>
<div class="paragraph">
<p><a href="https://sendgrid.com/">Sendgrid</a> est un des acteurs les plus connus pour envoyer des mails. SendGrid vous permet de g\xE9rer des templates afin de mettre en forme les emails envoy\xE9s. Vous disposez \xE9galement de nombreuses statisiques permettant de suivre les mails envoy\xE9s, ouvert ou non&#8230;&#8203;.</p>
</div>
<div class="paragraph">
<p>Vous b\xE9n\xE9ficiez d&#8217;un quota gratuit de 100 emails/jour (soit 3.000 emails par mois). Si vous d\xE9ployez votre application sur <a href="https://www.cloudfoundry.org/">CloudFoundry</a>, les quotas gratuits sont plus \xE9lev\xE9s (25.000 emails par mois).</p>
</div>
<div class="paragraph">
<p>Dans tous les cas vous devrez aller sur leur site pour activer votre cl\xE9 d&#8217;API</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/email_01.png" alt="Console Send Grid">
</div>
</div>
<div class="paragraph">
<p>Une fois que vous avez votre cl\xE9 d&#8217;API vous devez int\xE9grer dans votre application la d\xE9pendance Send Grid</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451009.0037">  compile(<span class="hljs-string">&#x27;com.sendgrid:sendgrid-java:4.1.2&#x27;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451009.0037')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Spring Boot contient un auto configurer pour SendGrid quand la d\xE9pendance est ajout\xE9e \xE0 votre projet. Vous pouvez d\xE9clarer la cl\xE9 dans votre fichier <code><em>application.yml</em></code> sous cette forme</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451009.4673">spring:
  sendgrid:
      api-key: <span class="hljs-meta">@dollar</span>@{SENDGRID_APIKEY:Bar12345Bar12345}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451009.4673')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez maintenant utiliser l&#8217;objet <code><em>SendGrid</em></code> dans votre code</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451010.3223"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendgridSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmailSender</span> {

    <span class="hljs-keyword">private</span> SendGrid sendGrid;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SendgridSender</span><span class="hljs-params">(SendGrid sendGrid)</span> {
        <span class="hljs-built_in">this</span>.sendGrid = sendGrid;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(EmailMessage email)</span> {
        <span class="hljs-type">Mail</span> <span class="hljs-variable">mail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mail</span>(
                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Email</span>(<span class="hljs-string">&quot;guillaume@dev-mind.fr&quot;</span>, <span class="hljs-string">&quot;Dev-Mind&quot;</span>),
                email.getSubject(),
                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Email</span>(email.getTo()),
                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Content</span>(<span class="hljs-string">&quot;text/html&quot;</span>, email.getContent()));

        <span class="hljs-keyword">try</span> {
            <span class="hljs-type">Request</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>();
            request.setMethod(Method.POST);
            request.setEndpoint(<span class="hljs-string">&quot;mail/send&quot;</span>);
            request.setBody(mail.build());
            sendGrid.api(request);
        }
        <span class="hljs-keyword">catch</span> (IOException ex) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451010.3223')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez voir que ce n&#8217;est pas plus compliqu\xE9 que pr\xE9c\xE9demment.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utiliser_une_autre_api_de_mail_dans_une_application_web_flux">Utiliser une autre API de mail dans une application web flux</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans la derni\xE8re partie nous allons utiliser un autre service en ligne similaire \xE0 SendGRid qui se nomme <a href="https://elasticemail.com/">Elastic email</a>. L&#8217;avantage est que vous disposez d&#8217;un quota gratuit un peu plus important(150.000 emails par mois).</p>
</div>
<div class="paragraph">
<p>Le but est surtout de vous montrer comment faire un appel HTTP tout simple en utilisant <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html">RestTemplate</a> dans une application spring-web, ou <a href="https://docs.spring.io/spring-framework/docs/5.0.0.M3/javadoc-api/org/springframework/web/client/reactive/WebClient.html">WebClient</a> dans une application r\xE9active spring-web-flux. Je vais vous montrer ici l&#8217;utilisation de WebClient.</p>
</div>
<div class="paragraph">
<p>Dans le fichier Gradle nous allons importer le starter webflux</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451010.3418">compile(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-webflux&quot;</span>)
testCompile(<span class="hljs-string">&quot;com.squareup.okhttp3:mockwebserver:3.9.1&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451010.3418')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La deuxi\xE8me librairie import\xE9e <a href="https://square.github.io/okhttp/">okhttp</a> est un client HTTP minimaliste que nous allons utiliser dans nos tests. En effet le projet spring-test doit encore int\xE9grer de nouveaux utilitaires pour tester facilement WebClient (voir <a href="https://jira.spring.io/browse/SPR-15286">ticket ouvert</a>).</p>
</div>
<div class="paragraph">
<p>J&#8217;ajoute la configuration Elastic Mail (cl\xE9 d&#8217;API) dans mon fichier application.yml</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451010.2441">devmind:
  elasticmail:
    apikey: <span class="hljs-meta">@dollar</span>@{ELASTICMAIL_APIKEY:Bar12345Bar12345}
    host: <span class="hljs-meta">@dollar</span>@{ELASTICMAIL_HOST:https:<span class="hljs-comment">//api.elasticemail.com}</span>
    version: <span class="hljs-meta">@dollar</span>@{ELASTICMAIL_VERSION:v2}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451010.2441')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Et je peux \xE9crire mon service</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451011.8176"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticMailSender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EmailSender</span> {

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> EmailProperties properties;
    <span class="hljs-keyword">private</span> WebClient webClient;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ElasticMailSender</span><span class="hljs-params">()</span> {
        webClient = WebClient.create(properties.getElasticmail().getHost());
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ElasticMailSender</span><span class="hljs-params">(EmailProperties properties, WebClient webClient)</span> {
        <span class="hljs-built_in">this</span>.properties = properties;
        <span class="hljs-built_in">this</span>.webClient = webClient;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(EmailMessage email)</span> {
        <span class="hljs-type">ElasticEmailResponseDTO</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> webClient.post()
            .uri(String.format(<span class="hljs-string">&quot;/%s/email/send&quot;</span>, properties.getElasticmail().getVersion()))
            .body(BodyInserters
                .fromFormData(<span class="hljs-string">&quot;apikey&quot;</span>, properties.getElasticmail().getApikey())
                .with(<span class="hljs-string">&quot;from&quot;</span>, <span class="hljs-string">&quot;guillaume@dev-mind.fr&quot;</span>)
                .with(<span class="hljs-string">&quot;fromName&quot;</span>, <span class="hljs-string">&quot;DEv-Mind&quot;</span>)
                .with(<span class="hljs-string">&quot;to&quot;</span>, email.getTo())
                .with(<span class="hljs-string">&quot;subject&quot;</span>, email.getSubject())
                .with(<span class="hljs-string">&quot;isTransactional&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>)
                .with(<span class="hljs-string">&quot;body&quot;</span>, email.getContent())
            )
            .accept(MediaType.APPLICATION_JSON)
            .retrieve()
            .bodyToMono(ElasticEmailResponseDTO.class)
            .block();

        <span class="hljs-keyword">if</span> (response.getSuccess() == <span class="hljs-literal">false</span>) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(response.getError());
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451011.8176')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><code><em>ElasticEmailResponseDTO</em></code> est un bean Java comprenant deux propri\xE9t\xE9s : succes (boolean) et error (message d&#8217;erreur \xE9ventuel). Le constructeur avec deux arguments est utilis\xE9s pour les tests afin de sucharger le Webclient. Voici la classe de test de ce service</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451012.3152"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ElasticMailSenderTest</span> {

    <span class="hljs-meta">@Rule</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">MockitoRule</span> <span class="hljs-variable">rule</span> <span class="hljs-operator">=</span> MockitoJUnit.rule();

    <span class="hljs-meta">@Mock</span>
    <span class="hljs-keyword">private</span> EmailProperties properties;

    <span class="hljs-keyword">private</span> MockWebServer server;
    <span class="hljs-keyword">private</span> WebClient webClient;
    <span class="hljs-keyword">private</span> ElasticMailSender elasticMailSender;

    <span class="hljs-meta">@Before</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span>{
        <span class="hljs-type">ExternalApi</span> <span class="hljs-variable">api</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExternalApi</span>();
        api.setApikey(<span class="hljs-string">&quot;mykey&quot;</span>);
        given(properties.getElasticmail()).willReturn(api);

        <span class="hljs-built_in">this</span>.server = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockWebServer</span>();
        <span class="hljs-built_in">this</span>.webClient = Mockito.spy(WebClient.create(<span class="hljs-built_in">this</span>.server.url(<span class="hljs-string">&quot;/&quot;</span>).toString()));
        elasticMailSender = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticMailSender</span>(properties, webClient);
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">()</span> {
        prepareResponse(response <span class="hljs-meta">@LAMBDA</span> response
                .setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)
                .setBody(<span class="hljs-string">&quot;{ &quot;success&quot; : true }&quot;</span>));

        elasticMailSender.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmailMessage</span>(
                <span class="hljs-string">&quot;guillaume@test.fr&quot;</span>,
                <span class="hljs-string">&quot;Email test&quot;</span>,
                <span class="hljs-string">&quot;@LTh1@GTHi Guillaume@LT/h1@GT@LTp@GTWaow... you are able to send an email@LT/p@GT&quot;</span>)
        );

        verify(webClient, atLeastOnce()).post();
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendWithError</span><span class="hljs-params">()</span> {
        prepareResponse(response <span class="hljs-meta">@LAMBDA</span> response
                .setHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>)
                .setBody(<span class="hljs-string">&quot;{ &quot;success&quot; : false, &quot;error&quot; : &quot;error expected&quot; }&quot;</span>));

        assertThatThrownBy(() <span class="hljs-meta">@LAMBDA</span> elasticMailSender.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmailMessage</span>(
                <span class="hljs-string">&quot;guillaume@test.fr&quot;</span>,
                <span class="hljs-string">&quot;Email test&quot;</span>,
                <span class="hljs-string">&quot;@LTh1@GTHi Guillaume@LT/h1@GT@LTp@GTWaow... you are able to send an email@LT/p@GT&quot;</span>)))
                .isExactlyInstanceOf(RuntimeException.class)
                .hasMessage(<span class="hljs-string">&quot;error expected&quot;</span>);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareResponse</span><span class="hljs-params">(Consumer<span class="hljs-meta">@LT</span> MockResponse<span class="hljs-meta">@GT</span> consumer)</span> {
        <span class="hljs-type">MockResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockResponse</span>();
        consumer.accept(response);
        <span class="hljs-built_in">this</span>.server.enqueue(response);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451012.3152')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Comme je le disais plus haut l&#8217;ensemble du code est disponible sous <a href="https://github.com/Dev-Mind/devmind-email">Github</a>. J&#8217;esp\xE8re vous avoir montrer qu&#8217;il \xE9tait assez simple d&#8217;envoyer un mail dans une application Java.</p>
</div>
</div>
</div>`;var Nv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>D\xE9but 2017, j&#8217;ai choisi de migrer mon blog de Blogspot vers une solution personnalis\xE9e \xE0 base de Asciidoc. J&#8217;ai d&#8217;ailleurs \xE9crit <a href="https://www.dev-mind.fr/blog/2017/nouveau_site_asciidoctor.html">un article</a> sur ce sujet. J&#8217;ai continu\xE9 \xE0 faire \xE9voluer mon site web pour enfin arriver \xE0 une solution qui me satisfait.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>utilisation d&#8217;aucun framework JS, CSS ou autre. Le but \xE9tant d&#8217;avoir peu de Javascript et de CSS</p>
</li>
<li>
<p>plus de CMS pour g\xE9rer le blog tout en gardant les principales fonctionnalit\xE9s : facilit\xE9 d&#8217;ajout des articles, commentaires, recherche&#8230;&#8203;</p>
</li>
<li>
<p>rendu c\xF4t\xE9 serveur avec plus de contenu de pages charg\xE9 dynamiquement</p>
</li>
<li>
<p>garantir un style uniforme entre toutes les pages avec des balises title et des descriptions uniques pour chaque page du site</p>
</li>
<li>
<p>avoir un site respectant les recommandations progressive webapps</p>
</li>
<li>
<p>automatisation du d\xE9ploiement</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/siteweb_00.jpg" alt="Do your blog yourself">
</div>
</div>
<div class="paragraph">
<p>Le but est d&#8217;arriver \xE0 une solution qui m\xE8le facilit\xE9 de d\xE9veloppement et facilit\xE9 de d\xE9ploiement et qui permette de fournir un contenu optimis\xE9 et facilement indexable par les diff\xE9rents robots des principaux moteurs de recherche.</p>
</div>
<div class="paragraph">
<p>Aujourd&#8217;hui toutes ces fonctionnalit\xE9s sont en place et je m&#8217;appuie pour ceci sur</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://gulpjs.com/">Gulp</a> pour la gestion du cycle de vie,</p>
</li>
<li>
<p><a href="http://asciidoctor.org/">Asciidoctor.js</a> pour g\xE9n\xE9rer les pages du blog \xE9crites en Asciidoc,</p>
</li>
<li>
<p><a href="https://firebase.google.com/">Firebase</a> pour g\xE9rer les commentaires et la recherche</p>
</li>
<li>
<p><a href="https://mustache.github.io/">Mustache</a> pour avoir des template de page sans dupliquer inutilement du contenu</p>
</li>
<li>
<p><a href="https://www.clever-cloud.com/">Clever Cloud</a> pour le d\xE9ploiement en continu d\xE8s qu&#8217;une modification est pouss\xE9e sur master</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Toutes les sources du site sont disponibles sous <a href="https://github.com/Dev-Mind/dev-mind.fr">Github</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cycle_de_vie_de_lapplication">Cycle de vie de l&#8217;application</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://gulpjs.com/">Gulp</a> est une application node qui permet de lancer et d&#8217;encha\xEEner des t\xE2ches sur un ensemble de resources. Prenons comme exemple la t\xE2che permettant de minifier les images</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450890.4895">gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;images-min&#x27;</span>, <span class="hljs-function">() =&gt;</span>
  gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;src/images/**/*.{svg,png,jpg}&#x27;</span>)
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">imagemin</span>([imagemin.<span class="hljs-title function_">gifsicle</span>(), <span class="hljs-title function_">imageminMozjpeg</span>(), imagemin.<span class="hljs-title function_">optipng</span>(), imagemin.<span class="hljs-title function_">svgo</span>()], {
      <span class="hljs-attr">progressive</span>: <span class="hljs-literal">true</span>,
      <span class="hljs-attr">interlaced</span>: <span class="hljs-literal">true</span>,
      <span class="hljs-attr">arithmetic</span>: <span class="hljs-literal">true</span>,
    }))
    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;build/.tmp/img&#x27;</span>))
    .<span class="hljs-title function_">pipe</span>(@dollar@.<span class="hljs-title function_">if</span>(<span class="hljs-string">&#x27;**/*.{jpg,png}&#x27;</span>, @dollar@.<span class="hljs-title function_">webp</span>()))
    .<span class="hljs-title function_">pipe</span>(@dollar@.<span class="hljs-title function_">size</span>({<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;images&#x27;</span>, <span class="hljs-attr">showFiles</span>: <span class="hljs-literal">false</span>}))
    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;build/.tmp/img&#x27;</span>))
);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450890.4895')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Une t\xE2che Gulp commence toujours par <code><em>gulp.src([fichiers sources])</em></code> pour sp\xE9cifier un ensemble de resources et d\xE9marrrer le flux de fichiers. Elle se termine par un ou plusieurs <code><em>gulp.dest([emplacement cible des fichiers])</em></code> pour \xE9crire le r\xE9sultat des diff\xE9rentes \xE9tapes dans une destination donn\xE9e. Dans mon exemple, la source est constitu\xE9es des images du site et ces fichiers sont envoy\xE9s \xE0 un plugin imagemin (via la fonction <code><em>pipe([action])</em></code>). Imagemin va compresser et mettre les images dans le r\xE9pertoire <code><em>gulp.dest([build/.tmp/img])</em></code>. J&#8217;encha\xEEne une deuxi\xE8me t\xE2che \xE0 la suite pour convertir les images png et jpg au format webp (qui est un format alternatif optimis\xE9 pour Chrome).</p>
</div>
<div class="paragraph">
<p>Ce qui est interessant dans Gulp, c&#8217;est qu&#8217;il est tr\xE8s facile d&#8217;ajouter vos propres t\xE2ches pour agir sur ce flux de fichiers. Vous pouvez utiliser par exemple <a href="https://github.com/dominictarr/map-stream">map-stream</a>. Prenons <a href="https://github.com/Dev-Mind/dev-mind.fr/blob/master/gulp-extensions/transformers/convert-to-html.js">le code</a> que j&#8217;utilise pour convertir les fichiers .adoc en .html</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450891.903"><span class="hljs-keyword">const</span> map = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;map-stream&#x27;</span>);

<span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">return</span> <span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">file, next</span>) =&gt;</span> {
    <span class="hljs-keyword">const</span> html = file.<span class="hljs-property">ast</span>.<span class="hljs-title function_">convert</span>();
    file.<span class="hljs-property">contents</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Buffer</span>(html);
    file.<span class="hljs-property">extname</span> = <span class="hljs-string">&#x27;.html&#x27;</span>;
    file.<span class="hljs-property">path</span> = file.<span class="hljs-property">path</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;.adoc&#x27;</span>, <span class="hljs-string">&#x27;.html&#x27;</span>);
    <span class="hljs-title function_">next</span>(<span class="hljs-literal">null</span>, file);
  });
};</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450891.903')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans ce fichier j&#8217;exporte une fonction qui utilise <a href="https://github.com/dominictarr/map-stream">map-stream</a>. Pour chaque fichier que je re\xE7ois je change l&#8217;extension et le pathname. Ceci permet d&#8217;agir sur le stream de fichier. Dans mon script gulp <a href="https://github.com/Dev-Mind/dev-mind.fr/blob/master/gulpfile.js#L13-L25">j&#8217;importe cette extension</a> sous le nom <code><em>convertToHtml</em></code>. Je peux ensuite l&#8217;utiliser dans une de mes t\xE2ches</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450892.1316">gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;blog-indexing&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> {
  gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;src/blog/**/*.adoc&#x27;</span>)
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">readAsciidoc</span>(modeDev))
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">convertToHtml</span>())
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">firebaseIndexing</span>(modeDev))
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">convertToJson</span>(<span class="hljs-string">&#x27;blogindex.json&#x27;</span>))
    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;build/.tmp&#x27;</span>))
    .<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">cb</span>())
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450892.1316')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans mon exemple ci dessus les t\xE2ches <code><em><a href="https://github.com/Dev-Mind/dev-mind.fr/blob/master/gulp-extensions/transformers/read-asciidoctor.js">readAsciidoc</a></em></code>, <code><em><a href="https://github.com/Dev-Mind/dev-mind.fr/blob/master/gulp-extensions/transformers/convert-to-html.js">convertToHtml</a></em></code>, <code><em><a href="https://github.com/Dev-Mind/dev-mind.fr/blob/master/gulp-extensions/transformers/firebase-indexing.js">firebaseIndexing</a></em></code> et <code><em><a href="https://github.com/Dev-Mind/dev-mind.fr/blob/master/gulp-extensions/transformers/convert-to-json.js">convertToJson</a></em></code> sont des scripts personnalis\xE9s qui me permettent de lire les documents Asciidoc, de les convertir en HTML, d&#8217;indexer les m\xE9tadonn\xE9es dans une base Firebase puis localement dans un fichier json et d&#8217;orienter le tout dans le r\xE9pertoire <code><em>build/.tmp</em></code>. Je profite de cet article pour remercier <a href="https://twitter.com/hsablonniere">Hubert Sabloni\xE8re</a> qui m&#8217;a aider pour la partie AsciiDoctor.</p>
</div>
<div class="paragraph">
<p>Au final Gulp g\xE8re tout le cycle de vie du site web</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/siteweb_01.jpg" alt="Cycle de vie Gulp">
</div>
</div>
<div class="paragraph">
<p>D&#8217;autres t\xE2ches sont ajout\xE9es lorsque le site est pouss\xE9 en production : cache busting des ressources (chaque resource est suffix\xE9 par un hash pour forcer une mise \xE0 jour du cache quand la ressource change), g\xE9n\xE9ration des services workers et compression des ressources. Des tests d&#8217;int\xE9gration vont rapidement \xEAtre ajout\xE9 pour valider le processus.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rendering_\xE0_la_construction">Rendering \xE0 la construction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Ces derni\xE8res ann\xE9es nous avons eu tendance \xE0 d\xE9porter beaucoup de traitements dans les navigateurs Internet en les impl\xE9mentant en JavaScript et ou en utilisant un framework. Mais ceci a un co\xFBt.</p>
</div>
<div class="paragraph">
<p>La majorit\xE9 des internautes utilisent aujourd&#8217;hui des t\xE9l\xE9phones mobiles avec souvent des performances limit\xE9es. L&#8217;interpr\xE9tation du JavaScript (chargement parsing, compilation, ex\xE9cution) a un co\xFBt important. C&#8217;est pourquoi il est pr\xE9f\xE9rable de limiter ce JavaScript. <a href="http://webassembly.org/">Webassembly</a> qui permet de transf\xE9rer un code JavaScript compil\xE9 permet de limiter ce coup mais nous ne sommes pas encore pr\xEAt \xE0 l&#8217;impl\xE9menter.</p>
</div>
<div class="paragraph">
<p>L&#8217;autre probl\xE9matique concerne les moteurs de recherche. La mode de ces derni\xE8res ann\xE9es est de cr\xE9er des applications Single Page o\xF9 le contenu est charg\xE9 dynamiquement. Mais les robots d&#8217;indexation ne sont pas toujours capables d&#8217;\xE9x\xE9cuter des scripts. Il est donc pr\xE9f\xE9r\xE9able de servir du HTML pur pour avoir la meilleure indexation possible et de faire par exemple du server side rendering.</p>
</div>
<div class="paragraph">
<p>Dans le cas d&#8217;un blog nous pouvons faire beaucoup plus simple et tout g\xE9n\xE9rer lors de la construction du projet. Dans le cas de Dev-Mind, les pages de blog sont \xE9crites en Asciidoc. Comme je l&#8217;ai dit dans la partie pr\xE9c\xE9dente, <a href="http://asciidoctor.org/">Asciidoctor.js</a> permet de lire les metadonn\xE9es de ces pages. Le processus Gulp construit un index qui permet ensuite de g\xE9r\xE9ner les pages HTML (d\xE9tail, liste) en appliquant un template commun via <a href="https://github.com/janl/mustache.js/">Mustache.js</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/siteweb_02.jpg" alt="G\xE9n\xE9ration blog">
</div>
</div>
<div class="paragraph">
<p>Ainsi les moteurs de recherche peuvent indexer sans probl\xE8me les pages du site.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_d\xE9ploiement_en_continu">D\xE9ploiement en continu</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pendant longtemps mon site web \xE9tait h\xE9berger chez <a href="https://www.ovh.com/fr/">OVH</a> mais je devais \xE0 chaque livraison passer par FTP pour livrer manuellement le contenu. Nous pouvons faire beaucoup mieux&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>J&#8217;ai donc d\xE9cid\xE9 de migrer l&#8217;h\xE9bergement chez un autre prestataire fran\xE7ais <a href="https://www.clever-cloud.com/">Clever Cloud</a>. Leur cr\xE9neau est de vous aider \xE0 d\xE9ployer automatiquement votre projet \xE0 partir d&#8217;une branche <a href="https://github.com/Dev-Mind/dev-mind.fr">Github</a>. Dans mon cas je voulais que Clever cloud soit capable de</p>
</div>
<div class="ulist">
<ul>
<li>
<p>lancer un checkout de mon projet</p>
</li>
<li>
<p>d&#8217;\xE9x\xE9cuter mon script Gulp de g\xE9n\xE9ration du site</p>
</li>
<li>
<p>de servir les pages g\xE9n\xE9r\xE9es via un serveur web (Apache ou autre)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>J&#8217;ai eu quelques probl\xE8mes au d\xE9part mais le support est vraiment super et tout a pu \xEAtre fait en quelques heures. Merci aussi \xE0 <a href="https://twitter.com/k33g_org">Philippe Charri\xE8re</a> pour nos \xE9changes sur le sujet.</p>
</div>
<div class="paragraph">
<p>Voici la proc\xE9dure que j&#8217;ai suivie. J&#8217;ai tout d&#8217;abord cr\xE9\xE9 un compte sur le site de Clever Cloud,et j&#8217;ai ajout\xE9 une application via la console.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/siteweb_03.jpg" alt="Cr\xE9ation application">
</div>
</div>
<div class="paragraph">
<p>Cr\xE9er une application revient \xE0 pointer vers un r\xE9pository Github. Par d\xE9faut Clever suit master et relancera un d\xE9ploiement chaque fois qu&#8217;un nouveau commit sera pouss\xE9 sur Github. Vous pouvez dans un second temps choisir une autre branche que master (ce qui peut \xEAtre utile pour dissocier diff\xE9rents environnements d\xE9veloppement, recette, prod&#8230;&#8203;)</p>
</div>
<div class="paragraph">
<p>Vous devez ensuite s\xE9lectionner le type d&#8217;application. Dans mon cas c&#8217;est une application statique (derni\xE8re de la liste)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/siteweb_04.png" alt="Type application">
</div>
</div>
<div class="paragraph">
<p>Vous pouvez ensuite choisir la taille du serveur. Bien \xE9videmment le prix mensuel d\xE9pendra des ressources utilis\xE9es</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/siteweb_05.png" alt="Choix serveur">
</div>
</div>
<div class="paragraph">
<p>Votre application peut utiliser ces propres services mais la plateforme peut aussi vous aider \xE0 ajouter des extensions pour facilement utiliser du stockage physique ou via des sources de donn\xE9es (MongoDB, MySql, PostgreSQL)&#8230;&#8203;.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/siteweb_06.png" alt="Variables d&#8217;environnement">
</div>
</div>
<div class="paragraph">
<p>Vous pouvez ensuite param\xE9trer diff\xE9rentes variables d&#8217;environnement. Les variables dont le nom commence par DEVMIND sont inject\xE9es dans le processus Gulp de construction</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450893.5994"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-string">&quot;apiKey&quot;</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DEVMIND_API_KEY</span>,
  <span class="hljs-string">&quot;authDomain&quot;</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DEVMIND_AUTH_DOMAIN</span>,
  <span class="hljs-string">&quot;databaseURL&quot;</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DEVMIND_DATABASE_URL</span>,
  <span class="hljs-string">&quot;storageBucket&quot;</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DEVMIND_STORAGE_BUCKET</span>,
  <span class="hljs-string">&quot;user&quot;</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DEVMIND_USER_MAIL</span>,
  <span class="hljs-string">&quot;password&quot;</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">DEVMIND_PASSWORD</span>
};</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450893.5994')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La variable d&#8217;environnement <code><em>CC_PRE_BUILD_HOOK</em></code> est importante car elle permet d&#8217;indiquer quel script est lanc\xE9 \xE0 l&#8217;installation. Dans mon cas je lance un <code><em>npm install</em></code>. Npm permet de charger les diff\xE9rents plugins Node utilis\xE9s par Gulp et permet aussi de lancer Gulp (t\xE2che param\xE9tr\xE9e dans le fichier <code><em>package.json</em></code> du projet).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450893.5945">{
  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;dev-mind.com&quot;</span>,
  <span class="hljs-string">&quot;repository&quot;</span>: <span class="hljs-string">&quot;https://github.com/Dev-Mind/dev-mind.com.git&quot;</span>,
  <span class="hljs-string">&quot;scripts&quot;</span>: {
    <span class="hljs-string">&quot;install&quot;</span>: <span class="hljs-string">&quot;gulp&quot;</span>,
    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;gulp serve&quot;</span>
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450893.5945')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Il est int\xE9ressant de noter que vous pouvez lancer plusieurs <a href="https://www.clever-cloud.com/doc/clever-cloud-overview/hooks/">hooks</a> avant ou apr\xE8s l&#8217;ex\xE9cution de votre script.</p>
</div>
<div class="paragraph">
<p>Pour que le serveur Apache fourni par Clever Cloud, soit capable de servir le r\xE9pertoire g\xE9n\xE9r\xE9, vous devez ajouter un fichier <code><em><a href="https://github.com/Dev-Mind/dev-mind.fr/blob/master/clevercloud/php.json">php.json</a></em></code> (dans un r\xE9pertoire nomm\xE9 <code><em>clevercloud</em></code> \xE0 la racine de votre projet), avec le contenu suivant</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450893.055">{
  <span class="hljs-string">&quot;deploy&quot;</span>: {
    <span class="hljs-string">&quot;webroot&quot;</span>: <span class="hljs-string">&quot;/build/dist&quot;</span>
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450893.055')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La derni\xE8re \xE9tape consite \xE0 param\xE9trer votre nom de domaine. Vous devez aller sur le site sur lequel vous avez d\xE9clarez ce nom de domaine et faire pointer le DNS vers les IPS mises \xE0 dispostion par Clever Cloud. Dans la console Clever vous devez aussi d\xE9clarer vos noms de domaine</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/siteweb_07.png" alt="Variables d&#8217;environnement">
</div>
</div>
<div class="paragraph">
<p>Dans mon cas le support m&#8217;a \xE9galement activ\xE9 la g\xE9n\xE9ration automatique de certificats via <a href="https://letsencrypt.org/">Lets' Encrypt</a>.</p>
</div>
<div class="paragraph">
<p>Et maintenant je suis tr\xE8s content de dire que <a href="https://www.dev-mind.fr/" class="bare">https://www.dev-mind.fr/</a> est dor\xE9navant h\xE9berg\xE9 sur Clever Cloud.</p>
</div>
</div>
</div>`;var Ov=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Dans cet article je reviens sur la conf\xE9rence dotCSS qui a eu lieu \xE0 Paris le 30 novembre 2017.  Si vous voulez suivre les talks ils vont tr\xE8s rapidement \xEAtre publi\xE9s sur la cha\xEEne <a href="https://www.youtube.com/user/dotconferences">Youtube</a>  et via le <a href="https://www.2017.dotcss.io/">site web</a> .</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_00.jpg" alt="Dot CSS">
</div>
</div>
<div class="paragraph">
<p>Dans ce compte rendu je ne parle pas de toutes les sessions. Je n\u2019ai s\xE9lectionn\xE9 que celles qui m\u2019ont vraiment fait ressortir des id\xE9es ou des concepts applicables dans mon quotidien proche ou futur.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_01.jpg" alt="Dot CSS">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tim_carry"><a href="https://twitter.com/pixelastic">Tim Carry</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Avant de venir \xE0 la conf\xE9rence, Tim \xE9tait le seul speaker que je connaissais. Tim \xE9tait venu l\u2019an dernier \xE0 <a href="https://mixitconf.org">MiXiT</a> donner un talk sur le CSS intitul\xE9 <a href="https://mixitconf.org/2017/compagnonnage-css-et-vexillologie"><em>Compagnonnage, CSS et Vexillologie</em></a>.</p>
</div>
<div class="paragraph">
<p>Tim aime apprendre le CSS en essayant de trouver des projets concrets. Il avait fait sensation dans les conf\xE9rences, en montrant projet sur les drapeaux enti\xE8rement cr\xE9\xE9s en CSS. Allez jeter un cou d\u2019oeil \xE0 <a href="http://pixelastic.github.io/css-flags/">CSS Flags</a>.</p>
</div>
<div class="paragraph">
<p>Son nouveau d\xE9lire \xE9tait de cr\xE9er un moteur de recherche exclusivement en CSS. Certes le langage CSS est assez limit\xE9 pour g\xE9rer les conditions, les boucles, les fonctions\u2026 Mais il est tr\xE8s performant pour s\xE9lectionner des \xE9l\xE9ments dans le DOM via les selectors. Et les combinateurs permettent d\u2019ajuster les styles \xE0 un sous ensemble d\u2019\xE9l\xE9ments.</p>
</div>
<div class="paragraph">
<p>Si vous n\u2019\xEAtes pas familier avec cette notion, les s\xE9lecteurs sont en fait des blocs de d\xE9claration CSS pour identifier les parties sp\xE9cifiques \xE0 mettre en forme dans un document HTML. Si vous avez d\xE9ja ajout\xE9 du code dans une feuille de style CSS, vous connaissez forc\xE9ment les s\xE9lecteurs</p>
</div>
<div class="ulist">
<ul>
<li>
<p>s\xE9lecteurs de type permettant de s\xE9lectionner des balises du langages HTML</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>h1 {
   font-size: 1.5em;
}</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>S\xE9lecteur de classes permettant de s\xE9lectionner des \xE9l\xE9ments via les valeurs d\xE9finies dans les propri\xE9t\xE9s HTML de type class</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>.devmind_title{
   font-size: 1.1em;
   color: #2c2c2c;
}</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>S\xE9lecteur d\u2019identifiant permettant de s\xE9lectionner l\u2019\xE9l\xE9ment d\xE9fini avec un id particulier</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre>#welcome{
   text-transform: uppercase;
}</pre>
</div>
</div>
<div class="paragraph">
<p>Les s\xE9lecteurs d\u2019attribut sont moins connus. Ils permettent de s\xE9lectionner les \xE9l\xE9ments HTML en fonction de leurs attributs et des valeurs de ces derniers. Un s\xE9lecteur d\u2019attribut s\u2019\xE9crit avec des crochets "[]", dans lesquels on place le nom de l&#8217;attribut et \xE9ventuellement une condition sur la valeur de l&#8217;attribut.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code><em>[attr]</em></code> : s\xE9lectionne tous les \xE9l\xE9ments avec l&#8217;attribut <code><em>attr</em></code>, quelque soit sa valeur.</p>
</li>
<li>
<p><code><em>[attr=val]</em></code> : s\xE9lectionne tous les \xE9l\xE9ments avec l&#8217;attribut <code><em>attr</em></code>, mais seulement si la valeur est \xE9gale \xE0 <code><em>val</em></code>.</p>
</li>
<li>
<p><code><em>[attr|=val]</em></code> : s\xE9lectionne tous les \xE9l\xE9ments dont l&#8217;attribut <code><em>attr</em></code> vaut val ou commence par <code><em>val</em></code></p>
</li>
<li>
<p><code><em>[attr^=val]</em></code> : s\xE9lectionne tous les \xE9l\xE9ments dont la valeur de l&#8217;attribut <code><em>attr</em></code> commence par <code><em>val</em></code></p>
</li>
<li>
<p><code><em>[attr@dollar@=val]</em></code> : s\xE9lectionne tous les \xE9l\xE9ments dont la valeur de l&#8217;attribut <code><em>attr</em></code> finit avec <code><em>val</em></code></p>
</li>
<li>
<p><code><em>[attr*=val]</em></code> : s\xE9lectionne tous les \xE9l\xE9ments dont la valeur de l&#8217;attribut <code><em>attr</em></code> contient la cha\xEEne <code><em>val</em></code></p>
</li>
<li>
<p><code><em>[attr~=val]</em></code>: s\xE9lectionne tous les \xE9l\xE9ments avec l&#8217;attribut <code><em>attr</em></code>, seulement si la valeur <code><em>val</em></code> correspond \xE0 une des valeurs <code><em>attr</em></code>, s\xE9par\xE9es par des espaces.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Au del\xE0 des s\xE9lecteurs il est int\xE9ressant aussi de s\u2019attarder sur les combinateurs qui permettent de s\xE9lectionner des voisins \xE0 un s\xE9lecteur donn\xE9.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Combinateur <code><em>\u2018+\u2019</em></code> (voisin direct) permet de s\xE9lectionner les \xE9l\xE9ments qui suivent imm\xE9diatement un \xE9l\xE9ment donn\xE9. Par exemple <code><em>p + span</em></code> permettra de cibler n\u2019importe quel \xE9l\xE9ment span qui suit un \xE9l\xE9m\xE9nt  p</p>
</li>
<li>
<p>Combinateur <code><em>\u2018~\u2019</em></code> (voisins) permet de s\xE9lectionner les n\u0153uds qui suivent un \xE9l\xE9ment et qui ont le m\xEAme parent. Par exemple : <code><em>p ~ span</em></code> cible tous les spans d\u2019un \xE9lement</p>
</li>
<li>
<p>Combinateur <code><em>\u2018@GT\u2019</em></code> (enfants directs) permet de s\xE9lectionner les n\u0153uds qui les fils directs d&#8217;un \xE9l\xE9ment donn\xE9.</p>
</li>
<li>
<p>Combinateur <code><em>\u2018 \u2018</em></code> (blanc) permet de s\xE9lectionner les n\u0153uds qui sont des descendants (pas n\xE9cessairement des fils directs) d&#8217;un \xE9l\xE9ment donn\xE9.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_benjamin_de_cock"><a href="https://twitter.com/bdc">Benjamin De Cock</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Benjamin travaille pour la soci\xE9t\xE9 <a href="https://stripe.com/fr">Stripe</a>. Sa pr\xE9sentation avait pour but de faire un focus sur la puissance de la propri\xE9t\xE9 CSS <a href="https://developer.mozilla.org/fr/docs/Web/CSS/display">display</a> et notamment de <a href="https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Grid_Layout">CSS Grid</a>  et dans une moinde mesure de CSS Flexbox.</p>
</div>
<div class="paragraph">
<p>Contrairement \xE0 quelques ann\xE9es en arri\xE8re, vous avez tous les outils aujourd\u2019hui pour disposer facilement des \xE9l\xE9ments (selon une direction donn\xE9e via les flexbox) ou en d\xE9coupant l\u2019\xE9cran en zone (grid). Les flexbox sont utilisables partout</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_03.png" alt="Flexbox">
</div>
<div class="title">Figure 1. Can i use flexbox</div>
</div>
<div class="paragraph">
<p>Et les CSS grid bient\xF4t</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_04.png" alt="CSS Grid">
</div>
<div class="title">Figure 2. Can i use CSS Grid</div>
</div>
<div class="paragraph">
<p>Sur les Flexbox je vous laisse lire <a href="https://www.dev-mind.fr/blog/2016/flexbox_layouts_faciles.html">mon article</a> sur le sujet. Il contient un lien vers la tr\xE8s bonne vid\xE9o de <a href="https://twitter.com/hsablonniere">Hubert Sabloni\xE8re</a> sur le sujet.</p>
</div>
<div class="paragraph">
<p>Chez Stripe, Benjamin a mis en place des feuilles de style \xE0 base de grilles (CSS grid) pour d\xE9finir le layout commun \xE0 tous les \xE9crans. Les animations sont ensuite appliqu\xE9es sur ce layout complet et ceci a consid\xE9rablement simplifier leur code.</p>
</div>
<div class="paragraph">
<p>Je ferai certainement un article sur CSS GRid prochainement mais voici un exemple simple. Si vous avez le HTML suivant</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450570.2842"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;grid&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;three&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;four&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;five&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;six&quot;</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450570.2842')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez utiliser CSS grid pour indiquer que ce code s\u2019affiche sous forme de grille. Cette sp\xE9cification permet de d\xE9finir les contraintes
* sur les colonnes et les lignes (nombre total et tailles minimales ou maximales) et
* sur chacune des cellules pour indiquer o\xF9 les placer sur la grille et sur combien de colonnes ou de lignes</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450577.1033"><span class="hljs-selector-class">.grid</span>{
		<span class="hljs-attribute">display</span>: grid;
    <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>fr);
    <span class="hljs-attribute">grid-gap</span>: <span class="hljs-number">1em</span>;
    <span class="hljs-attribute">grid-auto-rows</span>: <span class="hljs-built_in">minmax</span>(<span class="hljs-number">100px</span>, auto);

	}
  <span class="hljs-selector-class">.grid</span> &gt; <span class="hljs-selector-tag">div</span> {
    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">24</span>,<span class="hljs-number">111</span>,<span class="hljs-number">198</span>);
    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">33</span>,<span class="hljs-number">150</span>,<span class="hljs-number">243</span>,.<span class="hljs-number">5</span>);
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span>;
   }
	<span class="hljs-selector-class">.one</span> {
    <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;
    <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span>;
  }
  <span class="hljs-selector-class">.two</span> {
    <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span> / <span class="hljs-number">4</span>;
    <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">1</span> / <span class="hljs-number">3</span>;
  }
  <span class="hljs-selector-class">.three</span> {
    <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">1</span>;
    <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">2</span> / <span class="hljs-number">5</span>;
  }
  <span class="hljs-selector-class">.four</span> {
    <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">3</span>;
    <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">3</span>;
  }
  <span class="hljs-selector-class">.five</span> {
    <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">2</span>;
    <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">4</span>;
  }
  <span class="hljs-selector-class">.six</span> {
    <span class="hljs-attribute">grid-column</span>: <span class="hljs-number">3</span>;
    <span class="hljs-attribute">grid-row</span>: <span class="hljs-number">4</span>;
  }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450577.1033')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ce qui donnera le visuel suivant</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_02.png" alt="CSS Grid example">
</div>
<div class="title">Figure 3. Exemple CSS Grid</div>
</div>
<div class="paragraph">
<p>Vous pouvez voir le <a href="https://jsfiddle.net/devmindfr/awgo1u11/">JsFiddle</a></p>
</div>
<div class="paragraph">
<p>Une astuce int\xE9ressante a \xE9t\xE9 montr\xE9e pendant le talk. Il est important de g\xE9rer les navigateurs qui ne savent pas interpr\xE9ter une version trop r\xE9cente d\u2019une sp\xE9cification CSS. Vous pouvez par exemple charger une feuille de style de fallback dynamiquement en JavaScript si votre navigateur n&#8217;impl\xE9mente pas encore les CSS Grid. Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450579.1238"><span class="hljs-keyword">if</span>(!<span class="hljs-string">&#x27;grid&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">style</span>){
  <span class="hljs-keyword">var</span> head  = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>];
  <span class="hljs-keyword">var</span> link  = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;link&#x27;</span>);
  link.<span class="hljs-property">rel</span>  = <span class="hljs-string">&#x27;stylesheet&#x27;</span>;
  link.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/css&#x27;</span>;
  link.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;styles/fallbax.css&#x27;</span>;
  head.<span class="hljs-title function_">appendChild</span>(link);
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450579.1238')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_adam_detrick"><a href="https://twitter.com/akdetrick">Adam Detrick</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Adam travaille chez <a href="https://www.meetup.com">Meetup</a>. Lorsqu\u2019un projet commence \xE0 grossir, \xE0 avoir plusieurs \xE9quipes, le CSS suit la m\xEAme tendance, il grossit sans cesse. Comme le disait Melvin Conway, \u201Corganizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations\u201D&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Le CSS augmente et il est de plus en plus compliqu\xE9 \xE0 lire. Nous avons tendance \xE0 ne pas r\xE9utiliser les styles existants car nous avons toujours peur de casser quelque chose\u2026 Malheureusement on en cr\xE9e de nouveaux, faisant encore grandir la complexit\xE9. Au bout d\u2019un moment, quand on arrive \xE0 ne plus avoir ce que l\u2019on veut \xE0 l\u2019\xE9cran, on introduit les <code><em>!important</em></code>.  Pour rappel cette propri\xE9t\xE9 indique que nous cassons l\u2019h\xE9ritage des styles, et l\xE0 nous commen\xE7ons \xE0 toucher le fond.</p>
</div>
<div class="paragraph">
<p>Mais il faut garder \xE0 l\u2019esprit que le CSS est une ressource bloquante. Le navigateur doit l\u2019interpr\xE9ter pour \xEAtre capable d\u2019afficher les \xE9l\xE9ments \xE0 l\u2019\xE9cran.  Plus vos feuilles de style seront grosses et complexes plus les pages seront longues \xE0 s\u2019afficher.</p>
</div>
<div class="paragraph">
<p>Il est important de ma\xEEtriser les styles que l\u2019on d\xE9fini. Le probl\xE8me n\u2019est pas technique mais humain.</p>
</div>
<div class="paragraph">
<p>Plusieurs pistes</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Bannir le <code><em>!important</em></code></p>
</li>
<li>
<p>D\xE9finir une nomenclature de styles en utilisant des noms de style ni trop pr\xE9cis ni trop abstrait</p>
</li>
<li>
<p>Mettre en place une documentation des styles utilis\xE9s. Il existe plusieurs outils pour g\xE9n\xE9rer automatiquement cette documentation.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Niveau nomenclature Adam proposait d\u2019utiliser la notation suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450580.9885">.<span class="hljs-property">at</span>[<span class="hljs-title class_">Breakpoint</span>]_[property]--[variant]</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450580.9885')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Les breakpoint correspondent aux changements d\u2019affichage au niveau des media queries. Par exemple</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_05.png" alt="Nommage">
</div>
</div>
<div class="paragraph">
<p>Vous pouvez par exemple d\xE9finir un style <code><em>.atLarge_margin&#8212;&#8203;center</em></code>. Il est important de d\xE9finir des r\xE8gles simples que tout le monde peut retrouver ou partager.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_florian_rivoal"><a href="https://twitter.com/frivoal">Florian Rivoal</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Florian est membre du CSS working group et il est venu nous parler des prochaines \xE9volutions du langage, et plus pr\xE9cis\xE9ment des derni\xE8res \xE9volutions sur les Media Queries.</p>
</div>
<div class="paragraph">
<p>Pour rappel une media query (ou requ\xEAte m\xE9dia) d\xE9finit un type de m\xE9dia et permet d\u2019appliquer un ensemble de styles diff\xE9rents en fonction des particularit\xE9s du m\xE9dia : largeur, hauteur, couleurs&#8230;&#8203;.</p>
</div>
<div class="paragraph">
<p>Les media queries ont connu plusieurs \xE9volutions</p>
</div>
<div class="ulist">
<ul>
<li>
<p>CSS 2.1 : introduction de <code><em>@media screen</em></code> (\xE9cran), <code><em>@media print</em></code> (imprimante)</p>
</li>
<li>
<p>Le niveau 3 a permi de d\xE9finir des caract\xE9ristiques du media afin d\u2019\xEAtre plus g\xE9n\xE9rique (largeur minimale, maximale\u2026.)</p>
</li>
<li>
<p>Les niveaux 4 et 5 arrivent et vont permettre de simplifier la syntaxe</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Par exemple aujourd\u2019hui on \xE9crit</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450580.9229"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">20em</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">40em</span>){
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450580.9229')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Demain nous \xE9crirons</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450581.7646"><span class="hljs-keyword">@media</span> (<span class="hljs-number">20em</span> &lt;= <span class="hljs-attribute">width</span> &lt;=<span class="hljs-string">&quot;40em){&quot;</span> }&lt; code&gt;&lt;/=&gt;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450581.7646')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Autre exemple, nous pouvons aujourd\u2019hui cumuler les d\xE9clarations pour \xEAtre plus pr\xE9cis. Les d\xE9clarations peuvent \xEAtre illisible comme par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450581.0886"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">20em</span>), <span class="hljs-keyword">not</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-height</span>: <span class="hljs-number">40em</span>){
   <span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> all <span class="hljs-keyword">and</span> (<span class="hljs-attribute">pointer</span>:none){
   }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450581.0886')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Alors que demain nous pourrons simplement \xE9crire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450581.6787"><span class="hljs-keyword">@media</span> ((<span class="hljs-attribute">width</span> &gt;= <span class="hljs-number">20em</span>) <span class="hljs-keyword">or</span> (<span class="hljs-attribute">height</span> &lt; <span class="hljs-number">40em</span>)) <span class="hljs-keyword">and</span> (<span class="hljs-keyword">not</span> (<span class="hljs-attribute">pointer</span>:none)){
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450581.6787')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voici le r\xE9capitulatif des propri\xE9t\xE9s</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_06.png" alt="Media queries">
</div>
<div class="title">Figure 4. Media queries level 3, 4 and 5</div>
</div>
<div class="paragraph">
<p>Malheureusement ceci n\u2019est pas encore impl\xE9ment\xE9 dans les navigateurs et nous devrons encore attendre avant de les utiliser.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_laurence_penney"><a href="https://twitter.com/lorp">Laurence Penney</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Laurence est venu nous parler de l\u2019utilisation des fonts dans une application web. Quand nous voulons utiliser une police d\u2019\xE9criture (par exemple Lato), nous avons plusieurs niveaux de personnalisation.</p>
</div>
<div class="paragraph">
<p>Par exemple quand voulez utilisez la police d\u2019\xE9criture Lato vous d\xE9clarez dans votre page que vous utilisez la famille Lato</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450581.264">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lato<span class="hljs-string">&quot; rel=&quot;</span>stylesheet<span class="hljs-string">&quot;&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450581.264')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Mais derri\xE8re si vous t\xE9l\xE9chargez cette famille vous avez plusieurs fichiers (dont la taille peut \xEAtre non n\xE9gligeable) en fonction des styles</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_07.png" alt="Fonts">
</div>
<div class="title">Figure 5. Fonts de la famille Lato</div>
</div>
<div class="paragraph">
<p>Les possibilit\xE9s de d\xE9clinaison sont \xE9normes et nous pouvons d\xE9finir des dizaines de dimension
* Taille
* Couleur
* Espacement
* Style
* Poids : Largeur du trait de thin \xE0 bold
* \u2026</p>
</div>
<div class="paragraph">
<p>Avec les derni\xE8re versions de OpenType (2016 v1.8) le but est de d\xE9finir un seul fichier et de d\xE9finir \xE0 l\u2019int\xE9rieur les variations autoris\xE9es. Ces variations sont personnalisables en CSS via les <code><em>font-variation-settings</em></code></p>
</div>
<div class="paragraph">
<p>Malheureusement pour le moment peu de navigateur permettent leur utilisation</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_08.png" alt="font-variation-settings">
</div>
<div class="title">Figure 6. Can i use font-variation-settings</div>
</div>
<div class="paragraph">
<p>Si vous voulez tester les possibilit\xE9s vous pouvez aller sur le site <a href="http://www.axis-praxis.org/specimens/dunbar">AxisPraxis</a>, d\xE9velopp\xE9 par Laurence</p>
</div>
<div class="paragraph">
<p>A la fin de sa pr\xE9sentation Laurence nous a montr\xE9 des travaux effectu\xE9s sur des fonts contenant des ic\xF4nes pour montrer que les fonts pourraient m\xEAme servir dans un futur proche \xE0 cr\xE9er des animations</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/dotcss_09.jpg" alt="DotCSS">
</div>
</div>
<div class="paragraph">
<p>Merci \xE0 toute la team dotCSS pour l&#8217;organisation de cet event</p>
</div>
</div>
</div>`;var Fv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Dernier chapitre dans la pr\xE9sentation du web. Nous allons parler du protocole HTTP (HyperText Transfer Protocol), sur lequel se base le web. Ce protocole permet d\u2019\xE9changer des documents hyperm\xE9dia entre un client (un navigateur Internet) et un serveur. Le client ouvre une connexion, \xE9met une requ\xEAte et attend une r\xE9ponse. Nous parlerons aussi des organismes g\xE9rant le web.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_petit_historique">Un petit historique</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_http_1_1_1">HTTP 1 &amp; 1.1</h3>
<div class="paragraph">
<p>Le protocole a beaucoup \xE9volu\xE9 depuis ses d\xE9buts. Au d\xE9part (en 1991), http ne pouvait transf\xE9rer que des fichiers. Depuis  la version 1.0 (1996) le protocole permet de  transf\xE9rer tout type de fichiers comme des images, vid\xE9os, scripts, feuilles de styles\u2026 Le type de la ressource est pr\xE9cis\xE9 dans l\u2019ent\xEAte de la requ\xEAte ou de la r\xE9ponse, via le type MIME (Multipurpose Internet Mail Extensions).</p>
</div>
<div class="paragraph">
<p>En 1997 nous avons une nouvelle version, la version 1.1. Elle permettait entre autre d\u2019am\xE9liorer les performances en permettant de r\xE9utiliser la m\xEAme connexion. C\u2019est la version la plus r\xE9pandue aujourd\u2019hui.</p>
</div>
</div>
<div class="sect2">
<h3 id="_http_2">HTTP 2</h3>
<div class="paragraph">
<p>Le protocole est largement am\xE9liorable mais il aura fallu attendre pratiquement 20 ans, avant que les diff\xE9rents acteurs s\u2019entendent sur une nouvelle version du protocole. La version 2 a \xE9t\xE9 finalis\xE9e en 2015 et est en cours de d\xE9ploiement.</p>
</div>
<div class="paragraph">
<p>Cette nouvelle mouture se veut tout d\u2019abord \xE0 100% r\xE9trocompatible, afin de ne pas \xE0 avoir \xE0 changer le code des diff\xE9rentes applications utilisant les versions anciennes du protocole. En gros les m\xE9thodes, statuts, codes erreur sont conserv\xE9s.</p>
</div>
<div class="paragraph">
<p>Le but principal de HTTP2 est de rendre les requ\xEAtes moins co\xFBteuses en ressources, afin d\u2019am\xE9liorer les performance sur des devices o\xF9 la qualit\xE9 du r\xE9seau varie beaucoup. HTTP2 permet le multiplexage pour \xE9changer diff\xE9rents messages en m\xEAme temps et utilise la compression des ent\xEAtes.</p>
</div>
<div class="paragraph">
<p>HTTP d\xE9crit comment les messages sont \xE9chang\xE9s avec un serveur mais au niveau plus bas HTTP se base sur les protocoles TCP et IP. Actuellement HTTP peut ouvrir plusieurs connexions TCP en parall\xE8les ce qui peut congestionn\xE9 le r\xE9seau. Avec HTTP 2 le but est de regrouper ces \xE9changes sur la m\xEAme connexion TCP.
HTTP 2 n\u2019impose pas de s\xE9curiser les \xE9changes en cryptant les informations via un chiffrement TLS (SSL). HTTP limite le surco\xFBt dans le chiffrement car en 2017 tous les \xE9chnges r\xE9seaux devrai\xEAnt \xEAtre crypt\xE9s.</p>
</div>
<div class="paragraph">
<p>Aujourd\u2019hui quand vous ouvrez une page web, le code HTML arrive, il est pars\xE9, on charge ensuite les styles, les images. Quand on regarde le nombre de requ\xEAtes lors de l\u2019ouverture d\u2019une page d\u2019un navigateur, ce dernier peut \xEAtre tr\xE8s important. Maintenant grace au multipexage, les diff\xE9rents \xE9l\xE9ments pourront \xEAtre envoy\xE9s en m\xEAme temps.</p>
</div>
<div class="paragraph">
<p>En HTTP2 un client peut maintenir une connexion m\xEAme si l\u2019utilisateur clique sur un bouton ou choisit de fermer une connexion. Ceci permet au serveur de pouvoir faire du push.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_00.png" alt="Web">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_appel_http">Appel HTTP</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Comme je l\u2019ai indiqu\xE9 en ent\xEAte de ce chapitre, le client est \xE0 l\u2019initiative des \xE9changes. Nous avons toujours 3 \xE9tapes.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Ouverture d\u2019une session le plus souvent HTTP (surcouche de TCP)</p>
</li>
<li>
<p>Envoie d\u2019une requ\xEAte</p>
</li>
<li>
<p>Le serveur interpr\xE8te la requ\xEAte et renvoie un statut (un code) ainsi que les donn\xE9es \xE9ventuelles.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Une requ\xEAte HTTP est assez simple. L\u2019\xE9criture est masqu\xE9 par les logiciels clients comme votre navigateur web. Mais il est important de comprendre comment marche le protocole. Pour cel\xE0 nous allons invoquer manuellement un serveur HTTP</p>
</div>
<div class="paragraph">
<p>Lancez une commande telnet en invoquant un serveur web. Je prends dans mon exemple le site web <code><em>dev-mind</em></code> et je pr\xE9cise le port (80 est le port par d\xE9faut d\u2019un serveur web)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450608.012">telnet www.google.fr <span class="hljs-number">80</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450608.012')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>On \xE9crit ensuite la requ\xEAte. Vous devez indiquer plusieurs informations</p>
</div>
<div class="paragraph">
<p>Une premi\xE8re ligne avec
* la m\xE9thode a appel\xE9 (GET, POST, DELETE\u2026),
* La ressource \xE0 charger (dans mon exemple ci dessous c\u2019est / qui pointe vers d\xE9faut vers la page index.html)
* Le protocole utilis\xE9
* Et d\u2019autres lignes avec les diff\xE9rents param\xE8tres plac\xE9s dans le header</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450608.5684">GET / HTTP/<span class="hljs-number">1.1</span>
Host: www.google.fr
Accept-Language: fr</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450608.5684')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Je demande ici de charger la ressource accessible \xE0 la racine du serveur de google. Le serveur HTTP me renvoie en r\xE9ponse la page index.html</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450609.0115">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
Date: Tue, <span class="hljs-number">12</span> Jul <span class="hljs-number">2016</span> <span class="hljs-number">07</span>:<span class="hljs-number">10</span>:<span class="hljs-number">23</span> GMT
Expires: -<span class="hljs-number">1</span>
Cache-Control: <span class="hljs-keyword">private</span>, max-age=<span class="hljs-number">0</span>
Content-Type: text/html; charset=ISO-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span>
P3P: CP=<span class="hljs-string">&quot;This is not a P3P policy! See https://www.google.com/support/accounts/answer/151657?hl=en for more info.&quot;</span>
Server: gws
X-XSS-Protection: <span class="hljs-number">1</span>; mode=block
X-Frame-Options: SAMEORIGIN
Set-Cookie: NID=<span class="hljs-number">81</span>=UHO0sJ4yG6qTdp-5kdQO1YwAJbfrH-YBS0I3XnYdZQXuwXd1kK_Eo7PWlD6y33DVZG-MvuJfsqH7lmj7EOgcdaYXCRWCk-7fmD0bymGa-4qf3ILt8pBJdwNHWADYyn6R; expires=Wed, <span class="hljs-number">11</span>-Jan-<span class="hljs-number">2017</span> <span class="hljs-number">07</span>:<span class="hljs-number">10</span>:<span class="hljs-number">23</span> GMT; path=/; domain=.google.fr; HttpOnly
Accept-Ranges: none
Vary: Accept-Encoding
Transfer-Encoding: chunked

<span class="hljs-meta">@LT</span>!doctype html<span class="hljs-meta">@GT</span><span class="hljs-meta">@LThtml</span> itemscope=<span class="hljs-string">&quot;&quot;</span> itemtype=<span class="hljs-string">&quot;http://schema.org/WebPage&quot;</span> lang=<span class="hljs-string">&quot;fr&quot;</span><span class="hljs-meta">@GT</span><span class="hljs-meta">@LThead</span><span class="hljs-meta">@GT</span><span class="hljs-meta">@LTmeta</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span><span class="hljs-meta">@GT</span><span class="hljs-meta">@LTmeta</span> content=<span class="hljs-string">&quot;/images/branding/googleg/1x/googleg_standard_color_128dp.png&quot;</span> itemprop=<span class="hljs-string">&quot;image&quot;</span><span class="hljs-meta">@GT</span>
<span class="hljs-comment">//\u2026\u2026\u2026..</span>
<span class="hljs-meta">@LT</span>/html<span class="hljs-meta">@GT</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450609.0115')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La premi\xE8re ligne contient le statut de la requ\xEAte : un code et un libell\xE9. Quand tout se passe bien vous obtenez un code 200 et le libell\xE9 OK.</p>
</div>
<div class="paragraph">
<p>Vous avez ensuite plusieurs informations dans le header de cette r\xE9ponse comme le <em>content type</em>, des donn\xE9es d\u2019identification, les informations pour savoir si la ressource peut \xEAtre mise en cache ou non\u2026.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_m\xE9thodes_http_utilisables_dans_les_requ\xEAtes">Les m\xE9thodes HTTP utilisables dans les requ\xEAtes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le protocole HTTP permet d\u2019ex\xE9cuter diff\xE9rents types d\u2019action sur le serveur. Voici les principales m\xE9thodes disponibles.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code><em>GET</em></code> : permet de r\xE9cup\xE9rer une ressource sur le serveur. Suivant l\u2019impl\xE9mentation, le serveur HTTP peut prendre en compte les param\xE8tres plac\xE9s dans l\u2019ent\xEAte de la requ\xEAte (par exemple <code><em>If-Modified-Since:</em></code>, <code><em>If-Unmodified-Since:</em></code>, \u2026)</p>
</li>
<li>
<p><code><em>HEAD</em></code> : identique \xE0 <code><em>GET</em></code> mais ne contient aucun message</p>
</li>
<li>
<p><code><em>PUT</em></code> : permet de mettre \xE0 jour une ressource sur le serveur</p>
</li>
<li>
<p><code><em>POST</em></code> : effectue une action comme une cr\xE9ation ou un envoi de donn\xE9es d\u2019un formulaire HTML</p>
</li>
<li>
<p><code><em>DELETE</em></code> : suprime une ressource</p>
</li>
<li>
<p><code><em>OPTIONS</em></code> : permet de v\xE9rifier si le serveur impl\xE9mente ou accepte diff\xE9rentes actions. Cette m\xE9thode est par exemple utilis\xE9e pour r\xE9gler les probl\xE8mes <code><em>CORS (requ\xEAtes multi origines)</em></code> et faire une preflighted cross-origin request</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_code_http_retourn\xE9s_dans_les_r\xE9ponses">Code HTTP retourn\xE9s dans les r\xE9ponses</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour chacun des appels une r\xE9ponse est retourn\xE9e au client pour lui dire si \xE7a requ\xEAte a pu \xEAre r\xE9alis\xE9e ou non. Cette r\xE9ponse contient un code constitu\xE9 de 3 digits. Il existe de nombreux codes r\xE9partis en 5 cat\xE9gories (le premier permet de d\xE9finir cette cat\xE9gorie)</p>
</div>
<div class="sect2">
<h3 id="_1xx_information">1xx Information</h3>
<div class="paragraph">
<p>Par exemple un code 100 (Continue) est renvoy\xE9 pour indiquer que le client peut continuer \xE0 envoyer sa requ\xEAte</p>
</div>
</div>
<div class="sect2">
<h3 id="_2xx_succ\xE8s">2xx Succ\xE8s</h3>
<div class="paragraph">
<p>Le code le plus courant est 200 (OK). Il est envoy\xE9 lorsqu\u2019une requ\xEAte est ex\xE9cut\xE9e avec succ\xE8s. Vous pouvez parfois avoir un code retour 206 (Partial Content) pour vous indiquer que d\u2019autres paquets seront envoy\xE9s plus tard mais que linformation peut commencer \xE0 \xEAtre affich\xE9e (code utilis\xE9 lors du chargement des images et des vid\xE9os par exemple).</p>
</div>
</div>
<div class="sect2">
<h3 id="_3xx_redirection">3xx Redirection</h3>
<div class="paragraph">
<p>Les codes @GT= 300 permettent d\u2019indiquer que la requ\xEAte \xE9tait valide mais qu\u2019aucune ressource ne sera renvoy\xE9. Un code 301 (Moved Permanently) indique que la ressource a \xE9t\xE9 d\xE9plac\xE9e. Un code 304 (Not Modified)  est renvoy\xE9 quand le client pos\xE8de d\xE9j\xE0 la derni\xE8re version de la ressource.</p>
</div>
</div>
<div class="sect2">
<h3 id="_4xx_erreur_c\xF4t\xE9_client">4xx Erreur c\xF4t\xE9 client</h3>
<div class="paragraph">
<p>Ce code est renvoy\xE9 quand la requ\xEAte envoy\xE9e est invalide 400 (Bad Request), incompl\xE8te, ou que la ressource demand\xE9e n\u2019a pas \xE9t\xE9 trouv\xE9e : 404 (Not Found). Les code 4xx sont aussi utilis\xE9s pour les probl\xE8mes de s\xE9curit\xE9 : 401 (Unauthorized), 403 (Forbidden)</p>
</div>
</div>
<div class="sect2">
<h3 id="_5xx_erreur_c\xF4t\xE9_serveur">5xx Erreur c\xF4t\xE9 serveur</h3>
<div class="paragraph">
<p>Les erreurs c\xF4t\xE9 serveurs renvoient un code en 5xx. Par exemple l\u2019erreur 500 (Internal Server Error) est la plus g\xE9n\xE9rique.</p>
</div>
<div class="paragraph">
<p>Voici un bon moyen mn\xE9motechnique (tir\xE9 d&#8217;une conf\xE9rence de <a href="https://twitter.com/glaforge">Guillaume Laforge</a>) pour vous souvenir des cat\xE9gories</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_05.png" alt="Cde retour HTTP">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_headers_http">Les headers HTTP</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Afin d\u2019affiner les requ\xEAtes et les r\xE9ponses, des param\xE8tres peuvent \xEAtre ajout\xE9 dans l\u2019ent\xEAte des message. Vous pouvez ajouter vos propres donn\xE9es dans ces headers. Le principe est de pouvoir transf\xE9rer des informations entre le client et le serveur.</p>
</div>
<div class="paragraph">
<p>Je pourrai lister tous les ent\xEAtes standards interpr\xE9t\xE9s par les navigateurs mais l\u2019int\xE9r\xEAt est limit\xE9. Vous pouvez trouver la liste sur le site de <a href="http://www.iana.org/assignments/message-headers/message-headers.xhtml">Iana</a> (Internet Assigned Numbers Authority) antenne de l\u2019ICANN.</p>
</div>
<div class="paragraph">
<p>Ce qu\u2019il est int\xE9ressant de savoir c\u2019est qu\u2019il en existe diff\xE9rents pour traiter automatiquement certaines probl\xE9matiques. Le site <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">d\xE9veloppeur web (MDN)</a> de Mozilla propose une classification int\xE9ressante : authentification, cache, CORS\u2026</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_organismes_de_r\xE9gulation">Organismes de r\xE9gulation</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_des_initiatives_locales">Des initiatives locales</h3>
<div class="paragraph">
<p>Je parle de r\xE9gulation car ce terme est dans la bouche de toutes les autorit\xE9s dans le monde. Le web a \xE9t\xE9 cr\xE9\xE9 pour \xEAtre un espace libre mais l\u2019argent et les donn\xE9es personnelles sont de tel enjeux que priv\xE9s et gouvernants font tout pour prendre le contr\xF4le.</p>
</div>
<div class="paragraph">
<p>Heureusement ce n\u2019est pas simple. Mais Internet devient de moins en moins un espace de libert\xE9. Chaque pays mais en place des autorit\xE9s de r\xE9gulation quand il n\u2019y a pas de la censure ou autre m\xE9canisme pour contr\xF4ler les internautes.</p>
</div>
</div>
<div class="sect2">
<h3 id="_le_w3c">Le W3C</h3>
<div class="paragraph">
<p>Apr\xE8s ce petit appart\xE9 je vais parler de l\u2019organisme qui devrait \xEAtre le seul ma\xEEtre \xE0 bord. Il s\u2019agit du <a href="https://www.w3.org/">W3C</a> acronyme de World Wide Web Consortium. Cette association fond\xE9e en 1994 par <a href="https://fr.wikipedia.org/wiki/Tim_Berners-Lee">Tim Berners-Lee</a> a pour leitmotiv : \u201Cun seul web partout et pour tous\u201D.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_04.png" alt="W3C">
</div>
</div>
<div class="paragraph">
<p>Le <a href="https://www.w3.org/">W3C</a> est l\u2019organisme qui s\u2019occupe de la standardisation des technologies utilis\xE9es dans le web : HTML, CSS mais aussi XML, XSL, SVG, PNG\u2026. Le consortium regroupe un peu moins de 400 entreprises et a plusieurs antennes aux Etats Unis en Europe, en Asie\u2026</p>
</div>
<div class="paragraph">
<p>Le <a href="https://www.w3.org/">W3C</a> planche sur des recommandations. Voici par exemple la recommandation d\xE9finissant HTML5  <a href="https://www.w3.org/TR/html5/" class="bare">https://www.w3.org/TR/html5/</a>. Les fabricants peuvent suivre ou non les recommandations et par cons\xE9quent nous pouvons avoir parfois de grosses diff\xE9rences d\u2019impl\xE9mentations.</p>
</div>
<div class="paragraph">
<p>Une recommandation peut passer par les \xE9tats suivants
* Working Draft (WD) (brouillon de travail),
* Last Call Working Draft (dernier appel),
* Candidate Recommendation (CR) (candidat \xE0 la recommandation),
* Proposed Recommendation (PR) (recommandation propos\xE9e),
* W3C Recommendation (REC) (recommandation du W3C)</p>
</div>
</div>
<div class="sect2">
<h3 id="_le_whatwg">Le WHATWG</h3>
<div class="paragraph">
<p><a href="https://whatwg.org/">WHATWG</a> (Web Hypertext Application Technology Working Group) est une communaut\xE9 de personnes dont le but est de faire \xE9voluer le web. Cette fondation a \xE9t\xE9 cr\xE9\xE9e par des m\xE9contents du W3C en 2004. On retrouve la fondation Mozilla, Op\xE9ra, des personnes de chez Apple.</p>
</div>
<div class="paragraph">
<p>Le but est de r\xE9pondre \xE0 la lenteur du W3C sur certains sujets comme HTML, les web workers,&#8230;&#8203; Au final les 2 organisations travaillent ensemble pour faire avancer le web.</p>
</div>
</div>
</div>
</div>`;var Gv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Apr\xE8s avoir parl\xE9 du <a href="https://www.dev-mind.fr/blog/2017/internet.html">r\xE9seau Internet</a>, il est temps de parler des applications utilisant Internet. Au d\xE9but le mail \xE9tait celle qui pr\xE9dominait, mais aujourd\u2019hui c\u2019est sans contexte le World Wide Web (www) plus commun\xE9ment appel\xE9 le web.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_00.png" alt="Internet">
</div>
</div>
<div class="paragraph">
<p>Le web est une application qui permet de consulter une ressource via un logiciel (navigateur internet) et de naviguer vers d\u2019autres ressources en cliquant sur des liens hypertextes. Une ressource peut aussi bien \xEAtre une page, une vid\xE9o, une image\u2026. Les transferts se font via le protocole HTTP.</p>
</div>
<div class="paragraph">
<p>Le maillage des ressources web peut \xEAtre vu comme une immense toile d\u2019araign\xE9e (Spider Web). C\u2019est de l\xE0 qu\u2019est issu le nom World Wide Web (www).</p>
</div>
<div class="paragraph">
<p>Au fur et \xE0 mesure de leurs \xE9volutions, les technologies Web ont permis aux d\xE9veloppeurs de rendre le Web de plus en plus captivant.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cr\xE9ation_du_web">Cr\xE9ation du web</h2>
<div class="sectionbody">
<div class="paragraph">
<p>En 1989 Tim Berners-Lee d\xE9cide de cr\xE9er au CERN (Centre Europ\xE9en de la Recherche sur le Nucl\xE9aire) un syst\xE8me distribu\xE9 au sein du r\xE9seau du centre de recherche pour faciliter l\u2019\xE9change des documents entre les diff\xE9rents collaborateurs. Robert Cailliau rejoint tr\xE8s vite le projet pour aider \xE0 son d\xE9veloppement.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_01.png" alt="Tim Berners-Lee">
</div>
<div class="title">Figure 1. Tim Berners-Lee</div>
</div>
<div class="paragraph">
<p>En 1993 le CERN renonce aux droits d\u2019auteur sur les logiciels \xE9crits pour leur World Wide Web. Ce projet devient alors utilisable par tous. La m\xEAme ann\xE9e un laboratoire am\xE9ricain NCSA, sort</p>
</div>
<div class="ulist">
<ul>
<li>
<p>le premier navigateur nomm\xE9 Mosaic (il servira de sources d\u2019inspiration ensuite \xE0 Netscape Navigator puis plus tard \xE0 Mozilla Firefox).</p>
</li>
<li>
<p>le serveur NCSA HTTPd qui deviendra plus tard le serveur HTTP Apache.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>La r\xE9volution est en marche le web peut devenir le plus grand syst\xE8me d\u2019information.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fonctionnement">Fonctionnement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le web permet de mettre \xE0 disposition diff\xE9rentes ressources (image, pages, video\u2026) qui sont situ\xE9es sur des serveurs distants.</p>
</div>
<div class="paragraph">
<p>Pour acc\xE9der \xE0 ces ressources vous avez besoin</p>
</div>
<div class="ulist">
<ul>
<li>
<p>D\u2019un device connext\xE9 \xE0 Internet  (on parle d\u2019un h\xF4te)</p>
</li>
<li>
<p>D\u2019un logiciel sur ce device qui permet d\u2019afficher les ressources : le navigateur Internet</p>
</li>
<li>
<p>D\u2019un logiciel sur le serveur distant qui permet d\u2019indiquer et d\u2019envoyer les ressources mises \xE0 disposition : le serveur HTTP</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le protocole d\u2019\xE9change se nomme le HTTP (HyperText Transfer Protocole). Nous le verrons en d\xE9tail un peu plus loin.</p>
</div>
<div class="paragraph">
<p>Le nombre de sites Web augmente fortement et il est n\xE9c\xE9ssaire de pouvoir les retrouver rapidement. En 1994 le premier moteur de recherche Yahoo, est mis en ligne. Depuis le nombre de sites web et le nombre d\u2019internautes ne fait que bondir</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_03.png" alt="Nombre site web">
</div>
<div class="title">Figure 2. <a href="http://www.internetlivestats.com/total-number-of-websites/" class="bare">http://www.internetlivestats.com/total-number-of-websites/</a></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_langages">Langages</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les sites web sont \xE9crits avec plusieurs langages qui sont interpr\xE9t\xE9s par un logiciel le navigateur sur le poste client</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_02.png" alt="Les langages du Web">
</div>
<div class="title">Figure 3. Les langages du Web</div>
</div>
<div class="sect2">
<h3 id="_html_hypertext_markup_pour_d\xE9crire_le_contenu">HTML HyperText markup pour d\xE9crire le contenu</h3>
<div class="paragraph">
<p>Le HTML est un langage descriptif permettant de d\xE9crire et d\u2019organiser le contenu de vos pages</p>
</div>
<div class="paragraph">
<p>La premi\xE8re version est sortie en 1993 et tr\xE8s vite le langage a \xE9t\xE9 enrichi de nouvelles balises : 1.2 en 1994, 3 en 1995, 3.2 en 1997 et version 4 en 1998. La version 5 (version actuelle) n\u2019est apparue qu\u2019en 2008</p>
</div>
</div>
<div class="sect2">
<h3 id="_le_javascript_pour_apporter_du_dynamisme">Le JavaScript pour apporter du dynamisme.</h3>
<div class="paragraph">
<p>Il a \xE9t\xE9 mis en place en 1995 par Netscape. En 1996 Microsoft emboite le pas en cr\xE9ant son propre langage le Jscript. Heureusement le langage a \xE9t\xE9 normalis\xE9 pour permettre sa globalisation. Malheureusement la norme n\u2019est pas toujours compl\xE8tement impl\xE9ment\xE9e par les \xE9diteurs des navigateurs Internet et certains ont toujours du retard.</p>
</div>
<div class="paragraph">
<p>Pour savoir si un \xE9l\xE9ment est correctement impl\xE9ment\xE9 dans un navigateur vous pouvez utiliser le site <a href="https://caniuse.com" class="bare">https://caniuse.com</a></p>
</div>
</div>
<div class="sect2">
<h3 id="_le_css_cascading_style_sheet_pour_le_coup_de_pinceau">Le CSS (Cascading Style Sheet) pour le coup de pinceau</h3>
<div class="paragraph">
<p>D\xE8s 1994 CSS est mis en place pour externaliser les aspects graphiques des pages \xE9crites en HTML.</p>
</div>
<div class="paragraph">
<p>Le but est de pouvoir simplifi\xE9 l\u2019\xE9criture de ces pages et de facilit\xE9 la mise en place d\u2019une ergonomie uniforme sur tout votre site.</p>
</div>
<div class="paragraph">
<p>Les versions normalis\xE9es sont sorties en 1996 (CSS 1),  1997 (CSS2), 1998 \xE0 aujourd\u2019hui (CSS3). CSS est tr\xE8s puissant mais le board a du mal \xE0 finaliser une version d\xE9finitive de la sp\xE9cification. Les navigateurs peinent donc dans la mise en oeuvre. Aujourd\u2019hui il existe de grosses disparit\xE9s dans l\u2019impl\xE9mentation.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_moteurs_de_recherche_et_le_dark_web">Les moteurs de recherche et le dark web</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous avons aujourd\u2019hui plus de 1 milliards de site web qui peuvent recenser des dizaines (et parfois beaucoup plus) de liens hypertextes vers d\u2019autres pages ou des ressources statiques (images, documents, vid\xE9os\u2026). Ce site <a href="http://www.internetlivestats.com/" class="bare">http://www.internetlivestats.com/</a> permet de suivre les statistiques.</p>
</div>
<div class="paragraph">
<p>Le web peut \xEAtre repr\xE9sent\xE9 par un graphe orient\xE9 poss\xE9dant des cycles. Pour aider la recherche d\u2019information, des applications web, les moteurs de recherche ont \xE9t\xE9 mises en place afin d\u2019indexer le maximum de pages et de fournir des points d\u2019entr\xE9e sur les ressources Web. Mais il existe de nombreuses pages ou ressources qui sont pr\xE9sentes sur le web et qui restent non index\xE9es (pages s\xE9curis\xE9es, non accessible via les protocoles standard, ressources excluses des robots, pages g\xE9n\xE9r\xE9es par des scripts\u2026).</p>
</div>
<div class="paragraph">
<p>On parle alors de web invisible ou de web profond ou du dark web. Certaines \xE9tudes montre que cette partie invisible repr\xE9sentait plus de 99% du web. C\u2019est pourquoi on retrouve aujourd\u2019hui des soci\xE9t\xE9s sp\xE9cialis\xE9s dans la recherche de ces ressources masqu\xE9es.</p>
</div>
<div class="paragraph">
<p>Mais ce n\u2019est pas le but de ce chapitre. Lorsque l\u2019on est une entreprise notre but est d\u2019appra\xEEtre dans les moteurs de recherche afin que nos potentiels clients puissent nous trouver.</p>
</div>
<div class="paragraph">
<p>Au lancement du premier moteur de recherche en 1996, les pages \xE9taient organis\xE9es comme un annuaire par th\xE8me. Les d\xE9veloppeurs de site devaient soumettre leur site web via un simple formulaire.</p>
</div>
<div class="paragraph">
<p>Aujourd\u2019hui nous pouvons faire des recherches en tapant ou en dictant des mots cl\xE9s. Le d\xE9but du web s\xE9mantique nous permet aussi de poser de v\xE9ritables questions. Les moteurs de recherche commencent \xE9galement \xE0 \xEAtre capable de faire des recherches en fonction des images que vous lui donnez, le texte que vous dictez&#8230;&#8203;.</p>
</div>
<div class="paragraph">
<p>Ces moteurs de recherche nous affichent des ressources qui peuvent \xEAtre des pages, des images, des vid\xE9os, des newsgroup\u2026 Chaque ressource est index\xE9e afin de la retrouver en fonction de mot cl\xE9s.</p>
</div>
<div class="paragraph">
<p>Le classement des r\xE9sultats de recherche est de plus en plus complexe. Initialement am\xE9lior\xE9 pour fournir des r\xE9sutats pertinents aux utilisateurs (v\xE9rification que le site contient bien les mots cl\xE9s, que le site est rapide \xE0 charger, qu\u2019il est s\xE9curis\xE9\u2026.), ce classement est plut\xF4t aujourd\u2019hui domin\xE9 par la publicit\xE9.</p>
</div>
<div class="paragraph">
<p>Les entreprises ach\xE8tent des mots cl\xE9s pour appara\xEEtre en premier.</p>
</div>
<div class="paragraph">
<p>L\u2019indexation des ressources ne se fait plus de mani\xE8re manuelle mais elle est effectu\xE9e par des robots (les bots) qui parcourent les sites \xE0 intervalles r\xE9guliers et qui recensent les liens en fonction des instructions laiss\xE9es par les d\xE9veloppeurs.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_adresses_web">Les adresses web</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Comme nous l\u2019avons vu, le web est constitu\xE9 de diff\xE9rentes ressources que nous avons besoin de retrouver facilement. Un m\xE9canisme d\u2019adressage a donc \xE9t\xE9 mis en place. Ce sont les URL (Uniform Resource Locator).</p>
</div>
<div class="paragraph">
<p>Une URL peut \xEAtre saisi dans un logiciel comme votre navigateur Internet ou dans le code d\u2019une page. Par exemple en HTML</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>@LTa href="mon_url"@GTLien hypertexte@LT/a@GT</code> permet de d\xE9finir un lien vers une autre page</p>
</li>
<li>
<p><code>@LTimg src="mon_url"@GT</code> permet de charger une image</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Lorsque vous voulez acc\xE9der \xE0 une ressource vous pouvez soit utiliser une adresse compl\xE8te (on parlera d\u2019adresse absolue) soit d\u2019une adresse d\xE9finie par rapport \xE0 la ressource courante (on parle d\u2019adresse relative)</p>
</div>
<div class="sect2">
<h3 id="_les_adresses_relatives">Les adresses relatives</h3>
<div class="paragraph">
<p>Quand vous chargez une page dans votre navigateur, les URL d\xE9finies \xE0 l\u2019int\xE9rieur peuvent \xEAtre d\xE9finies de mani\xE8re relatives \xE0 ce document.</p>
</div>
<div class="paragraph">
<p>Par exemple si le document charg\xE9 a cette URL : <code><a href="https://dev-mind.fr/test/mapage.html" class="bare">https://dev-mind.fr/test/mapage.html</a></code></p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>./mapage2.html</code> d\xE9signera la page dans le r\xE9pertoire courant   <code><a href="https://dev-mind.fr/html/test/mapage2.html" class="bare">https://dev-mind.fr/html/test/mapage2.html</a></code></p>
</li>
<li>
<p><code>../mapage2.html</code> d\xE9signera la page  dans le r\xE9pertoire parent  <code><a href="https://dev-mind.fr/html/mapage2.html" class="bare">https://dev-mind.fr/html/mapage2.html</a></code></p>
</li>
<li>
<p><code>/mapage2.html</code> d\xE9signera la page  dans le dossier racine <code><a href="https://dev-mind.fr/mapage2.html" class="bare">https://dev-mind.fr/mapage2.html</a></code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Il est recommand\xE9 de passer par ces adresses relatives dans vos pages afin de simplifier la mise \xE0 jour quand vos URL changent (un cas courant est par exemple le passage d\u2019un site d\u2019un serveur de test \xE0 un serveur de production), et le travail des robots indexers de vos pages qui essayent de contruire une arborescence de votre site web quand il l\u2019analyse.</p>
</div>
</div>
<div class="sect2">
<h3 id="_les_adresses_absolues">Les adresses absolues</h3>
<div class="paragraph">
<p>Une adresse absolue va \xEAtre compos\xE9 de la mni\xE8re suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450656.9006">protocol::<span class="hljs-comment">//user:password@server:port/path/resource?param1=value1&amp;amp;param2=value2</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450656.9006')">Copy</button></pre>
</div>
</div>
<div class="sect3">
<h4 id="_protocol">Protocol</h4>
<div class="paragraph">
<p>Protocol permet de d\xE9finir le protocole de communication utilis\xE9. Le cas le plus courant dans le web est d\u2019utiliser le http ou https (http securis\xE9) mais vous pouvez aussi pointer vers une adresse mail (protocol = mailto), un fichier local (protocol = file), une ressource ftp (protocol = ftp)</p>
</div>
</div>
<div class="sect3">
<h4 id="_user_password">User / password</h4>
<div class="paragraph">
<p>Vous pouvez dans de rare cas passer un identifiant et un mot de passe dans l\u2019URL pour acc\xE9der \xE0 une ressource. Normalement les aspects de s\xE9curit\xE9 sont d\xE9finis d\u2019une mani\xE8re plus efficace \xE0 un autre endroit que dans l\u2019URL.</p>
</div>
<div class="paragraph">
<p>Dans la majorit\xE9 des cas votre URL aura plut\xF4t cette forme :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450657.8452">protocol::<span class="hljs-comment">//server/path/resource?param1=value1&amp;amp;param2=value2</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450657.8452')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_server_port">Server / port</h4>
<div class="paragraph">
<p>Vous devez d\xE9finir l\u2019identifiant de votre serveur. A la base c\u2019est une adresse IP. Mais si vous achetez un nom de domaine vous pourrez utiliser cet alias. Par exemple Dev-Mind poss\xE8de le nom de domaine appel\xE9 dev-mind d\xE9fini dans le domaine de premier niveau .fr</p>
</div>
<div class="paragraph">
<p>Comme nous l\u2019avons vu plus haut il existe plusieurs DNS qui font les corr\xE9lations entre une adresse IP et un nom plus facile \xE0 retenir.</p>
</div>
<div class="paragraph">
<p>Quand vous tapez <code>www.dev-mind.fr</code> le</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>.fr</strong> d\xE9signe le nom de domaine de premier niveau. L\u2019ensemble des noms de domaine de premier niveau sont supervis\xE9s par l\u2019ICANN et la gestion des .fr est d\xE9l\xE9gu\xE9 \xE0 l\u2019AFNIC. Mais quand vous voulez mettre en place un site web, la d\xE9claration est g\xE9n\xE9ralement faite via un prestataire. Par exemple le site web <code>dev-mind</code> est h\xE9b\xE9rg\xE9 sur des serveurs OVH et OVH propose un service pour g\xE9rer les noms de domaine.</p>
</li>
<li>
<p><strong>dev-mind</strong> est le nom de domaine de deuxi\xE8me niveau qui va identifier une marque, un concept&#8230;&#8203;</p>
</li>
<li>
<p><strong>www</strong> est un sous domaine. Quand vous avez un nom de domaine vous pouvez sp\xE9cifier plusieurs sous domaines si vous avez par exemple diff\xE9rents serveurs web.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Pour compl\xE9ter vous pouvez pr\xE9ciser le num\xE9ro de port utilis\xE9 par votre serveur web. Si ce dernier utilise le port par d\xE9faut, le port 80 vous n\u2019\xEAtes pas oblig\xE9 de le pr\xE9ciser.</p>
</div>
</div>
<div class="sect3">
<h4 id="_localisation_de_la_ressource">Localisation de la ressource</h4>
<div class="paragraph">
<p>L\u2019\xE9tape suivante consiste \xE0 indiquer l\u2019emplacement de votre ressource sur le serveur web. Ce dernier d\xE9tient un ensemble de fichier hierarchis\xE9. Vous devez sp\xE9cifier le r\xE9pertoire et le nom.</p>
</div>
<div class="paragraph">
<p>Par exemple <code>img/logo.jpg</code> permet de d\xE9signer l\u2019image <code>logo.jpg</code> dans le r\xE9pertoire <code>img</code></p>
</div>
</div>
<div class="sect3">
<h4 id="_param\xE8tres_optionnels">Param\xE8tres optionnels</h4>
<div class="paragraph">
<p>Vous pouvez passer des param\xE8tres dans l\u2019URL. Comme nous le verrons un peut plus tard il existe diff\xE9rentes actions possibles quand vous utiliser un protocole. Par exemple une action GET via le protocole HTTP acc\xE8pte des param\xE8tres d\xE9finis dans l\u2019URL</p>
</div>
<div class="paragraph">
<p>Quand vous avez un ou plusieurs param\xE8tres vous devez l\u2019indiquer dans l\u2019URL.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>?</strong> permet d\u2019indiquer que vous avez des param\xE8tres</p>
</li>
<li>
<p><strong>&amp;</strong> permet de s\xE9parer la d\xE9finition de plusieurs param\xE8tres</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Quand vous voulez ajouter un param\xE8tre vous d\xE9finissez le nom et la valeur. Par exemple ci dessous j\u2019acc\xE8de \xE0 un service distant \xE0 qui je passe le param\xE8tre name = Mix-IT</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450657.3088">https:<span class="hljs-comment">//www.dev-mind.fr/api/conference?name=Mix-IT</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450657.3088')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_signets">Les signets</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le HTML permet de d\xE9finir des liens vers des ressources externes mais aussi de faire des liens vers une partie du document courant</p>
</div>
<div class="paragraph">
<p>Par exemple si vous avez le code suivant</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450657.6152"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;\u201Dpart1\u201D&quot;</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- code --&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- code --&gt;</span>
</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450657.6152')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>L\u2019URL <code>#part2</code> chargera le document courant et scrollera vers l\u2019\xE9l\xE9ment HTML ayant l\u2019identifiant <code>part2</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_prochain_article">Prochain article</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans le prochain article nous finirons la pr\xE9sentatin du web en parlant tu protocole HTTP et des diff\xE9rents organismes de r\xE9gulation.</p>
</div>
</div>
</div>`;var zv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>On m\xE9lange souvent les termes Web et Internet. Nous allons remonter dans l&#8217;histoire au cours de plusieurs articles et expliquer les diff\xE9rences entre ces deux notions.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_peu_dhistoire_de_linformatique">Un peu d&#8217;histoire de l&#8217;informatique</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les premiers ordinateurs sont apparus pendant la seconde guerre mondiale. Ils \xE9taient initialement utilis\xE9 pour effectuer des calculs simples ou plus compliqu\xE9s comme des op\xE9rations de cryptage / d\xE9cryptage (<a href="https://fr.wikipedia.org/wiki/Colossus_(ordinateur)">Colossus par exemple</a> . Les premiers ordinateurs \xE9taient gigantesques et l\u2019arriv\xE9e du transistor a permis leur miniaturisation et leur lente d\xE9mocratisation.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Les transistors sont des composants \xE9lectroniques actifs qui peuvent jouer plusieurs r\xF4les : interupteur, amplificateur de signal, stabilisateur de tension&#8230;&#8203; Ils ont remplac\xE9s les tubes \xE9lectroniques qui \xE9taient volumineux, fragiles et tr\xE8s consommateurs de courant.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Une fois que la mise en place des ordinateurs individuels a \xE9t\xE9 possible, il restait \xE0 r\xE9soudre les probl\xE8mes de communication entre les ordinateurs (mise en r\xE9seau).</p>
</div>
<div class="paragraph">
<p>En 1958 le premier modem a \xE9t\xE9 cr\xE9\xE9 par les laboratoires Bell et permettait de transporter des donn\xE9es binaires sur un r\xE9seau t\xE9l\xE9phonique.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_premiers_r\xE9seaux">Les premiers r\xE9seaux</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les premi\xE8res initiatives sont apparues fin des ann\xE9e 60, d\xE9but 70 aux Etats Unis mais aussi en Europe en Grande Bretagne et en France.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_00.png" alt="Internet">
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_arpanet">R\xE9seau ARPANET</h3>
<div class="paragraph">
<p>Le premier r\xE9seau, ARPANET est cr\xE9\xE9 par la d\xE9fense am\xE9ricaine \xE0 la fin des ann\xE9es 60. Il avait pour but de relier des sites strat\xE9giques et les universit\xE9s am\xE9ricaines (4 ordinateurs reli\xE9s en 1969 et 23 en 1971). Le d\xE9veloppement d\u2019ARPANET \xE9tait centr\xE9 autour des RFC (Request for comments). ARPANET a aujourd\u2019hui disparu (depuis 1990) mais les RFC sont rest\xE9es.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Une <a href="https://fr.wikipedia.org/wiki/Request_for_comments">RFC</a> est un document technique d\xE9crivant une technique, un composant&#8230;&#8203;  Ces documents sont soumis au groupe de normalisation d\u2019Internet (<a href="https://www.ietf.org/">IETF</a> : Internet Engineering Task Force) et peuvent aboutir \xE0 une standardisation.
Une RFC peut avoir plusieurs status : Proposed Standard, Draft Standard et Internet Standard
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_npl">R\xE9seau NPL</h3>
<div class="paragraph">
<p>A la m\xEAme p\xE9riode en Europe (1970), le <a href="http://www.npl.co.uk/">National Physical Laboratory</a> (Royaume-Uni) a mis en place son propre r\xE9seau bas\xE9 sur la commutation de paquet (packet-switching). Cette initiative est la premi\xE8re impl\xE9mentation de ce mode de transmission de donn\xE9es (en 1976 le r\xE9seau reliait 12 ordinateurs et 75 terminaux)</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_merit">R\xE9seau Merit</h3>
<div class="paragraph">
<p>Au Etats Unis, au Michigan en 1971 nous avons \xE9galement des travaux qui vont dans le m\xEAme sens avec le r\xE9seau MERIT (Michigan Educational Research Information Triad) qui avait pour but de relier les 3 universit\xE9s publiques de l\u2019\xE9tat (but atteint en 1972).</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_cyclades">R\xE9seau Cyclades</h3>
<div class="paragraph">
<p>En France nous pouvons citer les travaux de <a href="https://fr.wikipedia.org/wiki/Louis_Pouzin">Louis Pouzin</a> qui a cr\xE9\xE9 le r\xE9seau Cyclades en 1971. Ce r\xE9seau exp\xE9rimental utilise \xE9galement la commutation de paquet. Le but \xE9tait de trouver des alternatives \xE0 ARPANET et aider la recherche.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_01.jpg" alt="Louis Pouzin">
</div>
<div class="title">Figure 1. Louis Pouzin</div>
</div>
<div class="paragraph">
<p>C\u2019est la premi\xE8re intiative dans l&#8217;histoire o\xF9 les machines sont responsables de la fiabilit\xE9 des donn\xE9es transmises. Les donn\xE9es sont d\xE9coup\xE9es en paquet (datagrammes) et sont ensuite r\xE9concili\xE9es \xE0 l\u2019arriv\xE9e. L\u2019\xE9metteur ne sait pas si le r\xE9cepteur a bien re\xE7u les paquets.</p>
</div>
<div class="paragraph">
<p>Le r\xE9seau s\u2019est heurt\xE9 au monopole des PTT fran\xE7aises, qui ont fait un choix diff\xE9rent et mis\xE9 sur une solution \xE0 commutation de circuit qu\u2019ils trouvaient plus fiable et moins co\xFBteuse. Le projet a \xE9t\xE9 abandonn\xE9 en 1978 mais les concepts ont \xE9t\xE9 repris lors de la mise en place du protocole TCP/IP et de la naissance d\u2019Internet.</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_x25">R\xE9seau X25</h3>
<div class="paragraph">
<p>L\u2019Union internationale des t\xE9l\xE9communications a essay\xE9 de normaliser les \xE9changes r\xE9seaux par commutation de paquets via le r\xE9seau X25. X25 utilise la commutation de paquets mais est construit sur le concept de circuit virtuels \xE9mulant des connexions t\xE9l\xE9phoniques traditionnelles. Les grands op\xE9rateurs de t\xE9l\xE9coms (tous publics \xE0 cette p\xE9riode) ont adopt\xE9 cette norme.</p>
</div>
<div class="paragraph">
<p>La premi\xE8re impl\xE9mentation date de de 1974 au Royaume Uni. En 1978, le British Post Office (UK), Western Union International (USA) et Tymnet (USA) collaborent pour mettre en place le premier r\xE9seau commut\xE9 international (IPSS : International Packet Switched Service).</p>
</div>
<div class="paragraph">
<p>En 1979 CompuServe se base sur ce r\xE9seau pour proposer le premier service de courrier \xE9lectronique.</p>
</div>
<div class="paragraph">
<p>En France France Telecom cr\xE9e une filiale, Transpac sp\xE9cialis\xE9e dans la fourniture d&#8217;acc\xE8s r\xE9seaux pour les entreprises. Transpac est \xE0 l\u2019origine</p>
</div>
<div class="ulist">
<ul>
<li>
<p>du <a href="https://fr.wikipedia.org/wiki/Minitel">Minitel</a> (1980) qui reposait sur le r\xE9seau X25 fran\xE7ais et</p>
</li>
<li>
<p>du r\xE9seau mon\xE9tique <a href="https://fr.wikipedia.org/wiki/%C3%89change_t%C3%A9l%C3%A9matique_banque-clients">ETEBAC</a> (1991).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le principal atout de X25 \xE9tait l&#8217;absence de perte de donn\xE9e, garantie par de multiples contr\xF4les et la gestion automatique de la retransmission des paquets \xE9ventuellement perdus. Ce r\xE9seau a \xE9t\xE9 arr\xEAt\xE9 en France en 2012.</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_usenet">R\xE9seau Usenet</h3>
<div class="paragraph">
<p>En 1979 des \xE9tudiants ont l\u2019id\xE9es de transf\xE9rer des news et des messages via de simple scripts shell en utilisant UUCP (Unix to Unix Copy Protocol).  UUCP permet les \xE9changes de fichiers entre 2 machines et permet aussi d\u2019ex\xE9cuter des commandes sur une machine distante. Les donn\xE9es sont d\u2019abord mis dans une file d\u2019attente et la machine distante les r\xE9cup\xE8re au moment voulu.</p>
</div>
<div class="paragraph">
<p>Les r\xE9seaux UUCP se r\xE9pandirent rapidement, gr\xE2ce \xE0 leur co\xFBt peu \xE9lev\xE9 et leur capacit\xE9 \xE0 utiliser les lignes t\xE9l\xE9phoniques existantes, comme les liens X.25, les connexions ARPANET&#8230;&#8203;</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_unification_des_r\xE9seaux">Unification des r\xE9seaux</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_les_protocoles_tcp_ip">Les protocoles TCP / IP</h3>
<div class="paragraph">
<p>Comme nous venons de le voir il y a eu plusieurs initiatives de mise en place de r\xE9seaux. Mais chacun utilisait sa propre m\xE9thode de communication et ils ne pouvaient pas \xEAtre interconnect\xE9s les uns avec les autres.</p>
</div>
<div class="paragraph">
<p>L&#8217;id\xE9e d\u2019un r\xE9seautage \xE0 architecture ouverte a \xE9t\xE9 introduite en 1972 par <a href="https://fr.wikipedia.org/wiki/Robert_Elliot_Kahn">Robert E. Kahn</a>, peu apr\xE8s son arriv\xE9e \xE0 <a href="https://www.darpa.mil/">DARPA</a> (agence qui est \xE0 l\u2019initiative d\u2019ARPANET).  Le nom de son programme de recherche \xE9tait appel\xE9 \xAB Internetting \xBB (interr\xE9seautage). Il recrute <a href="https://fr.wikipedia.org/wiki/Vint_Cerf">Vinton G. Cerf</a> et ils reprennent ensemble certains concepts mis en place dans le r\xE9seau Cyclades de <a href="https://fr.wikipedia.org/wiki/Louis_Pouzin">Louis Pouzin</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_02.jpg" alt="Robert E. Kahn">
</div>
<div class="title">Figure 2. Robert E. Kahn co-cr\xE9ateur de TCP / IP</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_03.jpg" alt="Vint Cerf">
</div>
<div class="title">Figure 3. Vint Cerf co-cr\xE9ateur de TCP / IP</div>
</div>
<div class="paragraph">
<p>Leur but \xE9tait de r\xE9duire le r\xE9seau physique \xE0 son strict minimum, le transport. Ce sont les machines qui sont responsables de la r\xE9conciliation des messages. Si un morceau du message (paquet) s\u2019est perdu elles redemandent sa retransmission. En 1973 Kahn et Cerf pr\xE9sentent le protocole TCP / IP.</p>
</div>
<div class="paragraph">
<p>Le <strong>protocole TCP</strong> (Transmission Control Protocol) fournit les services de transport et d\u2019acheminement : contr\xF4le de flux et r\xE9cup\xE9ration des paquets perdus.</p>
</div>
<div class="paragraph">
<p>Le <strong>protocole IP</strong> (Internet Protocol) permet l\u2019adressage et la transmission de paquet simple.</p>
</div>
<div class="paragraph">
<p>Le <strong>protocole UDP</strong> (User Datagram Protocol) apparait aussi dans la sp\xE9cification et fournit un acc\xE8s direct aux services de base IP (sans le contr\xF4le de flux ou la r\xE9cup\xE9ration de paquets).</p>
</div>
<div class="paragraph">
<p>Le terme <strong>Internet</strong> d\xE9signe un r\xE9seau bas\xE9 sur les protocoles TCP/IP . Il a \xE9t\xE9 adopt\xE9 dans la premi\xE8re RFC publi\xE9e sur le protocole TCP. Internet a \xE9t\xE9 con\xE7u comme une infrastructure globale permettant de relier tous les r\xE9seaux existant entre eux.</p>
</div>
</div>
<div class="sect2">
<h3 id="_le_d\xE9veloppement_dinternet">Le d\xE9veloppement d\u2019Internet</h3>
<div class="paragraph">
<p>La technologie Ethernet, d\xE9velopp\xE9e en 1973 par <a href="https://www.xerox.com/">Xerox Parc</a> est commercialis\xE9e en 1980. Elle s\u2019est tr\xE8s vite g\xE9n\xE9ralis\xE9e pour cr\xE9er des r\xE9seaux dans les entreprises. Les liaisons transatlantiques sont pass\xE9es en TCP / IP en 1984 et tout ces r\xE9seaux ont pu \xEAtre regroup\xE9s pour former Internet.</p>
</div>
<div class="paragraph">
<p>Le passage de quelques r\xE9seaux \xE0 une multitude de r\xE9seaux entra\xEEna la mise en place de plusieurs concepts.</p>
</div>
<div class="sect3">
<h4 id="_les_classes_de_r\xE9seau">Les classes de R\xE9seau</h4>
<div class="paragraph">
<p>Le nombre d\u2019adresses IP dans sa version acuelle (IPv4) est limit\xE9e \xE0 un peu plus de 4 milliards (stockage sur 32 bits). Pour r\xE9partir au mieux les adresses des classes de r\xE9seaux ont \xE9t\xE9 cr\xE9\xE9es (A, B, C)</p>
</div>
<div class="ulist">
<ul>
<li>
<p>la classe A pour les grands r\xE9seaux \xE0 \xE9chelle nationale,</p>
</li>
<li>
<p>la classe B pour une \xE9chelle r\xE9gionale et</p>
</li>
<li>
<p>la classe C pour les r\xE9seaux locaux.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Comme le nombre d\u2019objet connect\xE9 grandit toujours de mani\xE8re exponentielle, une nouvelle version du protocole (IPv6 ou IPng) va permettre de r\xE9soudre ce probl\xE8me d\u2019adresse tout en am\xE9liorant d\u2019autres points.</p>
</div>
</div>
<div class="sect3">
<h4 id="_les_dns">Les DNS</h4>
<div class="paragraph">
<p>Les adresses IP sont une suite de num\xE9ro difficile \xE0 retenir. Un m\xE9canisme d\u2019alias pour faire correspondre une adresse \xE0 un nom de domaine a \xE9t\xE9 mis en place en 1983, c\u2019est le <strong>DNS</strong> Domain Name System.</p>
</div>
<div class="paragraph">
<p>Les algorithmes de routage ont du aussi \xE9volu\xE9 avec les Exterior Gateway Protocol (EGP) utilis\xE9s pour relier les r\xE9gions entre elles et les Interior Gateway Protocol (IGP)</p>
</div>
<div class="paragraph">
<p>On pourrait \xE9crire beaucoup de choses sur le protocole IP notamment sur la nouvelle impl\xE9mentation. Si vous \xEAtes int\xE9ress\xE9s par le sujet je vous r\xE9oriente vers <a href="http://www.commentcamarche.net/contents/524-le-protocole-ipv6">cet article</a>.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_la_g\xE9n\xE9ralisation_dinternet">La g\xE9n\xE9ralisation d\u2019Internet</h3>
<div class="paragraph">
<p>Le d\xE9veloppement en Europe a \xE9t\xE9 d\u2019abord \xE9t\xE9 ax\xE9 sur X25. En 1984 le <a href="https://home.cern/fr">CERN</a> (Conseil europ\xE9en pour la recherche nucl\xE9aire) tabla pour une utilisation plus \xE9tendue du protocole TCP/IP. Le r\xE9seau europ\xE9en fut reli\xE9 \xE0 Internet en 1989.</p>
</div>
<div class="paragraph">
<p>1989 marque aussi l\u2019entr\xE9e sur Internet de l\u2019Australie et du Japon.</p>
</div>
<div class="paragraph">
<p>En 1991 comme nous le verrons dans un prochain article le World Wide Web fut cr\xE9\xE9 et depuis le nombre de pays se connectant \xE0 Internet n\u2019a \xE9t\xE9 que grandissant.</p>
</div>
<div class="paragraph">
<p>Il est int\xE9ressant de voir la croissance du nombre de machines connect\xE9es \xE0 Internet</p>
</div>
<div class="ulist">
<ul>
<li>
<p>1984 : 1.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>1987 : 10.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>1989 : 100.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>1992 : 1.000.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>1996 : 36.000.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>2000 : 368.000.000 ordinateurs connect\xE9s</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Aujourd\u2019hui nous avons plus de 1,5 milliards d\u2019ordinateurs connect\xE9 et 2 milliards de smartphone</p>
</div>
<div class="paragraph">
<p>La croissance rapide d\u2019Internet est aussi li\xE9e \xE0 l\u2019acc\xE8s libre et gratuit de toutes les sp\xE9cifications (RFC Request for comments). Ces m\xE9mos \xE9taient cens\xE9s \xEAtre une fa\xE7on rapide et informelle de partager des id\xE9es avec d&#8217;autres chercheurs. Une RFC \xE9tait remplac\xE9e par une autre quand elle \xE9tait compl\xE9t\xE9e jusqu\u2019\xE0 l&#8217;obtention d\u2019un consensus. On pouvait ensuite avoir un document de sp\xE9cification. Au fil du temps les RFC sont devenues les documents de r\xE9f\xE9rence.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_r\xE9gulation_internet">R\xE9gulation Internet</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_ietf_internet_engineering_task_force">IETF (Internet Engineering Task Force)</h3>
<div class="paragraph">
<p>Toute la communaut\xE9 derri\xE8re Internet ne souhaitait qu\u2019aucune personne, aucune entreprise ou aucune organisation prennent la main sur le r\xE9seau.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_04.jpg" alt="IETF">
</div>
</div>
<div class="paragraph">
<p>Mais dans un syst\xE8me anarchique c\u2019est difficile de trouver un consensus, de mettre en place des contr\xF4les. L\u2019 <a href="https://www.ietf.org/">IETF</a> a \xE9t\xE9 mise en place en 1986.</p>
</div>
<div class="paragraph">
<p>C\u2019est un groupe informel, ouvert \xE0 toute personne motiv\xE9e. L\u2019IETF (Internet Engineering Task Force) maintient des  groupes de travail r\xE9partis sur une dizaine de domaine. Chaque groupe discute sur des listes de diffusion d\u2019un projet en cours de d\xE9veloppement. Lorsque le consensus est atteint le projet est diffus\xE9 sous forme de RFC.</p>
</div>
<div class="paragraph">
<p>L&#8217;IETF se r\xE9unit 3 fois dans l\u2019ann\xE9e.</p>
</div>
<div class="paragraph">
<p>Chaque domaine est dirig\xE9 par une ou deux personnes. Les directeurs de domaine nomment le ou les directeurs de chaque nouveau groupe de travail.</p>
</div>
</div>
<div class="sect2">
<h3 id="_isoc_internet_society">ISOC (Internet Society)</h3>
<div class="paragraph">
<p><a href="http://www.isoc.fr/">ISOC</a> est une association (droit am\xE9ricain) \xE0 vocation internationale. L\u2019association regroupe 28 000 membres venant de 170 pays, ainsi que plus de 80 organisations et 90 filiales r\xE9parties dans le monde entier.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_05.png" alt="ISOC">
</div>
</div>
<div class="paragraph">
<p>On en retrouve une en France. Cette association a \xE9t\xE9 cr\xE9e en 1992 par les pionniers de l\u2019Internet afin de coordonner son d\xE9veloppement.</p>
</div>
<div class="paragraph">
<p>L\u2019ISOC finance et veille \xE0 la bonne marche de l\u2019IETF via</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://www.iab.org/">Internet Architecture Board</a> (IAB)  :  ce comit\xE9 se charge de l&#8217;orientation \xE0 long terme d&#8217;Internet, et donc des activit\xE9s donn\xE9es \xE0 l\u2019IETF.</p>
</li>
<li>
<p><a href="https://www.ietf.org/iesg/">Internet Engineering Steering Group</a> (IESG)  : ce groupe pilote le processus de normalisation d\u2019une RFC pour que cette derni\xE8re deviennent un standard Internet ou non. Il est constitu\xE9 par des directeurs des groupes de travail de l\u2019IETF</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le financement de l\u2019ISOC provient des organisations membres, et de l\u2019organisme contr\xF4lant le domaine Internet</p>
</div>
</div>
<div class="sect2">
<h3 id="_icann_internet_corporation_for_assigned_names_and_numbers">ICANN (Internet Corporation for Assigned Names and Numbers).</h3>
<div class="paragraph">
<p><a href="https://www.icann.org/fr">ICANN</a> est l\u2019autorit\xE9 de r\xE9gulation d\u2019Internet. C\u2019est une organisation \xE0 droit priv\xE9 \xE0 but non lucratif mais elle est d\xE9cri\xE9e par de nombreuses personnes \xE0 cause de ses liens tr\xE8s \xE9troit avec le gouvernement am\xE9ricain. Elle a \xE9t\xE9 fond\xE9e en 1998 \xE0 la suite d&#8217;une directive du d\xE9partement du commerce am\xE9ricain et elle va rester sous tutelle des Etats Unis jusqu&#8217;\xE0 ce qu&#8217;il remplisse un certain nombre d&#8217;objectifs.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_06.png" alt="ICANN">
</div>
</div>
<div class="paragraph">
<p>Bien \xE9videmment la compl\xE9tude de ces objectifs est toujours ni\xE9e par le gouvernement am\xE9ricain. Face \xE0 la col\xE8re de nombreux pays l\u2019ICANN devait se r\xE9organiser en 2014. Mais finalement au bout de 2 ans l\u2019ICANN a trouv\xE9 son ind\xE9pendance le 1er octobre 2016 mais elle reste soumise aux lois am\xE9ricaines.</p>
</div>
<div class="paragraph">
<p>On peut se demander mais \xE0 quoi sert cet organisme ? Son r\xF4le principal qui lui assure d\u2019ailleurs se revenus est li\xE9 \xE0 la vente des noms de domaine et les adresses IP. C\u2019est eux qui assurent \xE9galement la gestion des serveurs racines du DNS (Domain Name System). Les serveurs racines les noms de domaine de premier niveau .fr, .com\u2026. Elle d\xE9livre ensuite un droit \xE0 des soci\xE9t\xE9s comme VeriSign pour les domaines en .com, l\u2019Afnic pour les domaines .fr\u2026.</p>
</div>
<div class="paragraph">
<p>Le fait que l\u2019ICANN suive le droit am\xE9ricain entra\xEEne que tout arbitrage est fait par le procureur g\xE9n\xE9ral de Californie et en dernier recours par le d\xE9partement du Commerce des Etats Unis. Il \xE9tait donc l\xE9gitime que tous les pays fassent pression pour que cet organisme devienne ind\xE9pendant.</p>
</div>
<div class="paragraph">
<p>Mais il existe des r\xE9seaux alternatifs. Les chinois ont leur propre DNS racine et un .com.cn apparait pour un chinois en .com (d\u2019o\xF9 la facilit\xE9 de la censure&#8230;&#8203;). Un site chinois ne sera accessible que s\u2019il en fait la demande aux autorit\xE9s. Vu le nombre d\u2019internautes chinois (22% et le nombre monte en fl\xEAche) nous avons deux Internet en parall\xE8le.</p>
</div>
<div class="paragraph">
<p>Ces derni\xE8res ann\xE9es l\u2019ICANN s\u2019est ouvert au monde. Les noms de domaine ne sont plus exclusivement en alphabet latin depuis 2009.  Ils peuvent \xEAtre r\xE9dig\xE9 avec des caract\xE8res arabes, chinois, cor\xE9ens, japonais ou cyrilliques.</p>
</div>
<div class="paragraph">
<p>Depuis 2013 vous pouvez utiliser n\u2019importe quel nom de domaine de premier niveau \xE0 condition toutefois de d\xE9bourser 185.000 \u20AC au d\xE9part et 25.000\u20AC ensuite par an.</p>
</div>
</div>
</div>
</div>`;var Bv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Quand je suis devenu ind\xE9pendant, ma volont\xE9 \xE9tait de travailler pour des clients bien \xE9videmment mais aussi d&#8217;avoir plus de temps \xE0 accorder aux autres et \xE0 la veille technique. C&#8217;est de cette mani\xE8re que j&#8217;ai pu</p>
</div>
<div class="ulist">
<ul>
<li>
<p>rejoindre l&#8217;\xE9quipe <a href="https://mixitconf.org/">MiXiT</a></p>
</li>
<li>
<p>trouver le temps d&#8217;intervenir dans des <a href="https://www.dev-mind.fr/experience.html#conferences">conf\xE9rences</a></p>
</li>
<li>
<p>d\xE9gager du temps pour travailler sur des projets OpenSource ou des projets associatifs.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>C&#8217;est sur ce dernier point que je vais \xE9crire aujourd&#8217;hui. Je viens de finir la refonte du site web d&#8217;une association qui se nomme <em>Solidarit\xE9 Wassadou Pont-Trambouze</em> et qui intervient pour aider les enfants d&#8217;un petit village du S\xE9n\xE9gal nomm\xE9 Wassadou. Le but principal est de les aider \xE0 avoir une \xE9ducation d\xE9cente afin qu&#8217;ils soient ma\xEEtre de leur destin et qu&#8217;ils puissent \xE0 leur tour aider les gens du village.</p>
</div>
<div class="paragraph">
<p>L&#8217;adresse du site web est <a href="https://solidarite-wassadou.fr" class="bare">https://solidarite-wassadou.fr</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_micropaiement_pour_les_associations">Micropaiement pour les associations</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le don par SMS a \xE9t\xE9 inscrit \xE0 la <a href="https://www.economie.gouv.fr/republique-numerique">loi pour une R\xE9publique num\xE9rique</a> (promulgu\xE9e le 7 octobre 2016). Cette loi qui l\xE9galise le don par SMS aux associations, part d&#8217;un constat \xE9vident. En France les petites associations ont du mal \xE0 r\xE9colter des fonds pour soutenir leurs actions. Mais dans la pratique cette loi n&#8217;est pas pour les petites associations et est plut\xF4t destin\xE9e aux tr\xE8s grosses. La mise en oeuvre a \xE9t\xE9 confi\xE9e aux op\xE9rateurs Bouygues, Orange et SFR regroup\xE9s au sein de l&#8217;association AFMM (Association fran\xE7aise du multim\xE9dia mobile). Leur proposition semble int\xE9ressante sur le papier</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/site_wassadou_02.png" alt="Don par SMS">
</div>
</div>
<div class="paragraph">
<p>Vous pouvez formuler une demande sur le site de <a href="http://www.afmm.fr/don-par-sms/">l&#8217;AFMM</a>. Mais pour que votre demande soit accept\xE9e vous devez monter un dossier avec 700\u20AC de frais et payer la somme de 300\u20AC par an. Pour une petite association ces co\xFBts sont exhorbitants.</p>
</div>
<div class="paragraph">
<p>Il existe d&#8217;autres solutions. Vous pouvez utiliser des solutions de micropaiement classiques mais l\xE0 encore les op\xE9rateurs prennent 40 \xE0 50% de commission sur la somme totale. Avec ces solutions il me semble qu&#8217;on ne parle plus de don en faveur d&#8217;une association mais d&#8217;un d\xE9tournement d&#8217;un syst\xE8me pour engraisser des soci\xE9t\xE9s priv\xE9es. Paypal peut \xEAtre une solution alternative. Les commissions sont de 8% pour un don de 5 euros et 6% pour 10 euros. Mais tout le monde ne poss\xE8de pas de comptes Paypal.</p>
</div>
<div class="paragraph">
<p><em>Solidarit\xE9 Wassadou Pont-Trambouze</em> n&#8217;est compos\xE9e que de b\xE9n\xE9voles et 100% des sommes r\xE9colt\xE9es sont attribu\xE9es au village de Wassadou. Il \xE9tait hors de question d&#8217;avoir des int\xE9rm\xE9diaires sur les dons. Le salut est venu du site <a href="https://www.helloasso.com" class="bare">https://www.helloasso.com</a>. Ce site a \xE9t\xE9 pens\xE9 pour \xEAtre une bo\xEEte \xE0 outils pour des associations. Vous pouvez g\xE9rer les dons en ligne, les adh\xE9sions, vos billeteries pour vos \xE9v\xE9nements&#8230;&#8203; et le tout sans aucun frais. Apr\xE8s il faut bien \xE9videmment que les frais de d\xE9veloppement et d&#8217;h\xE9bergement soient pris en charge. Mais en fait ce sont les donateurs qui peuvent choisir de participer ou non \xE0 ces frais. Vous voulez tester ? Vous pouvez voir la page de don de l&#8217;association <em>Solidarit\xE9 Wassadou Pont-Trambouze</em> : <a href="https://www.donnerenligne.fr/solidarite-wassadou-pont-trambouze/faire-un-don" class="bare">https://www.donnerenligne.fr/solidarite-wassadou-pont-trambouze/faire-un-don</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_web_design">Web design</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quand on fait un site le choix des couleurs est tr\xE8s important car ces couleurs vont donner le ton de ce site et elles jouent sur l&#8217;inconscient des visiteurs. Je ne vais pas faire un article sur la th\xE9orie des couleurs car vous trouverez des ressources bien plus int\xE9ressantes que les miennes sur le web. Mais si vous vous interrogez sur les couleurs utilis\xE9es, voici mes choix</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Orange</strong> est une d\xE9clinaison du jaune et du rouge et peut repr\xE9senter la chaleur du ciel africain mais aussi la bienveillance v\xE9hicul\xE9e par les activit\xE9s de l\u2019association. Cette couleur a \xE9t\xE9 choisie pour le menu</p>
</li>
<li>
<p><strong>Jaune</strong>  repr\xE9sente le soleil et il amplifie la chaleur du orange. Le but est de repr\xE9senter les couchers et levers de soleil et d\xE9gager de l\u2019\xE9nergie positive. Cette couleur est la couleur principale du site. Celle qui est utilis\xE9e pour pr\xE9senter l\u2019association et les diff\xE9rents articles</p>
</li>
<li>
<p><strong>Marron</strong> l\u2019Afrique est pour moi indissociable de cette couleur. Cette couleur repr\xE9sente la terre, les constructions, les personnes\u2026  J\u2019ai utilis\xE9 cette couleur pour parler du village de Wassadou</p>
</li>
<li>
<p><strong>Vert</strong> car l\u2019Afrique n\u2019est pas que d\xE9sert et regorge de vie et de v\xE9g\xE9tation. Le vert est une couleur froide qui repr\xE9sente ces notions. L\u2019effet est plus doux que les couleurs pr\xE9c\xE9dentes et je l\u2019ai utilis\xE9 pour la partie dons</p>
</li>
<li>
<p><strong>Rouge</strong> repr\xE9sente parfois la terre mais \xE9galement le sang et les guerres. Je trouvais important de repr\xE9senter du rouge et je l\u2019ai utilis\xE9 pour repr\xE9senter le symbole de la terre, les racines. C\u2019est la couleur utilis\xE9e pour la partie contact</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Avoir une id\xE9e des couleurs \xE0 utiliser est une chose. Choisir une couleur en particulier dans la gamme disponible est autre chose. C&#8217;est l\xE0 que vous pouvez utiliser des sites proposant des palettes de couleur. Personnelement j&#8217;utilise beaucoup <a href="https://material.io/guidelines/style/color.html" class="bare">https://material.io/guidelines/style/color.html</a>. Il en existe d&#8217;autres comme <a href="http://www.colourlovers.com/" class="bare">http://www.colourlovers.com/</a> ou <a href="http://paletton.com" class="bare">http://paletton.com</a></p>
</div>
<div class="paragraph">
<p>Par rapport \xE0 ces couleurs j&#8217;ai pu retravailler le logo de l&#8217;association</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/site_wassadou_01.png" alt="Solidarit\xE9 Wassadou Pont-Trambouze" width="400px">
</div>
</div>
<div class="paragraph">
<p>Pour aider \xE0 embarquer les visiteurs dans mon d\xE9lire, j&#8217;ai \xE9galement essay\xE9 d&#8217;utiliser des transitions qui permettent d&#8217;\xEAtre un peu plus concret que des couleurs :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>utilisation de cases pour imager la section de pr\xE9sentation du village,</p>
</li>
<li>
<p>des baobabs pour la partie donation (c&#8217;est en plantant des graines qu&#8217;on arrive \xE0 construire quelque chose),</p>
</li>
<li>
<p>des racines de baobabs pour la partie contact&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le but de cet article \xE9tait surtout de revenir sur les diff\xE9rents moyens pour financer en ligne une association mais il m&#8217;aura aussi permis de vous parler de l&#8217;association Solidarit\xE9 Wassadou Pont-Trambouze et de ses activit\xE9s.</p>
</div>
</div>
</div>`;var Uv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Apr\xE8s avoir pr\xE9senter ce qu&#8217;<a href="https://www.dev-mind.fr/blog/2017/service_worker.html">\xE9tait un service worker</a> et comment <a href="https://www.dev-mind.fr/blog/2017/creer_service_worker.html">en ajouter un dans votre application</a>, nous allons aujourd&#8217;hui nous attarder sur la nouvelle toolbox <a href="https://workboxjs.org/">Workbox</a> pr\xE9sent\xE9e \xE0 Google IO/2017.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pourquoi_un_nouveau_projet">Pourquoi un nouveau projet ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>On peut se poser la question de pourquoi Google met en place un nouveau projet alors que des solutions comme <a href="https://github.com/GoogleChrome/sw-precache">sw-precache</a> et <a href="https://github.com/GoogleChrome/sw-toolbox">sw-toolbox</a> existent (voir <a href="https://www.dev-mind.fr/blog/2017/creer_service_worker.html">mon dernier article</a> sur le sujet). En fait il y a eu pas mal de modifications dans le code depuis la mise en place de ces solutions et <a href="https://github.com/GoogleChrome/sw-toolbox">sw-toolbox</a> n&#8217;adresse pour le moment qu&#8217;une partie de ce que vous pouvez faire avec des services workers (exclusivement du cache de ressources). Comme beaucoup de personnes utilisent d\xE9j\xE0 ces projets il \xE9tait difficile de faire de gros changements sans mettre en p\xE9ril la compatibilit\xE9 ascendante.</p>
</div>
<div class="paragraph">
<p><a href="https://workboxjs.org/">Workbox</a> a \xE9t\xE9 pens\xE9 de mani\xE8re modulaire pour \xE9viter ces probl\xE8mes \xE0 l&#8217;avenir. Vous pouvez choisir de n&#8217;utiliser que les \xE9l\xE9ments dont vous avez besoin. Quand vous voulez cr\xE9er des sites performants, il est important de n&#8217;embarquer que les ressources vraiment n\xE9c\xE9ssaires pour limiter un maximum la taille de votre site.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/workbox_00.png" alt="Workbox" width="70%">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_quest_ce_que_workbox">Qu&#8217;est ce que Workbox ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le but de <a href="https://workboxjs.org/">Workbox</a> est de vous fournir un maximum d&#8217;outils pour transformer votre application en <a href="https://www.dev-mind.fr/blog/2017/service_worker.html">progressive webapp</a>. <a href="https://workboxjs.org/">Workbox</a> se base sur diff\xE9rentes API JavaScript</p>
</div>
<div class="ulist">
<ul>
<li>
<p>les services workers <a href="https://developer.mozilla.org/fr/docs/Web/API/Service_Worker_API">api</a> / <a href="https://caniuse.com/#search=service%20worker">caniuse</a></p>
</li>
<li>
<p>Broadcast Channel <a href="https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API">api</a> / <a href="https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API#Browser_compatibility">caniuse</a></p>
</li>
<li>
<p>Background Sync <a href="https://developers.google.com/web/updates/2015/12/background-sync">api</a> / <a href="https://github.com/WICG/BackgroundSync">caniuse</a></p>
</li>
<li>
<p>..</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Bien \xE9videmment toutes ces API ne sont pas encore disponibles sous tous les navaigateurs. <a href="https://workboxjs.org/">Workbox</a> vous aide \xE0 g\xE9n\xE9rer les fichiers de configuration et met \xE0 disposition diff\xE9rents sc\xE9narios \xE9prouv\xE9s.</p>
</div>
<div class="paragraph">
<p>Utiliser les services workers est assez sensible au niveau s\xE9curit\xE9 et au niveau de la gestion du cache des ressources. Il est \xE0 mon sens important d&#8217;utiliser une librairie externe qui \xE9volue sans cesse et o\xF9 les bug fix sont r\xE9solus rapidement.</p>
</div>
<div class="paragraph">
<p>Comme je le disais plus haut <a href="https://workboxjs.org/">Workbox</a> a vraiment \xE9t\xE9 pens\xE9 de mani\xE8re modulaire. C&#8217;est un peu comme un magasin dans lequel vous allez pouvoir faire votre march\xE9, parmi plusieurs librairies ou outils faiblement coupl\xE9s les uns avec les autres.</p>
</div>
<div class="sect2">
<h3 id="_outils_de_g\xE9n\xE9rations">Outils de g\xE9n\xE9rations</h3>
<div class="paragraph">
<p>Avant de voir en d\xE9tail les modules bas niveau nous allons regarder comment utiliser ceux de plus haut niveau. <a href="https://workboxjs.org/">Workbox</a> a \xE9t\xE9 cr\xE9\xE9 pour vous faciliter la configuration et peut facilement s&#8217;int\xE9grer dans le build de votre application. Il existe diff\xE9rents clients</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Client pour webpack : <a href="https://workboxjs.org/get-started/webpack.html">workbox-webpack-plugin</a></p>
</li>
<li>
<p>Client pour npm : <a href="https://workboxjs.org/get-started/npm-script.html">workbox-cli</a></p>
</li>
<li>
<p>Client pour Gulp : <a href="https://workboxjs.org/get-started/gulp.html">workbox-build</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Il est int\xE9ressant de noter qu&#8217;il n&#8217;y a pas de client direct pour le moment pour <a href="https://gruntjs.com/">Grunt</a>.</p>
</div>
<div class="paragraph">
<p>Vous pouvez directement cr\xE9er votre fichier service worker en vous basant sur <a href="https://workboxjs.org/reference-docs/latest/module-workbox-sw.html">workbox-sw</a> mais il est plut\xF4t fortement recommand\xE9 de g\xE9n\xE9rer votre service worker avec les clients \xE9voqu\xE9s ci dessus. Voici un exemple de script Gulp pour g\xE9n\xE9rer la configuration</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450670.6914">gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;bundle-sw&#x27;</span>, <span class="hljs-function">() =&gt;</span> {

  <span class="hljs-keyword">return</span> wbBuild.<span class="hljs-title function_">generateSW</span>({
    <span class="hljs-attr">cacheId</span>: <span class="hljs-string">&#x27;dev-mind&#x27;</span>,
    <span class="hljs-attr">globDirectory</span>: <span class="hljs-string">&#x27;./build/dist&#x27;</span>,
    <span class="hljs-attr">swDest</span>: <span class="hljs-string">&#x27;build/.tmp/sw.js&#x27;</span>,
    <span class="hljs-attr">staticFileGlobs</span>: [<span class="hljs-string">&#x27;**/*.{js,html,css,png,jpg,json,gif,svg,webp,eot,ttf,woff,woff2,gz}&#x27;</span>]
    <span class="hljs-attr">clientsClaim</span>: <span class="hljs-literal">true</span>
  })
    .<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Service worker generated.&#x27;</span>);
    })
    .<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;[ERROR] This happened: &#x27;</span> + err);
    });
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450670.6914')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si vous ouvrez ce fichier vous allez voir quelque chose de similaire \xE0</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450671.0088">importScripts(<span class="hljs-string">&#x27;workbox-sw.prod.v1.0.1.js&#x27;</span>);

<span class="hljs-keyword">const</span> fileManifest = [
  {
    <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;/404.html&quot;</span>,
    <span class="hljs-string">&quot;revision&quot;</span>: <span class="hljs-string">&quot;529851a7efdb7576b4568154f84f87dd&quot;</span>
  },
  <span class="hljs-comment">// ...</span>
];

<span class="hljs-keyword">const</span> workboxSW = <span class="hljs-keyword">new</span> self.<span class="hljs-title class_">WorkboxSW</span>({
  <span class="hljs-string">&quot;cacheId&quot;</span>: <span class="hljs-string">&quot;dev-mind&quot;</span>,
  <span class="hljs-string">&quot;clientsClaim&quot;</span>: <span class="hljs-literal">true</span>
});
workboxSW.<span class="hljs-title function_">precache</span>(fileManifest);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450671.0088')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez consulter les <a href="https://github.com/Dev-Mind/dev-mind.com">sources</a> de mon site web pour voir un exemple complet d&#8217;utilisation. Nous allons maintenant nous attarder sur les modules bas niveau si vous voulez passer outre la g\xE9n\xE9ration automatique</p>
</div>
</div>
<div class="sect2">
<h3 id="_le_cache_de_ressources">Le cache de ressources</h3>
<div class="paragraph">
<p>Si vous utilisiez <a href="https://github.com/GoogleChrome/sw-precache">sw-precache</a>  et <a href="https://github.com/GoogleChrome/sw-toolbox">sw-toolbox</a> nous allons tout d&#8217;abord regarder les modules qui reproduisent le comportement de ces librairies.</p>
</div>
<div class="sect3">
<h4 id="_workbox_build"><a href="https://workboxjs.org/reference-docs/latest/module-workbox-build.html">workbox-build</a></h4>
<div class="paragraph">
<p>Ce module node s&#8217;int\xE8gre facilement \xE0 votre processus de build Gulp ou Webpack ou autre&#8230;&#8203; Il permet de g\xE9n\xE9rer votre fichier service worker ou un fichier manifest.</p>
</div>
<div class="paragraph">
<p>Le but est de g\xE9n\xE9rer la liste des ressources qui peuvent \xEAtre "pr\xE9cach\xE9es" par un service worker. Un hash est associ\xE9 \xE0 chacune des ressources afin de pouvoir mettre \xE0 jour intelligemment le cache et supprimer les ressources qui ne seraient plus \xE0 jour. Cette librairie permet soit de</p>
</div>
<div class="ulist">
<ul>
<li>
<p>g\xE9n\xE9rer un service worker avec la liste des ressources \xE0 mettre dans le cache</p>
</li>
<li>
<p>g\xE9n\xE9rer un fichier manifest pour ensuite l&#8217;injecter dans votre application pour pouvoir acc\xE9der aux URL et au d\xE9tail des modificatons des ressources</p>
</li>
<li>
<p>injecter un fichier manifest dans un service worker existant. Vous controlez l&#8217;\xE9criture de votre service worker tout en b\xE9n\xE9ficiant du pr\xE9caching automatique</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_workbox_routing"><a href="https://workboxjs.org/reference-docs/latest/module-workbox-routing.html">workbox-routing</a></h4>
<div class="paragraph">
<p>Le service worker est \xE0 l&#8217;\xE9coute des requ\xEAtes sortantes (fetch event). Nous avons besoin de d\xE9finir des comportements diff\xE9rents selon les requ\xEAtes. Ce module permet d&#8217;appliquer diff\xE9rentes strat\xE9gies sur des sous ensembles de requ\xEAtes. Nous d\xE9finissons des routes.</p>
</div>
<div class="paragraph">
<p>Une route met en relation</p>
</div>
<div class="ulist">
<ul>
<li>
<p>un matcher : \xE9l\xE9ment permettant de d\xE9finir un sous ensemble de requ\xEAtes.</p>
</li>
<li>
<p>un handler : d\xE9finissant la strat\xE9gie \xE0 appliquer \xE0 la r\xE9ponse</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Il existe diff\xE9rents types de routes qui vont vous permettre d&#8217;utiliser des matchers diff\xE9rents</p>
</div>
<div class="paragraph">
<p>La communaut\xE9 JS aime beaucoup ExpressJS et notamment la mani\xE8re de d\xE9finir des URL. <a href="https://workboxjs.org/reference-docs/latest/module-workbox-routing.ExpressRoute.html#main">ExpressRoute</a> a \xE9t\xE9 cr\xE9\xE9 dans ce sens. Une autre mani\xE8re de d\xE9finir des routes est d&#8217;utiliser des expressions r\xE9guli\xE8res. Vous pouvez utiliser dans ce cas une route de type <a href="https://workboxjs.org/reference-docs/latest/module-workbox-routing.RegExpRoute.html">RegExpRoute</a>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450673.2346"> <span class="hljs-keyword">const</span> assetRoute = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExpRoute</span>({
   <span class="hljs-attr">regExp</span>: <span class="hljs-regexp">/assets/</span>,
   <span class="hljs-attr">handler</span>: <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>(),
 });
 <span class="hljs-keyword">const</span> imageRoute = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExpRoute</span>({
   <span class="hljs-attr">regExp</span>: <span class="hljs-regexp">/images/</span>,
   <span class="hljs-attr">handler</span>: <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">CacheFirst</span>(),
 });
 <span class="hljs-keyword">const</span> expressRoute = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">routing</span>.<span class="hljs-title class_">ExpressRoute</span>({
  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;https://example.com/path/to/:file&#x27;</span>
 });

 <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">routing</span>.<span class="hljs-title class_">Router</span>();
 router.<span class="hljs-title function_">registerRoutes</span>({<span class="hljs-attr">routes</span>: [assetRoute, imageRoute, expressRoute]});
 router.<span class="hljs-title function_">setDefaultHandler</span>({
   <span class="hljs-attr">handler</span>: <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">NetworkFirst</span>(),
 });</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450673.2346')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans l&#8217;exemple ci dessus vous pourriez impl\xE9menter vos propres handlers mais il est pr\xE9f\xE9rable d&#8217;utiliser les handlers Workbox. Nous allons d&#8217;ailleurs regarder d\xE8s maintenant le module les mettant \xE0 disposition.</p>
</div>
</div>
<div class="sect3">
<h4 id="_workbox_runtime_caching"><a href="https://workboxjs.org/reference-docs/latest/module-workbox-runtime-caching.html">workbox-runtime-caching</a></h4>
<div class="paragraph">
<p>Cette librairie impl\xE9mente les diff\xE9rentes strat\xE9gies de cache. Comme je vous l&#8217;avais indiqu\xE9 dans l&#8217;article pr\xE9c\xE9dent vous pouvez lire le <a href="https://jakearchibald.com/2014/offline-cookbook/">offline cookbook</a> de <a href="https://twitter.com/jaffathecake">Jake Archibald</a> qui d\xE9crit ces diff\xE9rentes strat\xE9gies.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>networkFirst</em> : essaye de lancer la requ\xEAte en mode connect\xE9. Si le r\xE9seau r\xE9pond la r\xE9ponse est stock\xE9e dans le cache et servie. Si la r\xE9ponse d\xE9passe un timeout d\xE9fini ou si le r\xE9seau est inaccessible le SW retourne la ressource si elle est pr\xE9sente dans le cache. Cette strat\xE9gie est int\xE9ressante quand vous voulez afficher les donn\xE9es les plus r\xE9centes.</p>
</li>
<li>
<p><em>cacheFirst</em> : si la ressource est dans le cache elle est directment renvoy\xE9e. Sinon on charge la ressource. Cette strat\xE9gie est utilis\xE9e pour des \xE9l\xE9ments qui ne changent pas (sinon vous devez mettre en place une strat\xE9gie pour mettre \xE0 jour ces ressources quand elles changent).</p>
</li>
<li>
<p><em>cacheOnly</em> : on ne regarde que dans le cache. Si la ressource n&#8217;est pas l\xE0 nous avons une erreur. Int\xE9ressant sur mobile par exemple pour pr\xE9server la batterie quand elle commence \xE0 faiblir.</p>
</li>
<li>
<p><em>networkOnly</em> : inverse on interroge toujours le r\xE9seau. Cette strat\xE9gie est un peu inutile vu qu&#8217;il se passe la m\xEAme chose si vous n&#8217;utilisez pas de services workers</p>
</li>
<li>
<p><em>staleWhileRevalidate</em> : on lance 2 requ\xEAtes en parall\xE8le (une dans le cache une sur le r\xE9seau). La version en cache \xE9tant plus rapide \xE0 r\xE9pondre, elle est affich\xE9e. Mais cette version sera remplac\xE9e par le r\xE9sultat de la requ\xEAte lanc\xE9e sur le r\xE9seau (si cette derni\xE8re s&#8217;est bien pass\xE9e).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Vous pouvez voir des exemples de d\xE9claration dans le paragraphe pr\xE9c\xE9dent</p>
</div>
</div>
<div class="sect3">
<h4 id="_workbox_cache_expiration"><a href="https://workboxjs.org/reference-docs/latest/module-workbox-cache-expiration.html#workbox-cache-expiration">workbox-cache-expiration</a></h4>
<div class="paragraph">
<p>Quand vous utilisez des services workers ou plus g\xE9n\xE9ralement du cache de ressources dans le navigateur web vous avez toujours la hantise que votre cache soit mal configur\xE9 et que les ressources ne soient jamais mise \xE0 jour.</p>
</div>
<div class="paragraph">
<p>Gr\xE2ce \xE0 cette librairie vous pouvez</p>
</div>
<div class="ulist">
<ul>
<li>
<p>limiter la taille du cache en limitant le nombre de requ\xEAtes pouvant \xEAtre "cach\xE9e"</p>
</li>
<li>
<p>d\xE9finir une date d&#8217;expiration</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450674.4604"><span class="hljs-keyword">const</span> requestWrapper = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">RequestWrapper</span>({
  <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;runtime-cache&#x27;</span>,
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-comment">// The cache size will be capped at 10 entries.</span>
    <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">cacheExpiration</span>.<span class="hljs-title class_">Plugin</span>({<span class="hljs-attr">maxEntries</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">10</span>})
  ]
});

<span class="hljs-comment">// ce &#x27;RequestWrapper&#x27; peut \xEAtre ajout\xE9 au cache handler d&#x27;une route</span>
<span class="hljs-keyword">const</span> route = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">routing</span>.<span class="hljs-title class_">RegExpRoute</span>({
  <span class="hljs-attr">match</span>: <span class="hljs-function">(<span class="hljs-params">{url}</span>) =&gt;</span> url.<span class="hljs-property">domain</span> === <span class="hljs-string">&#x27;dev-mind.fr&#x27;</span>,
  <span class="hljs-attr">handler</span>: <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>({requestWrapper})
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450674.4604')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_aller_plus_loin">Aller plus loin</h3>
<div class="paragraph">
<p><a href="https://workboxjs.org/">Workbox</a> a l&#8217;ambition d&#8217;apporter plus que du cache de ressources.</p>
</div>
<div class="sect3">
<h4 id="_workbox_background_sync"><a href="https://workboxjs.org/reference-docs/latest/module-workbox-background-sync.html">workbox-background-sync</a></h4>
<div class="paragraph">
<p>Les services workers vous permettent de servir votre site web si le r\xE9seau est d\xE9faillant ou absent. Si un utilisateur lance une action et que le r\xE9seau n&#8217;est pas accessible cette derni\xE8re est perdue. Cette librairie va vous aider \xE0 empiler les demandes dans une queue et ces demandes seront ex\xE9cut\xE9es quand le r\xE9seau sera \xE0 nouveau disponible (cette librairie se base sur l&#8217;API JavaScript Background Sync).</p>
</div>
<div class="paragraph">
<p>Le principe est d&#8217;instancier une <a href="https://workboxjs.org/reference-docs/latest/module-workbox-background-sync.QueuePlugin.html">QueuePlugin</a> et de la passer au RequestWrapper</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450676.3494"><span class="hljs-keyword">let</span> bgQueue = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">backgroundSync</span>.<span class="hljs-title class_">QueuePlugin</span>({
  <span class="hljs-attr">callbacks</span>: {
    <span class="hljs-attr">onResponse</span>: <span class="hljs-title function_">async</span>(hash, res) =&gt; {
      <span class="hljs-comment">// une notification sera affich\xE9e quand tout est OK</span>
      self.<span class="hljs-property">registration</span>.<span class="hljs-title function_">showNotification</span>(<span class="hljs-string">&#x27;Background sync demo&#x27;</span>, {
        <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;Product has been purchased.&#x27;</span>,
        <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;/images/shop-icon-384.png&#x27;</span>,
       });
    },
    <span class="hljs-attr">onRetryFailure</span>: <span class="hljs-function">(<span class="hljs-params">hash</span>) =&gt;</span> {},
  },
});

<span class="hljs-keyword">const</span> requestWrapper = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">RequestWrapper</span>({
  <span class="hljs-attr">plugins</span>: [bgQueue],
});

<span class="hljs-keyword">const</span> route = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">routing</span>.<span class="hljs-title class_">RegExpRoute</span>({
  <span class="hljs-attr">regExp</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;^https://jsonplaceholder.typicode.com&#x27;</span>),
  <span class="hljs-attr">handler</span>: <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">NetworkOnly</span>({requestWrapper}),
});

<span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">routing</span>.<span class="hljs-title class_">Router</span>();
router.<span class="hljs-title function_">registerRoute</span>({route});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450676.3494')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_workbox_cacheable_response"><a href="https://workboxjs.org/reference-docs/latest/module-workbox-cacheable-response.html">workbox-cacheable-response</a></h4>
<div class="paragraph">
<p>Cette librairie vous permet de param\xE9trer finement quels objets doivent \xEAtre mis en cache ou non. Pour cel\xE0 vous pouvez intercepter le statut de la r\xE9ponse ou les ent\xEAtes de cette r\xE9ponse.</p>
</div>
<div class="paragraph">
<p>Un petit exemple dans lequel nous ne voulons mettre en cache que les r\xE9ponses avec le statut 0 ou 200</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450677.9937"><span class="hljs-keyword">const</span> cacheablePlugin = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">cacheableResponse</span>.<span class="hljs-title class_">Plugin</span>({
  <span class="hljs-attr">statuses</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">200</span>]
});

<span class="hljs-keyword">const</span> requestWrapper = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">RequestWrapper</span>({
  <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;runtime-cache&#x27;</span>,
  <span class="hljs-attr">plugins</span>: [
    cacheablePlugin
  ]
});

<span class="hljs-keyword">const</span> route = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">routing</span>.<span class="hljs-title class_">RegExpRoute</span>({
  <span class="hljs-attr">match</span>: <span class="hljs-function">(<span class="hljs-params">{url}</span>) =&gt;</span> url.<span class="hljs-property">domain</span> === <span class="hljs-string">&#x27;example.com&#x27;</span>,
  <span class="hljs-attr">handler</span>: <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>({requestWrapper})
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450677.9937')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_workbox_broadcast_cache_update"><a href="https://workboxjs.org/reference-docs/latest/module-workbox-broadcast-cache-update.html">workbox-broadcast-cache-update</a></h4>
<div class="paragraph">
<p>Cet utilitaire utilise l&#8217;API JavaScript Broadcast Channel et permet d&#8217;effectuer une action quand une entr\xE9e dans le cache a \xE9t\xE9 mise \xE0 jour.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450678.4158"><span class="hljs-keyword">const</span> requestWrapper = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">RequestWrapper</span>({
  <span class="hljs-attr">cacheName</span>: <span class="hljs-string">&#x27;text-files&#x27;</span>,
  <span class="hljs-attr">plugins</span>: [
    <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">broadcastCacheUpdate</span>.<span class="hljs-title class_">BroadcastCacheUpdatePlugin</span>(
      {<span class="hljs-attr">channelName</span>: <span class="hljs-string">&#x27;cache-updates&#x27;</span>})
  ],
});

<span class="hljs-keyword">const</span> route = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">routing</span>.<span class="hljs-title class_">RegExpRoute</span>({
  <span class="hljs-attr">regExp</span>: <span class="hljs-regexp">/.txt@dollar@/</span>,
  <span class="hljs-attr">handler</span>: <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">runtimeCaching</span>.<span class="hljs-title class_">StaleWhileRevalidate</span>({requestWrapper}),
});

<span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> workbox.<span class="hljs-property">routing</span>.<span class="hljs-title class_">Router</span>();
router.<span class="hljs-title function_">registerRoute</span>({route});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450678.4158')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ensuite dans votre code vous pouvez \xE9couter l&#8217;\xE9v\xE9nement du m\xEAme nom</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450679.992"><span class="hljs-keyword">const</span> updateChannel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadcastChannel</span>(<span class="hljs-string">&#x27;cache-updates&#x27;</span>);
updateChannel.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Cache updated: @dollar@{event.data.payload.updatedUrl}&#x27;</span>);
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450679.992')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_autres_fonctionnalit\xE9s">Autres fonctionnalit\xE9s</h4>
<div class="paragraph">
<p>Le but de cet article n&#8217;est pas d&#8217;\xEAtre exhaustif. Je vous laisse consulter le site <a href="https://workboxjs.org/">Workbox</a> pour plus d&#8217;exemples. Des nouvelles fonctionnalit\xE9s devraient appara\xEEtre prochainement.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_v\xE9rifier_le_fonctionnement_de_votre_site">V\xE9rifier le fonctionnement de votre site</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Une fois que vous avez mis en ligne votre site, vous pouvez v\xE9rifier son comportement et la qualit\xE9 en utilisant l&#8217;outil open source <a href="https://developers.google.com/web/tools/lighthouse/">Lighthouse</a>. Il v\xE9rifie les aspects li\xE9s \xE0 la performance, l&#8217;accessibilit\xE9, le comportement offline, si votre site est responsive&#8230;&#8203; Vous pouvez utiliser soit le client node disponible sous npm, soit le <a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk">plugin Chrome</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/workbox_03.png" alt="Lighthouse">
</div>
</div>
<div class="paragraph">
<p>Pour lancer un audit du site <a href="https://www.dev-mind.fr/">dev-mind.fr</a> vous devez aller sur le site et lancer le plugin Chrome qui va g\xE9n\xE9rer le rapport suivant. Je vous conseille de d\xE9sactiver les diff\xE9rentes extensions de votre navigateur avant car certaines ont tendance \xE0 fausser les rapports en ajoutant des scripts \xE0 votre site.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/workbox_04.png" alt="Rapport Lighthouse">
</div>
</div>
<div class="paragraph">
<p>Le rapport expose diff\xE9rents indicateurs et propose des solutions pour optimiser votre page (lien vers les docs correspondantes).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Ainsi s&#8217;ach\xE8ve notre voyage au pays des services workers. Avec ces 3 articles je souhaitais montrer qu&#8217;il \xE9tait simple et rapide d&#8217;exposer des fonctionnalit\xE9s hors ligne ou sur un r\xE9seau d\xE9grad\xE9. Pour conclure je rappelerai juste quelques conseils</p>
</div>
<div class="ulist">
<ul>
<li>
<p>utilisez une librairie pour g\xE9n\xE9rer vos services workers</p>
</li>
<li>
<p>faites du cache busting, en int\xE9grant un num\xE9ro de r\xE9vision dans le nom de vos ressources afin de vous pr\xE9munir des probl\xE8mes de cache</p>
</li>
<li>
<p>utiliser un nom unique pour votre cache ou zone de cache. Ce nom est utilis\xE9 pour \xE9purer les ressources quand votre service worker est mis \xE0 jour</p>
</li>
<li>
<p>param\xE9trer toujours une date d&#8217;expiration de vos ressources dans le cache</p>
</li>
<li>
<p>v\xE9rifier r\xE9guli\xE8rement le comportement de votre site sur les diff\xE9rents navigateurs du march\xE9 qui n&#8217;impl\xE9mentent pas les normes \xE0 la m\xEAme vitesse.</p>
</li>
</ul>
</div>
</div>
</div>`;var Vv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Dans <a href="https://www.dev-mind.fr/blog/2017/service_worker.html">l&#8217;article pr\xE9c\xE9dent</a> je vous ai expliqu\xE9 comment fonctionnait les services workers et comment ils nous permettaient d&#8217;enrichir nos progressive webapps en offrant une exp\xE9riene offline. Nous allons aujourd&#8217;hui voir comment ajouter un service worker dans votre application web.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_r\xF4le_dun_service_worker">R\xF4le d&#8217;un service worker</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Reprenons le graphique pr\xE9sentant le cycle de vie d&#8217;un service worker</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/service_worker_05.png" alt="Cycle de vie">
</div>
</div>
<div class="paragraph">
<p>Dans le cas courant un service worker peut</p>
</div>
<div class="ulist">
<ul>
<li>
<p>r\xE9f\xE9rencer toutes les ressources prises en compte par le SW</p>
</li>
<li>
<p>\xE9crire un listener sur l&#8217;\xE9v\xE9nement <em>install</em> pour ajouter des d\xE9pendances ou pour commencer \xE0 peupler des \xE9l\xE9ments dans le cache</p>
</li>
<li>
<p>\xE9crire un listener sur l&#8217;\xE9v\xE9nement <em>activate</em> pour nettoyer le cache des ressources qui ne sont plus utilis\xE9es. Il est important d&#8217;ailleurs que l&#8217;id cache de votre service worker soit toujours le m\xEAme. Sinon ce travail de nettoyage ne pourra pas \xEAtre effectu\xE9. On reviendra un peu plus tard sur les probl\xE8mes \xE9ventuels avec le cache</p>
</li>
<li>
<p>\xE9crire un listener sur l&#8217;\xE9v\xE9nement <em>fetch</em> pour interagir avec les requ\xEAtes effectu\xE9es par l&#8217;utilisateur. Vous pouvez d\xE9finir des strat\xE9gies pour privil\xE9gier des ressources de votre cache plut\xF4t que les ressources pr\xE9sentes sur votre serveur</p>
</li>
<li>
<p>\xE9crire un listener sur l&#8217;\xE9v\xE9nement <em>push</em> pour que votre service worker intervienne quand votre serveur <a href="https://developer.mozilla.org/en-US/docs/Web/API/PushEvent">pousse</a> de l&#8217;information. Vous pouvez par exemple faire de la notification</p>
</li>
<li>
<p>\xE9crire un listener sur l&#8217;\xE9v\xE9nement <em>sync</em> pour se <a href="https://github.com/WICG/BackgroundSync/blob/master/explainer.md">synchroniser</a> avec le serveur quand vous retrouvez une connexion Internet</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>L&#8217;\xE9criture du service worker en soit peut \xEAtre assez fastidieuse et source d&#8217;erreur si les choses sont mal faites. Dans les cas les plus courants, le code est toujours \xE0 peu pr\xE8s le m\xEAme. Google propose plusieurs librairies pour vous aider dans la mise en place des services workers.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_contr\xF4ler_un_service_worker_en_local">Contr\xF4ler un service worker en local</h2>
<div class="sectionbody">
<div class="paragraph">
<p>La r\xE8gle de base est de disposer d&#8217;un site s\xE9curis\xE9 en HTTPS. Si vous voulez tester en local vous pouvez aussi lancer Chrome en d\xE9sactivant ce contr\xF4le.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>google-chrome --user-data-dir=/tmp/foo --ignore-certificate-errors --unsafely-treat-insecure-origin-as-secure=https://localhost</pre>
</div>
</div>
<div class="paragraph">
<p>Mais attention aux surprises. Un service worker s&#8217;enregistre sur le domaine. Si vous le faites sur localhost, il risque de s&#8217;activer chaque fois que vous lancez une page en local. Apr\xE8s rien de grave vous pouvez \xE0 tout moment contr\xF4ler les services workers via les <em>Chrome Dev Tools</em>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/creer_service_worker_01.png" alt="Chrome Dev Tools">
</div>
</div>
<div class="paragraph">
<p>Les <em>Chromes Dev Tools</em> permettent de simuler des \xE9v\xE9nements (Update, Push, Sync..) mais aussi de d\xE9r\xE9f\xE9rencer un service worker. Vous pouvez \xE9galement nettoyer les caches, les services workers via la section <em>Clear Storage</em></p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/creer_service_worker_02.png" alt="Chrome Dev Tools">
</div>
</div>
<div class="paragraph">
<p>Un service ne peut \xEAtre enregistr\xE9 que sur la m\xEAme origine que votre application. Si votre origine est <em>dev-mind.fr</em> vous ne pouvez pas enregistrer un service worker d&#8217;un autre site.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cr\xE9er_enregistrer_et_interagir_avec_un_sw">Cr\xE9er, enregistrer et interagir avec un SW</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vous devez d\xE9clarer votre service worker dans votre script principal</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450545.8389"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator) {
  navigator.<span class="hljs-property">serviceWorker</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;sw.js&#x27;</span>, <span class="hljs-attr">scope</span>: <span class="hljs-string">&#x27;/subcontent&#x27;</span>)
    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">registration</span>) {
      <span class="hljs-comment">// registration worked</span>
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Registration succeeded. Scope is &#x27;</span> + reg.<span class="hljs-property">scope</span>);
    })
    .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error during service worker registration:&#x27;</span>, e);
    });
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450545.8389')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Quand vous enregistrer un service worker vous pouvez ajouter un scope pour sp\xE9cifier un sous ensemble de votre site qui sera contr\xF4l\xE9 par ce service worker.</p>
</div>
<div class="paragraph">
<p>Un service worker contr\xF4le plusieurs pages. Chaque fois qu&#8217;une page de votre scope est charg\xE9e, le service worker est install\xE9 ou r\xE9activ\xE9.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_g\xE9n\xE9rer_un_service_worker_the_old_way">G\xE9n\xE9rer un service worker (the old way)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vous pouvez vous appuyer sur 2 outils fournit par Google</p>
</div>
<div class="paragraph">
<p><a href="https://github.com/GoogleChrome/sw-precache">sw-precache</a> est un plugin que vous pouvez int\xE9grer \xE0 votre processus de buid (Gulp, Grunt) et qui va g\xE9n\xE9rer toute la configuration de vos services workers.</p>
</div>
<div class="paragraph">
<p><a href="https://github.com/GoogleChrome/sw-toolbox">sw-toolbox</a> est une librairie que vous pouvez int\xE9grer \xE0 votre site et qui va proposer plusieurs utilitaires pour votre service worker. Cette librairie fournit un mini routeur qui permet de d\xE9finir des strat\xE9gies de cache en fonction de routes d\xE9finies (au format expressJs).</p>
</div>
<div class="paragraph">
<p>Avec <a href="https://github.com/GoogleChrome/sw-toolbox">sw-toolbox</a> vous pouvez par exemple d\xE9finir les strat\xE9gies suivantes (bas\xE9es sur le <a href="https://jakearchibald.com/2014/offline-cookbook/">offline cookbook</a> de <a href="https://twitter.com/jaffathecake">Jake Archibald</a>)</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>networkFirst</em> : essaye de lancer la requ\xEAte en mode connect\xE9. Si le r\xE9seau r\xE9pond la r\xE9ponse est stock\xE9e dans le cache et servie. Si la r\xE9ponse d\xE9passe un timeout d\xE9fini ou si le r\xE9seau est inaccessible le SW retourne la ressource si elle est pr\xE9sente dans le cache. Cette strat\xE9gie est int\xE9ressante quand vous voulez afficher les donn\xE9es les plus r\xE9centes.</p>
</li>
<li>
<p><em>cacheFirst</em> : si la ressource est dans le cache elle est directment renvoy\xE9e. Sinon on charge la ressource. Cette strat\xE9gie est utilis\xE9e pour des \xE9l\xE9ments qui ne changent pas (sinon vous devez mettre en place une strat\xE9gie pour mettre \xE0 jour ces ressources quand elles changent).</p>
</li>
<li>
<p><em>fastest</em> : deux requ\xEAtes sont lanc\xE9es en parall\xE8le et la premi\xE8re qui arrive est prise en compte. Avec la latence r\xE9seau et les temps de chargement le cache gagne toujours. Cette solution est int\xE9ressante pour lancer une mise \xE0 jour en t\xE2che de fond d&#8217;une ressource. Strat\xE9gie qui est au final plus souple que <em>cacheFirst</em></p>
</li>
<li>
<p><em>cacheOnly</em> : on ne regarde que dans le cache. Si la ressource n&#8217;est pas l\xE0 nous avons une erreur. Int\xE9ressant sur mobile par exemple pour pr\xE9server la batterie quand elle commence \xE0 faiblir.</p>
</li>
<li>
<p><em>networkOnly</em> : inverse on interroge toujours le r\xE9seau. Cette strat\xE9gie est un peu inutile vu qu&#8217;il se passe la m\xEAme chose si vous n&#8217;utilisez pas de services workers</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Voici la configuration \xE0 appliquer par exemple dans votre build <em>Gulp</em> pour g\xE9n\xE9rer un service worker utilisant sw-toolbox.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450547.7249">gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;generate-service-worker&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> {
  <span class="hljs-keyword">let</span> config = {
    <span class="hljs-attr">cacheId</span>: <span class="hljs-string">&#x27;dev-mind&#x27;</span>,
    <span class="hljs-attr">runtimeCaching</span>: [{
      <span class="hljs-attr">urlPattern</span>: <span class="hljs-string">&#x27;/(.*)&#x27;</span>,
      <span class="hljs-attr">handler</span>: <span class="hljs-string">&#x27;networkFirst&#x27;</span>,
      <span class="hljs-attr">options</span>: {
        <span class="hljs-attr">networkTimeoutSeconds</span>: <span class="hljs-number">3</span>,
        <span class="hljs-attr">maxAgeSeconds</span>: <span class="hljs-number">7200</span>
      }
    }],
    <span class="hljs-attr">staticFileGlobs</span>: [<span class="hljs-string">&#x27;build/dist/**/*.{js,html,css,png,jpg,json,gif,svg,webp,eot,ttf,woff,woff2,gz}&#x27;</span>],
    <span class="hljs-attr">stripPrefix</span>: <span class="hljs-string">&#x27;build/dist&#x27;</span>,
    <span class="hljs-attr">verbose</span>: <span class="hljs-literal">true</span>
  };

  swPrecache.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;build/dist/service-worker.js&#x27;</span>, config, cb);
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450547.7249')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous devez indiquer \xE0 <em>swPrecache</em> o\xF9 le service worker est g\xE9n\xE9r\xE9. Au niveau de la configuration vous devez sp\xE9cifier</p>
</div>
<div class="ulist">
<ul>
<li>
<p>un <em>id</em> pour le cache : omme je le disais plus haut c&#8217;est important de toujours garder le m\xEAme identifiant pour que le service worker g\xE9n\xE9r\xE9 soit capable de nettoyer le cache quand ce dernier comporte des \xE9l\xE9ments plus utilis\xE9s</p>
</li>
<li>
<p>une ou plusieurs configuration de cache (<em>runtimeCaching</em>): vous d\xE9finisser des URLs au format ExpressJS afin d&#8217;indiquer quels fichiers seront pris en compte par cette configuration (ici je prends toutes les URL du site). Vous pouvez ensuite choisir la strat\xE9gie de cache \xE0 appliquer et ajouter des options. J&#8217;utilise ici 2 options int\xE9ressantes. La premi\xE8re <em>networkTimeoutSeconds</em> permet de privil\xE9gier le cache si le timeout est d\xE9pass\xE9 (vous permet de servir votre site quand la qualit\xE9 du r\xE9seau est tr\xE8s fluctuante. L&#8217;option <em>maxAgeSeconds</em> permet de d\xE9finir une dur\xE9e de vie dans le cache</p>
</li>
<li>
<p><em>staticFileGlobs</em> vous permet de d\xE9finir quels fichiers serons g\xE9r\xE9s par votre service worker</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Pour limiter les probl\xE8mes de cache je vous conseil \xE9galement de faire du <em>cache busting</em>.
Le <em>Cache busting</em> consiste \xE0 utiliser un nom unique pour vos ressources. En gros dans votre processus de build vous renommer chacune de vos ressources en mettant un num\xE9ro de r\xE9vision. Cette mani\xE8re de faire force le navigateur \xE0 recharger des ressources quand celles ci changent. Par contre vous devez vous assurer que votre point d&#8217;entr\xE9e de votre application (index.html) soit</p>
</div>
<div class="paragraph">
<p>Je ne vais pas m&#8217;attarder sur cette solution car Google a annonc\xE9 \xE0 <a href="https://events.google.com/io/">Google IO 2017</a> la sortie de <a href="https://workboxjs.org">Workboxjs</a> une nouvelle toolbox pour vous aider \xE0 \xE9crire des applications progressives&#8230;&#8203;. Si vous utilisez swPrecache et swToolbox pas d&#8217;affolement, Google maintient toujours ces solutions.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utiliser_workboxjs_et_v\xE9rifier_le_fonctionnement">Utiliser Workboxjs et v\xE9rifier le fonctionnement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>C&#8217;est ce que nous verrons dans le prochain article sur les services workers</p>
</div>
</div>
</div>`;var Hv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Si vous suivez l&#8217;actualit\xE9 Dev-Mind (<a href="https://www.dev-mind.fr/formation_optimiser.html">formation</a> ou <a href="https://www.dev-mind.fr/experience.html#conferences">conf\xE9rence</a> sur les performances web), j&#8217;ai introduit \xE0 plusieurs occasions le concept des <a href="https://developers.google.com/web/progressive-web-apps/">progressive webaps</a> et des <a href="https://developer.mozilla.org/fr/docs/Web/API/Service_Worker_API">service workers</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/service_worker_00.png" alt="Services workers">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_progressive_webapp_et_service_worker">Progressive Webapp et service worker</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Revenons un peu \xE0 la base si vous ne connaissez pas ces termes.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Les <strong>progressive webapps</strong> (PWA) sont un concept pouss\xE9 par Google. Le but est de pousser les d\xE9veloppeurs \xE0 cr\xE9er des applications web modernes facilitant la navigation des utilisateurs. Les \xE9volutions des standards du web, font que les applications propos\xE9es au sein d&#8217;un navigateur se rapprochent de plus en plus, de ce que l&#8217;on peut faire avec des applications natives. Une application web, doit s&#8217;adapter aux tailles des \xE9crans des utilisateurs, \xEAtre rapide \xE0 charger, doit marcher quand le r\xE9seau est faible ou inexistant, doit pouvoir faire des notifications sur un t\xE9l\xE9phone&#8230;&#8203;</p>
</li>
<li>
<p>Les <strong>services workers</strong> sont un moyen technique pour arriver \xE0 mettre en place certains concepts d&#8217;une progressive webapp comme le fonctionnement hors ligne ou sur un r\xE9seau d\xE9faillant. Il n&#8217;y a pas de magie, les services workers permettent simplement de recharger les donn\xE9es d\xE9j\xE0 charg\xE9es et qui ont \xE9t\xE9 persist\xE9es dans un cache local. Les services workers permettent de faire ce travail de l&#8217;ombre et de charger en t\xE2che de fond les ressources dont vous avez besoin sur votre site et de les servir pour am\xE9liorer les performances ou lorsque vous n&#8217;avez pas de r\xE9seau.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Je vais revenir un peu plus en d\xE9tail sur les services workers juste apr\xE8s mais il est important de savoir que toutes ses fonctionalit\xE9s peuvent aujourd&#8217;hui \xEAtre mises en place dans les navigateurs modernes.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/service_worker_01.png" alt="Can I Use service worker">
</div>
</div>
<div class="paragraph">
<p>Gros b\xE9mol pour Safari (navigateur Apple) qui tra\xEEne \xE0 impl\xE9menter les normes et qui est aujourd&#8217;hui le pire navigateur pour surfer sur le web. Mais ces nouvelles fonctionnalit\xE9s peuvent tout de m\xEAme \xEAtre ajout\xE9es \xE0 votre site. Elles ne s&#8217;activeront tout simplement pas sur les navigateurs \xE0 la tra\xEEne. Sur Edge ils ne sont pas encore actifs par d\xE9faut mais \xE7a devrait arriver</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_workers">Les workers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Tous les navigateurs impl\xE9mentent aujourd&#8217;hui l&#8217;API des web workers. Par d\xE9faut JavaScript est mono thread et tout s&#8217;ex\xE9cute dans un thread principal. Bien \xE9videmment si vous multipliez les traitements dans cet unique thread vous risquez d&#8217;avoir des probl\xE8mes de performance. L&#8217;api <a href="https://developer.mozilla.org/fr/docs/Utilisation_des_web_workers">Web Worker</a> permet de d\xE9porter des traitements dans un thread en arri\xE8re plan. Ce thread ne peut pas acc\xE9der \xE0 toutes les API. Par exemple, vous ne pouvez pas manipuler le DOM, mais vous pouvez utiliser d&#8217;autres API comme WebSocket, IndexedDB&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Les \xE9changes entre un worker et votre thread principal ne peut se faire que par \xE9change de messages. Le mieux pour comprendre ce concept est de prendre un exemple. Dans le code ci dessous je d\xE9clare un worker dans le thread principal. J&#8217;ajoute ensuite un listener qui sera \xE0 l&#8217;\xE9coute des messages envoy\xE9s par le worker.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450635.7063"><span class="hljs-comment">// Cr\xE9ation du worker</span>
<span class="hljs-keyword">var</span> worker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&#x27;doWork.js&#x27;</span>);

<span class="hljs-comment">// On cr\xE9e un event listener pour intercepter les messages envoy\xE9s par le worker</span>
worker.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Worker said: &#x27;</span>, e.<span class="hljs-property">data</span>);
}, <span class="hljs-literal">false</span>);

<span class="hljs-comment">// Vous pouvez \xE0 tout moment envoy\xE9 un message au worker</span>
worker.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450635.7063')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Au final le code du worker <em>doWork.js</em> sera</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450635.3145"><span class="hljs-comment">// On cr\xE9e un listener pour recevoir les messages du thread principal</span>
self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {
   <span class="hljs-comment">// la m\xE9thode postMessage permet de renvoyer un message</span>
   self.<span class="hljs-title function_">postMessage</span>(e.<span class="hljs-property">data</span>);
}, <span class="hljs-literal">false</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450635.3145')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_services_workers">Les services workers</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les services workers sont des workers. Il n&#8217;ont donc pas d&#8217;acc\xE8s au DOM, et s&#8217;ex\xE9cutent dans une t\xE2che de fond diff\xE9rente de celle du thread principal de votre application. Ils sont donc non-bloquants. Dans un web worker tout est asynchrone et le nombre d&#8217;API utilisable est plus restreint.</p>
</div>
<div class="paragraph">
<p>Un service worker peut \xEAtre vu comme un proxy, qui va se mettre entre votre site et le serveur. Il est capable d&#8217;intercepter tous les requ\xEAtes qui rentrent ou qui sortent pour les modifier. Les ressources prises en charge par le service worker sont d\xE9finies dans un fichier de configuration JavaScript.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/service_worker_02.png" alt="Service worker = proxy">
</div>
</div>
<div class="paragraph">
<p>Plut\xF4t sensible et critique non ? C&#8217;est pourquoi les services workers ne fonctionnent qu&#8217;en HTTPS. Le service worker vient aussi avec un cache de ressources. Il faut \xEAtre vigilant dans votre configuration, si vous ne voulez pas que vos ressources ne soient jamais raffra\xEEchies.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_cycle_de_vie">Le cycle de vie</h2>
<div class="sectionbody">
<div class="paragraph">
<p>L&#8217;activation des services workers va se faire en plusieurs \xE9tapes que nous allons d\xE9crire rapidement.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/service_worker_05.png" alt="Cycle de vie">
</div>
</div>
<div class="paragraph">
<p>Quand votre site se charge vous pouvez r\xE9server une section de votre code pour param\xE9trer le service worker. C&#8217;est l\xE0 que vous pourrez tester que votre navigateur prend bien en charge cette API.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450636.9924"><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;serviceWorker&#x27;</span> <span class="hljs-keyword">in</span> navigator){
    <span class="hljs-comment">// ..</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450636.9924')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>La premi\xE8re \xE9tape consiste \xE0 enregistrer votre service worker via <code><em>serviceWorkerContainer.register('sw.js')</em></code></p>
</li>
<li>
<p>Si tout se passe bien le service worker (<em>sw.js</em> dans notre exemple) est ex\xE9cut\xE9 dans un thread s\xE9par\xE9. Il passe \xE0 l&#8217;\xE9tat REGISTERED</p>
</li>
<li>
<p>Une fois que vous essayez d&#8217;acc\xE9der \xE0 une ressource g\xE9r\xE9e par le service worker, ce dernier va tenter de s&#8217;installer. Si tout se passe bien l&#8217;\xE9v\xE9nement <code><em>oninstall</em></code> est d\xE9clench\xE9. C&#8217;est dans ce listener que nous pouvons par exemple utiliser l&#8217;API IndexedDB pour mettre en cache nos ressources.</p>
</li>
<li>
<p>Le service worker va ensuite essay\xE9 de s&#8217;activer en envoyant l&#8217;\xE9v\xE9nement <code><em>onactivate</em></code>. Le listener associ\xE9 est g\xE9n\xE9ralement utilis\xE9 pour faire le m\xE9nage dans le cache et supprimer les ressources qui ne sont plus n\xE9c\xE9ssaires</p>
</li>
<li>
<p>Les pages qui sont \xE0 ce moment ouvertes seront contr\xF4l\xE9es par le service worker. Vous pouvez intercepter dans le script de votre service worker les \xE9v\xE9nements <code><em>push</em></code>, <code><em>fetch</em></code> et <code><em>sync</em></code></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ecriture_du_service_worker">Ecriture du service worker</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous venons de voir comment fonctionnait un service worker. Regardons maintenant comment se passe la mise en place. Pour cel\xE0 rendez vous dans l&#8217;article <a href="https://www.dev-mind.fr/blog/2017/creer_service_worker.html">cr\xE9er un service worker</a>.</p>
</div>
</div>
</div>`;var Wv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Il existe plusieurs librairies pour faire des graphiques sur un site web. En ce moment j&#8217;utilise <a href="https://www.highcharts.com/">highcharts</a>. Cette librairie a l&#8217;avantage de proposer un site avec beaucoup d&#8217;exemples et une bonne description de l&#8217;API.</p>
</div>
<div class="paragraph">
<p>Mais les options de param\xE9trages sont tr\xE8s nombreuses et il n&#8217;est pas toujours simple de faire un graphique qui colle \xE0 notre use case. Je vais prendre un exemple que j&#8217;ai rencontr\xE9 r\xE9cemment. Je devais cr\xE9er un graphique compos\xE9 de zones empil\xE9es (staked area) repr\xE9sentant des valeurs n\xE9gatives et positives. Forc\xE9ment si j&#8217;\xE9cris cet article, c&#8217;est que tout n&#8217;a pas \xE9t\xE9 tout rose.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cr\xE9er_un_grapique_de_type_stacked_area">Cr\xE9er un grapique de type <em>stacked area</em></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Prenons un exemple (les sources pr\xE9sent\xE9es ici sont disponibles sous <a href="https://github.com/javamind/stackedarea">Github</a>) dans lequel nous essayons d&#8217;afficher des mesures temporelles</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450597.2722">{
   <span class="hljs-attr">source</span>: <span class="hljs-string">&quot;Captor 1&quot;</span>,
   <span class="hljs-attr">measures</span>: [
     {
        <span class="hljs-attr">instant</span>: <span class="hljs-number">1495587600000</span>,
        <span class="hljs-attr">value</span>: <span class="hljs-number">7390</span>
     },
     {
        <span class="hljs-attr">instant</span>: <span class="hljs-number">1495591200000</span>,
        <span class="hljs-attr">value</span>: -<span class="hljs-number">5670</span>
     },
     <span class="hljs-comment">//...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450597.2722')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si je regarde l&#8217;exemple de <a href="https://www.highcharts.com/demo/area-stacked" class="bare">https://www.highcharts.com/demo/area-stacked</a> je peux \xE9crire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450599.0132">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_createSeries</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">MEASURES</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">serie</span>) =&gt;</span> {
      <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;area&#x27;</span>,
        <span class="hljs-attr">name</span>: serie.<span class="hljs-property">source</span>,
        <span class="hljs-attr">data</span>: serie.<span class="hljs-property">measures</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">measure</span>) =&gt;</span> {
          <span class="hljs-keyword">return</span> {<span class="hljs-attr">x</span>: measure.<span class="hljs-property">instant</span>, <span class="hljs-attr">y</span>: measure.<span class="hljs-property">value</span>}
        })
      }
    });
  }

  <span class="hljs-title class_">Highcharts</span>.<span class="hljs-title function_">setOptions</span>({
    <span class="hljs-attr">title</span>: {<span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Stack area in Highchart&#x27;</span>},
    <span class="hljs-attr">xAxis</span>: {
      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;datetime&#x27;</span>,
    },
    <span class="hljs-attr">plotOptions</span>: {
      <span class="hljs-attr">area</span>: {
        <span class="hljs-attr">stacking</span>: <span class="hljs-string">&#x27;normal&#x27;</span>,
      }
    }
  });

  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Highcharts</span>.<span class="hljs-title class_">Chart</span>({<span class="hljs-attr">chart</span>: {<span class="hljs-attr">renderTo</span>: <span class="hljs-string">&#x27;myChart&#x27;</span>}, <span class="hljs-attr">series</span>: <span class="hljs-title function_">_createSeries</span>()})</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450599.0132')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si les valeurs sont toutes positives ou toutes n\xE9gatives vous n&#8217;avez aucun probl\xE8me. Par contre si vous avez un mix, <a href="https://www.highcharts.com/">Highcharts</a> n&#8217;est pas capable d&#8217;afficher correctement les donn\xE9es comme nous pouvons le voir ci dessous.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/highcharts_stackedarea_01.png" alt="Exemple ne marchant pas">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dissocier_les_valeurs_positives_et_n\xE9gatives">Dissocier les valeurs positives et n\xE9gatives</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour contourner le probl\xE8me nous allons n&#8217;afficher que des courbes qui contiennent que des valeurs positives ou que des valeurs positives. Pour chaque jeu de donn\xE9es, chaque s\xE9rie du graphe nous allons en cr\xE9er deux</p>
</div>
<div class="ulist">
<ul>
<li>
<p>une avec des valeurs positives et des 0 \xE0 la place des valeurs n\xE9gatives</p>
</li>
<li>
<p>une avec des valeurs n\xE9gatives et des 0 \xE0 la place des valeurs positives</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450601.8489">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">evaluator</span>(<span class="hljs-params">measure</span>) {
    <span class="hljs-keyword">if</span> (measure.<span class="hljs-property">value</span> &gt; <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">return</span> positive ? measure.<span class="hljs-property">value</span> : <span class="hljs-number">0</span>;
    }
    <span class="hljs-keyword">return</span> positive ? <span class="hljs-number">0</span> : measure.<span class="hljs-property">value</span>;
  }

  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_createSeries</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable constant_">MEASURES</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">serie</span> =&gt;</span> [
      <span class="hljs-title function_">_createSerie</span>(serie, color, <span class="hljs-literal">true</span>),
      <span class="hljs-title function_">_createSerie</span>(serie, color, <span class="hljs-literal">false</span>)
    ])
    .<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, val</span>) =&gt;</span> acc.<span class="hljs-title function_">concat</span>(val));
  }

  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_createSerie</span>(<span class="hljs-params">serie, positive</span>) {
    <span class="hljs-keyword">return</span> {
      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;area&#x27;</span>,
      <span class="hljs-attr">stack</span>: positive ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>,
      <span class="hljs-attr">showInLegend</span>: positive,
      <span class="hljs-attr">name</span>: serie.<span class="hljs-property">source</span>,
      <span class="hljs-attr">data</span>: serie.<span class="hljs-property">measures</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">measure</span>) =&gt;</span> {
        <span class="hljs-keyword">return</span> {<span class="hljs-attr">x</span>: measure.<span class="hljs-property">instant</span>, <span class="hljs-attr">y</span>: positive !== <span class="hljs-literal">null</span> ? evaluator(measure) : measure.<span class="hljs-property">value</span>}
      })
    }
  }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450601.8489')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour \xE9viter d&#8217;avoir une double l\xE9gende nous utilisons la propri\xE9t\xE9 <code><em>showInLegend: positive</em></code>. Plus important pour avoir un graphique valable, nous devons indiquer \xE0 <a href="https://www.highcharts.com/">Highcharts</a> que nous avons 2 mani\xE8res d&#8217;empiler les donn\xE9es (une pour les valeurs positives et une pour les n\xE9gatives). Nous l&#8217;indiquons avec la propri\xE9t\xE9 <code><em>stack: positive ? 1 : 0</em></code>. Les valeurs sont peut importantes elles doivent juste \xEAtre distinctes dans les 2 cas.</p>
</div>
<div class="paragraph">
<p>Nous optenons</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/highcharts_stackedarea_02.png" alt="Exemple ne marchant pas beaucoup plus">
</div>
</div>
<div class="paragraph">
<p>Est ce mieux ? Les valeurs positives et n\xE9gatives sont maintenant justes en cumul\xE9es. Mais si nous zoomon et regardons par exemple le troisi\xE8me pas de temps et notamment les encha\xEEnnements entre les points :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/highcharts_stackedarea_03.png" alt="OK en cumul\xE9">
</div>
</div>
<div class="paragraph">
<p>Le dessin du graphe est faux quand nous passons d&#8217;une valeur positive \xE0 n\xE9gative. Si nous n&#8217;affichons qu&#8217;une s\xE9rie nous pouvons voir le probl\xE8me</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/highcharts_stackedarea_04.png" alt="r\xE9f\xE9rence \xE0 0">
</div>
</div>
<div class="paragraph">
<p>Comme nous faisons une r\xE9f\xE9rence \xE0 0 le trac\xE9 est faux.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_quelle_solution_choisir">Quelle solution choisir ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Il n&#8217;y a pas de solution id\xE9ale. Si vous voulez des zones empil\xE9es le trac\xE9 de courbe sera faux. Visuellement les d\xE9fauts sont att\xE9nu\xE9s si vous n&#8217;avez pas de grandes variations des valeurs et si ces valeurs sont nombreuses.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/highcharts_stackedarea_05.png" alt="plus de valeurs">
</div>
</div>
<div class="paragraph">
<p>L&#8217;autre solution est de ne pas utiliser ce type de graphique si vous voulez cumuler des valeurs positives et n\xE9gatives. Vous pouvez par exemple utiliser le type <code><em>column</em></code></p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/highcharts_stackedarea_06.png" alt="type column">
</div>
</div>
</div>
</div>`;var Jv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Je suis r\xE9dacteur du blog <a href="http://javamind-fr.blogspot.fr">JavaMind</a> depuis maintenant 7 ans. Quand j&#8217;ai lanc\xE9 le blog, j&#8217;ai choisi un CMS en ligne (Blogger) qui m&#8217;offrait de la souplesse mais qui n&#8217;\xE9tait pas tr\xE8s personnalisable. Depuis un bon moment maintenant je cherchais une solution de remplacement simple et int\xE9grable facilement dans mon site web.</p>
</div>
<div class="paragraph">
<p>Je suis tr\xE8s heureux d&#8217;annoncer que vous retrouverez dor\xE9navant mes articles directement sur le site <a href="https://www.dev-mind.fr" class="bare">https://www.dev-mind.fr</a>. Je vais essayer d&#8217;expliquer pourquoi et comment j&#8217;ai choisi de changer ma mani\xE8re de publier mes articles pour passer d&#8217;un blog sous Blogger \xE0 un blog g\xE9n\xE9r\xE9 via node et Asciidoctor.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/nouveau_site_asciidoctor_001.png" alt="Nainformaticien" width="800px">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_remontons_dans_le_temps">Remontons dans le temps</h2>
<div class="sectionbody">
<div class="paragraph">
<p>J&#8217;ai toujours eu du mal \xE0 retenir les choses si je ne les \xE9crivais pas. D\xE8s la fin de mes \xE9tudes, j&#8217;ai essay\xE9 de mettre au format num\xE9rique mes notes pour les retrouver plus facilement. Je n&#8217;ai pas retrouv\xE9 les sources de mon premier site perso mis en ligne en 1999 (merci Free).  En 2001 j&#8217;ai lanc\xE9 mon site <code><em>nainformaticien.fr</em></code> pour expliquer comment fonctionnait Internet, parler de programmation, et exposer mes photos de vacances&#8230;&#8203;</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/nouveau_site_asciidoctor_02.png" alt="Nainformaticien" width="400px">
</div>
</div>
<div class="paragraph">
<p>Bon forc\xE9ment peu de personne ont lu ces pages hormis moi :-) Mais elles avaient le m\xE9rite d&#8217;\xEAtre mon pense b\xEAte en ligne. C&#8217;est vrai qu&#8217;\xE0 cette \xE9poque, le site <a href="https://www.developpez.com">developpez.com</a> lanc\xE9 en m\xEAme temps en 1999 avait d\xE9j\xE0 beaucoup plus de succ\xE8s et mes photos de vacances n&#8217;int\xE9ressaient que moi.</p>
</div>
<div class="paragraph">
<p>Apr\xE8s cette prise de conscience, j&#8217;ai beaucoup moins publi\xE9 sur Internet. Je souffrais un peu du syndr\xF4me de l&#8217;imposteur. Je n&#8217;ai pas pour autant arr\xEAt\xE9 de documenter les sujets techniques que j&#8217;explorais mais je le faisais en interne pour le compte de l&#8217;entreprise o\xF9 je travaillais \xE0 l&#8217;\xE9poque.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_et_dun_point_de_vue_technique">Et d&#8217;un point de vue technique</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_premiers_essais">Premiers essais</h3>
<div class="paragraph">
<p>Au d\xE9part mon blog \xE9tait constitu\xE9 d&#8217;une suite de pages. A chaque modification de structure il fallait repasser sur toutes les pages. Je suis pass\xE9 par les iframes, la g\xE9n\xE9ration de code en JavaScript&#8230;&#8203; Mais je n&#8217;\xE9tais pas satisfait.</p>
</div>
</div>
<div class="sect2">
<h3 id="_non_pas_de_cms">Non pas de CMS&#8230;&#8203;</h3>
<div class="paragraph">
<p>Les premiers CMS sont apparus mais en tant que d\xE9veloppeur je n&#8217;avais pas envie d&#8217;aller vers des solutions toute pr\xEAtes. Avec les h\xE9bergements PHP gratuits, je me suis cr\xE9\xE9 un petit framework MVC en PHP utilisant des templates, et qui me facilitait la cr\xE9ation de pages. Je ne d\xE9nigre pas le langage PHP mais je n&#8217;ai jamais \xE9t\xE9 vraiment fan. J&#8217;ai donc essay\xE9 de g\xE9n\xE9rer mon blog en Java. Mais je me suis rendu compte que des langages comme PHP ou Java ne simplifiaient pas grand chose et que mes solutions \xE9taient un peu lourde pour servir quelques pages statiques&#8230;&#8203;</p>
</div>
</div>
<div class="sect2">
<h3 id="_eh_ben_si_un_cms">Eh ben si un CMS&#8230;&#8203;</h3>
<div class="paragraph">
<p>Comme mes diff\xE9rents essais \xE9taient non concluants je me suis r\xE9sign\xE9 \xE0 utiliser un CMS en 2010. J&#8217;aurai pu mettre en place un site <a href="https://fr.wordpress.org/">WordPress</a> mais je voulais aller vite. J&#8217;ai donc choisi de publier mes articles sur un CMS en ligne et je me suis rabattu sur <a href="https://www.blogger.com" class="bare">https://www.blogger.com</a>. Certes la personnalisation est limit\xE9e mais ces outils visuels permettent de vite publier du contenu, de faciliter le r\xE9f\xE9rencement, de g\xE9n\xE9rer les liens pour relayer les articles sur les r\xE9seaux sociaux&#8230;&#8203;</p>
</div>
</div>
<div class="sect2">
<h3 id="_mais_je_veux_mieux_faire">Mais je veux mieux faire</h3>
<div class="paragraph">
<p>Ce cadre impos\xE9 par les CMS m&#8217;a laiss\xE9 insatisfait. Je pr\xE9f\xE8re coder que param\xE9trer. J&#8217;ai donc continu\xE9 d&#8217;exp\xE9rimenter. J&#8217;ai cr\xE9\xE9 des maquettes de blog \xE9crites en Angular qui avaient le m\xE9rit\xE9 d&#8217;\xEAtre full stack web, de proposer des templates&#8230;&#8203; Mais l\xE0 je me suis heurt\xE9 aux probl\xE8mes de r\xE9f\xE9rencements&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>J&#8217;ai test\xE9 <a href="https://jekyllrb.com/">Jekyll</a> notamment via l&#8217;int\xE9gration sous <a href="https://pages.github.com/">Github pages</a>. Ecrire des articles au format markdown est sympa, on se rapproche d&#8217;une solution qui me plait. Mais j&#8217;aimerai une solution que je puisse int\xE9grer facilement \xE0 mon site institutionnel en modifiant simplement mon process de build existant&#8230;&#8203;</p>
</div>
</div>
<div class="sect2">
<h3 id="_ma_solution_id\xE9ale">Ma solution id\xE9ale</h3>
<div class="paragraph">
<p>Toutes ces exp\xE9rimentations m&#8217;ont en fait permis de savoir ce que je voulais, qu&#8217;elle \xE9tait ma solution id\xE9ale. Je parle de MA solution id\xE9ale car vous avez le droit de ne pas \xEAtre d&#8217;accord avec moi.</p>
</div>
<div class="paragraph">
<p>Une solution id\xE9ale pour mettre en place un blog ou un site perso doit \xE0 mon sens proposer les choses suivantes</p>
</div>
<div class="ulist">
<ul>
<li>
<p>ne suivre que les technos standards du Web : HTML, JS et CSS. Si vous voulez un contenu index\xE9, lisible par tous, rapide \xE0 charger il est pr\xE9f\xE9rable d&#8217;impl\xE9menter des choses simples</p>
</li>
<li>
<p>avoir une solution de templating pour avoir la possibilit\xE9 de changer facilement. Quand vous faites un site marketing le visuel doit \xE9voluer pour montrer votre dynamisme</p>
</li>
<li>
<p>g\xE9rer le cycle de vie du site comme on g\xE8re un projet JS en 2017 avec un task builder. Pour ma part Gulp</p>
</li>
<li>
<p>\xE9crire mes articles au format texte car c&#8217;est \xE0 mon sens le mieux pour pouvoir \xE9diter, corriger, ajouter du contenu en ligne notamment via github. Par contre je souhaite que le formatage du contenu soit simple (texte, exemple de code, vid\xE9os, images, tableau&#8230;&#8203;)</p>
</li>
<li>
<p>ne pas avoir de bases de donn\xE9es mais \xEAtre capable d&#8217;indexer les articles afin de cr\xE9er un \xE9cran de recherche de navigation entre mes articles</p>
</li>
<li>
<p>pouvoir h\xE9berger mon site sur un environnement mutualis\xE9 peu co\xFBteux</p>
</li>
<li>
<p>\xEAtre capable de dupliquer facilement le concept pour les diff\xE9rents sites associatifs que je g\xE8re (gestion technique et non \xE9ditoriale)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>En 2015 la keynote de <a href="https://mixitconf.org/2015/dan-allen-write-in-asciidoc&#8212;&#8203;publish-everywhere-">Dan Allen \xE0 MiXiT</a> m&#8217;a inspir\xE9. Mais comme beaucoup de personnes qui font de la veille technique j&#8217;ai incrit <a href="http://asciidoctor.org/">Asciidoctor</a> tout en bas de ma liste des choses \xE0 creuser et comme ce sujet n&#8217;\xE9tait pas prioritaire, je l&#8217;ai un peu oubli\xE9. En 2016 je me suis r\xE9veill\xE9 lors de l&#8217;intervention de <a href="https://twitter.com/hsablonniere">Hubert Sabloni\xE8re</a> au <a href="http://www.lyonjug.org/evenements/asciidoc">Lyon Jug</a>. Il \xE9tait venu pr\xE9senter l&#8217;\xE9cosyst\xE8me Asciidoctor et il a r\xE9veill\xE9 mon besoin de mettre \xE0 jour mon site et mon blog. Je dois dire que j&#8217;ai eu un peu de mal pour d\xE9marrer car je ne pouvais facilement mettre en place mes templates avec Asciidoctor ni exploiter les m\xE9tadonn\xE9es des documents.</p>
</div>
<div class="paragraph">
<p>Et l\xE0 c&#8217;est la magie d&#8217;avoir des gens hyper r\xE9actifs et motiv\xE9s sur des projets Open Source comme <a href="http://asciidoctor.org/">Asciidoctor</a>. On branche un membre de la team</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/nouveau_site_asciidoctor_03.png" alt="Twitter" width="300px">
</div>
</div>
<div class="paragraph">
<p>En quelques jour j&#8217;avais tout pour d\xE9marrer \xE0 impl\xE9menter le blog de mes r\xEAves dans mon site <a href="https://www.dev-mind.fr" class="bare">https://www.dev-mind.fr</a></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mon_blog_via_asciidoctor">Mon blog via Asciidoctor</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Maintenant que j&#8217;ai expliqu\xE9 le cheminement (le "pourquoi") je vais pouvoir parler un peu plus du "comment" arriver \xE0 ce r\xE9sultat. Vous pouvez consulter les sources de mon site sur <a href="https://github.com/Dev-Mind/dev-mind.com">Github</a>.</p>
</div>
<div class="sect2">
<h3 id="_ecrire_les_articles">Ecrire les articles</h3>
<div class="paragraph">
<p>Voici un exemple d&#8217;article en Asciidoc</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-adoc" id="1732912450628.9087">----_
<span class="hljs-meta">:doctitle:</span> Cr\xE9er son blog via Asciidoctor
<span class="hljs-meta">:description:</span> Migrer son blog de blogger vers un blog g\xE9n\xE9r\xE9 via Asciidoctor
<span class="hljs-meta">:keywords:</span> Web, Blog, Asciidoctor, CMS
<span class="hljs-meta">:revdate:</span> 2017-05-09
<span class="hljs-meta">:teaser:</span> Pourquoi et comment j<span class="hljs-emphasis">&#x27;ai choisi de changer ma mani\xE8re de publier mes articles en passant de Blogger \xE0 un blog g\xE9n\xE9r\xE9 via Asciidoctor.
:imgteaser: ../../img/blog/unknown.png</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450628.9087')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Je suis r\xE9dacteur du blog <a href="http://javamind-fr.blogspot.fr">JavaMind</a> depuis maintenant 7 ans. Quand j&#8217;ai lanc\xE9 le blog, j&#8217;ai choisi un CMS en ligne (Blogger) qui m&#8217;offrait de la souplesse mais qui n&#8217;\xE9tait pas tr\xE8s personnalisable. Depuis un bon moment maintenant je cherchais une solution de remplacement simple et int\xE9grable facilement dans mon site web.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_remontons_dans_le_temps_2">Remontons dans le temps</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Si vous voulez en savoir plus sur la syntaxe Asciidoc vous pouvez consulter la <a href="http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/">documentation</a>.</p>
</div>
<div class="sect2">
<h3 id="_cycle_de_vie_de_mon_site">Cycle de vie de mon site</h3>
<div class="paragraph">
<p>Pour comprendre le cycle de vie de mon site web vous pouvez consulter le fichier de description du <a href="https://raw.githubusercontent.com/Dev-Mind/dev-mind.com/master/gulpfile.js">build Gulp</a>. Les principales t\xE2ches sont</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>styles</strong> : compilation Sass en CSS, utilisaton de autoprefixer et minification des feuilles de styles</p>
</li>
<li>
<p><strong>blog</strong> : compilation des fichiers Asciidoc et indexation des diff\xE9rents fichiers (je reviens plus tard sur le d\xE9tail)</p>
</li>
<li>
<p><strong>html</strong> : parsing des fichiers HTML de l&#8217;application (fichiers n&#8217;ayant pas un format article comme la page d&#8217;accueil) et utilisation de Handlebar pour appliquer des templates et g\xE9n\xE9rer le HTML</p>
</li>
<li>
<p><strong>scripts</strong> : transpilation des scripts en ES5 puis minification</p>
</li>
<li>
<p><strong>images</strong> : am\xE9lioration des images et convertion en format alternatif comme webp</p>
</li>
<li>
<p><strong>service-worker</strong> : g\xE9n\xE9ration d&#8217;un service worker avec sw-precache et sw-toolbox pour les connexions d\xE9grad\xE9es ou le mode offline</p>
</li>
<li>
<p><strong>compress</strong> : compression au format gzip des ressources statiques</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_g\xE9n\xE9ration_du_blog">G\xE9n\xE9ration du blog</h3>
<div class="paragraph">
<p>Regardons un peu plus en d\xE9tail la partie de g\xE9n\xE9ration du blog</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450629.0598">gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;blog-indexing&#x27;</span>, <span class="hljs-function">() =&gt;</span>
  gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;src/blog/**/*.adoc&#x27;</span>)
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">asciidoctorRead</span>())
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">asciidoctorConvert</span>())
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">asciidoctorIndexing</span>(<span class="hljs-string">&#x27;blog-index.json&#x27;</span>))
    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;build/dist/blog&#x27;</span>))
);

gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;blog&#x27;</span>, [<span class="hljs-string">&#x27;blog-indexing&#x27;</span>], <span class="hljs-function">() =&gt;</span>
  gulp.<span class="hljs-title function_">src</span>(<span class="hljs-string">&#x27;src/blog/**/*.adoc&#x27;</span>)
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">asciidoctorRead</span>())
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">asciidoctorConvert</span>())
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">applyTemplate</span>(<span class="hljs-string">&#x27;src/templates/blog.hbs&#x27;</span>))
    .<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">highlightCode</span>({<span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;pre.highlight code&#x27;</span>}))
    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;build/.tmp/blog&#x27;</span>))
    .<span class="hljs-title function_">pipe</span>(@dollar@.<span class="hljs-title function_">htmlmin</span>(<span class="hljs-variable constant_">HTMLMIN_OPTIONS</span>))
    .<span class="hljs-title function_">pipe</span>(gulp.<span class="hljs-title function_">dest</span>(<span class="hljs-string">&#x27;build/dist/blog&#x27;</span>))
);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450629.0598')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La t\xE2che <code><em>blog-indexing</em></code> permet de construire un index au format Json qui sera interrogeable via un simple <a href="https://raw.githubusercontent.com/Dev-Mind/dev-mind.com/master/src/js/blog.js">fichier JS</a> pour naviguer ou retrouver facilement un article de blog. La t\xE2che <code><em>blog</em></code> convertit quand \xE0 elle, les articles Asccidoctor en HTML en utilisant les templates Handlebar.</p>
</div>
<div class="paragraph">
<p><code><em>asciidoctorRead</em></code>, <code><em>asciidoctorConvert</em></code>, <code><em>asciidoctorIndexing</em></code>, &#8230;&#8203; sont des extensions \xE0 notre build Gulp ou des scripts permettant de transformer les flux de donn\xE9es lus.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/nouveau_site_asciidoctor_04.png" alt="Gulp extension" width="50%">
</div>
</div>
<div class="paragraph">
<p>Si le code JS de ces extensions vous int\xE9resse je vous laisse consulter les sources sous <a href="https://github.com/Dev-Mind/dev-mind.com/tree/master/gulp-extensions">Github</a>. Le plus int\xE9ressant \xE0 exposer est la philosophie derri\xE8re</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code><em>asciidoctorRead</em></code> lit le stream des documents asciidoctor et interpr\xE8te ces documents pour extraire le contenu HTML et les diff\xE9rentes metadata. Ce qui est super int\xE9ressant c&#8217;est que vous pouvez facilement ajouter vos propres m\xE9tadonn\xE9es \xE0 vos documents.</p>
</li>
<li>
<p><code><em>asciidoctorConvert</em></code> convertit les documents <code><em>adoc</em></code> en <code><em>html</em></code></p>
</li>
<li>
<p><code><em>asciidoctorIndexing</em></code> \xE9crit les m\xE9tadonn\xE9es dans un fichier (ici <code><em>blog-index.json</em></code>). Si votre site grossis vous pourriez par exemple mettre ces informations en base de donn\xE9es</p>
</li>
<li>
<p><code><em>applyTemplate</em></code> utilisation de moustache pour ins\xE9rer le contenu et les m\xE9tadata dans un template de page (dans la premi\xE8re version j&#8217;avais utilis\xE9 Handlebar mais Mustache \xE0 l&#8217;int\xE9r\xEAt de proposer de l&#8217;h\xE9ritage entre les templates)</p>
</li>
<li>
<p><code><em>highlightCode</em></code> mise en forme des blocs de code dans les pages avec highlight</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Les principales technologies utilis\xE9es sont les suivantes</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Asciidoctor <code><em>1.5.6-preview.1</em></code> (en cours de d\xE9veloppement)</p>
</li>
<li>
<p>Node @GT 7</p>
</li>
<li>
<p>Yarn</p>
</li>
<li>
<p>Gulp</p>
</li>
<li>
<p>Mustache pour les templates</p>
</li>
<li>
<p>Sass pour la d\xE9finition des styles</p>
</li>
<li>
<p>Babel pour la transpilation ES5</p>
</li>
<li>
<p>highlights pour la mise en forme du code</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pour_finir">Pour finir</h2>
<div class="sectionbody">
<div class="paragraph">
<p>La solution que j&#8217;ai mise en place peut \xEAtre encore am\xE9lior\xE9e notamment au niveau de la recherche de mes articles, de l&#8217;ajout de commentaires, &#8230;&#8203; Mais Asciidoctor JS m&#8217;a permis de r\xE9soudre ma probl\xE9matique assez facilement. Si vous avez des questions vous pouvez me contacter directement.</p>
</div>
</div>
</div>`;var $v=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Je voulais faire un focus dans cet article sur les possibilit\xE9s offertes par SpringBoot (version 1.4.x) pour \xE9crire des tests simples, lisibles et rapides de vos services REST. Niveau performance, le chargement du contexte est encore un peu long mais ceci devrait \xEAtre encore am\xE9lior\xE9 dans les futures versions.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/test_services-rest-springboot_01.png" alt="Test avec SpringBoot">
</div>
</div>
<div class="paragraph">
<p>Prenons un exemple de controller REST.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450646.4307"><span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/api/session&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionController</span> {

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> SessionService sessionService;

    <span class="hljs-meta">@GetMapping</span>
    <span class="hljs-keyword">public</span> List<span class="hljs-meta">@LTSession</span><span class="hljs-meta">@GT</span> findAll() {
        <span class="hljs-keyword">return</span> sessionService.findAll();
    }

    <span class="hljs-meta">@GetMapping((&quot;/{id}&quot;))</span>
    <span class="hljs-keyword">public</span> ResponseEntity<span class="hljs-meta">@LTSession</span><span class="hljs-meta">@GT</span> findOne(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id) {
        <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sessionService.findOne(id);

        <span class="hljs-keyword">if</span> (session == <span class="hljs-literal">null</span>) {
            <span class="hljs-keyword">return</span> notFound().build();
        }
        <span class="hljs-keyword">return</span> ok(session);
    }


    <span class="hljs-meta">@PostMapping</span>
        <span class="hljs-keyword">public</span> ResponseEntity<span class="hljs-meta">@LTSession</span><span class="hljs-meta">@GT</span> save(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> Session session) {
        <span class="hljs-keyword">return</span> ok(sessionService.save(session));
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450646.4307')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez noter qu\u2019au lieu d\u2019utiliser des annotations <code><em>@RequestMapping</em></code> sur toutes vos m\xE9thodes vous pouvez maintenant utilisez les annotations propres \xE0 chacun des verbes HTTP : <code><em>@GetMapping</em></code>, <code><em>@PostMapping</em></code> &#8230;&#8203;</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_valider_la_validit\xE9_des_arguments">Valider la validit\xE9 des arguments</h2>
<div class="sectionbody">
<div class="paragraph">
<p>On veut souvent automatiser les contr\xF4les de premier niveau des objets que nous envoyons \xE0 nos services REST. Pour cel\xE0 vous pouvez utiliser la norme Bean Validation. Pour rappel vous avez besoin de rajouter 2 d\xE9pendances (une vers l\u2019API, une vers une impl\xE9mentation de cette derni\xE8re)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450647.3806">compile <span class="hljs-string">&quot;javax.validation:validation-api:1.1.0.Final&quot;</span>
compile <span class="hljs-string">&quot;org.hibernate:hibernate-validator:1.1.0.Final&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450647.3806')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Concr\xE8tement vous pouvez ensuite utiliser l\u2019annotation <code><em>@Valid</em></code> devant les param\xE8tres de votre service (voir la m\xE9thode save) et annoter votre DTO.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450647.9734"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Session</span> {
    <span class="hljs-keyword">private</span> String id;
    <span class="hljs-meta">@NotEmpty</span>
    <span class="hljs-keyword">private</span> String title;
    <span class="hljs-meta">@NotNull</span>
    <span class="hljs-meta">@Min(1)</span>
    <span class="hljs-meta">@Max(500)</span>
    <span class="hljs-keyword">private</span> Integer maxAttendees;
    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450647.9734')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ecrire_un_test">Ecrire un test</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Oups&#8230;&#8203;Je voulais faire un article sur les tests et je n\u2019en ai encore pas parl\xE9\u2026 allez c\u2019est parti nous allons cr\xE9er une classe de test</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450647.8674"><span class="hljs-meta">@RunWith(SpringRunner.class)</span>
<span class="hljs-meta">@WebMvcTest(SessionController.class)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SessionControllerTest</span> {
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> MockMvc mvc;

    <span class="hljs-meta">@MockBean</span>
    <span class="hljs-keyword">private</span> SessionService sessionService;

    <span class="hljs-keyword">private</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450647.8674')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez noter que vous pouvez maintenant utiliser l\u2019annotation <code><em>@WebMvcTest(SessionController.class)</em></code> pour ne tester qu\u2019un seul controller sans \xE0 avoir \xE0 charger toute l\u2019application Spring Boot et donc gagner en rapidit\xE9 d&#8217;ex\xE9cution.</p>
</div>
<div class="paragraph">
<p>L\u2019objet MockMvc du projet spring-test va nous permettre d\u2019invoquer notre API Rest tout en moquant les collaborateurs. Les mocks vont \xEAtre cr\xE9\xE9s par spring-boot-test qui apporte une encapsulation de Mockito (annotation <code><em>@MockBean</em></code>).</p>
</div>
<div class="paragraph">
<p>Le dernier \xE9l\xE9ment est le mapper qui va permettre de convertir nos donn\xE9es en JSON lorsque nous voulons invoquer notre API comme le ferait par exemple un client JavaScript.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_premier_exemple_de_test_m\xE9thode_get">Un premier exemple de test m\xE9thode GET</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450647.6543"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFindAllSessions</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {

    given(<span class="hljs-built_in">this</span>.sessionService.findAll())
            .willReturn(asList(
                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Session</span>().withId(<span class="hljs-string">&quot;1&quot;</span>).withTitle(<span class="hljs-string">&quot;title1&quot;</span>),
                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Session</span>().withId(<span class="hljs-string">&quot;2&quot;</span>).withTitle(<span class="hljs-string">&quot;title2&quot;</span>)));

    <span class="hljs-built_in">this</span>.mvc.perform(get(<span class="hljs-string">&quot;/api/session&quot;</span>))
            .andExpect(status().isOk())
            .andExpect(jsonPath(<span class="hljs-string">&quot;@dollar@.length()&quot;</span>, is(<span class="hljs-number">2</span>)))
            .andExpect(jsonPath(<span class="hljs-string">&quot;@dollar@.[0].title&quot;</span>, is(<span class="hljs-string">&quot;title1&quot;</span>)));
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450647.6543')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans ce test nous commen\xE7ons par d\xE9finir le comportement de notre collaborateur (sessionService) via Mockito (j\u2019utilise la syntaxe BDD qui est pouss\xE9e par l\u2019\xE9quipe de Mockito).</p>
</div>
<div class="paragraph">
<p>La fluent API de mockMVC et les diff\xE9rents builders permettent d\u2019\xE9crire des tests concis et clairs. En gros ici j\u2019appelle via un GET l\u2019URL <code><em>/api/session</em></code> et j\u2019attends en retour un code statut \xE0 200 (<code><em>status().isOk()</em></code>)</p>
</div>
<div class="paragraph">
<p>Vous pouvez utiliser diff\xE9rents matchers pour v\xE9rifier le contenu de la r\xE9ponse. Ici j\u2019utilise JsonPath qui me permet de parser le r\xE9sultat de l\u2019appel.</p>
</div>
<div class="paragraph">
<p>Une petite astuce si vous utilisez SpringSecurity. Vous pouvez utiliser un <code><em>RequestPostProcessor</em></code> mis \xE0 disposition dans le projet <code><em>spring-security-test</em></code>. Mon appel devient</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450648.3325"><span class="hljs-built_in">this</span>.mvc.perform(get(<span class="hljs-string">&quot;/api/session&quot;</span>).with(httpBasic(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)))
            .andExpect(status().isOk())
            .andExpect(jsonPath(<span class="hljs-string">&quot;@dollar@.length()&quot;</span>, is(<span class="hljs-number">2</span>)))
            .andExpect(jsonPath(<span class="hljs-string">&quot;@dollar@.[0].title&quot;</span>, is(<span class="hljs-string">&quot;title1&quot;</span>)));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450648.3325')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez aussi choisir de d\xE9sactiver la s\xE9curit\xE9 en utilisant la propri\xE9t\xE9 secure de l&#8217;annotation <code><em>@WebMvcTest</em></code> :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450648.4204"><span class="hljs-meta">@WebMvcTest(value = SessionController.class, secure = false)</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450648.4204')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous avons vu comment tester un GET. Tester une m\xE9thode POST n\u2019est pas tr\xE8s diff\xE9rent.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exemple_de_test_m\xE9thode_post">Exemple de test m\xE9thode POST</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450648.319"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldCreateSession</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {

    <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Session</span>().withTitle(<span class="hljs-string">&quot;My Spring session&quot;</span>).withMaxAttendees(<span class="hljs-number">10</span>);

    given(<span class="hljs-built_in">this</span>.sessionService.save(any(Session.class)))
           .willReturn(session.withId(<span class="hljs-string">&quot;id&quot;</span>));

    <span class="hljs-built_in">this</span>.mvc.perform(
            post(<span class="hljs-string">&quot;/api/session&quot;</span>)
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(mapper.writeValueAsString(session))
    )
            .andExpect(status().isOk())
            .andExpect(jsonPath(<span class="hljs-string">&quot;@dollar@.id&quot;</span>, is(<span class="hljs-string">&quot;id&quot;</span>)))
            .andExpect(jsonPath(<span class="hljs-string">&quot;@dollar@.title&quot;</span>, is(<span class="hljs-string">&quot;My Spring session&quot;</span>)));
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450648.319')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Quand vous envoyez vos donn\xE9es via un POST \xE0 un service REST vous devez sp\xE9cifier le content type et s\xE9rialiser vos donn\xE9es en JSON sous forme d\u2019une chaine de caract\xE8re.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_exemple_de_test_avec_validation">Exemple de test avec validation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Regardons maintenant ce qu\u2019il se passe si les donn\xE9es ne correspondent pas aux contraintes sp\xE9cifi\xE9es par Bean Validation (voir plus haut). Si tout va bien une erreur 400 est retourn\xE9e</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450648.4026"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldNotCreateSessionWhenBeanInvalid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {

    <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Session</span>();

    <span class="hljs-built_in">this</span>.mvc.perform(
            post(<span class="hljs-string">&quot;/api/session&quot;</span>)
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(mapper.writeValueAsString(session))
                    .with(httpBasic(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>))
    )
            .andExpect(status().isBadRequest());
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450648.4026')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voila j\u2019esp\xE8re vous avoir montr\xE9 par cet exemple que les tests de vos services REST peuvent \xEAtre simples \xE0 \xE9crire.</p>
</div>
</div>
</div>`;var Yv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>En mai 2016 Gradle annon\xE7ait qu\u2019il \xE9tait maintenant possible d\u2019\xE9crire des scripts (build.gradle) et des plugins en Kotlin. Ce choix pouvait para\xEEtre \xE9tonnant alors que Gradle avait depuis ces d\xE9buts beaucoup investi sur le langage Groovy.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/ecrire_ses_scripts_gradle_en_kotlin_01.png" alt="Gradle Kotlin">
</div>
</div>
<div class="paragraph">
<p>Le langage Kotlin \xE0 l\u2019avantage d\u2019\xEAtre statique et typ\xE9 et son utilisation permet de consid\xE9rablement enrichir l\u2019exp\xE9rience des d\xE9veloppeurs dans les IDE</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Auto-compl\xE9tion et aide contextuel</p>
</li>
<li>
<p>Navigation \xE0 la source</p>
</li>
<li>
<p>Refactoring</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Je vous conseille de lire le tr\xE8s bon article de blog de C\xE9dric Champeau (ancien de la core team Groovy embauch\xE9 par Gradle) qui explique beaucoup mieux que moi les avantages.</p>
</div>
<div class="paragraph">
<p>Ce qui m\u2019int\xE9resse dans cet article c\u2019est plut\xF4t vous montrer comment param\xE9trer un cas concret. Je vous conseille pour cela d\u2019utiliser la derni\xE8re version de Gradle (3.3). Le repo Github contenant les sources du projet \u201CGradle Script Kotlin\u201D comprend plusieurs exemples.</p>
</div>
<div class="paragraph">
<p>Dans cet article je me base sur le script de construction build.gradle.kts du site Mix-IT 2017. Ce script permet de construire une application Spring Boot \xE9crite en Kotlin et ce qui est plut\xF4t sympa c\u2019est que Kotlin est du coup utilis\xE9 sur toute la cha\xEEne. Vous pouvez comparer ce script avec celui utilis\xE9 dans l\u2019ancienne version du site.</p>
</div>
<div class="paragraph">
<p>Mon objectif est d&#8217;essayer de vous montrer les diff\xE9rences entre un script Groovy et Kotlin en essayant de param\xE9trer le plugin gradle-node-plugin. Ce plugin permet de piloter Gulp (appli node.js) via Gradle pour avoir une seule mani\xE8re de construire notre application Java ou Kotlin. A noter que ce plugin permet l&#8217;utilisation de npm ou yarn pour g\xE9rer vos d\xE9pendances JavaScript. Dans notre cas nous avons opt\xE9 pour yarn.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_param\xE9trage_du_build">Param\xE9trage du build</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans un script Gradle nous avons une partie utilis\xE9e pour param\xE9trer le build lui m\xEAme. En Groovy on \xE9crit</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450589.4268">buildscript {
    ext {
        nodePluginVersion = <span class="hljs-string">&#x27;1.0.1&#x27;</span>
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url <span class="hljs-string">&quot;https://plugins.gradle.org/m2/&quot;</span>
        }
    }
    dependencies {
        classpath <span class="hljs-string">&quot;com.moowork.gradle:gradle-node-plugin:@dollar@{nodePluginVersion}&quot;</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450589.4268')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En Kotlin</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450590.9143">buildscript {
    ext {
        nodePluginVersion = <span class="hljs-string">&#x27;1.0.1&#x27;</span>
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url <span class="hljs-string">&quot;https://plugins.gradle.org/m2/&quot;</span>
        }
    }
    dependencies {
        classpath <span class="hljs-string">&quot;com.moowork.gradle:gradle-node-plugin:@dollar@{nodePluginVersion}&quot;</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450590.9143')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous me direz jusque l\xE0 pas beaucoup de changement. D\xE9clarons maintenant les plugins utilis\xE9s par notre projet</p>
</div>
<div class="paragraph">
<p>En Groovy</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450590.1843">apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;idea&#x27;</span>
apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.moowork.node&#x27;</span>
apply <span class="hljs-attr">plugin:</span> <span class="hljs-string">&#x27;com.moowork.gulp&#x27;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450590.1843')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En Kotlin</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450591.8115">apply {
    plugin(<span class="hljs-string">&quot;idea&quot;</span>)
    plugin(<span class="hljs-string">&quot;kotlin&quot;</span>)
    plugin(<span class="hljs-string">&quot;kotlin-noarg&quot;</span>)
    plugin(<span class="hljs-string">&quot;com.moowork.node&quot;</span>)
    plugin(<span class="hljs-string">&quot;com.moowork.gulp&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450591.8115')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_configuration_du_plugin_gradle_node_plugin">Configuration du plugin gradle-node-plugin</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les plugins (c\u2019est le cas de gradle-gulp-plugin) peuvent avoir une partie configuration (les points d\u2019extensions)</p>
</div>
<div class="paragraph">
<p>En Groovy</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450591.8013">node {
    version = <span class="hljs-string">&#x27;6.9.2&#x27;</span>
    download = <span class="hljs-literal">true</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450591.8013')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En Kotlin</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450591.4844"><span class="hljs-keyword">import</span> com.moowork.gradle.node.NodeExtension

<span class="hljs-symbol">configure@</span><span class="hljs-symbol">LTNodeExtension@</span>GT {
    version = <span class="hljs-string">&quot;6.9.2&quot;</span>
    download = <span class="hljs-literal">true</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450591.4844')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Notez que vous devez importer le point d\u2019extension pour \xEAtre capable de surcharger les param\xE8tres par d\xE9faut d\u2019un plugin. Ceci demande de conna\xEEtre un peu le fonctionnement de Gradle et de ces plugins (voir mon article ou encore mieux la doc :-) ).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_d\xE9finir_une_t\xE2che">D\xE9finir une t\xE2che</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Regardons maintenant comment configurer une t\xE2che et l\u2019int\xE9grer dans le cycle de vie Gradle</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912450591.2856">task gulpBuild(<span class="hljs-attr">type:</span> GulpTask, <span class="hljs-attr">dependsOn:</span> yarnInstall) {
  inputs.dir <span class="hljs-string">&#x27;src/main/sass&#x27;</span>  inputs.files(npmInstall.outputs)
  outputs.dir <span class="hljs-string">&quot;src/main/static/css&quot;</span>  args = [<span class="hljs-string">&quot;default&quot;</span>]
}

processResources {
  dependsOn gulpBuild
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450591.2856')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En Kotlin</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450591.8684"><span class="hljs-keyword">import</span> com.moowork.gradle.gulp.GulpTask
<span class="hljs-keyword">import</span> com.moowork.gradle.node.yarn.YarnInstallTask

<span class="hljs-symbol">task@</span><span class="hljs-symbol">LTGulpTask@</span>GT(<span class="hljs-string">&quot;gulpBuild&quot;</span>) {
  dependsOn(YarnInstallTask.NAME)
  inputs.dir(<span class="hljs-string">&quot;src/main/sass&quot;</span>)
  inputs.dir(<span class="hljs-string">&quot;build/.tmp&quot;</span>)
  outputs.dir(<span class="hljs-string">&quot;src/main/static/css&quot;</span>)
  args = listOf(<span class="hljs-string">&quot;default&quot;</span>)
}

tasks.getByName(<span class="hljs-string">&quot;processResources&quot;</span>).dependsOn(<span class="hljs-string">&quot;gulpBuild&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450591.8684')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Je n\u2019ai expos\xE9 ici que les cas les plus courants utilis\xE9s dans Gradle. Vous pouvez toujours programmer vos t\xE2ches en Groovy ou Kotlin dans vos scripts. Pour plus d\u2019info je vous r\xE9oriente vers les exemples officiels et la page Stackoverflow (qui n\u2019est pas encore tr\xE8s riche sur le sujet).</p>
</div>
<div class="paragraph">
<p>Nous verrons dans les mois qui viennent si Kotlin prend la main sur Groovy dans les scripts de configuration Gradle. Pour le moment le manque de documentation sur Gradle Script Kotlin est vraiment probl\xE9matique.</p>
</div>
</div>
</div>`;var Kv=`<div class="sect1">
<h2 id="_vikram_subramanian_unit_tests_for_angular_2_applications_slides"><a href="https://twitter.com/vikerman">Vikram Subramanian</a> : Unit Tests for Angular 2 Applications <a href="https://docs.google.com/presentation/d/1fFxQvx2WHFPqR4piq0oWgKBuSMvrCwc1vfYggHlYEbQ/edit#slide=id.p">Slides</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vikram fait partie de l\u2019\xE9quipe Angular 2 et son but \xE9tait de se focaliser sur les tests unitaires tout en se distinguant des interventions de Julie Ralph sur le sujet. J\u2019ai beaucoup aim\xE9 ce talk car je pense que les tests automatis\xE9s sont primordiaux quand on veut \xE9crire des logiciels de qualit\xE9 dans le temps.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-angulartest00.jpg" alt="Vikram Subramanian">
</div>
<div class="title">Figure 1. photo de Philippe Chatel</div>
</div>
<div class="paragraph">
<p>Les tests sont l\xE0 pour d\xE9tecter les r\xE9gressions mais doivent \xEAtre simples \xE0 \xE9crire. Quand on \xE9crit des tests de composants JavaScript nous devons disposer d\u2019une bonne API pour parcourir le DOM li\xE9 \xE0 ce composant. L\u2019\xE9quipe Angular a essay\xE9 d\u2019\xE9crire un ensemble de fonction pour simplifier ce travail en essayant d\u2019\xEAtre agnostique au niveau du framework de tests.</p>
</div>
<div class="paragraph">
<p>Vous pouvez aussi bien utiliser du <a href="http://jasmine.github.io/">Jasmine</a> (celui utilis\xE9 par Google), <a href="https://mochajs.org/">Mocha</a> ou autre. Au niveau du test runner vous pouvez utiliser un runner fourni par ces diff\xE9rents framework ou utiliser <a href="https://karma-runner.github.io/1.0/index.html">Karma</a> qui offre plus de souplesse dans le param\xE9trage.</p>
</div>
<div class="paragraph">
<p>Au niveau des tests il est toujours difficile de savoir ce que l\u2019on mocke et \xE0 quel niveau nous devons nous arr\xEAter. Faut-il privil\xE9gier l\u2019isolation totale du test ou \xEAtre le plus proche possible de la production ? Le deuxi\xE8me cas est forc\xE9ment celui qu\u2019on aimerait appliqu\xE9 mais il demande plus de boulot et ces tests seront plus longs.</p>
</div>
<div class="paragraph">
<p>Voici un exemple de tests Angular 2</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450701.3508"><span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;displays user details on click&#x27;</span>, <span class="hljs-title function_">async</span>(<span class="hljs-function">() =&gt;</span> {
  ...
  <span class="hljs-comment">// Locate the fetch button.  let debugFetchButton = fixture.debugElement.query(By.css(&#x27;button&#x27;));</span>
  <span class="hljs-title function_">expect</span>(debugFetchButton).<span class="hljs-property">not</span>.<span class="hljs-title function_">toBe</span>(<span class="hljs-literal">null</span>);


  <span class="hljs-comment">// Trigger the click event through the DOM.  debugFetchButton.nativeElement.click();</span>


  <span class="hljs-comment">// Wait for the async getUsers to complete and Angular to become stable.  fixture.whenStable().then(() =&gt; {</span>
    <span class="hljs-comment">// Trigger rendering component state to DOM.    fixture.detectChanges();</span>


    <span class="hljs-comment">// Check that the user list is displayed.    ...</span>
  });
}));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450701.3508')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour plus d\u2019informations je vous r\xE9oriente vers la documentation officielle <a href="https://angular.io/docs/ts/latest/guide/testing.html" class="bare">https://angular.io/docs/ts/latest/guide/testing.html</a></p>
</div>
<div class="paragraph">
<p>Il est important de noter qu\u2019il reste pas mal de boulot pour les tests et notamment au niveau des tests de code utilisant le service http. Il faudrait pouvoir mocker facilement ce service.</p>
</div>
<div class="videoblock">
<div class="title">Voir la vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/dVtDnvTLaIo?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>`;var Xv=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://twitter.com/hanslatwork">Hans Larsen</a> (Software Engineer <a href="https://twitter.com/Google">@Google</a>) est venu \xE0 ngeurope pour parler de angular cli et du futur de cet outil de g\xE9n\xE9ration d&#8217;application.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-angularcli00.jpg" alt="Angular cli">
</div>
</div>
<div class="paragraph">
<p>Revenons un peu \xE0 la version 1 de Angular. Lorsque vous d\xE9marrez un projet vous allez \xE9crire un fichier index.html, puis vos composants en JS, potentiellement ajouter des tests unitaires, les param\xE9trer, puis des tests e2e\u2026</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_que_faire_pour_d\xE9marrer">Que faire pour d\xE9marrer ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Soit vous \xEAtes un adepte du DIY (do it yourself) et vous passez pas mal de temps \xE0 chaque fois \xE0 apprendre chaque outil de tooling ainsi que les diff\xE9rentes mani\xE8res de les param\xE9trer.
Vous pouvez aussi utiliser un projet seed mais il vous sera difficile d\u2019appliquer les mises \xE0 jour.</p>
</div>
<div class="paragraph">
<p>L\u2019autre solution est d\u2019utiliser un g\xE9n\xE9rateur tel que Yeoman mais vous risquez en fonction des plugins d\u2019avoir pas mal de boilerplate loin de la simplicit\xE9 pr\xE9conis\xE9 par la team Google
A chaque fois vous \xEAtes d\xE9pendants de une ou plusieurs solutions techniques (npm, bower, yo, gulp, webpack\u2026). <a href="https://cli.angular.io/">Angular CLI</a> a vraiment \xE9t\xE9 pens\xE9 pour \xEAtre l\u2019unique point d\u2019entr\xE9e de votre projet et il est amen\xE9 \xE0 \xE9voluer avec votre projet.</p>
</div>
<div class="paragraph">
<p>Pour le moment <a href="https://cli.angular.io/">Angular CLI</a> se base sur webpack et malgr\xE9 des dizaines de demandes pour acc\xE9der au fichier de configuration webpack utilis\xE9 par <a href="https://cli.angular.io/">Angular CLI</a> (ce qui permettrait de le personnaliser \xE0 la vol\xE9e), l&#8217;\xE9quipe Angular est rest\xE9e ferme. <a href="https://cli.angular.io/">Angular CLI</a> se veut comme une abstraction de diff\xE9rents outils bas niveaux. Le but est de pouvoir remplacer facilement webpack ou un autre outil par des solutions qui sont susceptibles d&#8217;arriver prochainement.</p>
</div>
<div class="paragraph">
<p>Tout le monde sait que le monde JS est rempli de projets qui deviennent la norme en \xE0 peine une semaine. Le dernier en date est <a href="https://yarnpkg.com/">Yarn</a>, inconnu avant mi-octobre et qui se retrouve parachuter dans tous les projets.</p>
</div>
<div class="paragraph">
<p>La philosophie <a href="https://cli.angular.io/">Angular CLI</a> c&#8217;est de pr\xE9ciser nos intentions et l\u2019outil transforme notre projet pour matcher \xE0 nos besoins.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_quelques_commandes">Quelques commandes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Angular CLI permet de g\xE9rer le cycle de vie de votre application</p>
</div>
<div class="paragraph">
<p>Initialisation d\u2019un nouveau projet</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450705.9338">  ng <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">PROJECT_NAME</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450705.9338')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>D\xE9ploiement de l\u2019application pour des tests manuels</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450705.933">  ng serve</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450705.933')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Lancer les tests unitaires</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450705.4946">  ng test</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450705.4946')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Lancer les tests e2e</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450705.1045">  ng e2e</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450705.1045')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Packager l\u2019application</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450706.4631">  ng build --target=production --environment=prod (distinction des environnements dev et prod)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450706.4631')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>G\xE9n\xE9ration d\u2019un objet Angular 2 : component, directive, pipe, service, class, interface, route, module</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450706.7415">  ng g component my-<span class="hljs-keyword">new</span>-component</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450706.7415')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le projet <a href="https://github.com/angular/angular-cli" class="bare">https://github.com/angular/angular-cli</a> s\u2019enrichit de jour en jour de nouvelles fonctionnalit\xE9s.</p>
</div>
<div class="paragraph">
<p>Quand votre application Angular 2 est lanc\xE9e, elle va afficher des templates de composants dans vos pages en fonction de la route s\xE9lectionn\xE9e. Les templates sont compil\xE9s par le framework par d\xE9faut au moment ou vous en avez besoin (compilation JIT just in time). Un autre mode, la compilation AoT (Ahead of Time) permet de les pr\xE9compiler les templates pour simplifier le travail d\u2019Angular lorsqu\u2019il aura besoin d\u2019un template. Angular CLI  vos permet de le faire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450706.6055">ng build --prod --aot</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450706.6055')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Angular CLI n\u2019en est qu\u2019\xE0 ces d\xE9buts. Plusieurs am\xE9liorations sont en cours d\u2019\xE9criture et devrait arriver plus ou moins rapidement</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Correction de bug</p>
</li>
<li>
<p>Installation plus rapide et plus l\xE9g\xE8re</p>
</li>
<li>
<p>Utilisation de yarn \xE0 la place de npm</p>
</li>
<li>
<p>Une s\xE9paration CLI et du toolkit</p>
</li>
<li>
<p>Permettre l\u2019ajout de add-ons sur le cycle de vie</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Fournir des capacit\xE9s de migration automatique vers une version sup\xE9rieure de CLI ou m\xEAme de votre projet Angular 2 en cas d\u2019\xE9volution du framework vers une version 3, 4\u2026</p>
</div>
<div class="videoblock">
<div class="title">Voir la vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/LN2xvQqAo-g?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>`;var Qv=`<div class="paragraph">
<p>Quoi de mieux dans une conf\xE9rence Angular qu\u2019une keynote de <a href="https://twitter.com/mhevery">Mi\u0161ko Hevery</a>, fondateur du framework.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-keynote-misko-hevery00.jpg" alt="Mi\u0161ko Hevery">
</div>
</div>
<div class="paragraph">
<p>Angular peut \xEAtre vu comme une v\xE9ritable plateforme. On peut utiliser Angular pour faire des applications web destin\xE9es au desktop, au mobile, et m\xEAme faire des applications natives.</p>
</div>
<div class="paragraph">
<p>Angular est construit sur diff\xE9rentes briques de bases</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Compilation : le code et les templates sont compil\xE9s pour avoir un code optimis\xE9. Vous pouvez utiliser plusieurs langages comme ES6, Dart mais surtout TypeScript</p>
</li>
<li>
<p>Synchronisation entre vos formulaires et les objets JavaScript (binding)</p>
</li>
<li>
<p>Rendu (navigateur, natif,&#8230;&#8203;)</p>
</li>
<li>
<p>Injection de d\xE9pendances</p>
</li>
<li>
<p>D\xE9corateurs : si on faisait un parall\xE8le ils ressemblent beaucoup aux annotations Java et permettent d\u2019injecter du comportement \xE0 la compilation rendant le code moins fastidieux</p>
</li>
<li>
<p>Zones elles repr\xE9sentent des contextes d\u2019utilisation</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Des modules annexes vont vous aider \xE0 construire des applications (i18n, animation, router).</p>
</div>
<div class="paragraph">
<p>Sur ces briques de base on va retrouver les composants <a href="https://github.com/angular/material2">Material</a> pour construire des applications, le <a href="https://mobile.angular.io/">Mobile Web Kit</a>, <a href="https://github.com/angular/universal">Universal</a> qui permet de faire du rendering c\xF4t\xE9 serveur&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Mais la grande force d\u2019Angular est d\u2019avoir propos\xE9 une solution tr\xE8s performante. Tout est fait pour qu\u2019une application soit \xE0 la fois rapide au premier chargement et aussi au refresh. Les tests de performance montrent qu\u2019Angular est 5 fois plus rapide que Angular 1.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-keynote-01.png" alt="Fonctionnement Angular">
</div>
</div>
<div class="paragraph">
<p>Des efforts ont \xE9t\xE9 fait pour transmettre moins de donn\xE9es</p>
</div>
<div class="ulist">
<ul>
<li>
<p>La taille de la librairie est maintenant plus petite</p>
</li>
<li>
<p>Vous pouvez faire du lazy loading avec le nouveau syst\xE8me de module et le router</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Angular 2 utilise aussi les Web Workers pour ne pas surcharger le thread principal d\xE9di\xE9 au rendu. Pour acc\xE9l\xE9rer le premier rendu vous pouvez utiliser Angular Universal pour d\xE9porter cette premi\xE8re phase sur le serveur.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-keynote-02.png" alt="Fonctionnement Angular">
</div>
</div>
<div class="paragraph">
<p>Dans Angular 1 nous avions des probl\xE8mes de performance li\xE9es au databinding (m\xE9canisme permettant de synchroniser automatiquement les donn\xE9es de la page et des donn\xE9es li\xE9es \xE0 un contr\xF4leur JavaScript) et au dirty checking. Les donn\xE9es de la page sont li\xE9es \xE0 un ou plusieurs objets. Chaque fois qu\u2019une propri\xE9t\xE9 est chang\xE9e l\u2019arbre des objets est parcouru pour d\xE9tecter les modifications (phase <a href="https://docs.angularjs.org/api/ng/type/@dollar@rootScope.Scope#@dollar@digest">digest</a>). Comme cet arbre est cyclique nous pouvons avoir plusieurs parcours.</p>
</div>
<div class="paragraph">
<p>En Angular 2 un composant ne peut acc\xE9der qu\u2019\xE0 ces fils (la communication dans l\u2019autre sens se fait par \xE9v\xE9nements). L\u2019arbre des objets n\u2019est donc parcouru qu\u2019une seule fois pour d\xE9tecter les modifications (du haut vers le bas).</p>
</div>
<div class="paragraph">
<p>Pour simplifier le d\xE9marrage d\u2019un projet vous pouvez utiliser <a href="https://github.com/angular/angular-cli">angular cli</a>. Dans cette optique de simplifier le travail des d\xE9veloppeurs un gros effort a \xE9t\xE9 fait pour que les IDE puissent proposer facilement de la compl\xE9tion, de la d\xE9tection d\u2019erreur, des stacks d\u2019erreur&#8230;&#8203; Un module <a href="https://augury.angular.io/">Augury</a> d\xE9velopp\xE9 par la communaut\xE9 peut \xE9galement \xEAtre ajout\xE9 au Chrome DevTools pour inspecter les donn\xE9es de votre page li\xE9es \xE0 des composants Angular.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-keynote-03.png" alt="Fonctionnement Angular">
</div>
</div>
<div class="videoblock">
<div class="title">Voir la vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/wpxnU62mNJ4?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>`;var Zv=`<div class="sect1">
<h2 id="_willem_veelenturf_embed_hybrid_features_in_mobile_banking_app"><a href="https://twitter.com/wilmveel">Willem Veelenturf</a> : Embed hybrid features in Mobile Banking App</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Il ne faut pas oublier qu\u2019une application performante est le r\xE9sultat de la collaboration des personnes et pas de  l\u2019utilisation de la derni\xE8re technologie \xE0 la mode. Willem est revenu sur la phase de cr\xE9ation de l\u2019application mobile de la banque ING.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-mobile01.jpg" alt="Willem Veelenturf">
</div>
<div class="title">photo de Philippe Chatel</div>
</div>
<div class="paragraph">
<p>Quand on a un client qui veut \xEAtre multi plateforme c\u2019est dur de vouloir faire du natif car il faut r\xE9unir des personnes pour faire du backend, du web, de l\u2019Android, du Swift ou Objective C pour Ios. Votre \xE9quipe projet peut grossir consid\xE9rablement. La gestion des hommes et des multiples impl\xE9mentations peut devenir une v\xE9ritable usine \xE0 gaz \xE0 maintenir.</p>
</div>
<div class="paragraph">
<p>Une solution viable est par exemple d\u2019utiliser Ionic qui permet d\u2019\xE9crire une application une fois et de la d\xE9ployer sur diff\xE9rentes plateformes. Ionic utilise le principe de webview disponible sur les 2 plateformes et permet d\u2019afficher une page web au sein d\u2019une application native. Certes au niveau s\xE9curit\xE9 et rapidit\xE9 vous pouvez avoir des diff\xE9rences. Pour pouvoir r\xE9pondre \xE0 ces probl\xE9matiques Willem a expliqu\xE9 comment lui et son \xE9quipe ont enrichi leur application avec des plugins Cordova afin d\u2019avoir une meilleure int\xE9gration avec le device.</p>
</div>
<div class="videoblock">
<div class="title">Voir la vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/kmNRgOLZhXQ?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_christian_weyer_thorsten_hans_full_throttle_cross_platform_development_with_angular_2_cordova_and_electron"><a href="https://twitter.com/christianweyer">Christian Weyer</a>, <a href="https://twitter.com/ThorstenHans">Thorsten Hans</a> Full throttle Cross-platform development with Angular 2, Cordova and Electron</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les slides sont disponibles <a href="https://speakerdeck.com/christianweyer/full-throttle-cross-platform-development-with-angular-2-cordova-and-electron">ici</a></p>
</div>
<div class="paragraph">
<p>Christian et Thorsten voulait montrer une solution qui va peut \xEAtre s\u2019\xE9tendre dans les prochaines ann\xE9es. Vous \xE9crivez une seule base de code en Angular 2 et vous avez votre application web mais vous \xEAtes aussi capable de construire des applications natives sur mobile (IOS, Android et Microsoft \xE0 l\u2019aide de Cordova) et une application desktop (OSX, Linux, Windows via Electron)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-mobile02.jpg" alt="Christian Weyer &amp; Thorsten Hans">
</div>
<div class="title">photo de Philippe Chatel</div>
</div>
<div class="paragraph">
<p>Si vous \xEAtes utilisateur de Slack la partie desktop est par exemple g\xE9n\xE9r\xE9e via Electron</p>
</div>
<div class="paragraph">
<p>Ces projets sont tr\xE8s int\xE9ressants. Cordova propose de nombreux plugins pour pouvoir s\u2019interfacer avec les diff\xE9rents composants pr\xE9sents sur les device. Dans leur d\xE9monstration Christian et Thortsten interagissent avec la cam\xE9ra de leur mobile sous IOS.</p>
</div>
<div class="paragraph">
<p>En attendant la vid\xE9o de ng-europe vous pouvez visualiser celle de Angular Connect qui est un plus vieille mais qui aborde d\xE9j\xE0 le sujet.</p>
</div>
<div class="videoblock">
<div class="title">Voir la vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/xPlRItKTIL0?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>`;var ef=`<div class="sect1">
<h2 id="_marc_laval_custom_renderers_in_angular_2_slides"><a href="https://twitter.com/marclaval">Marc Laval</a> Custom renderers in Angular 2 : <a href="https://docs.google.com/presentation/d/1Ay8TXGblvW0Y9rXXresTPdOeYwOJIts0XJzEOiKXuhE/edit#slide=id.p">slides</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Angular 2 a revu toute la partie rendering pour deux raisons</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-rendering01.jpg" alt="Marc Laval">
</div>
<div class="title">Figure 1. photo de Philippe Chatel</div>
</div>
<div class="paragraph">
<p>Une application JavaScript s\u2019ex\xE9cute sur un seul thread. Pour \xE9viter de ralentir ce thread principal qui cumule ex\xE9cution des scripts et rendu de votre page, les web workers permettent d\u2019ex\xE9cuter du code en parall\xE8le dans d\u2019autres thread.</p>
</div>
<div class="paragraph">
<p>Comme nous faisons de plus en plus de traitement dans nos applications JavaScript vous pouvez avoir de gros ralentissements. Les appels distants en asynchrones on permis de r\xE9soudre ce probl\xE8me il y a quelques ann\xE9es mais ces derniers se multiplient et quand les r\xE9sultats arrivent et sont trait\xE9s nous retombons dans les m\xEAmes probl\xE8mes. L\u2019av\xE8nement des framework est aussi probl\xE9matique car toute la logique pour charger des ressources, les compiler, faire du routage accentue le nombre de traitements.</p>
</div>
<div class="paragraph">
<p>Avec les Web Workers le thread principal peut \xEAtre r\xE9serv\xE9 au rendering. Pour limiter les probl\xE8mes les web workers ont un acc\xE8s limit\xE9 aux API du navigateur. Ils ne peuvent par exemple pas interagir avec le DOM. Les \xE9changes entre thread se font par messages</p>
</div>
<div class="paragraph">
<p>Exemple d\u2019un worker initialis\xE9 dans le thread principal</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450716.2122"><span class="hljs-keyword">var</span> worker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&#x27;doWork.js&#x27;</span>);
worker.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Worker said: &#x27;</span>, e.<span class="hljs-property">data</span>);
}, <span class="hljs-literal">false</span>);
worker.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;Hello World&#x27;</span>); <span class="hljs-comment">// Send data to our worker.</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450716.2122')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voici \xE0 quoi ressemble un web worker. Dans notre exemple on s\u2019abonne \xE0 l\u2019\xE9v\xE9nement message et dans notre cas on renvoie le m\xEAme message au thread principal</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450716.7773">self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) {
  self.<span class="hljs-title function_">postMessage</span>(e.<span class="hljs-property">data</span>);
}, <span class="hljs-literal">false</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450716.7773')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Angular 2 se lance dans un web worker pour am\xE9liorer les performances. Nous allons avoir de grandes disparit\xE9s dans les temps d\u2019ex\xE9cution entre les navigateurs dits \u201Cmodernes\u201D et les \u201Canciens\u201D qui trainent \xE0 impl\xE9menter les derni\xE8res normes du W3C.</p>
</div>
<div class="paragraph">
<p>Revenons \xE0 notre sujet sur le rendering. La refonte permet d\u2019isoler les probl\xE9matiques de rendering. Ainsi nous aurons le cheminement suivant</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-rendering02.png" alt="Rendering Angular 2">
</div>
</div>
<div class="paragraph">
<p>L\u2019autre int\xE9r\xEAt d\u2019avoir dissocier le rendering du reste est que vous avez maintenant plusieurs solutions en sortie. Par d\xE9faut l\u2019application est rendue sur un navigateur Internet mais avec Angular 2 vous pouvez avoir un rendering sous forme d\u2019application mobile (react-native ou NativeScript).</p>
</div>
<div class="paragraph">
<p>Marc montre dans sa conf\xE9rence comment \xE9crire son propre render pour par exemple g\xE9n\xE9rer des fichiers markdown \xE0 partir d\u2019une application angular. Le r\xE9sultat est peut \xEAtre peu utile mais l\u2019exercice est int\xE9ressant pour montrer les possibilit\xE9s de rendering dans Angular.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_wassim_chegham_getting_universal_with_angular_2_slides"><a href="https://twitter.com/manekinekko">Wassim Chegham</a> Getting Universal with Angular 2 <a href="http://slides.com/wassimchegham/angular2-universal#/">slides</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Avec Angular 2 le rendering peut \xE9galement se faire c\xF4t\xE9 serveur. Nous pouvons nous interroger de l\u2019int\xE9r\xEAt.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-rendering03.jpg" alt="Wassim Chegham">
</div>
<div class="title">Figure 2. photo de Philippe Chatel</div>
</div>
<div class="paragraph">
<p>Le premier est le Search Engine Optimization (SEO). Pour rappel les robots des diff\xE9rents moteurs de recherche parsent r\xE9guli\xE8rement les sites web pour indexer les diff\xE9rentes pages d\u2019un site. Les robots ne comprennent pour la plupart que le HTML. Ils sont capables ensuite de parser les pages et de suivre les liens pour indexer plus en profondeur un site web.</p>
</div>
<div class="paragraph">
<p>Mais les applications Single Page propose un template de page principal souvent vide. En gros nous avons une page vide et c\u2019est le JavaScript qui va g\xE9n\xE9rer le contenu. Hormis Google qui a enrichit son robot pour \xEAtre capable de parser les sites \xE9crits en Angular, la plupart des moteurs de recherche vont au plus simple.</p>
</div>
<div class="paragraph">
<p>Cons\xE9quence votre site n\u2019est pas index\xE9. Vous pouvez faire des parades et intercepter l\u2019agent appelant votre serveur. Si ce dernier est un robot vous pouvez renvoyer des pages statiques. D\xE9porter le rendering c\xF4t\xE9 serveur permet de r\xE9soudre ce probl\xE8me, car dans tous les cas le HTML g\xE9n\xE9r\xE9 contiendra toutes les informations.</p>
</div>
<div class="paragraph">
<p>Le deuxi\xE8me probl\xE8me est li\xE9 au partage de lien dans les applications sociales. Quand vous indiquez une URL dans un message Twitter, Facebook, Google+, un aper\xE7u du site est potentiellement joint au message. Mais si votre site utilise un framework comme Angular, ces services ne voient qu\u2019une page blanche.</p>
</div>
<div class="paragraph">
<p>Le dernier point concerne le temps de chargement de votre application. On sait que les utilisateurs n\u2019aiment pas attendre mais quand votre application Angular se charge elle peut mettre du temps \xE0 le faire en fonction de sa taille. Pr\xE9m\xE2cher le travail c\xF4t\xE9 serveur peut dans ce cas encore, aider \xE0 am\xE9liorer ce qu\u2019on appel le first loadtime.</p>
</div>
<div class="paragraph">
<p>Nous savons maintenant pourquoi cette fonctionnalit\xE9 peut \xEAtre int\xE9ressante mais que se passe t-il si une fois l\u2019application charg\xE9e l\u2019utilisateur effectue des actions (car la page est finalis\xE9e et le framework Angular non boostrap\xE9).. La librairie preload.js permet d\u2019enregistrer les diff\xE9rents \xE9v\xE9nements et de les rejouer une fois que l\u2019application est initialis\xE9e.</p>
</div>
<div class="paragraph">
<p>Apr\xE8s on peut se dire mais c\u2019est cool on a du pre rendering mais qu\u2019en est il quand vous utilisez votre application ? En fait tout se passe comme avant, si votre route a besoin de charger un nouveau module il le fait, si un nouveau template doit \xEAtre affich\xE9 il est compil\xE9 et charg\xE9. En gros le server side rendering permet surtout d\u2019am\xE9liorer les performances au premier chargement.</p>
</div>
<div class="paragraph">
<p>Universal est le nom de code du projet o\xF9 vou retrouverez toutes les informations pour faire du server side rendering en Angular. Pour le moment votre serveur doit \xEAtre en .Net ou Node. Spring travaille sur le sujet pour nous fournir \xE7a dans les applications Java.</p>
</div>
</div>
</div>`;var sf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>RxJS s\u2019est retrouv\xE9 dans plusieurs conf\xE9rences. Comme pour le backend la programmation reactive est tr\xE8s pr\xE9sente dans les conf\xE9rences JavaScript</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_angular_rxjs">Angular &amp; RxJS</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code><em>by <a href="https://twitter.com/robwormald">Rob Wormald</a> : javascripter. googler. developer advocate for angular.</em></code></p>
</div>
<div class="paragraph">
<p>Rob nous a parl\xE9 de RxJS et comment l\u2019utiliser dans Angular avec les Observables. Ce sujet pourtant assez complexe pour mon oeil de novice est devenu beaucoup plus clair au fur et \xE0 mesure de la journ\xE9e.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope_rxjs_angular2_01.jpg" alt="Rob Wormald">
</div>
<div class="title">photo de Philippe Chatel</div>
</div>
<div class="paragraph">
<p>Les librairies Rx (reactive extensions) permettent de faire de la programmation asynchrone bas\xE9e sur des \xE9v\xE9nements. Les donn\xE9es peuvent \xEAtre assez diverses. On peut retrouver un flux de donn\xE9es transmis par un fichier, un appel REST, une s\xE9rie d\u2019\xE9v\xE9nement utilisateurs, des notifications du syst\xE8me.</p>
</div>
<div class="paragraph">
<p>Avec Rx ces donn\xE9es apparaissent comme des donn\xE9es observables. Votre application peut ensuite s\u2019abonner \xE0 ces s\xE9quences observables afin de pouvoir ex\xE9cuter un traitement quand de nouvelles informations arrivent (en asynchrone donc).</p>
</div>
<div class="paragraph">
<p>RxJS est une impl\xE9mentation en JS (sans d\xE9pendance) qui peut \xE0 la fois interagir avec des flux de donn\xE9es synchrones (objets Iterable) ou des donn\xE9es asynchrones (objets Promise). Vous pouvez utiliser l\u2019extension rx.angular pour b\xE9n\xE9ficier de ces possibilit\xE9s dans Angular 1.</p>
</div>
<div class="paragraph">
<p>Voici un exemple Angular utilisant les observables pour r\xE9cup\xE9rer des donn\xE9es</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450722.9387"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {
  myControl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormControl</span>();
  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">http:Http</span>){
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">myControl</span>.<span class="hljs-property">valueChanges</span>
      .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> <span class="hljs-string">&#x27;http://api.com?q=@dollar@{text}&#x27;</span>)
      .<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">url</span> =&gt;</span> http.<span class="hljs-title function_">get</span>(url), <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())
      .<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">results</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results));
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450722.9387')">Copy</button></pre>
</div>
</div>
<div class="videoblock">
<div class="title">Le talk de Rob en vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/WWR9nxVx1ec?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_you_will_learn_rxjs">You will learn RxJS</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code><em>by <a href="https://twitter.com/andrestaltz">Andr\xE9 Staltz</a> : Reactive programming expert, <a href="https://twitter.com/cyclejs">@cyclejs</a> creator and <a href="https://twitter.com/reactivex">@reactivex</a> addict..</em></code></p>
</div>
<div class="paragraph">
<p>Alors cette conf\xE9rence \xE9tait pour moi une des meilleures. Live coding oblige\u2026 Andr\xE9 est arriv\xE9 pour nous parler de RxJS et des Observables que l\u2019on retrouve aussi maintenant dans Angular. Son but \xE9tait de repartir de 0 pour montrer les concepts de base qui sont parfois mal appr\xE9hend\xE9s.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope_rxjs_angular2_02.jpg" alt="Andr\xE9 Staltz">
</div>
<div class="title">photo de Philippe Chatel</div>
</div>
<div class="paragraph">
<p>Aujourd\u2019hui quand vous manipulez une collection en mode synchrone vous utilisez un callback (ici j\u2019affiche les \xE9l\xE9ments du tableau <code><em>[1, 2, 3]</em></code>)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450722.198">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">elt</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(elt));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450722.198')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Quand vous faites un appel distant asynchrone vous utilisez 2 callbacks</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450723.559"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;api/sponsors&#x27;</span>).<span class="hljs-title function_">then</span>(
  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-title function_">json</span>()),
  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)
);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450723.559')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>D\u2019autres fonctions peuvent avoir 3 callbacks. Mais en gros nous sommes toujours sur le m\xEAme sch\xE9ma</p>
</div>
<div class="ulist">
<ul>
<li>
<p>un callback pour savoir quoi faire apr\xE8s (next)</p>
</li>
<li>
<p>un callback \xE0 ex\xE9cuter en ca d\u2019erreur (error)</p>
</li>
<li>
<p>un callback \xE0 ex\xE9cuter quand tout est termin\xE9 (complete)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Tout peut \xEAtre consid\xE9r\xE9 comme un stream (un flux en fran\xE7ais mais je pr\xE9f\xE8re garder le terme anglais dans mon article), un tableau, des \xE9v\xE9nements pouvant survenir dans le temps (par exemple clic sur un bouton), une vid\xE9o en streaming, une API Rest\u2026</p>
</div>
<div class="paragraph">
<p>Un stream peut \xEAtre vu comme l\u2019objet qui va \xEAtre scrut\xE9 de pr\xE8s quand il changera (objet Observable). Les observables peuvent \xEAtre surveill\xE9s par un ou plusieurs observateurs (Observer que nous avons vu avant et qui prend trois m\xE9thodes next, error et complete).</p>
</div>
<div class="paragraph">
<p>Un Observable peut se cr\xE9er de cette mani\xE8re</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450723.6794">myEventStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observable</span>(<span class="hljs-function"><span class="hljs-params">observer</span> =&gt;</span> {
  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
    observer.<span class="hljs-title function_">next</span>(<span class="hljs-number">42</span>);
  }, <span class="hljs-number">1000</span>);

  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
    observer.<span class="hljs-title function_">next</span>(<span class="hljs-number">43</span>);
  }, <span class="hljs-number">2000</span>);

  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> {
    observer.<span class="hljs-title function_">complete</span>();
  }, <span class="hljs-number">3000</span>);
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450723.6794')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>En gros je vais recevoir de mani\xE8re asynchrone des donn\xE9es toutes les secondes. Le stream sera termin\xE9 au bout de 3. Cet observable va ensuite \xEAtre li\xE9 \xE0 un Observer via la m\xE9thode suscribe. Un Observer impl\xE9mentera en gros les 3 callbacks de tout \xE0 l&#8217;heure</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450724.1597"><span class="hljs-keyword">let</span> values = [];
<span class="hljs-keyword">let</span> subscription = myEventStream.<span class="hljs-title function_">subscribe</span>(
  <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> values.<span class="hljs-title function_">push</span>(val),
  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error),
  <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;done&#x27;</span>)
);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450724.1597')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Andr\xE9 nous a ensuite expliqu\xE9 comment rajouter des op\xE9rateurs sur les Observable (map, filter&#8230;&#8203;). Je vous conseille <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">un de ces articles</a> qui est tr\xE8s bien pour expliquer le fonctionnement de Rx.</p>
</div>
<div class="videoblock">
<div class="title">Le talk de Andr\xE9 en vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/uQ1zhJHclvs?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_reactive_music_apps_in_angular_and_rxjs">Reactive Music Apps in Angular and RxJS</h2>
<div class="sectionbody">
<div class="paragraph">
<p><code><em>by <a href="https://twitter.com/teropa">Tero Parviainen</a> : Independent contractor, programmer, writer.</em></code></p>
</div>
<div class="paragraph">
<p>Certainement la conf\xE9rence arrivant en t\xEAte \xE0 l\u2019applaudim\xE8tre. C\u2019\xE9tait tr\xE8s bien mais mieux qu\u2019un r\xE9sum\xE9 \xE9crit par mes soins voici <a href="http://teropa.info/blog/2016/07/28/javascript-systems-music.html">un article de Tero</a> qui explique ce qu\u2019il a montr\xE9</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope_rxjs_angular2_03.jpg" alt="Tero Parviainen">
</div>
<div class="title">photo de Philippe Chatel</div>
</div>
<div class="videoblock">
<div class="title">Le talk de Tero en vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/-fPyfSAEZgk?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>`;var tf=`<div class="paragraph">
<p>C\u2019est agr\xE9able de voir cette collaboration entre Google et Microsoft. Google s\u2019est trouv\xE9 un alli\xE9 de marque et je pense qu&#8217;ils ont bien fait d\u2019utiliser TypeScript plut\xF4t que de partir sur leur propre impl\xE9mentation de Javascript++ (AtScript).</p>
</div>
<div class="paragraph">
<p><a href="https://twitter.com/drosenwasser">Daniel Rosenwasser</a> chef de projet du projet <a href="https://www.typescriptlang.org/">TypeScript</a> chez Microsoft est venu \xE0 ng-europe pour montrer par l&#8217;exemple comment \xE9crire en TypeScript une application Angular ou plus g\xE9n\xE9ralement JavaScript. Ces exemples sont disponibles <a href="https://github.com/DanielRosenwasser/ng-conf-2016">ici</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/ngeurope/ngeurope-typescript00.jpg" alt="Daniel Rosenwasser">
</div>
<div class="title">photo de Philippe Chatel</div>
</div>
<div class="paragraph">
<p>Pendant 25 minutes Daniel a essay\xE9 de montrer les int\xE9r\xEAts d\u2019utiliser des types en JavaScript mais aussi d\u2019autres fonctionnalit\xE9s. En gros il est parti de fichier js existant et les a migr\xE9 ensuite en TypeScript.</p>
</div>
<div class="paragraph">
<p>Bon vous pouvez aussi ne pas conna\xEEtre le langage TypeScript. En gros c\u2019est un sur ensemble de JavaScript qui est ensuite compil\xE9 en JavaScript standard. TypeScript introduit plusieurs notions comme les types, les d\xE9corateurs (genre d\u2019annotation Java) et pleins de petites am\xE9liorations.</p>
</div>
<div class="paragraph">
<p>Certains amoureux du JavaScript diront que les gens du backend sont en train de prendre la main sur les d\xE9veloppements front. Mais \xE0 mon sens TypeScript a vraiment des avantages. Introduire des types ou des interfaces permet aux IDE d\u2019am\xE9liorer le tooling pour les d\xE9veloppeurs.</p>
</div>
<div class="paragraph">
<p>La compl\xE9tion est grandement am\xE9lior\xE9e et vous pouvez avoir des d\xE9tections d\u2019erreur beaucoup plus pr\xE9cises que les JS Lint classiques (analyseurs de qualit\xE9 de code JS). Un gros effort a \xE9t\xE9 fait pour que TypeScript marche sur toutes les plateformes et puisse simplifier la vie des d\xE9veloppeurs quelque soit l\u2019IDE utilis\xE9.</p>
</div>
<div class="paragraph">
<p>La version 2.0 de TypeScript a \xE9t\xE9 annonc\xE9e en septembre et apporte une option pour vous imposer \xE0 g\xE9rer les valeurs nulles finement. Si vous activez --strictNullChecks une donn\xE9e typ\xE9e ne pourra plus prendre les valeurs nulle ou undefined et vous devrez le g\xE9rer dans votre code (c\u2019est un peu ce qu\u2019on retrouve dans Kotlin)</p>
</div>
<div class="paragraph">
<p>Il existe plusieurs autres petites nouveaut\xE9s. Je vous laisse regarder la vid\xE9o de Daniel.</p>
</div>
<div class="videoblock">
<div class="title">Voir la vid\xE9o</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/o8YI2hvassE?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>`;var af=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Je vais vous parler aujourd\u2019hui du langage Kotlin qui est sorti dans sa version 1.0 depuis f\xE9vrier 2016.</p>
</div>
<div class="paragraph">
<p>Kotlin est un langage de programmation cr\xE9\xE9 par JetBrains qui compile le code en bytecode afin d\u2019\xEAtre ex\xE9cut\xE9 sur une machine virtuelle Java. JetBrains l\u2019a cr\xE9\xE9 pour d\xE9velopper plus efficacement ses diff\xE9rents produits (IntelliJ, Webstorm\u2026)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/springkotlin_00.png" alt="Spring Kotlin">
</div>
</div>
<div class="paragraph">
<p>Je profite ici de l\u2019intervention de <a href="https://twitter.com/sdeleuze">S\xE9bastien Deleuze</a> (Pivotal) \xE0 la premi\xE8re session du <a href="https://twitter.com/KotlinLyon">Lyon Kotlin user groupe</a> pour parler de Kotlin dans le monde Spring.</p>
</div>
<div class="paragraph">
<p>Si vous \xEAtes int\xE9ress\xE9 voici les supports propos\xE9s par S\xE9bastien</p>
</div>
<div class="ulist">
<ul>
<li>
<p>les <a href="https://speakerdeck.com/sdeleuze/developing-a-geospatial-webservice-with-spring-boot-and-kotlin">slides</a> de sa session</p>
</li>
<li>
<p>son <a href="https://github.com/sdeleuze/geospatial-messenger">projet exemple</a></p>
</li>
<li>
<p>le <a href="https://github.com/sdeleuze/spring-kotlin">repository Github</a> o\xF9 Spring met \xE0 disposition les extensions qui permettent de simplifier les interactions entre Spring et Kotlin</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Comme j\u2019aime bien aussi exp\xE9riment\xE9 par moi m\xEAme voici un POC assez simple mettant en oeuvre ce qui est dit dans cet article.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pr\xE9sentation_du_langage">Pr\xE9sentation du langage</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Je vais rapidement \xE9num\xE9rer les int\xE9r\xEAts du langage mais pour un avis plus pertinent que le mien je vous conseille de lire l\u2019 <a href="http://blog.ninja-squad.com/2016/05/31/first-kotlin-project/">article de Jean Baptiste Nizet</a>.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>moins verbeux que le langage Java tout en \xE9tant presque aussi performant. Le code est compil\xE9 en bytecode et profite donc des optimisations de la JVM au Runtime</p>
</li>
<li>
<p>langage fortement typ\xE9 mais assez intelligent pour exploiter un maximum l\u2019inf\xE9rence de type et ne pas vous demander de saisir le type quand il est capable de le trouver tout seul</p>
</li>
<li>
<p>la d\xE9finition de DTO est hyper simple</p>
</li>
<li>
<p>Null safety. Par d\xE9faut aucune valeur ne peut \xEAtre nulle et le compilateur g\xE9n\xE8re une exception quand une valeur nulle n\u2019est pas g\xE9rer. Vous devez explicitement d\xE9finir le comportement quand une valeur peut \xEAtre nulle.</p>
</li>
<li>
<p>Kotlin propose les extensions de m\xE9thodes qui s\u2019av\xE8re tr\xE8s pratique pour \xE9tendre le comportement des classes existantes m\xEAme si elles sont fournies par un framework externe.</p>
</li>
<li>
<p>Vous pouvez vous passer des points virgule mais personnellement ce n\u2019est pas la fonctionnalit\xE9 qui me fait triper</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>D\u2019apr\xE8s un sondage effectu\xE9 sur le <a href="https://kotlinlang.slack.com/">Slack</a> de la team Kotlin, les d\xE9veloppeurs utilisent en majorit\xE9 Kotlin pour simplifier le d\xE9veloppement des applications Android.</p>
</div>
<div class="paragraph">
<p>J\u2019ai beaucoup appr\xE9ci\xE9 la comparaison faite par S\xE9bastien avec d\u2019autres langages</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Kotlin apporte la m\xEAme concision que Groovy mais les types statiques et le null safety est un gros plus</p>
</li>
<li>
<p>Par rapport \xE0 Scala qui est un langage peut \xEAtre plus \xE0 destination de la recherche ou des uses cases scientifiques (big data\u2026), Kotlin fait pratiquement aussi bien mais avec beaucoup moins de fonctionnalit\xE9s ("Some people say Kotlin has 80% the power of Scala, with 20% of the features")</p>
</li>
<li>
<p>Swift se rapproche grandement de Kotlin sauf que la cible n\u2019est pas la JVM mais plut\xF4t une compilation en langage machine via LLVM</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_d\xE9marrer_un_projet_spring">D\xE9marrer un projet Spring</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Regardons comment d\xE9marrer un projet Spring. Il est bon de noter que Kotlin fait partie des 3 langages support\xE9s par Spring (avec Java et Groovy). J\u2019ai lanc\xE9 ici le wizard dans IntelliJ mais vous pouvez faire exactement la m\xEAme chose sur <a href="http://start.spring.io/#!language=kotlin" class="bare">http://start.spring.io/#!language=kotlin</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/springkotlin_01.png" alt="D\xE9marrer un projet Spring Kotlin">
</div>
</div>
<div class="paragraph">
<p>Votre premier projet est initialis\xE9. Nous allons cr\xE9er une API REST qui permet de renvoyer le nom de soci\xE9t\xE9 et leurs employ\xE9s. Au niveau IDE j&#8217;ai utilis\xE9 IntelliJ.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_des_pojos_enfin_lisibles">Des POJOs enfin lisibles</h2>
<div class="sectionbody">
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450761.0469"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Company</span>(
        <span class="hljs-keyword">var</span> name: String,
        <span class="hljs-keyword">var</span> id: Int? = <span class="hljs-literal">null</span>,
        <span class="hljs-keyword">var</span> workers : MutableList<span class="hljs-meta">@LTWorker</span><span class="hljs-meta">@GT</span> = mutableListOf()
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450761.0469')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Par d\xE9faut vous n\u2019avez pas besoin de d\xE9finir de constructeurs, de getter et de setter . Il est int\xE9ressant de souligner que le type <code><em>List</em></code> par d\xE9faut est non mutable et que vous devez utiliser <code><em>MutableList</em></code> si votre liste doit \xEAtre mutable.</p>
</div>
<div class="paragraph">
<p>Si vous avez besoin que la classe mette \xE0 disposition les m\xE9thodes <code><em>hascode</em></code> et <code><em>equals</em></code> vous aller d\xE9finir une <code><em>data class</em></code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450761.9976">data <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span>(
        <span class="hljs-keyword">var</span> firstname: String,
        <span class="hljs-keyword">var</span> lastname: String,
        <span class="hljs-keyword">var</span> company: Company,
        <span class="hljs-keyword">var</span> id: Int? = <span class="hljs-literal">null</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450761.9976')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Notez le \xAB ? \xBB qui permet d\u2019indiquer qu\u2019une valeur peut \xEAtre nulle. L\u2019avantage de l\u2019initialiser \xE0 null est que Kotlin mettra \xE0 disposition 2 constructeurs : un avec tous les champs obligatoires et l\u2019autre avec l\u2019ensemble des champs</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450761.5261"><span class="hljs-type">val</span> <span class="hljs-variable">guillaume</span> <span class="hljs-operator">=</span> Worker(<span class="hljs-string">&quot;Guillaume&quot;</span>, <span class="hljs-string">&quot;EHRET&quot;</span>)
<span class="hljs-type">val</span> <span class="hljs-variable">guillaume</span> <span class="hljs-operator">=</span> Worker(<span class="hljs-string">&quot;Guillaume&quot;</span>, <span class="hljs-string">&quot;EHRET&quot;</span>, Company(<span class="hljs-string">&quot;Dev-Mind&quot;</span>))</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450761.5261')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mise_en_place_dun_service_rest">Mise en place d\u2019un service REST</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous allons essayer d\u2019exposer un service REST qui expose la liste des travailleurs. Avant de commencer il est important de se pencher sur une sp\xE9cificit\xE9 du langage Kotlin. Toutes les classes par d\xE9faut sont d\xE9finies comme final et ne peuvent donc pas \xEAtre \xE9tendues. Si vous ne voulez pas qu\u2019elles soient final vous devez explicitement d\xE9clarer des classes pr\xE9fix\xE9es par le mot cl\xE9 open.</p>
</div>
<div class="paragraph">
<p>Cette sp\xE9cificit\xE9 engendre pas mal de souci quand vous voulez utiliser des proxy (ce que Spring fait beaucoup). Quand vous ajoutez des interfaces \xE0 vos classes, Spring utilise les proxies fournis par le langage Java et ne rencontre pas de probl\xE8me. Pour toutes les autres classes, Spring utilise Cglib pour cr\xE9er des proxies et si la classe n\u2019est pas open, la magie Spring ne pourra pas op\xE9rer.</p>
</div>
<div class="paragraph">
<p>Pivotal et JetBrains sont en discussion pour simplifier ces limitations et aider le travail des frameworks. Voici comment d\xE9clarer votre application SpringBoot</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450761.746"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableTransactionManagement</span>
open <span class="hljs-keyword">class</span> <span class="hljs-title class_">DevmindKotlinApplication</span>{
    <span class="hljs-meta">@Bean</span>
    open fun <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(dataSource: DataSource)</span> = SpringTransactionManager(dataSource)
}

fun <span class="hljs-title function_">main</span><span class="hljs-params">(args: Array<span class="hljs-meta">@LTString</span><span class="hljs-meta">@GT</span>)</span> {
    SpringApplication.run(DevmindKotlinApplication::class.java, *args)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450761.746')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Au niveau du service REST voici un exemple qui montre encore le gain au niveau lisibilit\xE9 du code</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450761.5352"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(&quot;/companies&quot;)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">CompanyController</span>(val companyRepository: CompanyRepository){

    <span class="hljs-meta">@GetMapping</span>    fun <span class="hljs-title function_">list</span><span class="hljs-params">()</span> = companyRepository.findAll();

    <span class="hljs-meta">@GetMapping(&quot;/{id}&quot;)</span>
    fun <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> id: Int)</span> = companyRepository.findById(id);

    <span class="hljs-meta">@PostMapping</span>    fun <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> company: Company)</span> = companyRepository.create(company)

    <span class="hljs-meta">@PutMapping(&quot;/{id}&quot;)</span>
    fun <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> id: Int, <span class="hljs-meta">@RequestBody</span> company: Company)</span> = companyRepository.update(id, company);
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450761.5352')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Notez ici que les types de retour ne sont pas forc\xE9ment d\xE9clar\xE9s mais d\xE9duits des appels des m\xE9thodes du Repository.</p>
</div>
<div class="paragraph">
<p>Vous n\u2019avez plus besoin depuis Spring 4.3 de d\xE9clarer un @Autowired quand vous faites une injection par constructeur. Dans notre cas le workerRepository est directement inject\xE9 par Spring \xE0 la cr\xE9ation de la classe.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_arguments_par_d\xE9faut">Les arguments par d\xE9faut</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Je n\u2019ai pas encore parl\xE9 d\u2019une fonctionnalit\xE9 importante du langage. Vous pouvez d\xE9finir des valeurs par d\xE9faut et utiliser des param\xE8tres nomm\xE9s lors de l\u2019appel</p>
</div>
<div class="paragraph">
<p>Si je d\xE9clare la fonction suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450762.2258"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">formatDate</span><span class="hljs-params">(string: <span class="hljs-type">Date</span>, format: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>, addDay: <span class="hljs-type">Int</span> =<span class="hljs-number">0</span>)</span></span> : String</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450762.2258')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Il existe diff\xE9rentes mani\xE8res d\u2019appeler cette m\xE9thode formatDate</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450762.466">formatDate(Date())
formatDate(Date(), <span class="hljs-string">&quot;yyyy&quot;</span>)
formatDate(Date(), addDay = <span class="hljs-number">2</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450762.466')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_et_si_on_essayait_autre_chose_que_jpa">Et si on essayait autre chose que JPA</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Super mais maintenant quand est il de la persistance ? La majorit\xE9 des projets stockent leurs donn\xE9es dans une base de donn\xE9es. Vous pouvez utiliser pour cela les librairies mises \xE0 disposition par Spring pour faire du JPA (ex Spring Data).</p>
</div>
<div class="paragraph">
<p>Mais la stack JPA est parfois assez lourde, utilise pas mal de m\xE9moire, retarde le d\xE9marrage de votre application. JPA vous limite aussi dans l\u2019utilisation des fonctions natives des bases de donn\xE9es. Le seul avantage reste le changement de base de donn\xE9es qui n\u2019arrive pas vraiment dans la vie d\u2019un projet.</p>
</div>
<div class="paragraph">
<p>Le use case le plus fr\xE9quent est d\u2019utiliser une base diff\xE9rente en test. Mais il est plut\xF4t conseill\xE9 d\u2019ex\xE9cuter les tests sur le m\xEAme type de base de donn\xE9es que la cible et vous pouvez toujours mettre en place des parades pour les tests.</p>
</div>
<div class="paragraph">
<p>Nous allons donc voir comment faire directement du JDBC. Kotlin propose la librairie <a href="https://github.com/JetBrains/Exposed">exposed</a>. Cette librairie apporte un DSL pour d\xE9crire les tables de votre mod\xE8le et faciliter le requ\xEAtage.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450763.3667"><span class="hljs-keyword">object</span> Companies : Table() {
    <span class="hljs-keyword">val</span> id = integer(<span class="hljs-string">&quot;id&quot;</span>).autoIncrement().primaryKey()
    <span class="hljs-keyword">val</span> name = varchar(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">50</span>)
}
<span class="hljs-keyword">object</span> Workers : Table() {
    <span class="hljs-keyword">val</span> id = integer(<span class="hljs-string">&quot;id&quot;</span>).autoIncrement().primaryKey()
    <span class="hljs-keyword">val</span> firstname = varchar(<span class="hljs-string">&quot;firstname&quot;</span>, length = <span class="hljs-number">150</span>)
    <span class="hljs-keyword">val</span> lastname = varchar(<span class="hljs-string">&quot;lastname&quot;</span>, length = <span class="hljs-number">150</span>)
    <span class="hljs-keyword">val</span> companyId = integer(<span class="hljs-string">&quot;company_id&quot;</span>) references Companies.id}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450763.3667')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous pouvons cr\xE9er une interface pour nos DAO.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450763.8916"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CrudRepository</span><span class="hljs-meta">@LTT</span>, <span class="hljs-type">K@GT</span> {
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createTable</span><span class="hljs-params">()</span></span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">create</span><span class="hljs-params">(m: <span class="hljs-type">T</span>)</span></span>: T    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(id: <span class="hljs-type">K</span>, m: <span class="hljs-type">T</span>)</span></span>: K    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(id: <span class="hljs-type">K</span>)</span></span>: T    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>: <span class="hljs-symbol">Iterable@</span><span class="hljs-symbol">LTT@</span>GT
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450763.8916')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voici par exemple comment \xE9crire les m\xE9thodes CRUD en utilisant le DSL de la librairie exposed.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912450764.5266"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CompanyRepository</span> : <span class="hljs-type">CrudRepository@LTCompany</span>, <span class="hljs-type">Int@GT</span>

<span class="hljs-meta">@Repository</span><span class="hljs-meta">@Transactionalclass</span> DefaultCompanyRepository : CompanyRepository {

    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">createTable</span><span class="hljs-params">()</span></span> = SchemaUtils.create(Companies);

    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">create</span><span class="hljs-params">(company: <span class="hljs-type">Company</span>)</span></span>: Company {
        company.id = Companies.insert(toRow(company)).generatedKey        <span class="hljs-keyword">return</span> company
    }

    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(id: <span class="hljs-type">Int</span>, company: <span class="hljs-type">Company</span>)</span></span>: <span class="hljs-built_in">Int</span> = Companies.update({ Companies.id eq id}) { toRow(company) }

    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(id: <span class="hljs-type">Int</span>)</span></span>: Company = Companies.select({ Companies.id eq id}).map { fromRow(it) }.first()

    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>: <span class="hljs-symbol">Iterable@</span><span class="hljs-symbol">LTCompany@</span>GT = Companies.selectAll().map { fromRow(it) }
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">deleteAll</span><span class="hljs-params">()</span></span> = Companies.deleteAll()

    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toRow</span><span class="hljs-params">(company: <span class="hljs-type">Company</span>)</span></span>: Companies.(<span class="hljs-symbol">UpdateBuilder@</span>LT*<span class="hljs-meta">@GT</span>) <span class="hljs-meta">@LAMBDA</span> <span class="hljs-built_in">Unit</span> = {        it[name] = company.name        <span class="hljs-keyword">if</span> (company.id != <span class="hljs-literal">null</span>) it[id] = company.id    }
    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fromRow</span><span class="hljs-params">(result: <span class="hljs-type">ResultRow</span>)</span></span> =
            Company(result[Companies.name],
                    result[Companies.id])

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450764.5266')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>S\xE9bastien nous a montr\xE9 \xE9galement comment utiliser Kotlin pour \xE9crire vos scripts Gradle. Kotlin va faciliter le travail des \xE9diteurs, qui vont pouvoir faire de l&#8217;auto compl\xE9tion et de la validation.</p>
</div>
<div class="paragraph">
<p>Les exemples expos\xE9s ici sont disponible dans ce projet Github mais n\u2019h\xE9sitez pas \xE0 vous r\xE9f\xE9rer aux ressources que j\u2019ai expos\xE9es au d\xE9but de cet article et notamment le projet exemple de S\xE9bastien qui lui utilise un script Gradle en Kotlin</p>
</div>
</div>
</div>`;var nf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Le web se base sur le protocole HTTP (HyperText Transfer Protocol). Ce protocole permet d\u2019\xE9changer des documents hyperm\xE9dia entre un client (un navigateur Internet) et un serveur. Le client ouvre une connexion, \xE9met une requ\xEAte et attend une r\xE9ponse.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/springhttp2_00.png" alt="Spring boot HTTP/2">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_http_1_1_1">HTTP 1 &amp; 1.1</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Au d\xE9part (en 1991), HTTP ne pouvait transf\xE9rer que des fichiers. Le protocole a ensuite vite \xE9volu\xE9 (version 1.0 en 1996) pour permettre le transfert de tout type de fichiers comme des images, vid\xE9os, scripts, feuilles de styles\u2026 La version 1.1 a permis d\u2019am\xE9liorer les performances en permettant de r\xE9utiliser la m\xEAme connexion. C\u2019est la version la plus r\xE9pandue aujourd\u2019hui alors qu\u2019elle date de pratiquement 20 ans. Il aura fallu attendre tout ce temps pour que les diff\xE9rents acteurs s\u2019entendent sur une nouvelle version du protocole.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_http_2">HTTP 2</h2>
<div class="sectionbody">
<div class="paragraph">
<p>La version 2 a \xE9t\xE9 finalis\xE9e en 2015 et est en cours de d\xE9ploiement. Cette nouvelle mouture se veut tout d\u2019abord \xE0 100% r\xE9trocompatible afin de ne pas \xE0 avoir \xE0 changer le code des diff\xE9rentes applications utilisant les versions anciennes du protocole. En gros les m\xE9thodes, statuts, codes erreur sont conserv\xE9s.</p>
</div>
<div class="paragraph">
<p>Le but principal de HTTP2, est de rendre les requ\xEAtes moins co\xFBteuses en ressources, afin d\u2019am\xE9liorer les performances sur des devices o\xF9 la qualit\xE9 du r\xE9seau varie beaucoup.</p>
</div>
<div class="paragraph">
<p>HTTP se base sur les protocoles TCP et IP. Actuellement HTTP peut ouvrir plusieurs connexions TCP en parall\xE8le ce qui peut congestionner le r\xE9seau. Les navigateurs mettent des garde fous en limitant ce nombre de requ\xEAtes et si votre site doit charger beaucoup de ressources, les temps de chargement peuvent \xEAtre assez longs.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/springhttp2_01.png" alt="Spring boot HTTP 1">
</div>
</div>
<div class="paragraph">
<p>Avec HTTP 2 le but est de regrouper ces \xE9changes sur la m\xEAme connexion TCP.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/springhttp2_01.png" alt="Spring boot HTTP 2">
</div>
</div>
<div class="paragraph">
<p>HTTP 2 n\u2019impose pas de s\xE9curiser les \xE9changes en cryptant les informations via un chiffrement TLS. Mais il va par contre limiter le surco\xFBt dans le chiffrement. Certaines impl\xE9mentations comme nous allons le voir plus loin et vous imposent des \xE9changes s\xE9curis\xE9s.</p>
</div>
<div class="paragraph">
<p>HTTP 2 permet le multiplexage pour \xE9changer diff\xE9rents messages en m\xEAme temps. Une connexion TCP est aujourd\u2019hui cl\xF4tur\xE9e \xE0 la fin d\u2019un \xE9change. En HTTP 2 un client pourra maintenir une connexion m\xEAme si l\u2019utilisateur clique sur un bouton ou choisit de fermer une connexion. Ceci permet au serveur de pouvoir faire du push.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_spring_boot_et_http_2">Spring Boot et HTTP 2</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Regardons maintenant comment migrer une application Spring Boot pour que cette derni\xE8re puisse b\xE9n\xE9ficier de HTTP 2. Ces probl\xE9matiques ne sont d\u2019ailleurs pas li\xE9es \xE0 Spring mais au container dans lequel l&#8217;application sera d\xE9ploy\xE9e.</p>
</div>
<div class="paragraph">
<p>Par d\xE9faut une application Spring Boot utilise un Tomcat embarqu\xE9. Tomcat n\u2019impl\xE9mente HTTP 2 que depuis la version 8.5, Jetty depuis 9.3 et Undertow depuis sa version 1.2.</p>
</div>
<div class="paragraph">
<p>Vous pouvez consulter l\u2019exemple de <a href="https://twitter.com/brianclozel?lang=fr">Brian Clozel</a> (Pivotal) sous <a href="https://github.com/bclozel/http2-experiments">Github</a> fait pour Jetty en HTTP 2. Je vous conseille aussi vivement de suivre le talk de Brian sur <a href="https://www.infoq.com/fr/presentations/mix-it-brian-clozel-http2-pour-le-developpeur-web">HTTP 2  \xE0 Mix-IT</a> en 2016.</p>
</div>
<div class="paragraph">
<p>Dans cet article nous allons d\xE9tailler comment mettre en place undertow</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_changer_les_d\xE9pendances">Changer les d\xE9pendances</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans la premi\xE8re \xE9tape nous allons changer le build pour utiliser undertow \xE0 la place de Tomcat</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450753.2292">compile(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>) {
    exclude <span class="hljs-keyword">module</span>: <span class="hljs-string">&quot;spring-boot-starter-tomcat&quot;</span>
}
compile <span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-undertow&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450753.2292')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_configuration_tls">Configuration TLS</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vous pouvez cr\xE9er votre propre keystore (.jks). Le but est de le r\xE9f\xE9rencer ensuite dans la configuration Spring</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450754.77"><span class="hljs-attr">server</span>:
  <span class="hljs-attr">ssl</span>:
    key-<span class="hljs-attr">store</span>: <span class="hljs-attr">classpath</span>:perf.<span class="hljs-property">jks</span>
    key-store-<span class="hljs-attr">password</span>: <span class="hljs-title class_">DevMind</span>
    key-<span class="hljs-attr">password</span>: <span class="hljs-title class_">DevMind</span>
    <span class="hljs-attr">protocol</span>: <span class="hljs-title class_">TLSv1</span><span class="hljs-number">.2</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450754.77')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans le cadre de vos tests vous pouvez g\xE9n\xE9rer une keystore simple avec cette ligne de commande. Pour de la prod vous pouvez passer par exemple par du <a href="https://letsencrypt.org/">let&#8217;s encrypt</a></p>
</div>
<div class="literalblock">
<div class="content">
<pre>keytool -genkeypair -alias mycert -keyalg RSA -sigalg MD5withRSA -keystore perf.jks -storepass DevMind -keypass DevMind -validity 9999</pre>
</div>
</div>
<div class="paragraph">
<p>HTTP 2 utilise un nouveau protocole appel\xE9 TLS ALPN (TLS application-layer protocol negotiation). Nous avons pr\xE9ciser la version dans le fichier de param\xE8tres juste ci dessus (TLSv1.2). En attendant que le JDK int\xE8gre ce protocole en standard, nous devons ajouter dans le classpath une librairie lors du lancement de l\u2019application (voir la liste)</p>
</div>
<div class="literalblock">
<div class="content">
<pre>java -Xbootclasspath/p:@LTpath_to_alpn_boot_jar@GT \u2026</pre>
</div>
</div>
<div class="paragraph">
<p>Dans mon exemple j\u2019utilise Java 1.8.0_101 et la version de la librairie est alpn-boot-8.1.9.v20160720 (voir la <a href="http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-versions">liste</a>)</p>
</div>
<div class="paragraph">
<p>Pour mes tests voici mon launcher dans IntelliJ</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/springhttp2_03.png" alt="Spring boot HTTP/2">
</div>
</div>
<div class="paragraph">
<p>Maintenant tout est pr\xEAt pour faire de l\u2019HTTP 2.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_r\xE9f\xE9rences">R\xE9f\xE9rences</h2>
<div class="sectionbody">
<div class="paragraph">
<p>J&#8217;esp\xE8re vous avoir montr\xE9 que nous pouvons passer d\xE8s maintenant \xE0 HTTP 2. Voici quelques r\xE9f\xE9rences qui m&#8217;ont servi \xE0 \xE9crire cet article. Les sources sont disponibles sous Github.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-versions" class="bare">http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-versions</a></p>
</li>
<li>
<p><a href="https://github.com/bclozel/http2-experiments" class="bare">https://github.com/bclozel/http2-experiments</a></p>
</li>
<li>
<p><a href="http://undertow.io/" class="bare">http://undertow.io/</a></p>
</li>
</ul>
</div>
</div>
</div>`;var of=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Je vais vous parler d&#8217;un ensemble d&#8217;outils mis \xE0 disposition par Spring pour am\xE9liorer le quotidien des d\xE9veloppeurs des applications Spring Boot. Les <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html">DevTools</a> permettent d\u2019automatiser le red\xE9marrage et le rechargement de votre application lorsque les fichiers sources sont recompil\xE9s ou modifi\xE9s.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/springdevtools_00.png" alt="Spring devtools">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_configuration">Configuration</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour installer DevTools vous devez simplement ajouter la d\xE9pendance \xE0 votre projet SpringBoot. Par exemple avec Gradle vous ajoutez</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450747.2854">compile <span class="hljs-string">&quot;org.springframework.boot:spring-boot-devtools&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450747.2854')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Il est pr\xE9f\xE9rable d\u2019utiliser ces fonctionnalit\xE9s uniquement en d\xE9veloppement et non en production. Si vous oubliez d\u2019enlever la d\xE9pendance, il y a tout de m\xEAme une d\xE9sactivation \u201Cautomatique\u201D. Spring Boot consid\xE8re que vous \xEAtes en production quand le jar de l\u2019application est lanc\xE9 via java -jar ou lorsque le classpath est personnalis\xE9.</p>
</div>
<div class="paragraph">
<p>En mode d\xE9veloppement DevTools est capable de d\xE9sactiver certaines propri\xE9t\xE9s de cache susceptible d\u2019\xEAtre utilis\xE9es par des librairies Spring, notamment celles de templating (voir la <a href="https://github.com/spring-projects/spring-boot/blob/v1.3.5.RELEASE/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java">liste des propri\xE9t\xE9s</a>)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_projet_exemple">Projet exemple</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Avant d\u2019aller plus loin il est toujours int\xE9ressant de se baser sur un exemple concret. Vous pouvez utiliser un de vos projets ou vous pouvez r\xE9cup\xE9rer sous Github  <a href="https://github.com/Dev-Mind/devmind-devtools">cet exemple (SpringBoot / ES6)</a>. Ce starter utilise Gradle pour le packaging Java et Gulp/npm pour toute la partie Javascript. Vous avez peut \xEAtre d\u2019autres mani\xE8res de faire mais personnellement j\u2019aime bien d\xE9coupler compl\xE8tement les d\xE9veloppements front et back de mes applications.</p>
</div>
<div class="paragraph">
<p>Si vous voulez tester ce projet sur votre poste vous pouvez le cloner et lancer la commande</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450747.6067">./gradlew bootRun</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450747.6067')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Spring Boot va d\xE9marrer un serveur d\u2019application Tomcat, et servir l\u2019application sur <a href="http://localhost:8080" class="bare">http://localhost:8080</a>.</p>
</div>
<div class="paragraph">
<p>L\u2019application est d\xE9coup\xE9e en 2 modules</p>
</div>
<div class="ulist">
<ul>
<li>
<p>dm-client : pour la partie cliente initi\xE9e via <a href="https://github.com/google/web-starter-kit">Google WebKit Starter</a> (la configuration a \xE9t\xE9 l\xE9g\xE8rement chang\xE9e pour ne pas utiliser de framework CSS et faire de l\u2019ES6)</p>
</li>
<li>
<p>dm-server : la partie backend est \xE9crite en Java et utilise Spring Boot</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Pour la petite histoire je ne voulais pas rentrer dans la guerre des frameworks c\xF4t\xE9 front et j\u2019ai d\xE9velopp\xE9 une application en utilisant JavaScript ES6 (ES2015) ainsi que l\u2019API fetch pour charger des ressources web ou REST. Les scripts sont transpil\xE9s via Babel en ES5.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_red\xE9marrage_automatique">Red\xE9marrage automatique</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Lorsque DevTools est ajout\xE9 \xE0 votre projet Spring, la compilation d&#8217;un fichier source va d\xE9clencher un red\xE9marrage pour vous aider \xE0 tester au plus vite votre modification. La compilation n&#8217;est pas toujours automatique dans un IDE. Sous IntelliJ vous devez faire <code><em>Ctrl+F9</em></code> ou aller dans le menu <code><em>Build</em></code> @GT <code><em>Make project</em></code>.</p>
</div>
<div class="paragraph">
<p>Super mais quand est il de ma partie Javascript ?</p>
</div>
<div class="paragraph">
<p>Vous pouvez ajouter diff\xE9rentes propri\xE9t\xE9s pour surveiller d\u2019autres ressources que des fichiers Java.</p>
</div>
<div class="paragraph">
<p>Voici un exemple en YAML</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450748.192"><span class="hljs-attr">spring</span>:
  <span class="hljs-attr">profiles</span>: dev
  <span class="hljs-attr">resources</span>:
    <span class="hljs-keyword">static</span>-<span class="hljs-attr">locations</span>:
      - <span class="hljs-attr">file</span>:../dm-client/app/
      - <span class="hljs-attr">file</span>:../dm-client/build/.<span class="hljs-property">tmp</span>/
  <span class="hljs-attr">devtools</span>:
    <span class="hljs-attr">restart</span>:
      additional-<span class="hljs-attr">paths</span>:
        - ../dm-client/app/
        - ../dm-client/build/.<span class="hljs-property">tmp</span>/
      additional-<span class="hljs-attr">exclude</span>: <span class="hljs-string">&quot;**/*.js, **/*.css, **/*.html&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450748.192')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Ici je surcharge les emplacements par d\xE9faut des ressources statiques via la propri\xE9t\xE9 <code><em>spring.resources.static-locations</em></code>. J&#8217;indique mes r\xE9pertoires utilis\xE9s en d\xE9veloppement : <code><em>../dm-client/app/</em></code> et <code><em>../dm-client/build/.tmp/</em></code>.</p>
</div>
<div class="paragraph">
<p>Le second r\xE9pertoire est le r\xE9pertoire de travail dans lequel sont plac\xE9s les fichiers ES6 transpil\xE9s en ES5 et les fichiers SASS compil\xE9s en CSS.</p>
</div>
<div class="paragraph">
<p>Par d\xE9faut SpringBoot sert toutes les ressources trouv\xE9es dans les r\xE9pertoires <code><em>classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/</em></code>.</p>
</div>
<div class="paragraph">
<p>Quand vous packagez votre application pour la production vous pouvez les placer dans un de ces r\xE9pertoires compress\xE9s dans un jar (voir <a href="https://github.com/Dev-Mind/devmind-devtools/blob/master/dm-client/build.gradle">un exemple</a>).</p>
</div>
<div class="paragraph">
<p>J\u2019indique \xE0 DevTools que les r\xE9pertoires contenant mes ressources web doivent \xEAtre scrut\xE9s (propri\xE9t\xE9 devtools.restart.additional-paths) mais que les resources js, css ou html ne doivent pas d\xE9clencher un red\xE9marrage complet (propri\xE9t\xE9 devtools.restart.additional-exclude). Un simple reload des ressources suffit. En fait DevTools embarque un serveur LiveReload sans aucune configuration de votre part.</p>
</div>
<div class="paragraph">
<p>Vous n\u2019avez qu\u2019\xE0 ajouter une extension dans votre navigateur (exemple <a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?utm_source=chrome-app-launcher-info-dialog">extension</a> pour chrome) et vos ressources statiques surveill\xE9es sont automatiquement recharg\xE9es dans votre navigateur d\xE8s qu\u2019elles ont modifi\xE9es.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_des_petits_trucs_\xE0_savoir_sur_mon_exemple">Des petits trucs \xE0 savoir sur mon exemple</h2>
<div class="sectionbody">
<div class="paragraph">
<p>La surcharge des propri\xE9t\xE9s n\u2019est activ\xE9e que pour le profil dev. En production ceci serait inutile et je pr\xE9f\xE8re servir les ressources pr\xE9par\xE9es \xE0 cet effet (minifi\xE9es, concat\xE9n\xE9es, compress\xE9es\u2026.)</p>
</div>
<div class="paragraph">
<p>Dans IntelliJ vous pouvez sp\xE9cifier le profil par d\xE9faut dans le lanceur SpringBoot</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/springdevtools_01.png" alt="IntelliJ lanceur SpringBoot">
</div>
</div>
<div class="paragraph">
<p>Dans mon exemple j\u2019utilise des langages qui n\xE9c\xE9ssitent une compilation (SASS) ou une transpilation (ES6). Je souhaite donc que le r\xE9pertoire .tmp contenant les ressources compil\xE9es avant traitement pre prod (minification, concat\xE9nation\u2026) soient mises \xE0 jour d\xE8s que je modifie une ressource. Pour automatiser cette mise \xE0 jour j\u2019utilise Gulp et ses watchers</p>
</div>
<div class="paragraph">
<p>Dans mon exemple vous pouvez lancer la t\xE2che</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450748.9253">gulp watch</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450748.9253')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voici la configuration</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450749.0906">gulp.<span class="hljs-title function_">task</span>(<span class="hljs-string">&#x27;watch&#x27;</span>, [<span class="hljs-string">&#x27;scripts&#x27;</span>, <span class="hljs-string">&#x27;styles&#x27;</span>, <span class="hljs-string">&#x27;html-template&#x27;</span>], <span class="hljs-function">() =&gt;</span> {
  gulp.<span class="hljs-title function_">watch</span>([<span class="hljs-string">&#x27;app/**/*.html&#x27;</span>], [<span class="hljs-string">&#x27;html-template&#x27;</span>, reload]);
  gulp.<span class="hljs-title function_">watch</span>([<span class="hljs-string">&#x27;app/src/**/*.{scss,css}&#x27;</span>], [<span class="hljs-string">&#x27;styles&#x27;</span>, reload]);
  gulp.<span class="hljs-title function_">watch</span>([<span class="hljs-string">&#x27;app/**/*.js&#x27;</span>], [<span class="hljs-string">&#x27;lint&#x27;</span>, <span class="hljs-string">&#x27;scripts&#x27;</span>]);
  gulp.<span class="hljs-title function_">watch</span>([<span class="hljs-string">&#x27;app/images/**/*&#x27;</span>], reload);
});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450749.0906')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Au final en d\xE9veloppement je lance SpringBoot via IntelliJ  et un gulp watch. Je peux ensuite commencer \xE0 travailler sans me soucier du red\xE9marrage de l\u2019application ou de son rafra\xEEchissement quand je modifie les sources de mon projet.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_\xE7a_marche">Comment \xE7a marche ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le m\xE9canisme repose sur l\u2019utilisation de 2 classloaders.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Les classes contenues dans les librairies sont plac\xE9es dans un premier classloader.</p>
</li>
<li>
<p>Les classes que vous \xEAtes susceptible de changer (celles dans votre IDE) sont elles charg\xE9es dans un second classloader qu\u2019on appelera \u201Crestart classloader\u201D</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Quand votre application est red\xE9marr\xE9e seul le \u201Crestart classloader\u201D est pris en compte. Il est supprim\xE9 et recr\xE9\xE9. Ce mode de fonctionnement permet d\u2019avoir des temps de d\xE9marrage plus rapide qu\u2019un red\xE9marrage complet.</p>
</div>
<div class="paragraph">
<p>Le red\xE9marrage peut \xEAtre co\xFBteux mais DevTools a un avantage par rapport \xE0 <a href="http://zeroturnaround.com/software/jrebel/">JRebel</a> ou <a href="https://github.com/spring-projects/spring-loaded">Spring Loaded</a>, c\u2019est qu\u2019il n\u2019a pas besoin d\u2019ajouter des plugins aux IDE et en plus il est gratuit.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_a_vous_de_jouer">A vous de jouer&#8230;&#8203;</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Voila je vais m\u2019arr\xEAter ici mais DevTools fournit \xE9galement diff\xE9rents outils pour manipuler votre application si elle est d\xE9ploy\xE9e sur un serveur distant. Comme je ne l\u2019ai pas encore mis en pratique je vous r\xE9oriente vers la <a href="http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html#using-boot-devtools-remote">documentation</a>.</p>
</div>
<div class="paragraph">
<p>La configuration est vraiment minimale pour les b\xE9n\xE9fices et les gains de productivit\xE9 apport\xE9s. Quand vous switchez de contexte et que vous n\u2019avez pas ce genre d\u2019outils, ils vous manquent vite.</p>
</div>
<div class="paragraph">
<p>J\u2019avais envie d\u2019\xE9crire un article depuis un bon moment sur le sujet mais je n\u2019avais jamais trouv\xE9 le temps. Le fait de regarder la vid\xE9o de <a href="https://twitter.com/snicoll?lang=fr">Stephan Nicoll</a> et <a href="https://twitter.com/brianclozel?lang=fr">Brian Clozel</a> sur Spring pour le web a fini de me motiver.</p>
</div>
<div class="videoblock">
<div class="content">
<iframe src="https://www.youtube.com/embed/sR8PyhJa-Zw?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
</div>`;var rf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Quel moteur JavaScript utilisez-vous pour ex\xE9cuter vos tests unitaires et vos tests end-to-end \xE9crits en JavaScript ? Vous avez le choix&#8230;&#8203; Pour les tests unitaires vous pouvez soit utiliser un navigateur classique (Chrome, Firefox&#8230;&#8203;) soit un navigateur headless (sans interface graphique) comme <a href="http://phantomjs.org/">PhantomJS</a>.</p>
</div>
<div class="paragraph">
<p><a href="http://phantomjs.org/">PhantomJS</a> utilise le moteur Javascript <a href="https://webkit.org/">WebKit</a> et c\u2019est l\u2019id\xE9al pour ex\xE9cuter des tests sur un serveur o\xF9 aucun \xE9cran n\u2019est branch\xE9 (plateforme d\u2019int\xE9gration continue par exemple). Par contre vous ne pouvez pas utiliser ce type de navigateur pour vos tests end-to-end car vous avez besoin d\u2019interagir avec l\u2019interface.</p>
</div>
<div class="paragraph">
<p>Quand vous faites des tests <a href="http://www.seleniumhq.org/">Selenium</a> (ou <a href="http://www.protractortest.org/#/">Protractor</a>) vous avez la possibilit\xE9 d&#8217;utiliser les services <a href="https://saucelabs.com/">SauceLabs</a> pour d\xE9porter l\u2019ex\xE9cution des tests sur leurs serveurs. Mais le co\xFBt n\u2019est pas anodin. L\u2019autre solution est d\u2019essayer d\u2019utiliser une solution de virtualisation de serveur X sur votre plate-forme qui ex\xE9cute les tests et vous pourrez ainsi utiliser n\u2019importe quel navigateur.</p>
</div>
<div class="paragraph">
<p>Nous allons donc voir comment installer <a href="https://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml">Xvfb</a> sur un serveur Linux.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/testheadless_00.png" alt="Test headless">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_projet_exemple">Un projet exemple</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vous pouvez consulter l&#8217;exemple de projet sous <a href="https://github.com/Dev-Mind/devmind-xvfb">mon Github</a>. Ce projet est une petite application AngularJS comportant des tests unitaires lanc\xE9s via Karma et des tests end-to-end ex\xE9cut\xE9s via Protractor. Dans les deux cas j\u2019utilise Firefox.</p>
</div>
<div class="paragraph">
<p>Vous pouvez bien \xE9videmment utiliser d\u2019autres versions de navigateur, utiliser une autre stack technique. Ce qui est dit dans cet article restera vrai. Si vous voulez v\xE9rifier l\u2019ex\xE9cution le projet contient \xE9galement un DockerFile permettant de lancer un conteneur sous CentOS 6.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_xvfb">Xvfb</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml">Xvfb</a> (X virtual framebuffer) est un serveur X virtuel. Xvfb impl\xE9mente le protocole de serveur d\u2019affichage X11. Les requ\xEAtes, les \xE9v\xE9nements, les erreurs sont les m\xEAmes mais rien n\u2019est affich\xE9, tout se passe en m\xE9moire.</p>
</div>
<div class="paragraph">
<p>Nous pouvons utiliser cette solution sur un serveur qui n\u2019a aucun \xE9cran. La seule chose qui est utilis\xE9 c\u2019est la couche r\xE9seau.</p>
</div>
<div class="paragraph">
<p>Sur CentOS vous devrez installer les packages suivants</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450697.5415">yum install -y Xvfb libXfont Xorg firefox</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450697.5415')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si vous lancez firefox vous avez le message d\u2019erreur suivant</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450697.8154">Error: no display specified</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450697.8154')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Utilisons maintenant Xvfb. Pour pouvoir lancer une commande dans un serveur X virtualis\xE9 Xvfb vous pouvez utiliser le wrapper <a href="http://manpages.ubuntu.com/manpages/xenial/man1/xvfb-run.1.html">xvfb-run</a> qui simplifie la configuration du serveur X et de votre processus</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450698.1091">xvfb-run -a firefox</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450698.1091')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Permet de lancer votre navigateur cette fois sans erreur. Si vous utilisez le conteneur Docker que je vous ai fourni vous pouvez lancer l\u2019ex\xE9cution des tests unitaires via Gulp</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450698.6528">gulp unit
\u21D2 error

xvfb-run -a gulp unit
\u21D2 OK</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450698.6528')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Il en est de m\xEAme pour les tests end-to-end</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450698.585">gulp e2e
\u21D2 error

xvfb-run -a gulp e2e
\u21D2 OK</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450698.585')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La configuration des tests est tout \xE0 fait classique et je vous laisserai consulter les sources du projet exemple si vous voulez plus d\u2019informations. Ce qui est int\xE9ressant de noter c\u2019est que sans changer la moindre configuration dans votre projet vous \xEAtes maintenant capable d\u2019ex\xE9cuter des tests sur n\u2019importe quel serveur qu\u2019il dispose d\u2019un \xE9cran ou non.</p>
</div>
<div class="paragraph">
<p>Vous avez peut \xEAtre remarqu\xE9 l\u2019option <code><em>-a</em></code> que j\u2019ai ajout\xE9 \xE0 la commande <code><em>xvfb-run</em></code>. Quand vous lancez une commande Xvfb vous pouvez sp\xE9cifier plusieurs options</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Un num\xE9ro de serveur : c\u2019est utile quand vous lancez plusieurs commandes en parall\xE8les. Sur un serveur d\u2019int\xE9gration continue on lance souvent plusieurs jobs concurrents</p>
</li>
<li>
<p>Un \xE9cran : vous pouvez choisir quel \xE9cran est lanc\xE9 et quelle r\xE9solution il a</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450698.6702">Xvfb :<span class="hljs-number">1</span> -screen <span class="hljs-number">0</span> 1600x1200x32</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450698.6702')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le serveur \xE9coutera les connexions sur le serveur num\xE9ro 1, l\u2019\xE9cran num\xE9ro 0 ayant une r\xE9solution de 1600x1200 et une profondeur de 32</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450698.4033">Xvfb :<span class="hljs-number">45</span> -screen <span class="hljs-number">1</span> 1600x1200x16</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450698.4033')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le serveur \xE9coutera les connexions sur le serveur num\xE9ro 45, l\u2019\xE9cran num\xE9ro 1 ayant une r\xE9solution de 1600x1200 et une profondeur de 16</p>
</div>
<div class="paragraph">
<p>L\u2019option <code><em>-a</em></code> de la commande <code><em>xvfb-run</em></code> permet d\u2019allouer un num\xE9ro de serveur non utilis\xE9. Xvfb utilise par d\xE9faut l\u2019\xE9cran 0 et ce dernier a une r\xE9solution de 640x480x8. Si vous voulez une autre taille d\u2019\xE9cran dans les tests end-to-end vous pouvez par exemple utiliser la commande</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450698.8623">xvfb-run -a --server-args=<span class="hljs-string">&quot;-screen 0 1024x768x24&quot;</span> gulp e2e</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450698.8623')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_configuration_jenkins">Configuration Jenkins</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Comment faciliter l\u2019ex\xE9cution de vos jobs Jenkins ? C\u2019est un peu dur de passer par la commande <code><em>xvf-run</em></code>&#8230;&#8203; Rassurez vous comme je l\u2019ai dit plus haut,  xvf-run n\u2019est qu\u2019un wrapper qui vous simplifie l&#8217;interaction avec Xvfb.</p>
</div>
<div class="paragraph">
<p>Dans Jenkins vous pouvez utiliser le <a href="https://wiki.jenkins-ci.org/display/JENKINS/Xvfb+Plugin">plugin</a> d\xE9di\xE9 qui lancera un serveur avant l\u2019ex\xE9cution de votre job et le fermera \xE0 la fin.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/testheadless_01.png" alt="Jenkins Test headless">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_ressources">Les ressources</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Cet article m\u2019a \xE9t\xE9 inspir\xE9 par la lecture du <a href="https://gist.github.com/addyosmani/5336747">Gist</a> partag\xE9 par <a href="https://twitter.com/addyosmani">Addy Osmani</a> et lorsque je voulais savoir comment <a href="https://docs.travis-ci.com/user/gui-and-headless-browsers/">Travis CI</a> se d\xE9brouillait sur leurs serveurs.</p>
</div>
<div class="paragraph">
<p>Vous trouverez ici un <a href="https://gist.github.com/nwinkler/f0928740e7ae0e7477dd">article</a> expliquant comment piloter Xvfb via Grunt</p>
</div>
<div class="paragraph">
<p>Pour finir la page du <a href="https://wiki.jenkins-ci.org/display/JENKINS/Xvfb+Plugin">plugin Jenkins</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Vous avez maintenant toutes les ressources pour utiliser les navigateurs que vous voulez sur vos serveurs d\u2019int\xE9gration continue tournant sous Linux. Personnellement j\u2019ai de plus en plus d\u2019erreur d\u2019installations avec PhantomJS, des difficult\xE9s pour savoir quelle est la bonne version \xE0 utiliser&#8230;&#8203; et au final je pr\xE9f\xE8re \xEAtre au plus pr\xE8s de l\u2019utilisateur final et  tester les applications sur les navigateurs cibles.</p>
</div>
</div>
</div>`;var lf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Etes vous plus <a href="https://www.google.com/design/spec/material-design/introduction.html">Material Design</a>, <a href="http://getbootstrap.com/">Boostrap</a>, <a href="http://purecss.io/">Pure CSS</a>, <a href="http://foundation.zurb.com/sites.html">Fundation</a> ? Pourquoi passez-vous par un framework CSS ?</p>
</div>
<div class="paragraph">
<p>Je pensais au d\xE9but qu\u2019ils allaient me faire gagner du temps mais au final je suis toujours oblig\xE9 d\u2019apprendre de nouvelles classes de style. Si j\u2019avais investi autant de temps dans l\u2019apprentissage de CSS j\u2019aurai perdu moins de temps. Aujourd\u2019hui nous pouvons faire beaucoup plus simple avec de simples notions basiques de CSS. Certes j&#8217;accentue le trait pour vous faire r\xE9agir car les frameworks CSS peuvent avoir un int\xE9r\xEAt lorsque nous construisons une application d&#8217;entreprise.</p>
</div>
<div class="paragraph">
<p>En CSS le plus gros probl\xE8me reste la disposition des \xE9l\xE9ments. Vous devez conna\xEEtre quelques astuces pour arriver \xE0 vos fins. C\u2019est pourquoi la grosse majorit\xE9 des d\xE9veloppeurs (et moi le premier) gal\xE8rent parfois \xE0 placer les \xE9l\xE9ments les uns par rapport aux autres.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/flexbox_layouts_faciles_01.png" alt="Flexbox">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_flexbox">Les flexbox</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Nous allons voir dans cet article comment nous pouvons disposer simplement des \xE9l\xE9ments dans une page web avec quelques propri\xE9t\xE9s CSS. Et pour cel\xE0 je vais m\u2019appuyer sur les <a href="https://www.w3.org/TR/2012/CR-css3-flexbox-20120918/">flexbox</a>. Si vous regardez les navigateurs supportant cette feature, je pense que vous pouvez maintenant l\u2019utiliser dans la plupart des cas.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/flexbox_layouts_faciles_02.png" alt="Can i use Flexbox ?">
</div>
</div>
<div class="paragraph">
<p>Mon but est de montrer comment r\xE9pondre \xE0 2 probl\xE9matiques</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Mettre en place un layout avec un header et un footer fixes, et un corps de page qui prend le reste de l\u2019espace et permet de scroller si besoin</p>
</li>
<li>
<p>Disposer des \xE9l\xE9ments sous forme de grille avec potentiellement des zones plus grandes que d\u2019autres</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Les flexbox (flexible box) permettent via quelques r\xE8gles de disposer des \xE9lements dans un \xE9l\xE9ment parent (position, alignment, espacement\u2026). Le but de cette sp\xE9cification est d\u2019essayer d\u2019optimiser l\u2019espace disponible dans l\u2019\xE9l\xE9ment parent. Nous pouvons d\xE9finir via quelques propri\xE9t\xE9s le comportement lors d\u2019un redimensionnement (extension des box ou r\xE9duction).</p>
</div>
<div class="paragraph">
<p>Quand on utilise les flexbox nous n\u2019avons pas de notion de droite/gauche, haut/bas. Nous pouvons d\xE9finir une disposition selon un axe : ligne ou colonne.</p>
</div>
<div class="paragraph">
<p>Pour disposer les \xE9l\xE9ments sous forme de grille, une autre sp\xE9cification, <a href="https://www.w3.org/TR/css-grid-1/">Grid</a> est en cours d\u2019adoption mais elle loin d\u2019\xEAtre utilisable sous tous les devices. C\u2019est pourquoi j\u2019utiliserai aussi les flexbox pour apporter une r\xE9ponse \xE0 ce probl\xE8me</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/flexbox_layouts_faciles_03.png" alt="Can i use Grid ?">
</div>
</div>
<div class="paragraph">
<p>Il est temps de prendre un exemple. Nous allons construire cette page</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/flexbox_layouts_faciles_04.png" alt="Exemple de page" width="50%" height="auto">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450691.8635"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Exemple de flexbox<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;style.css&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">fragment</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Link 1 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">fragment</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Link 2 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;link&quot;</span> <span class="hljs-attr">fragment</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>Link 3 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;assets/img/logo_1500.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-responsive&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">grid</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;extended&quot;</span>&gt;</span>Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Column 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Column 4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">grid</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>
        All right reserved - @2016 Guillaume EHRET
    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912450691.8635')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Pour le moment le rendu est assez basique</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/flexbox_layouts_faciles_05.png" alt="Page au d\xE9but" width="50%" height="auto">
</div>
</div>
<div class="paragraph">
<p>Pas tr\xE8s responsive tout \xE7a\u2026. Nous allons compl\xE9ter au fur et \xE0 mesure notre feuille de style</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_d\xE9finir_un_layout_principal">D\xE9finir un layout principal</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour commencer nous devons dire que notre page occupera 100% de l\u2019espace. Vous pouvez le faire en d\xE9finissant le code ci dessous (on le d\xE9clare \xE0 la fois pour la balise <code><em>html</em></code> et <code><em>body</em></code> car tous les navigateurs ne g\xE8rent pas cette d\xE9finitition de la m\xEAme mani\xE8re)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450691.0183"><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> {
    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;
    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">100vh</span>;
    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450691.0183')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous indiquons que notre espace principal est une flexbox via l\u2019attribut <code><em>display</em></code>. Nous d\xE9finissons aussi la direction de l\u2019axe via la propri\xE9t\xE9 <code><em>flex-direction</em></code> (la propri\xE9t\xE9 par d\xE9faut est en ligne mais l\xE0 nous voulons une orientation en colonne)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-css" id="1732912450692.8977"><span class="hljs-attribute">display</span>: flex;
<span class="hljs-attribute">flex-direction</span>: column;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450692.8977')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Nous pouvons \xE9galement indiquer comment les \xE9lements sont affich\xE9s</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Au niveau de notre axe x via la propri\xE9t\xE9 <code><em>justify-content</em></code> (<code><em>flex-start</em></code> [d\xE9faut], <code><em>flex-end</em></code>, <code><em>center</em></code>)</p>
</li>
<li>
<p>Au niveau de l\u2019axe y via la proprit\xE9 <code><em>align-items</em></code></p>
</li>
<li>
<p>Au niveau du contenu des \xE9l\xE9ments, propri\xE9t\xE9 <code><em>align-content</em></code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si vous voulez tester les diff\xE9rentes possibilit\xE9s je vous conseille le site <a href="http://flexbox.help/" class="bare">http://flexbox.help/</a> ou <a href="http://codepen.io/osublake/pen/dMLQJr/" class="bare">http://codepen.io/osublake/pen/dMLQJr/</a></p>
</div>
<div class="paragraph">
<p>Dans notre header on veut afficher les \xE9lements \xE0 droite de l\u2019axe x et au milieu de l\u2019axe y. Nous commen\xE7ons par dire que notre header est elle m\xEAme une flexbox</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450692.1936">header {
    display: flex;
    justify-content: flex-end;
    align-items: center;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450692.1936')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Les 3 principales propri\xE9t\xE9s pour les \xE9l\xE9ments d\u2019une flexbox sont</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code><em>flex-grow</em></code> : on indique comment un \xE9l\xE9ment occupe l\u2019espace en d\xE9finissant un poids (par d\xE9faut 0). Si tous les \xE9l\xE9ments ont le m\xEAme poids l\u2019espace est d\xE9coup\xE9 \xE9quitablement</p>
</li>
<li>
<p><code><em>flex-shrink</em></code> : indique si un \xE9l\xE9ment peut se r\xE9duire quand la place vient \xE0 manquer. Par d\xE9faut la valeur est 1 pour indiquer que oui.</p>
</li>
<li>
<p><code><em>flex-basis</em></code> : permet de d\xE9finir la taille par d\xE9faut d\u2019un \xE9l\xE9ment avant que les 2 autres propri\xE9t\xE9s soient appliqu\xE9es avant de r\xE9partir l\u2019espace restant</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Ces 3 propri\xE9t\xE9s peuvent \xEAtre jumel\xE9es dans la propri\xE9t\xE9 <code><em>flex</em></code>. Tous les \xE9lements d\u2019une flexbox ont par d\xE9faut une propri\xE9t\xE9 <code><em>flex : 0 1 auto</em></code></p>
</div>
<div class="paragraph">
<p>Maintenant que nous savons tout \xE7a nous pouvons indiquer comment l\u2019espace se r\xE9partit entre le header, la zone main et le footer. Le header et le footer ne doivent pas bouger en cas de redimensionnement et nous pouvons imposer une taille de 64px \xE0 notre header</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450692.4182">header {
    flex: 0 0 64px;
}
main {
    flex: 1 1 auto;
}
footer {
    flex: 0 1;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450692.4182')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_d\xE9finir_une_grille">D\xE9finir une grille</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour mes besoins de grille nous avons d\xE9j\xE0 tout vu plus haut et au final notre code CSS ressemblera \xE0 \xE7a</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912450692.2517">grid {
    display: flex;
}

grid &gt; div {
    flex: 1;
    margin: 10px;
    padding: 1em;
    text-align: center;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450692.2517')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Notre page commence \xE0 prendre forme</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_au_final">Au final</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les \xE9l\xE9ments sont dispos\xE9s correctement mais notre page n\u2019est pas tr\xE8s jolie. On peut rajouter rapidement quelques propri\xE9t\xE9s pour embellir notre page et la rendre plus harmonieuse</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Une font un peu plus sympa</p>
</li>
<li>
<p>Des couleurs pour distinguer le footer et le header</p>
</li>
<li>
<p>Une ombre sur le header pour montrer qu\u2019il est sur\xE9lev\xE9 et fixe</p>
</li>
<li>
<p>Une scrollbar dans la partie centrale</p>
</li>
<li>
<p>Rendre l\u2019image responsive</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Les flexbox permettent vraiment de nous simplifier la vie lorsque l\u2019on veut disposer nos \xE9lements les uns par rapport aux autres. Sur le sujet je vous conseille le site <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">css-tricks</a> ou la <a href="https://www.youtube.com/watch?v=5F_ngjHDcJQ">vid\xE9o</a> dans laquelle <a href="https://twitter.com/hsablonniere">Hubert Sablonni\xE8re</a> explique comment marche les flexbox \xE0 Devoxx France 2016.</p>
</div>
<div class="videoblock">
<div class="title">La vid\xE9o de Hubert sur les Flexbox</div>
<div class="content">
<iframe src="https://www.youtube.com/embed/5F_ngjHDcJQ?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez retrouver les sources compl\xE8tes sous Github</p>
</div>
</div>
</div>`;var cf=`<div class="paragraph">
<p>La deuxi\xE8me \xE9dition de Agile Lyon (organis\xE9e par le CARA Lyon) \xE9tait en 2016 sur le th\xE8me de la communication. J\u2019ai beaucoup aim\xE9 l\u2019intervention du chef d\u2019orchestre Samuel Couffignal et du quatuor Meltin&#8217;corde qu\u2019il dirige. Commencer la journ\xE9e en musique est toujours agr\xE9able.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/communication_et_neuroscience_01.png" alt="CARA Lyon">
</div>
</div>
<div class="paragraph">
<p>La conf\xE9rence la plus int\xE9ressante \xE0 mes yeux \xE9tait celle donn\xE9e par Yves Rosseti, chercheur en neurosciences. Son but \xE9tait d\u2019expliquer les bases des probl\xE8mes de la compr\xE9hension et par cons\xE9quent de la communication entre les personnes.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/communication_et_neuroscience_02.jpg" alt="Yves Rosseti" width="50%">
</div>
</div>
<div class="paragraph">
<p>Le cerveau nous permet de comprendre la r\xE9alit\xE9 qui nous entoure mais cette compr\xE9hension peut \xEAtre biais\xE9e \xE0 la fois pour</p>
</div>
<div class="ulist">
<ul>
<li>
<p>des raisons internes, les capteurs sont perfectibles et</p>
</li>
<li>
<p>des raisons externes, car les signaux sont complexes et parfois amb\xEFgus</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>C\u2019est pour cette raison par exemple, que nous pouvons cr\xE9er des illusions d\u2019optique dans les images. Pour appuyer ses d\xE9monstrations Yves Rosseti c\u2019est appuyer sur certaines de ces images.</p>
</div>
<div class="paragraph">
<p>Quand on regarde quelque chose, l\u2019information capt\xE9e \xE0 un instant t par vos yeux est tr\xE8s faible. Ils doivent balay\xE9s tout l\u2019horizon pour transmettre toute l\u2019information n\xE9c\xE9ssaire au cerveau pour que ce dernier puisse faire une repr\xE9sentation de la r\xE9alit\xE9 qui est face \xE0 vous. Les yeux sont beaucoup plus actifs que le coeur.</p>
</div>
<div class="paragraph">
<p>Comme \xE0 un instant t nous ne voyons que tr\xE8s peu de chose, notre cerveau nous fait parvenir les informations en p\xE9riph\xE9rie en fonction des informations qu\u2019il a r\xE9colt\xE9 pr\xE9c\xE9demment.</p>
</div>
<div class="paragraph">
<p>Les signaux sont aussi complexes. Nous pouvons avoir des manques de lumi\xE8re, des ombres, des informations troubles, du contraste, du flou quand on se d\xE9place, des probl\xE8mes de profondeur\u2026. C\u2019est pourquoi la r\xE9alit\xE9 ne peut \xEAtre qu\u2019interpr\xE9t\xE9e. Le cerveau doit \xE0 tout moment faire des suppositions pour reconstituer une sc\xE8ne.</p>
</div>
<div class="paragraph">
<p>Ces interpr\xE9tations sont utiles et n\xE9cessaires. Mais comme ce sont des interpr\xE9tations elles nous sont propres. Le cerveau humain est bien fait et un groupe dans le m\xEAme contexte aura tendance \xE0 faire les m\xEAmes interpr\xE9tations. Nous avons une interpr\xE9tation partag\xE9e de la r\xE9alit\xE9. Mais dans de multiples situations ce ne sera pas le cas.</p>
</div>
<div class="paragraph">
<p>Tr\xE8s souvent c\u2019est le contexte qui va aider le cerveau \xE0 interpr\xE9ter ce qui l\u2019entoure. Quand ce qui est devant vous change, le cerveau ne s\u2019int\xE9resse qu\u2019au changement afin d\u2019optimiser et limiter ses traitements. Il per\xE7oit un contraste \xE0 la fois dans l\u2019espace et dans le temps.</p>
</div>
<div class="paragraph">
<p>Les exp\xE9riences peuvent aussi nous jouer des tours dans nos interpr\xE9tations. Savoir emp\xEAche parfois de voir\u2026. Par exemple quand les fr\xE8res Lumi\xE8re ont diffus\xE9 pour la premi\xE8re fois leur film <a href="https://www.youtube.com/watch?v=b9MoAQJFn_8">Arriv\xE9e d\u2019un train \xE0 la Ciotat</a> en 1895, les premiers spectateurs sont sortis en courant de la salle. Aujourd\u2019hui notre exp\xE9rience des \xE9crans fait que ce n\u2019est plus le cas.</p>
</div>
<div class="paragraph">
<p>Le contexte culturel est aussi important. Prenez cette image.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/communication_et_neuroscience_03.png" alt="Contexte culturel">
</div>
</div>
<div class="paragraph">
<p>Vous voyez certainement une famille, assise dans la pi\xE8ce d\u2019une maison, avec une fen\xEAtre qui est juste au dessus de la t\xEAte d\u2019une femme \xE0 gauche. Lorsque des chercheurs l\u2019ont montr\xE9 \xE0 des africains ayant une autre culture que la notre, ils voyaient une famille r\xE9unie sous un arbre avec une femme portant une boite sur la t\xEAte</p>
</div>
<div class="paragraph">
<p>L\u2019\xE2ge peut aussi jouer des tours \xE0 notre cerveau et nous n\u2019avons pas la m\xEAme vision de la r\xE9alit\xE9 enfant et adulte.</p>
</div>
<div class="paragraph">
<p>Il existe diff\xE9rentes formes de communication: le parler, le non parler&#8230;&#8203;. Quand quelqu\u2019un s\u2019exprime il \xE9met des mots qui arrivent \xE0 notre cerveau. Tout comme pour les images il va faire des interpr\xE9tations et tout ce qui \xE9tait vrai au niveau des images se retrouvent dans la linguistique.</p>
</div>
<div class="paragraph">
<p>Il est important de pr\xE9ciser le contexte quand on parle, car sinon nous laissons le cerveau en face de nous, faire ses propres interpr\xE9tations. Sans contexte, on introduit l\u2019ambigu\xEFt\xE9 des interpr\xE9tations et l\u2019incompr\xE9hension.</p>
</div>
<div class="paragraph">
<p>Les interpr\xE9tations sont toujours subjectives. Les faits eux sont indiscutables.</p>
</div>
<div class="paragraph">
<p>Quand on est dans l\u2019interpr\xE9tation il faut convaincre l\u2019autre. Quand on se base sur des faits ce n\u2019est pas le cas.</p>
</div>
<div class="paragraph">
<p>La base de la communication est d\u2019apprendre \xE0 faire la distinction entre ces 2 modes. Il faut garder \xE0 l\u2019esprit que nous sommes toujours dans une interpr\xE9tation plus ou moins vraie d\u2019une r\xE9alit\xE9. Il faut donc accepter que l\u2019autre peut parfois comprendre cette r\xE9alit\xE9 autrement en fonction de son parcours, du contexte&#8230;&#8203;</p>
</div>`;var pf=`<div class="paragraph">
<p>JJe voulais faire un retour sur le livre \xAB <a href="http://www.organizeforcomplexity.com/">Organize for Complexity</a> \xBB de Niels Pflaeging qui essaye d\u2019aider les grandes entreprises \xE0 amorcer leur r\xE9organisation pour s\u2019adapter au march\xE9 actuel. Niels est \xE0 l&#8217;origine du r\xE9seau <a href="http://www.betacodex.org/papers">BetaCodex</a> qui fournit diff\xE9rentes ressources sur le management.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/complexity_01.jpg" alt="Organize for complexity">
</div>
</div>
<div class="paragraph">
<p>Ce livre est d\xE9coup\xE9 en 7 parties et permet d&#8217;expliquer pourquoi les entreprises doivent changer. J&#8217;ai d\xE9j\xE0 abord\xE9 certains sujets dans d&#8217;autres articles inspir\xE9s des travaux de Niels ou d&#8217;autres.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Complexity : why it matters to work and organizations : <a href="http://javamind-fr.blogspot.fr/2014/01/histoire-du-management-et-evolution-de.html">Histoire du management</a>, <a href="http://javamind-fr.blogspot.fr/2013/12/comment-apprehender-la-complexite-dune.html">Comment appr\xE9hender la complexit\xE9 d\u2019une organisation</a></p>
</li>
<li>
<p>Humans at work : the secret ingredient : <a href="http://javamind-fr.blogspot.fr/2014/03/la-motivation-au-travail.html">La motivation au travail</a></p>
</li>
<li>
<p>Self organizing teams and the networked organization : <a href="http://javamind-fr.blogspot.fr/2014/01/sorganiser-pour-la-complexite-en.html">D\xE9centraliser la chaine de responsabilit\xE9s</a></p>
</li>
<li>
<p>Organizations as systems : designing for complexity</p>
</li>
<li>
<p>Dynamic robust networks for all : this is how you pull it off</p>
</li>
<li>
<p>Leadership in complexity</p>
</li>
<li>
<p>Transform or stay stuck : the way forward</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Niels explique que le probl\xE8me actuel de la plupart des soci\xE9t\xE9s est principalement li\xE9 au management. Ce dogme qu&#8217;on appelle management n&#8217;est ni appropri\xE9 aux personnes travaillant dans les entreprises, ni aux investisseurs, ni \xE0 l&#8217;entreprise elle m\xEAme&#8230;&#8203;.</p>
</div>
<div class="paragraph">
<p>Le monde a \xE9volu\xE9 entre l&#8217;\xE8re pr\xE9industrielle et aujourd&#8217;hui . Le march\xE9 est devenu complexe car les besoins ne sont plus uniformes. Si on revient au d\xE9but de l&#8217;industrialisation (Fordisme avec la Ford T), plus personne ne veut la m\xEAme voiture de la m\xEAme couleur avec exactement les m\xEAmes options. Les besoins sont \xE0 l&#8217;image de la soci\xE9t\xE9, un syst\xE8me complexe ou chaque demande peut \xEAtre personnalis\xE9e.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/complexity_02.png" alt="Histoire du management">
</div>
</div>
<div class="paragraph">
<p>Le management peut \xEAtre compar\xE9 \xE0 la m\xE9decine au moyen \xE2ge. Les gens ne connaissaient rien \xE0 l&#8217;origine des maladies, les scientifiques n&#8217;\xE9taient pas reconnus et nous \xE9tions dans un monde o\xF9 les charlatans utilisaient des m\xE9thodes inspir\xE9es de croyances et de pratiques parfois assez \xE9loign\xE9es de la science. Dans le monde de l&#8217;entreprise aujourd&#8217;hui les clients, les employ\xE9s sont souvent saign\xE9s par des cadres tous form\xE9s sur le m\xEAme moule ou par des consultants externes ne valant pas mieux.</p>
</div>
<div class="paragraph">
<p>Les probl\xE8mes complexes ne peuvent pas \xEAtre r\xE9solus avec ce que l&#8217;on retrouve dans les pratiques manag\xE9riales actuelles (organisation Alpha). Il faut quelque chose de nouveau. Un syst\xE8me bas\xE9 sur le leadership (organisation Beta). Il faut abolir cette division entre les personnes qui pensent et celles qui r\xE9alisent.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/complexity_03.jpg" alt="Organisation syst\xE8me complexe">
</div>
</div>
<div class="paragraph">
<p>Si nous essayons de dresser les diff\xE9rences entre les deux types d&#8217;organisations nous pouvons lister les points suivants</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Alpha</th>
<th class="tableblock halign-left valign-top">Beta</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Amorphe</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Dynamique</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">R\xE9p\xE9tition</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Surprise</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">R\xE8gles</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Principes</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Structure formelle / Commande</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Structure informelle / Cr\xE9ation de valeur</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="http://javamind-fr.blogspot.fr/2014/03/la-nature-humaine-theorie-x-et-y.html">Th\xE9orie X nature humaine</a></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="http://javamind-fr.blogspot.fr/2014/03/la-nature-humaine-theorie-x-et-y.html">Th\xE9orie Y nature humaine</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">M\xE9canique</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Syst\xE9mique</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Centralis\xE9</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">D\xE9centralis\xE9</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Economie d&#8217;\xE9chelle</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Economie de flux</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Management</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Leadership</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Fonctions, d\xE9partements, divisions</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">R\xE9seau de cellules comme "mini entreprise"</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Mode pull</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Mode push</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">D\xE9cision pouss\xE9e par le sup\xE9rieur hi\xE9rachique</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Cr\xE9ation de valeur ensemble</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les clients et les investisseurs d&#8217;abord</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les personnes d&#8217;abord, les clients ensuite</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Le management d\xE9cide</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Le march\xE9 d\xE9cide</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les divisions fonctionnelles d\xE9terminent la structure</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">L&#8217;int\xE9gration fonctionnelle d\xE9termine la structure</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Leadership centralis\xE9 et li\xE9 \xE0 la position</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Leadership d\xE9centralis\xE9 et tournant</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les chefs gouvernent en mode command-and-control</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les leaders servent l&#8217;\xE9quipe</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les managers sont pay\xE9s pour prendre des d\xE9cisions</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Tout le monde prend des d\xE9cisions importantes</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les processus am\xE8nent la stabilit\xE9 et doivent \xEAtre suivis</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les concertations am\xE8nent de la stabilit\xE9</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">L&#8217;ensemble est la somme des individualit\xE9s</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">L&#8217;ensemble est la somme des interactions</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">D\xE9cision prise le plus t\xF4t possible</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">D\xE9cision prise le plus tard possible</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les \xE9quipes sont anticip\xE9es, le budget prime</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les ressources sont engag\xE9es quand il faut, le dialogue prime</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les RH et les chefs embauchent les ressources</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les \xE9quipes embauchent leurs coll\xE8gues</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Individualit\xE9, contr\xF4le hi\xE9rarchique, bureaucratie</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Equipes, auto organisaton, pression sociale</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">L&#8217;information est le pouvoir</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transparence de l&#8217;information</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Les strat\xE8ges d\xE9cident les autres suivent</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Tout le monde d\xE9cide et r\xE9alise</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Syst\xE8me de bonus individuel pour driver la performance</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Partage des r\xE9sultats</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">R\xE9compense et punition</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Tout le monde c\xE9l\xE8bre les victoires et assument les \xE9checs</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Paie en fonction de la position des personnes dans la hierarchie</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Paie les personnes</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Gestion de projet, projet en mode waterfall</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">M\xE9thodes agiles mettant le client au coeur des choses</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Encourage les individualit\xE9s</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Encourage les interactions</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Investissement court terme</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Investissement long terme</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">&#8230;&#8203;</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">&#8230;&#8203;</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Le probl\xE8me trouve son origine au moment o\xF9 les soci\xE9t\xE9s ont besoin d&#8217;\xE9voluer, de changer de taille. Au lieu de mettre en place des bureaucraties il faut essayer de dupliquer les cellules originelles</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/complexity_04.jpg" alt="Transition management">
</div>
</div>
<div class="paragraph">
<p>Je vous conseille vivement la lecture de ce livre qui est assez rapide et qui peut vous apporter certaines r\xE9ponses si vous essayer de comprendre ou optimiser l&#8217;organisation de votre soci\xE9t\xE9.</p>
</div>`;var df=`<div class="paragraph">
<p>Depuis que j&#8217;ai d\xE9couvert Slack, j&#8217;ai migr\xE9 beaucoup de mes flux de mails vers cet outil. Au niveau de nos applications nous pouvons aussi avoir besoin de centraliser des notifications dans cet outil. Nous allons voir comment utiliser l&#8217;API  Incoming WebHooks.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/slack_01.png" alt="Slack">
</div>
</div>
<div class="paragraph">
<p>Le principe est tr\xE8s simple. Connectez vous \xE0 votre compte Slack et en allant sur <a href="https://my.slack.com/services/new/incoming-webhook/" class="bare">https://my.slack.com/services/new/incoming-webhook/</a> vous pourrez acc\xE9der \xE0 une liste des diff\xE9rents channels auxquelles vous \xEAtes abonn\xE9s.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2016/slack_02.png" alt="Slack">
</div>
</div>
<div class="paragraph">
<p>Une fois fois que vous avez choisi votre channel, Slack vous g\xE9n\xE8re les tokens vous permettant d&#8217;utiliser leurs API. Par exemple vous obtiendrez une URL du type <a href="https://hooks.slack.com/services/DSFDSFSDF/QSDQSDSQD/DFSDFdfkslksdDSF" class="bare">https://hooks.slack.com/services/DSFDSFSDF/QSDQSDSQD/DFSDFdfkslksdDSF</a></p>
</div>
<div class="paragraph">
<p>Plusieurs exemples de messages sont fournis. Le payload ci dessous permet par exemple d&#8217;envoyer dans le channel \xAB g\xE9n\xE9ral \xBB</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912450729.5618">payload={
    <span class="hljs-string">&quot;channel&quot;</span>: <span class="hljs-string">&quot;#general&quot;</span>,
    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Dev-Mind&quot;</span>, <span class="hljs-string">&quot;text&quot;</span>:
    <span class="hljs-string">&quot;This is my post to #general.&quot;</span>,
    <span class="hljs-string">&quot;icon_emoji&quot;</span>: <span class="hljs-string">&quot;:ghost:&quot;</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450729.5618')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Vous pouvez utiliser un outil comme <a href="https://curl.haxx.se/">CURL</a> pour pousser vos messages</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912450730.0364">curl -X POST --data-urlencode &#x27;payload={&quot;channel&quot;: &quot;#general&quot;, &quot;username&quot;: &quot;webhookbot&quot;, &quot;text&quot;: &quot;This is posted to #general and comes from a bot named webhookbot.&quot;, &quot;icon_emoji&quot;: &quot;:ghost:&quot;}&#x27; https://hooks.slack.com/services/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</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450730.0364')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Et il existe de nombreuses librairies externes pour les diff\xE9rents langages <a href="https://api.slack.com/community" class="bare">https://api.slack.com/community</a> mais pour un beoin aussi simple on peut se poser la question de l&#8217;int\xE9r\xEAt d&#8217;utiliser une librairie externe.</p>
</div>
<div class="paragraph">
<p>Regardons comment cr\xE9er une application Java pour envoyer des informations dans Slack. Nous allons le faire dans une application Spring Boot. Pour d\xE9marrer un nouveau projet vous pouvez aller sur <a href="http://javamind-fr.blogspot.fr/2016/01/demarrer-une-application-springboot.html">mon article</a> sur le sujet.</p>
</div>
<div class="paragraph">
<p>Le but est de d\xE9marrer le projet <a href="https://github.com/Dev-Mind/devmind-slack">devmind-slack</a> qui est un projet que vous pouvez r\xE9cup\xE9rer sur Github si vous voulez voir les sources directement.</p>
</div>
<div class="paragraph">
<p>Nous allonc commencer par cr\xE9er un DTO contenant les diff\xE9rentes informations que nous pouvons envoyer</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450730.0286"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SlackMessage</span> {

    <span class="hljs-keyword">private</span> String channel;
    <span class="hljs-keyword">private</span> String text;
    <span class="hljs-keyword">private</span> String username;
    <span class="hljs-keyword">private</span> String icon_emoji;
    <span class="hljs-keyword">private</span> String icon_url;

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getChannel</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> channel;
    }

    <span class="hljs-keyword">public</span> SlackMessage <span class="hljs-title function_">setChannel</span><span class="hljs-params">(String channel)</span> {
        <span class="hljs-built_in">this</span>.channel = <span class="hljs-string">&quot;#&quot;</span> + channel;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> username;
    }

    <span class="hljs-keyword">public</span> SlackMessage <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> {
        <span class="hljs-built_in">this</span>.username = username;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> text;
    }

    <span class="hljs-keyword">public</span> SlackMessage <span class="hljs-title function_">setText</span><span class="hljs-params">(String text)</span> {
        <span class="hljs-built_in">this</span>.text = text;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIcon_emoji</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> icon_emoji;
    }

    <span class="hljs-keyword">public</span> SlackMessage <span class="hljs-title function_">setIcon_emoji</span><span class="hljs-params">(String icon_emoji)</span> {
        <span class="hljs-built_in">this</span>.icon_emoji = <span class="hljs-string">&quot;:&quot;</span> + icon_emoji + <span class="hljs-string">&quot;:&quot;</span>;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIcon_url</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> icon_url;
    }

    <span class="hljs-keyword">public</span> SlackMessage <span class="hljs-title function_">setIcon_url</span><span class="hljs-params">(String icon_url)</span> {
        <span class="hljs-built_in">this</span>.icon_url = icon_url;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450730.0286')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le but est de coller \xE0 l&#8217;API <a href="https://api.slack.com/methods/chat.postMessage" class="bare">https://api.slack.com/methods/chat.postMessage</a></p>
</div>
<div class="paragraph">
<p>Il ne nous reste plus qu&#8217;\xE0 \xE9crire le code qui va interagir avec le service distant et g\xE9n\xE9rer le payload attendu. La petite sp\xE9cificit\xE9 est que le format des donn\xE9es attendu doit \xEAtre encod\xE9</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450731.3208"><span class="hljs-meta">@RestController</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SlackMessageSender</span> {

    <span class="hljs-meta">@Value(&quot;@dollar@{slack.services.incoming}&quot;)</span>
    <span class="hljs-keyword">private</span> String slackServiceIncomingUrl;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> ObjectMapper objectMapper;


    <span class="hljs-meta">@RequestMapping(value = &quot;/slack/{message}&quot;)</span>
    <span class="hljs-keyword">public</span> ResponseEntity<span class="hljs-meta">@LTString</span><span class="hljs-meta">@GT</span> hello(<span class="hljs-meta">@PathVariable(value = &quot;message&quot;)</span> String message)
                <span class="hljs-keyword">throws</span> JsonProcessingException {

        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();

        <span class="hljs-type">SlackMessage</span> <span class="hljs-variable">slackMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SlackMessage</span>()
                .setChannel(<span class="hljs-string">&quot;random&quot;</span>)
                .setText(message)
                .setUsername(<span class="hljs-string">&quot;guillaume&quot;</span>)
                .setIcon_url(<span class="hljs-string">&quot;http://dev-mind.fr/logo/logo_48.png&quot;</span>);

        <span class="hljs-keyword">try</span>{
            <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            HttpEntity<span class="hljs-meta">@LTString</span><span class="hljs-meta">@GT</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span><span class="hljs-meta">@LT</span><span class="hljs-meta">@GT(objectMapper.writeValueAsString(slackMessage), headers)</span>;
            restTemplate.exchange(slackServiceIncomingUrl, HttpMethod.POST, request, String.class);
        }
        <span class="hljs-keyword">catch</span> (RuntimeException e){
            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
        }
        <span class="hljs-keyword">return</span> ResponseEntity.ok().body(<span class="hljs-string">&quot;Message sent&quot;</span>);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450731.3208')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Voila vous pouvez d\xE8s \xE0 pr\xE9sent envoyer encore plus d&#8217;infos vers vos channels favoris</p>
</div>`;var uf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>L&#8217;agilit\xE9 c&#8217;est simple mais par o\xF9 commencer ? J&#8217;ai l&#8217;impression que c&#8217;est une question de plus en plus fr\xE9quente. Je trouve que c&#8217;est tr\xE8s encourageant car si des personnes se posent cette question, c&#8217;est qu&#8217;elles prennent conscience que l&#8217;agilit\xE9 est peut \xEAtre un facteur de r\xE9ussite.</p>
</div>
<div class="paragraph">
<p>Si vous \xEAtes d\xE9butant je vous conseille ce tr\xE8s <a href="https://www.linkedin.com/pulse/mon-entreprise-veut-devenir-agile-mais-cest-quoi-par-o%C3%B9-almendra">bon article</a> d&#8217;<a href="https://twitter.com/AlfredAlmendra">Alfred Almendra</a> qui explique par des mots simples ce qu&#8217;est l&#8217;agilit\xE9 et comment d\xE9buter.</p>
</div>
<div class="paragraph">
<p>Mais je vais plut\xF4t vous faire un retour dans cet article, sur la session \xAB 12+1 patterns op\xE9rationnels pour la transition agile d&#8217;un grand projet \xBB pr\xE9sent\xE9e par <a href="https://twitter.com/addinquy">Christophe Addinquy</a> au <a href="http://lyon.clubagilerhonealpes.org/">CARA Lyon</a>. Ce genre de session s\u2019appuie sur l&#8217;exp\xE9rience de l&#8217;orateur. Christophe a particip\xE9 \xE0 un gros projet au sein d&#8217;ERDF qui a mobilis\xE9 de nombreuses personnes entre Paris et Lyon.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2018/transition_00.png" alt="12+1 patterns op\xE9rationnels pour la transition agile">
</div>
</div>
<div class="paragraph">
<p>Il est toujours plus difficile d&#8217;agir dans une grosse soci\xE9t\xE9 car individuellement on se sent tous noy\xE9s dans la masse. Nos actions ne comptent pas vraiment et les enjeux politiques ont souvent tendance \xE0 mettre de c\xF4t\xE9 les bonnes pratiques.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_1_limmersion_agile">1. L\u2019immersion agile</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Comment d\xE9marrer quand on est devant sa feuille blanche ? Une solution efficace qui peut tenir sur une journ\xE9e est d&#8217;immerger l&#8217;\xE9quipe dans un contexte agile en lui faisant pratiquer des serious games afin de voir certains principes, aborder quelques m\xE9thodes et r\xE9pondre aux questions des personnes.</p>
</div>
<div class="paragraph">
<p>Ce n&#8217;est jamais \xE9vident pour une personne de changer et le sortir de son contexte de travail permet de faciliter la transmission des m\xE9canismes de l&#8217;agilit\xE9.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_2_commencer_lentement">2. Commencer lentement</h2>
<div class="sectionbody">
<div class="paragraph">
<p>C&#8217;est un peu un paradoxe, o\xF9 g\xE9n\xE9ralement on demande aux \xE9quipes d&#8217;aller vite. L\xE0 il faut prendre le temps de se poser et de faire le focus sur certains principes.</p>
</div>
<div class="paragraph">
<p>Le but n&#8217;est pas de faire vite mais de faire bien. Il ne faut surtout pas faire de compromis sur la qualit\xE9 qui est un gage de s\xE9r\xE9nit\xE9 sur le long terme.</p>
</div>
<div class="paragraph">
<p>Une chose \xE0 garder \xE0 l&#8217;esprit, c&#8217;est que les \xE9quipes ne sont pas sensibles aux messages mais plut\xF4t aux actions que vous faites</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_3_commencer_par_la_fin">3. Commencer par la fin</h2>
<div class="sectionbody">
<div class="paragraph">
<p>C&#8217;est une d\xE9marche assez originale. Avant de commencer vous pouvez d\xE9j\xE0 r\xE9fl\xE9chir \xE0 comment vous allez terminer une t\xE2che, une story, une it\xE9ration.</p>
</div>
<div class="paragraph">
<p>Un perfectionniste peut rester des mois sur le m\xEAme sujet. Quelqu&#8217;un de moins consciencieux peut essayer de se d\xE9barrasser vite fait de sa t\xE2che courante pour passer \xE0 une nouvelle.</p>
</div>
<div class="paragraph">
<p>Cet exercice consiste \xE0 d\xE9finir les r\xE8gles du DOD (Definition Of Done) et il va faire \xE9merger une structure de travail.</p>
</div>
<div class="paragraph">
<p>Il faut ensuite essayer de se doter des moyens de v\xE9rifier les r\xE8gles que vous venez d&#8217;\xE9tablir, les tests. Il existe diff\xE9rentes mani\xE8res de faire des tests et en fonction de votre contexte vous pourrez mettre en place plusieurs types de ces tests</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_4_le_droit_\xE0_lerreur">4. Le droit \xE0 l\u2019erreur</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans la culture fran\xE7aise, le droit \xE0 l&#8217;erreur est une notion difficile \xE0 accepter. Pour n&#8217;importe quels \xE9v\xE8nements de la vie courante ou non, nous cherchons \xE0 chercher un responsable pour le faire payer.</p>
</div>
<div class="paragraph">
<p>Mais tout le monde fait des erreurs et il est important de le rappeler. De dire \xE0 une personne oui nous allons nous tromper permet de casser une barri\xE8re. Ce n&#8217;est pas grave de faire des erreurs. Il faut plut\xF4t les voir comme des opportunit\xE9s de montrer ce qui ne marche pas et ce qui peut nous permettre de nous am\xE9liorer.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_5_nignorez_pas_la_dimension_culturelle">5. N&#8217;ignorez pas la dimension culturelle</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Cette dimension culturelle est plut\xF4t interne du c\xF4t\xE9 de l&#8217;organisation et externe du c\xF4t\xE9 des prestataires. Vous pouvez essayer de rep\xE9rer des personnes dans l&#8217;\xE9quipe qui seront les bons \xE9missaires pour relayer votre message et faire \xE9merger les pratiques agiles.</p>
</div>
<div class="paragraph">
<p>Du c\xF4t\xE9 organisationnel il est important de chercher les appuis des mangers car ils ont un pouvoir de rayonnement dont vous pourrez b\xE9n\xE9ficier par la suite. C&#8217;est d&#8217;autant plus vrai dans les grandes organisations, o\xF9 les gens ont l&#8217;habitude des modes de management \xE0 l&#8217;ancienne.</p>
</div>
<div class="paragraph">
<p>Au niveau des managers, il faut leur faire comprendre qu&#8217;ils doivent \xEAtre clairs dans la d\xE9finition des objectifs et de la vision de l&#8217;entreprise. Ils doivent agir sur le cadre mais ne jamais imposer aux personnes une mani\xE8re de faire. Un bon manager ne s\u2019occupe pas du comment mais mais plut\xF4t du pourquoi.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_6_favoriser_lauto_organisation">6. Favoriser l&#8217;auto-organisation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Il faut que les personnes de l&#8217;\xE9quipe s&#8217;approprient la fa\xE7on de faire. C&#8217;est parfois triste de voir des gens avec bac +5 qui ressemblent \xE0 des personnes \xE0 qui on a lessiv\xE9 le cerveau, et qui attendent de leur sup\xE9rieur des ordres pour savoir ce qu&#8217;ils doivent faire.</p>
</div>
<div class="paragraph">
<p>Chacun doit \xEAtre acteur</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_7_craftmanship">7. Craftmanship</h2>
<div class="sectionbody">
<div class="paragraph">
<p>L&#8217;agilit\xE9 s&#8217;est d\xE9velopp\xE9e gr\xE2ce aux bienfaits observ\xE9s dans le d\xE9veloppement logiciel. Pourquoi ? Parce que la qualit\xE9 induite et pouss\xE9e par l&#8217;agilit\xE9 nous aide \xE0 cr\xE9er des logiciels performants, \xE9volutifs et r\xE9pondant simplement aux besoins utilisateurs.</p>
</div>
<div class="paragraph">
<p>Il faut essayer de cultiver cet esprit "craftmanship" dans les \xE9quipes. Plusieurs recettes sont possibles</p>
</div>
<div class="ulist">
<ul>
<li>
<p>\xE9veiller la curiosit\xE9 gr\xE2ce \xE0 des sensibilisations (exemple des Brown Bag Lunchs)</p>
</li>
<li>
<p>recruter des personnes qualifi\xE9es et motiv\xE9es</p>
</li>
<li>
<p>\u2026</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Pour r\xE9sumer cet \xE9tat d&#8217;esprit, Christophe a rappel\xE9 une phrase de Scott Meyers : "une interface doit \xEAtre facile \xE0 bien utiliser et difficile \xE0 mal utiliser\u2026"</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_8_le_fond_et_non_la_forme">8. Le fond et non la forme</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Que ce soit au niveau management ou technique il est toujours important de comprendre les principes plut\xF4t que de savoir comment les mettre en pratique.</p>
</div>
<div class="paragraph">
<p>Le pourquoi est beaucoup plus important que le comment. C&#8217;est d&#8217;autant plus vrai dans la technique o\xF9 les frameworks se multiplient mais o\xF9 les concepts eux se rapprochent.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_9_apprendre_\xE0_sam\xE9liorer">9. Apprendre \xE0 s\u2019am\xE9liorer</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Un des piliers de l&#8217;agilit\xE9 est l&#8217;am\xE9lioration continue. Enclenchez des boucles d&#8217;am\xE9lioration, exp\xE9rimentez et si vous vous trompez essayez autre chose\u2026.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_10_larchitecture_compte">10. L\u2019architecture compte !</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Quand on souhaite mettre en place un middleware, cr\xE9er un logiciel, souvent on regarde</p>
</div>
<div class="ulist">
<ul>
<li>
<p>le nombre de fonctionnalit\xE9s</p>
</li>
<li>
<p>la maturit\xE9 des \xE9diteurs</p>
</li>
<li>
<p>les retours des autres clients</p>
</li>
<li>
<p>\u2026</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Mais ce ne sont que des m\xE9triques annexes. Pensez plut\xF4t en fonction de votre contexte ou de vos utilisateurs. Il faut privil\xE9gier les solutions simples \xE0 tester et \xE0 utiliser.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_11_offon_comment_faire_la_transition_agile">11. Off/on : comment faire la transition agile ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour Christophe la meilleure mani\xE8re de faire, est d&#8217;imposer un changement radical pour basculer au plus vite vers le nouveau mode. Sur ce point je ne suis pas d&#8217;accord avec lui car les changements brutaux ont du mal \xE0 \xEAtre accept\xE9s, et je suis plut\xF4t partisan des m\xE9thodes comme Kanban qui vont enclencher en boucle, des petites am\xE9liorations permanentes qui transformerons l&#8217;organisation dans le temps et la dur\xE9e.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_12_parfois_il_faut_plonger_pour_mieux_r\xE9ussir">12. Parfois il faut plonger pour mieux r\xE9ussir</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Tout n&#8217;est pas rose et comme dit un peu plus haut, il arrive \xE0 tout le monde de faire fausse route, de se planter\u2026 En tant que coach on ne peut pas forcer les gens \xE0 \xE9couter.</p>
</div>
<div class="paragraph">
<p>Apr\xE8s l&#8217;introduction de l&#8217;agilit\xE9 il y aura des phases de d\xE9gradation plus ou moins longues. Elles sont importantes pour que les personnes comprennent leurs erreurs et repartent de l&#8217;avant.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les diff\xE9rents points \xE9voqu\xE9s d\xE9crivent la recette que Christophe a utilis\xE9 dans son contexte. Elles ne seront peut \xEAtre pas utiles \xE0 tout le monde mais son but est de proposer une base pour ouvrir la r\xE9flexion. Merci \xE0 lui et au CARA pour son intervention</p>
</div>
</div>
</div>`;var hf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Yves Enr\xE8gle est un enseignant chercheur sp\xE9cialis\xE9 sur les questions de management et de la responsabilit\xE9 soci\xE9tale. Dans un de ces \xE9crits il compare les 5 types de pouvoirs possibles dans une organisation avec 5 des personnages principaux des albums d&#8217;Asterix le Gaulois. Je vous propose ici une transposition de cette vision sur un projet informatique.</p>
</div>
<div class="paragraph">
<p>Quels types de personne faut il trouver pour constituer une bonne \xE9quipe projet ? Une r\xE9ponse est peut \xEAtre de se rapprocher de l&#8217;organisation du village gaulois o\xF9 5 leaders incarnent chacun une forme de pouvoir.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2015/formes_leadership_01.jpg" alt="formes de leadership">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_pouvoir_de_la_comp\xE9tence_le_r\xE9alisateur">Le pouvoir de la comp\xE9tence (le r\xE9alisateur)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Sur un projet informatique nous avons besoin d&#8217;un  ou plusieurs bons techniciens, comp\xE9tents et qui se caract\xE9risent par leur dynamisme et leur savoir faire.  Dans le c\xE9l\xE8bre village gaulois, la personne qui n&#8217;h\xE9site pas \xE0 mettre la main \xE0 la p\xE2te pour tailler des menhirs ou repousser les romains, est Obelix. On parlera du R\xE9alisateur &#174;.  On ne veut pas forc\xE9ment lui ressembler physiquement mais nous aimerions bien de temps en temps, prendre de la potion magique pour avoir les m\xEAmes facilit\xE9s.</p>
</div>
<div class="paragraph">
<p>Lorsqu&#8217;il se lance dans l&#8217;action, les autres gaulois veulent le suivre et faire m\xEAme mieux que lui.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2015/formes_leadership_02.jpg" alt="Obelix le pouvoir de la comp\xE9tence">
</div>
</div>
<div class="paragraph">
<p>Par contre Obelix n&#8217;aime pas forc\xE9ment qu&#8217;on lui prenne sa part de romains \xE0 assommer&#8230;&#8203;. Les r\xE9alisateurs ont une telle envie de faire qu&#8217;il peuvent parfois \xEAtre r\xE9fractaire aux changements. Ces aspects peuvent \xEAtre les mauvais c\xF4t\xE9s des r\xE9alisateurs (d\xE9l\xE9gation et inertie au changement)</p>
</div>
<div class="paragraph">
<p>Les r\xE9alisateurs savent  tout faire, mais il ne savent pas toujours ce qu\u2019il faut faire ni quand il faut s&#8217;arr\xEAter pour changer&#8230;&#8203;.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_pouvoir_de_lexpertise_le_guide">Le pouvoir de l&#8217;expertise (le guide)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le guide (G) lui ne sait rien faire de particulier mais il sait ce qu&#8217;il faut faire. C&#8217;est l&#8217;oppos\xE9 du r\xE9alisateur. Il est capable d&#8217;analyser le contexte et d\xE9finir des objectifs \xE0 atteindre en fonction des menaces ou des opportunit\xE9s. Asterix poss\xE8de ce pouvoir d&#8217;expertise. La r\xE9alisation n&#8217;est pas forc\xE9ment son fort car il a besoin de prendre de la potion magique pour y arriver.</p>
</div>
<div class="paragraph">
<p>En contre partie les guides peuvent faire preuve d&#8217;une envie trop fr\xE9quente de changement.</p>
</div>
<div class="paragraph">
<p>Comme pour Asterix et Obelix,  la comp\xE9tence et l&#8217;expertise sont indissociables et sont le fruit du succ\xE8s. L&#8217;\xE9quipe d&#8217;Yves Enr\xE8gle a d&#8217;ailleurs observ\xE9 que plus de 80% des \xE9checs dans les \xE9quipes venaient d&#8217;une mauvaise coordination entre les forces de type R et de type G. La diff\xE9rence d&#8217;inertie et la s\xE9paration entre celui qui fait et celui qui dit comment faire peut entra\xEEner des tensions.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2015/formes_leadership_03.jpg" alt="Asterix le pouvoir de l&#8217;expertise">
</div>
</div>
<div class="paragraph">
<p>Comme dans la c\xE9l\xE8bre BD, les guides et les r\xE9alisateurs sont au m\xEAme niveau hi\xE9rarchique et quand les deux parties divergent, il faut une autorit\xE9 ext\xE9rieure pour trancher.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_pouvoir_de_ladministratif_lorganisateur">Le pouvoir de l&#8217;administratif (l&#8217;organisateur)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le pouvoir administratif est l\xE0 pour r\xE9guler et coordonner  les relations entre les r\xE9alisateurs et les guides. Abraracourcix, le chef du village incarne ce pouvoir et c&#8217;est lui qui doit trancher quand plusieurs options sont possibles. Le chef se doit \xE9galement de fournir les moyens  n\xE9cessaires pour que les guides et les r\xE9alisateurs puissent accomplir leurs t\xE2ches convenablement.</p>
</div>
<div class="paragraph">
<p>Le r\xF4le de l&#8217;organisateur (O) est instable car il n&#8217;a de sens que si les guides et les r\xE9alisateurs reconnaissent son autorit\xE9. Les organisateurs peuvent parfois se d\xE9fendre n\xE9gativement de cette vuln\xE9rabilit\xE9. Ils peuvent se r\xE9fugier dans leur statut et perdre le contact avec la r\xE9alit\xE9. Mais plus ils seront haut perch\xE9s plus la redescente sur terre sera douloureuse (comme dans la BD quand Abraracourcix ne passe plus sous la porte et s&#8217;\xE9tale sur le sol).</p>
</div>
<div class="paragraph">
<p>Par contre en cas de grosse difficult\xE9 il peut arriver que le niveau hi\xE9rarchique ne soit pas suffisant. Abraracourcix tombe souvent de son bouclier quand les situations s&#8217;enveniment.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2015/formes_leadership_03.jpg" alt="Abraracourcix le pouvoir de l&#8217;administratif">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_pouvoir_charismatique_le_mobilisateur">Le pouvoir charismatique (le mobilisateur)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Panoramix a une position \xE0 part dans le village. Sa sagesse, sa posture, ses actes font qu&#8217;il n&#8217;a rien \xE0 prouver. Il est respect\xE9 de tous. Le mobilisateur (M) a le pouvoir de rassembler les gens par un ph\xE9nom\xE8ne de s\xE9duction ou via une expertise remarquable (la potion magique).</p>
</div>
<div class="paragraph">
<p>Le mobilisateur peut aider l&#8217;organisateur a reprendre la main (coaching, pr\xE9sence) ou peut d\xE9bloquer une situation entre les guides et les r\xE9alisateurs (expertise m\xE9tier ou technique). Son r\xF4le est essentiel mais ne doit \xEAtre fait que de fa\xE7on ponctuelle. Si l&#8217;intervention s&#8217;\xE9tale son aura peut en p\xE2tir. Il ne doit pas profiter de la situation pour s&#8217;approprier le pouvoir.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2015/formes_leadership_04.jpg" alt="Panoramix le pouvoir charismatique">
</div>
</div>
<div class="paragraph">
<p>Les mobilisateurs doivent \xEAtre capable de prendre de la hauteur par rapport \xE0 un probl\xE8me. Par contre il arrive que Panoramix ait des rat\xE9s. Que faire si le leader charismatique n&#8217;est pas l\xE0. En cas de conflits dans notre village gaulois les villageois se scindent en deux. Ils peuvent en d\xE9coudre \xE0 coups de poissons pourris&#8230;&#8203;.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_pouvoir_de_lint\xE9grateur_n\xE9gatif_le_mobilisateur_n\xE9gatif">Le pouvoir de l&#8217;int\xE9grateur n\xE9gatif (le mobilisateur n\xE9gatif)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Au contraire de Panoramix qui est respect\xE9 de tous, le barde Assurancetourix fait l&#8217;unanimit\xE9 contre lui. Il arrive \xE0 d\xE9clencher une unit\xE9 du groupe car tous les villageois s&#8217;associent pour qu&#8217;il n&#8217;exprime pas ses talents musicaux&#8230;&#8203; Il ne risque pas de confisquer le pouvoir car d\xE8s qu&#8217;il veut s&#8217;exprimer on le fait taire.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2015/formes_leadership_05.jpg" alt="Assurancetourix le pouvoir de l&#8217;int\xE9grateur n\xE9gatif">
</div>
</div>
<div class="paragraph">
<p>C&#8217;est une forme de pouvoir qui doit intervenir quand toutes les autres formes de pouvoir ont \xE9chou\xE9. Certaines personnes, du  \xABfou du roi\xBB \xE0 l'\xABidiot du village\xBB (les boucs \xE9missaires), ont de tout temps contribu\xE9 \xE0 structurer les groupes humains.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_le_leadership">Le leadership</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le leadership se d\xE9ploie donc sous 4 dimensions :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>la comp\xE9tence sur le m\xE9tier ou dans son domaine</p>
</li>
<li>
<p>la comp\xE9tence strat\xE9gique, qui sait ce qu&#8217;il faut faire</p>
</li>
<li>
<p>le pouvoir statutaire, qui a le pouvoir et l&#8217;utilise a bon escient</p>
</li>
<li>
<p>le pouvoir charismatique et une capacit\xE9 d&#8217;influence dont la source est inconnue</p>
</li>
<li>
<p>Le leader ne doit en aucun cas jouer le r\xF4le de l&#8217;int\xE9grateur n\xE9gatif. Dans le cas des conflits avec la base c&#8217;est souvent le jeu des syndicats de monter tout le monde contre le leader. Mais dans la r\xE9alit\xE9 peu de personnes vont avoir ces 4 qualit\xE9s \xE0 la fois.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Chaque leader sera plus \xE0 l&#8217;aise sur l&#8217;une ou l&#8217;autre des dimensions. Un bon leader sera celui qui saura constituer une \xE9quipe compl\xE9mentaire. Si vous avez des \xE9quipes auto g\xE9r\xE9es vous devrez essayer de la m\xEAme fa\xE7on de constituer au mieux vos \xE9quipes afin de mettre toutes les chances de votre c\xF4t\xE9.</p>
</div>
<div class="paragraph">
<p>Pour plus d&#8217;information vous pouvez lire \xAB Pourquoi Ast\xE9rix n\u2019est-il pas chef ? Du conflit \xE0 la motivation \xBB, \xC9ditions d\u2019organisation, 1985.</p>
</div>
<div class="paragraph">
<p><em>Merci \xE0 Alfred Almendra pour sa relecture de cet article </em></p>
</div>
</div>
</div>`;var mf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Je vais revenir sur l&#8217;intervention de Jose Paumard au Lyon Jug pour nous parler de la grosse nouveaut\xE9 de Java 8, les lambdas et l&#8217;API stream. Jos\xE9 est ma\xEEtre de conf\xE9rence \xE0 l&#8217;universit\xE9 Paris 13, o\xF9 il enseigne tout ce qui tourne autour de la sph\xE8re Java depuis 1998. Il a \xE9galement une activit\xE9 en tant qu&#8217;ind\xE9pendant qui lui permet d&#8217;apporter son expertise aux entreprises. Au del\xE0 de ces aspects Jos\xE9 fait aussi parti des co-organisateurs de la conf\xE9rence Devoxx France. L&#8217;article est assez long mais j&#8217;ai pr\xE9f\xE9r\xE9 ne pas le d\xE9couper.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pourquoi_les_lambdas">Pourquoi les lambdas ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>On peut se demander pourquoi les lambdas ont \xE9t\xE9 introduites dans Java 8 ? Le mieux est de prendre un exemple. Consid\xE9rons une classe Person</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450520.1702"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;
    <span class="hljs-keyword">public</span> String name;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450520.1702')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Le but est ici d&#8217;agir sur un ensemble de personnes (une Collection) et de calculer la moyenne d&#8217;\xE2ge de toutes les personnes de plus de 20 ans. En Java on fait g\xE9n\xE9ralement de la programmation imp\xE9rative o\xF9 l&#8217;on d\xE9crit les diff\xE9rentes instructions qui seront ex\xE9cut\xE9es par la machine pour modifier des \xE9tats. Par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450521.2144"><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
<span class="hljs-type">int</span> <span class="hljs-variable">average</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
<span class="hljs-type">int</span> <span class="hljs-variable">nb</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
<span class="hljs-keyword">for</span> (Person p : persons) {
    <span class="hljs-keyword">if</span> (p.getAge() &gt;= <span class="hljs-number">20</span>) {
        sum += p.getAge();
        nb++;
    }
}
<span class="hljs-keyword">if</span> (!persons.isEmpty()) {
    average = sum / nb;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450521.2144')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si on essaye de d\xE9composer les op\xE9rations pour obtenir le r\xE9sultat nous avons plusieurs phases</p>
</div>
<div class="ulist">
<ul>
<li>
<p>map : on recup\xE8re la donn\xE9e qui nous int\xE9resse, la liste des \xE2ges des personnes</p>
</li>
<li>
<p>filter : on filtre les \xE2ges  des personnes de plus de 20 ans</p>
</li>
<li>
<p>reduce :  on calcule la somme des \xE2ges qui nous permettra ensuite de sortir une moyenne</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>On aimerait faire du  fonctionnel et repenser notre code mais en Java 7 ceci est difficile. La base serait de d\xE9finir des interfaces du style</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450523.315"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Mapper</span><span class="hljs-meta">@LTO</span>, P<span class="hljs-meta">@GT</span> {
    P <span class="hljs-title function_">map</span><span class="hljs-params">(O o)</span>;
}
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Predicate</span><span class="hljs-meta">@LTO</span><span class="hljs-meta">@GT</span> {
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">filter</span><span class="hljs-params">(O t)</span>;
}
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Reducer</span><span class="hljs-meta">@LTR</span><span class="hljs-meta">@GT</span> {
    R <span class="hljs-title function_">reduce</span><span class="hljs-params">(R r1, R r2)</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450523.315')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>et des impl\xE9mentations&#8230;&#8203;</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450524.8743">Mapper<span class="hljs-meta">@LTPerson</span>, Integer<span class="hljs-meta">@GT</span> mapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mapper</span><span class="hljs-meta">@LTPerson</span>, Integer<span class="hljs-meta">@GT()</span> {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">map</span><span class="hljs-params">(Person o)</span> {
        <span class="hljs-keyword">return</span> o.getAge();
    }
};
Predicate<span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT</span> filter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span><span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT()</span> {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">filter</span><span class="hljs-params">(Integer t)</span> {
        <span class="hljs-keyword">return</span> t<span class="hljs-meta">@GT</span>=<span class="hljs-number">20</span>;
    }
};
Reducer<span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT</span> reducer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reducer</span><span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT()</span> {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">reduce</span><span class="hljs-params">(Integer r1, Integer r2)</span> {
        <span class="hljs-keyword">return</span> r1+r2;
    }
};</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450524.8743')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>On pourrait aussi utiliser la programmation fonctionnelle \xE0 la sauce  Guava  mais cette librairie ne permet pas de faire la derni\xE8re op\xE9ration de reduce. On devrait \xE9crire</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450525.8396">List<span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT</span> agesPersons = FluentIterable
        .from(persons)
        .filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span><span class="hljs-meta">@LTPerson</span><span class="hljs-meta">@GT()</span> {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(Person person)</span> {
                <span class="hljs-keyword">return</span> person.getAge()<span class="hljs-meta">@GT</span>=<span class="hljs-number">20</span>;
            }
        })
        .transform(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span><span class="hljs-meta">@LTPerson</span>, Integer<span class="hljs-meta">@GT()</span> {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(Person person)</span> {
                <span class="hljs-keyword">return</span> person.getAge();
            }
        })
        .toList();
<span class="hljs-keyword">if</span>(!agesPersons.isEmpty()) {
    <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (Integer age : agesPersons) {
        sum += age;
    }
    <span class="hljs-type">double</span> <span class="hljs-variable">moyenne</span> <span class="hljs-operator">=</span> sum / agesPersons.size();
    System.out.println(moyenne);
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450525.8396')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>On peut voir que le code est assez verbeux et que notre boucle for initiale est beaucoup simple. Passons maintenant \xE0  Java8 et utilisons les lambdas expressions pour simplifier l&#8217;\xE9criture des impl\xE9mentations de nos interfaces.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450526.2227">Mapper<span class="hljs-meta">@LTPerson</span>, Integer<span class="hljs-meta">@GT</span> mapper = (Person person) <span class="hljs-meta">@LAMBDA</span> person.getAge();
<span class="hljs-comment">//ou</span>
mapper = Person::getAge;

Predicate<span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT</span> filter = i <span class="hljs-meta">@LAMBDA</span> i<span class="hljs-meta">@GT</span>=<span class="hljs-number">20</span>;

Reducer<span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT</span> reducer = (r1, r2) <span class="hljs-meta">@LAMBDA</span> r1+r2;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450526.2227')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_comment_le_compilateur_g\xE8re_les_lambdas">Comment le compilateur g\xE8re les lambdas ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>On peut se placer \xE0 la place du compilateur. Comment savoir quelle lambda expression utiliser ? Il le sait par rapport au type que vous avez d\xE9clar\xE9 d&#8217;o\xF9 certaines contraintes</p>
</div>
<div class="ulist">
<ul>
<li>
<p>il ne faut qu&#8217;une seule m\xE9thode dans le contrat d&#8217;interface</p>
</li>
<li>
<p>il faut une coh\xE9rence entre les param\xE8tres d&#8217;entr\xE9e et de sortie et au niveau des exceptions (cette condition est remplie de fait dans une interface)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Comme vous pouvez le voir j&#8217;ai utilis\xE9 plusieurs \xE9critures possibles pour les lambdas expressions
* <code><em>(Person person) &#8594; person.getAge()</em></code> : ici je pr\xE9cise le type de la donn\xE9e en entr\xE9e mais je peux m&#8217;en passer car le navigateur peut le deviner (inf\xE9rence de type). C&#8217;est la premi\xE8re fois depuis le d\xE9but de Java que l&#8217;on n&#8217;est pas oblig\xE9 de pr\xE9ciser le type
* <code><em>Person::getAge</em></code> est possible si la m\xE9thode getAge n&#8217;accepte pas de param\xE8tre</p>
</div>
<div class="paragraph">
<p>Une lambda appara\xEEt comme une autre fa\xE7on d&#8217;\xE9crire une classe anonyme. Une lambda est une instance d&#8217;une interface fonctionnelle qui peut \xEAtre d\xE9finie \xE0 l&#8217;aide de l&#8217;annotation @FunctionalInterface. Par d\xE9faut toute interface ne d\xE9finissant qu&#8217;une seule m\xE9thode est fonctionnelle. Ceci permet de vous fournir la fonctionnalit\xE9 m\xEAme si vous utilisez des librairies \xE9crites avant Java8. Par contre l&#8217;annotation est utile car elle permet de verrouiller votre interface. L&#8217;ajout d&#8217;une nouvelle m\xE9thode provoquera une erreur.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_est_ce_quune_lambda_expression_est_un_objet">Est ce qu&#8217;une lambda expression est un objet ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Comme vous pouvez le voir dans l&#8217;exemple que j&#8217;ai donn\xE9 plus haut une lambda peut \xEAtre stock\xE9e dans une variable. Cette mani\xE8re de faire est naturelle pour des personnes habitu\xE9e au javascript, mais en Java c&#8217;est nouveau.</p>
</div>
<div class="paragraph">
<p>Mais alors est ce qu&#8217;une lambda expression est une classe ? Eh bien non car comme vous pouvez le voir nous n&#8217;utilisons pas le mot cl\xE9 new. Nous n&#8217;avons pas besoin de demander \xE0 la JVM la cr\xE9ation d&#8217;un objet qui sera ensuite nettoy\xE9 par le garbage. Une lambda expression est un nouveau type d&#8217;objet, une sorte de classe sans \xE9tat. Les lambdas permettent donc \xE0 la JVM de faire des gains de performance. Comme ce n&#8217;est pas un objet, si vous utilisez le this vous faites r\xE9f\xE9rence au conteneur et non \xE0 la lambda elle m\xEAme.</p>
</div>
<div class="paragraph">
<p>Java 8 arrive avec 43 nouvelles interfaces fonctionnelles mises \xE0 disposition dans le package <a href="http://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html">java.util.function</a>. On peut d\xE9couper en 4 cat\xE9gories</p>
</div>
<div class="ulist">
<ul>
<li>
<p>suppliers : fournit un objet</p>
</li>
<li>
<p>functions : prend un objet et renvoie un autre objet</p>
</li>
<li>
<p>consumers : consomme un objet sans rien renvoyer</p>
</li>
<li>
<p>predicate : prend un objet et renvoie un bool\xE9an</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utiliser_des_lambdas_sur_des_collections">Utiliser des lambdas sur des collections ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Revenons \xE0 notre exemple. Pour le moment les lambdas n&#8217;ont pas permis de r\xE9pondre \xE0 notre besoin intial. Pour cela il faudrait que l&#8217;API Collection fournissent des classes utilitaires permettant d&#8217;effectuer ces fonctions de base pour manipuler ces listes. \xC7a donnerait par exemple</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450526.15">List<span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT</span> ages = Lists.map(persons, person <span class="hljs-meta">@LAMBDA</span> person.getAge());
List<span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT</span> ages20 = Lists.filter(ages, age <span class="hljs-meta">@LAMBDA</span> age<span class="hljs-meta">@GT</span>=<span class="hljs-number">20</span>);
<span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> Lists.reduce(ages20, (r1, r2) <span class="hljs-meta">@LAMBDA</span> r1+r2);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450526.15')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Mais si on regarde de plus pr\xE8s nous pourrions avoir des probl\xE8mes de performance si la liste initiale des personnes est tr\xE8s grande. En effet nous manipulons plusieurs fois  une liste compl\xE8te. Mais alors que faire ? C&#8217;est l\xE0 que l&#8217;API Stream rentre en jeu.</p>
</div>
<div class="paragraph">
<p>Une <a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html">java.util.Stream</a> repr\xE9sente une s\xE9quence d&#8217;\xE9l\xE9ments sur lesquels une ou plusieurs op\xE9rations peuvent \xEAtre effectu\xE9es. On trouve plusieurs types d&#8217;op\xE9rations, des op\xE9rations interm\xE9diaires (map, filter&#8230;&#8203;) qui retournent le stream et des op\xE9rations terminales comme reduce, count&#8230;&#8203; qui retourne un r\xE9sultat. Toutes les op\xE9rations interm\xE9diaires ne d\xE9clenchent pas de calcul, elles placent diff\xE9rents indicateurs pour indiquer si la collection est tri\xE9e, absence de doublon, taille&#8230;&#8203; pour faciliter le travail ult\xE9rieur.</p>
</div>
<div class="paragraph">
<p>Une Stream peut \xEAtre d\xE9finie de plusieurs mani\xE8res</p>
</div>
<div class="ulist">
<ul>
<li>
<p>\xE0 partir d&#8217;une Collection <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#stream--">voir api</a></p>
</li>
<li>
<p>\xE0 partir d&#8217;un tableau <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#stream-long:A-">voir api</a></p>
</li>
<li>
<p>de la factory Stream (exemple Stream.of("a","b","c")</p>
</li>
<li>
<p>d&#8217;une String <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html#chars--">voir api</a></p>
</li>
<li>
<p>d&#8217;un BufferedReader <a href="http://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html#lines--">voir api</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Si on revient \xE0 notre besoin initial de vouloir calculer la moyenne d&#8217;\xE2ge des personnes de plus de 20 ans on peut \xE9crire le code suivante</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450527.1753"><span class="hljs-type">double</span> <span class="hljs-variable">moyenne</span> <span class="hljs-operator">=</span> persons.stream()
                        .filter(person <span class="hljs-meta">@LAMBDA</span> person.getAge() <span class="hljs-meta">@GT</span>= <span class="hljs-number">20</span>)
                        .mapToInt(person <span class="hljs-meta">@LAMBDA</span> person.getAge())
                        .average()
                        .getAsDouble();</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450527.1753')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_parall\xE9liser_les_traitements_pas_aussi_simple">Parall\xE9liser les traitements pas aussi simple ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Sur l&#8217;API Collection vous pouvez utiliser soit la m\xE9thode stream() soit parallelStream() pour lancer des traitements en parall\xE8le.</p>
</div>
<div class="paragraph">
<p>Il faut faire attention \xE0 ce que les op\xE9rations de r\xE9ductions soient bien associatives . Aie&#8230;&#8203; des souvenirs de math&#8230;&#8203; Pour faire simple une op\xE9ration <strong>\xF5</strong> est associative si
@backtick@<em>(x \xF5 y) \xF5 z = x \xF5 (y  \xF5 z)@backtick@</em>. Par exemple l&#8217;addition est associative mais le carr\xE9 d&#8217;un nombre ne l&#8217;est pas.</p>
</div>
<div class="paragraph">
<p>Comme nous n&#8217;avons aucune erreur de compilation et que le r\xE9sultat est al\xE9atoire nous pouvons avoir des surprises. Au niveau de la parall\xE9lisation il faut \xE9galement faire attention aux \xE9tats.</p>
</div>
<div class="paragraph">
<p>En fonction des traitements que vous effectuez, les parall\xE9liser peut entra\xEEner une d\xE9gradation des performances plut\xF4t qu&#8217;une am\xE9lioration.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_m\xE9thodes_par_d\xE9faut_dans_les_interfaces">Les m\xE9thodes par d\xE9faut dans les interfaces</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Un peu plus haut j&#8217;ai indiqu\xE9 que nous trouvions une nouvelle m\xE9thode dans l&#8217;API Collection au niveau de l&#8217;interface principale. Mais si on ajoute une m\xE9thode toutes les impl\xE9mentations doivent impl\xE9menter cette m\xE9thode&#8230;&#8203; En faisant cela, on viole une r\xE8gle de base de Java assurant une r\xE9trocompatibilit\xE9.</p>
</div>
<div class="paragraph">
<p>Il a fallu inventer un nouveau concept, les default methods. Elles permettent de d\xE9clarer une m\xE9thode dans une interface et proposer une impl\xE9mentation par d\xE9faut qui sera ex\xE9cut\xE9e si elle n&#8217;est pas surcharger. Prenons par exemple l&#8217;interface Collection on trouve une nouvelle m\xE9thode</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450527.4453"><span class="hljs-keyword">default</span> Stream<span class="hljs-meta">@LTE</span><span class="hljs-meta">@GT</span> stream() {
    <span class="hljs-keyword">return</span> StreamSupport.stream(spliterator(), <span class="hljs-literal">false</span>);
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450527.4453')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Si on r\xE9fl\xE9chit, par ce principe on est train d&#8217;introduire l&#8217;h\xE9ritage multiple dans le langage&#8230;&#8203; Prenons l&#8217;exemple de deux interfaces et une impl\xE9mentation</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450527.0823"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> {
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a</span><span class="hljs-params">()</span>;
}
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> {
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a</span><span class="hljs-params">()</span>;
}
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>,B {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450527.0823')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans ce cas nous n&#8217;avons pas de probl\xE8me mais si on transforme la m\xE9thode en default method que ce passe t&#8217;il pour la classe C si la m\xE9thode n&#8217;est pas surcharg\xE9e ?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450528.8574"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> {
    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a</span><span class="hljs-params">()</span> { <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;a&quot;</span>;}
}
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span> {
    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">a</span><span class="hljs-params">()</span> { <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;b&quot;</span>;}
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>,B {

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450528.8574')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Dans ce cas nous aurons une erreur de la part du compilateur afin de lever toute ambigu\xEFt\xE9. Vous devrez soit surcharger la m\xE9thode dans la classe C et appeler celle que vous voulez, soit faire h\xE9riter A de B.</p>
</div>
<div class="paragraph">
<p>Nous avions d\xE9j\xE0 de l&#8217;h\xE9ritage multiple au niveau des types. Cette nouvelle fonctionnalit\xE9 l&#8217;am\xE8ne au niveau des impl\xE9mentations. Mais Java n&#8217;ira pas au del\xE0 et il n&#8217;y aura pas d&#8217;h\xE9ritage multiple au niveau des \xE9tats.</p>
</div>
<div class="paragraph">
<p>Les default method ont un r\xE9el int\xE9r\xEAt quand vous d\xE9finissez une API. Prenons les exemples des Listeners ou bien souvent nous sommes oblig\xE9s de d\xE9finir des impl\xE9mentations de base pour \xE9viter de surcharger le code. Tout ces artifices pourront \xEAtre contourn\xE9s</p>
</div>
<div class="paragraph">
<p>Vous pouvez aussi \xE0 partir de Java 8 d\xE9finir des m\xE9thodes static dans les interfaces. Ceci facilitera la mise \xE0 disposition de classe Helper dans une API. Par exemple si je prends l&#8217;interface Stream</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450529.4956"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span><span class="hljs-meta">@LTT</span><span class="hljs-meta">@GT</span> Stream<span class="hljs-meta">@LTT</span><span class="hljs-meta">@GT</span> empty() {
    <span class="hljs-keyword">return</span> StreamSupport.stream(Spliterators.<span class="hljs-meta">@LTT</span><span class="hljs-meta">@GTemptySpliterator()</span>, <span class="hljs-literal">false</span>);
}
<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span><span class="hljs-meta">@LTT</span><span class="hljs-meta">@GT</span> Stream<span class="hljs-meta">@LTT</span><span class="hljs-meta">@GT</span> of(T t) {
    <span class="hljs-keyword">return</span> StreamSupport.stream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Streams</span>.StreamBuilderImpl<span class="hljs-meta">@LT</span><span class="hljs-meta">@GT(t)</span>, <span class="hljs-literal">false</span>);
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450529.4956')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_optional">Optional</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les optionals sont un nouveau concept pour \xE9viter les NullPointerException. Optional est un simple conteneur qui contiendra soit une valeur, soit null.</p>
</div>
<div class="paragraph">
<p>Par exemple quand vous faites une r\xE9duction d&#8217;un ensemble</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450529.6387">Optional<span class="hljs-meta">@LTInteger</span><span class="hljs-meta">@GT</span> sum =  persons.stream()
                                .map(person <span class="hljs-meta">@LAMBDA</span> person.getAge())
                                .filter(age <span class="hljs-meta">@LAMBDA</span> age<span class="hljs-meta">@GT</span>=<span class="hljs-number">20</span>)
                                .reduce((age1, age2) <span class="hljs-meta">@LAMBDA</span> age1+age2);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450529.6387')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_variables_ou_param\xE8tres_pr\xE9fix\xE9es_par_final">Variables ou param\xE8tres pr\xE9fix\xE9es par final</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Avec Java 8 vous n&#8217;avez plus besoin de d\xE9clarer vos variables ou param\xE8tres en final si vous les utiliser dans une classe interne. Ceci vous \xE9vitera de vous poser la question de savoir s&#8217;il faut mettre un final ou non.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_collectors">Collectors</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour terminer ce voyage dans les arcanes de Java 8 il est important de parler des Collectors. Les Collectors offrent tout un tas d&#8217;utilitaire pour effectuer des r\xE9ductions d&#8217;ensemble un peu plus avanc\xE9es. Prenons plusieurs exemples</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450530.7507"><span class="hljs-comment">//Age moyen des personnes de plus de 20 ans</span>
<span class="hljs-type">double</span> <span class="hljs-variable">moyenne</span> <span class="hljs-operator">=</span> persons.stream()
        .filter(person <span class="hljs-meta">@LAMBDA</span> person.getAge() <span class="hljs-meta">@GT</span>= <span class="hljs-number">20</span>)
        .collect(Collectors.averagingInt(Person::getAge));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450530.7507')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>donnera 42.5</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450530.0684"><span class="hljs-comment">//map repartissant les personnes par age</span>
Map<span class="hljs-meta">@LTInteger</span>, List<span class="hljs-meta">@LTPerson</span><span class="hljs-meta">@GT</span><span class="hljs-meta">@GT</span> repartition =  persons.stream()
        .filter(person <span class="hljs-meta">@LAMBDA</span> person.getAge() <span class="hljs-meta">@GT</span>= <span class="hljs-number">20</span>)
        .collect(Collectors.groupingBy(Person::getAge));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450530.0684')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>donnera {50=[com.javamind.domain.Person@122bbb7, com.javamind.domain.Person@1a4555e], 70=[com.javamind.domain.Person@30f1c0], 60=[com.javamind.domain.Person@1ed3c8d]}</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912450530.8835"><span class="hljs-comment">//map repartissant les personnes par age selon leur nom</span>
        Map<span class="hljs-meta">@LTInteger</span>, List<span class="hljs-meta">@LTString</span><span class="hljs-meta">@GT</span><span class="hljs-meta">@GT</span> repartition2 =  persons.stream()
                .filter(person <span class="hljs-meta">@LAMBDA</span> person.getAge() <span class="hljs-meta">@GT</span>= <span class="hljs-number">20</span>)
                .collect(Collectors.groupingBy(Person::getAge,
                    Collectors.mapping(
                       person<span class="hljs-meta">@LAMBDAperson</span>.getName(), Collectors.toList())));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912450530.8835')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>donnera {50=[Elysabeth, Fran\xE7ois], 20=[Sophie], 70=[Paul], 25=[C\xE9line], 60=[Robert], 30=[Emilie]}</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>L&#8217;objectif principal de Java 8 est le gain de performance. Cette nouvelle version va vraiment r\xE9volutionner la mani\xE8re de programmer et l&#8217;apport sera aussi grand que ce que les generics ont pu apporter en Java5. De nombreuses \xE9quipes ont migr\xE9 vers Java 6 ou Java 7, sans vraiment changer ni leur code existant, ni leurs habitudes de programmation. L\xE0, le travail ne va pas \xEAtre simple pour les d\xE9veloppeurs exp\xE9riment\xE9s car il va falloir \u201Cd\xE9sapprendre\u201D ce que l\u2019on sait, et \xE0 apprendre de nouvelles mani\xE8res de faire les choses.</p>
</div>
<div class="paragraph">
<p>Si vous voulez suivre Jos\xE9 en video plusieurs supports sont disponibles sur le site de Youtube. Vous pouvez aussi lire son interview r\xE9alis\xE9e par les <a href="http://www.duchess-france.org/le-lambda-tour-de-jose-paumard/">DuchessFrance</a>. Jos\xE9 met \xE9galement \xE0 disposition diff\xE9rents exemples sur son compte <a href="https://github.com/JosePaumard/jdk8-lambda-tour">github</a>.</p>
</div>
</div>
</div>`;var T=new Map;T.set("server_side_rendering",bv);T.set("spring_boot_starter_database_schema_initialization",yv);T.set("assertj_extracting_koltin",jv);T.set("java_memoire",wv);T.set("application_web_typescript",kv);T.set("start_typescript_project_and_test_with_jest",_v);T.set("comprendre_programation_android",xv);T.set("kotlin_et_android",Cv);T.set("application_android_score",Sv);T.set("objectif_clever_cloud_js",Tv);T.set("installer_xps_ubuntu",Ev);T.set("slide_avec_revealjs_asciidoctor",Dv);T.set("premiere_conference_au_togo",qv);T.set("secret_de_la_motivation",Iv);T.set("mongo_full_text_index",Av);T.set("publish_maven_central",Mv);T.set("mockserver",Rv);T.set("junit5_and_springboot",Lv);T.set("utiliser_api_envoi_email",Pv);T.set("do_your_blog_yourself",Nv);T.set("dotcss",Ov);T.set("http",Fv);T.set("web",Gv);T.set("internet",zv);T.set("site_wassadou",Bv);T.set("workboxjs",Uv);T.set("creer_service_worker",Vv);T.set("service_worker",Hv);T.set("highcharts_stackedarea",Wv);T.set("nouveau_site_asciidoctor",Jv);T.set("test_services_rest_springboot",$v);T.set("ecrire_ses_scripts_gradle_en_kotlin",Yv);T.set("ngeurope_angular2_unittest",Kv);T.set("ngeurope_angular_cli",Xv);T.set("ngeurope_keynote_misko_hevery",Qv);T.set("ngeurope_mobile_first_is_not_mobile_only",Zv);T.set("ngeurope_rendering_et_angular",ef);T.set("ngeurope_rxjs_angular2",sf);T.set("ngeurope_typescript_et_angular",tf);T.set("springboot_kotlin",af);T.set("springboot_http2",nf);T.set("springboot_devtools",of);T.set("headlesss_testing",rf);T.set("flexbox_layouts_faciles",lf);T.set("communication_et_neuroscience",cf);T.set("sorganiser_pour_la_complexite",pf);T.set("pousser_message_slack_en_java",df);T.set("12_patterns_transition_agile",uf);T.set("formes_leadership",hf);T.set("java8_et_les_lambda_stream",mf);var gf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_java_installation">Java installation</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_history">History</a></li>
<li><a class="link" fragment="#_which_version">Which version ?</a></li>
<li><a class="link" fragment="#_jdk_21_installation">JDK 21 Installation</a></li>
</ul>
</li>
<li><a class="link" fragment="#_ide_installation">IDE installation</a></li>
<li><a class="link" fragment="#_android_studio">Android studio</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_installation">Installation</a></li>
<li><a class="link" fragment="#_update">Update</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>We want to develop our own applications but how to be effective when we work ? What should I do to start? What software do I need to install? A good craftsman has good tools. It&#8217;s the same for a software developer..</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/environnement.png" alt="Environnement de travail" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java_installation">Java installation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you are a simple user, you can install a Java Runtime Environment (JRE). With this package you can run a Java application.</p>
</div>
<div class="paragraph">
<p>But to develop app, we need more tools to compile source code, monitor app execution&#8230;&#8203; In this case we will use a <strong>Java Development Kit</strong> (JDK)</p>
</div>
<div class="sect2">
<h3 id="_history">History</h3>
<div class="paragraph">
<p>Java was created by James Gosling in 1995 in a company called Sun Microsystems. Sun was acquired by Oracle in 2010. Oracle defines the specification, and you can have several JDK editors which implements their JDK.</p>
</div>
<div class="paragraph">
<p><a href="https://openjdk.org/">OpenJDK</a> (Open Java Development Kit) is a free and open-source implementation of the Java Platform, Standard Edition.</p>
</div>
</div>
<div class="sect2">
<h3 id="_which_version">Which version ?</h3>
<div class="paragraph">
<p>Java is released every 6 months, but only a few versions are defined as <a href="https://en.wikipedia.org/wiki/Long-term_support">LTS (long term support)</a>.</p>
</div>
<div class="paragraph">
<p>As of September 2024, Java 23 is the last version, but we will use a Long Term Support (LTS) version. For the moment this version is Java 21.</p>
</div>
<div class="paragraph">
<p>Please use the <strong>Java 21 (LTS) version</strong>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_jdk_21_installation">JDK 21 Installation</h3>
<div class="paragraph">
<p>Different companies provide a JDK version (Oracle, OpenJDK, Amazon, Microsoft&#8230;&#8203;).</p>
</div>
<div class="sect3">
<h4 id="_package_manager">Package manager</h4>
<div class="paragraph">
<p>Today it is recommended to use a package manager, a tool for managing parallel versions of multiple Software Development Kits on most Unix-based systems. We will use <a href="https://sdkman.io/">SdkMan</a>.</p>
</div>
<div class="paragraph">
<p>If you are running Linux (Fedora, CentOS) you can run</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451243.942">~@dollar@ curl -s &quot;https://get.sdkman.io&quot; | bash
~@dollar@ source &quot;@dollar@HOME/.sdkman/bin/sdkman-init.sh&quot;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451243.942')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Check the good installation with this command</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451243.8765">~@dollar@ sdk version

SDKMAN!
script: 5.18.2
native: 0.4.2</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451243.8765')">Copy</button></pre>
</div>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>SDKMAN requires a bash environment to run. On Windows, it can&#8217;t be natively installed; you need WSL or MSYS+MinGW. Cygwin is no longer supported.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>For Windows, there are two installation routes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>WSL Approach: Install Windows Subsystem for Linux (WSL) before attempting SDKMAN installation. A basic toolset (bash, zip, unzip, curl) is necessary. Most times, it works out of the box.</p>
</li>
<li>
<p>Git Bash Solution: If you use Git Bash for Windows, you&#8217;ll need to supplement it with MinGW to have the required toolset for SDKMAN. There are some issues with this approach, but it works for the most part.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_java_installation_2">Java installation</h4>
<div class="paragraph">
<p>If you are not able to install <a href="https://sdkman.io/">SdkMan</a> you can find a Java version on <a href="https://jdk.java.net/archive/" class="bare">https://jdk.java.net/archive/</a></p>
</div>
<div class="paragraph">
<p>If <a href="https://sdkman.io/">SdkMan</a> is available you can list all the Java version available with this command</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451243.9553">~@dollar@ sdk list java</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451243.9553')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>To install a Java version you can run</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451243.4075">~@dollar@ sdk install java 21.0.4-oracle</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451243.4075')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can install different version of Java and you can change the default version with this command</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451243.2524">~@dollar@ sdk default java 21.0.4-oracle</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451243.2524')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Check that Java is installed.</p>
</div>
<div class="paragraph">
<p>For that open a terminal</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451243.7588">~@dollar@  java -version
java version &quot;21.0.4&quot; 2024-07-16 LTS
Java(TM) SE Runtime Environment (build 21.0.4+8-LTS-274)
Java HotSpot(TM) 64-Bit Server VM (build 21.0.4+8-LTS-274, mixed mode, sharing)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451243.7588')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ide_installation">IDE installation</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>An integrated development environment (IDE) is a set of tools that can increase the productivity of software developers.
It includes a text editor for programming, functions that allow to start the compiler, run tests, run executables, debug online &#8230;&#8203; There are several IDE on the market.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>When you develop in Java, you have several alternatives: <a href="http://www.eclipse.org/downloads/">Eclipse</a>, <a href="https://netbeans.org/">NetBeans</a>, <a href="https://www.jetbrains.com/idea">IntelliJ Idea</a>, <a href="https://code.visualstudio.com/">VS code</a>.</p>
</div>
<div class="paragraph">
<p>After 20 years of development, I used a lot IDE.
IntelliJ Idea is for me the best one to develop in Java, but the Premium version is not free.
But <strong>you can use the community version freely.</strong></p>
</div>
<div class="paragraph">
<p><strong>To simplify mutual aid we will all use the same IDE, IntelliJ Idea Community version. <a href="https://jetbrains.com/idea/download">Download</a> the last version.</strong>
You can also try to obtain a free licence on this <a href="https://jetbrains.com/community/education/#students">link</a> for the premium version.</p>
</div>
<div class="paragraph">
<p>Launch your IDE to check that everything works</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/outil/idea_welcome.jpg" alt="IntelliJ" width="800">
</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/outil/idea.svg" alt="IntelliJ">
</div>
<div class="title">Figure 1. logo IntelliJ</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_android_studio">Android studio</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Android studio is the tool we use to write Android code. If you don&#8217;t follow my courses about Android, you don&#8217;t need to install this tool</p>
</div>
<div class="paragraph">
<p>You need to install it on your computer (installation requires 900MB) on <a href="https://developer.android.com/studio" class="bare">https://developer.android.com/studio</a>.</p>
</div>
<div class="sect2">
<h3 id="_installation">Installation</h3>
<div class="paragraph">
<p>For a Linux installation you have to go in the installation directory (for me ~/appli) with a terminal and launch script <code>launch.sh</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451243.8179">cd ~/appli/android-studio/bin
sh ./studio.sh</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451243.8179')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Follow the wizard and choose a standard installation.</p>
</div>
<div class="paragraph">
<p>It&#8217;s important to do that to download the last version of Android SDK, recent images for Emulator&#8230;&#8203;</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio.png" alt="Follow wizard" width="800">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_update">Update</h3>
<div class="paragraph">
<p>If you have an existing version of Android Studio on your laptop you should update Android Sdk.
For that go on menu <strong>Tools @GT SDK manager</strong></p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio-update1.png" alt="Menu SDK manager" width="800">
</div>
</div>
<div class="paragraph">
<p>Below on my example, I have 2 versions installed : a fully Android 9.0 and a partial Android 10.0. In my case the better choice is to uncheck these 2 versions and use the last One Android 10.0+ (version 30).</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio-update2.png" alt="Choose SDK versions" width="800">
</div>
</div>
<div class="paragraph">
<p>When you develop in Android you should always do it on the last SDK version.</p>
</div>
<div class="paragraph">
<p>Google requires you to always target this latest version when you publish apps to the official store.</p>
</div>
</div>
</div>
</div>`;var vf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_for_who_why">For who, why ?</a></li>
<li><a class="link" fragment="#_what_did_we_do_before">What did we do before ?</a></li>
<li><a class="link" fragment="#_whats_a_repository">What&#8217;s a repository ?</a></li>
<li><a class="link" fragment="#_install_git">Install Git</a></li>
<li><a class="link" fragment="#_first_commands">First commands</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_configure_git">Configure Git</a></li>
<li><a class="link" fragment="#_clone_a_git_project">Clone a Git project</a></li>
<li><a class="link" fragment="#_initialize_a_git_repository">Initialize a Git repository</a></li>
<li><a class="link" fragment="#_linking_files_to_git">Linking files to Git</a></li>
<li><a class="link" fragment="#_saving_modifications">Saving modifications</a></li>
<li><a class="link" fragment="#_know_the_current_state">Know the current state</a></li>
<li><a class="link" fragment="#_see_history">See history</a></li>
<li><a class="link" fragment="#_see_current_changes">See current changes</a></li>
<li><a class="link" fragment="#_go_back_in_the_history">Go back in the history</a></li>
</ul>
</li>
<li><a class="link" fragment="#_working_with_branches">Working with branches</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_see_the_current_branch">See the current branch</a></li>
<li><a class="link" fragment="#_create_a_branch">Create a branch</a></li>
<li><a class="link" fragment="#_change_the_current_branch">Change the current branch</a></li>
<li><a class="link" fragment="#_compare_2_branches">Compare 2 branches</a></li>
<li><a class="link" fragment="#_merge_2_branches">Merge 2 branches</a></li>
<li><a class="link" fragment="#_delete_a_branch">Delete a branch</a></li>
</ul>
</li>
<li><a class="link" fragment="#_github">Github</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_link_your_local_repository_to_a_remote_repository">Link your local repository to a remote repository</a></li>
<li><a class="link" fragment="#_git_project_workflow">Git Project Workflow</a></li>
</ul>
</li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>This course presents <a href="https://git-scm.com">Git</a> &amp; <a href="https://github.com/">Github</a>. Git is used to centralize and log the changes on your code. This is a software. GitHub is a cloud platform built on Git and you can use their services to store, manage, share your code with your co-workers&#8230;&#8203;</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/git-github.jpg" alt="Comprendre Git" width="800">
</div>
</div>
<div class="paragraph">
<p>For more information about Git you can find</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a summary of the main instructions  <a href="https://education.github.com/git-cheat-sheet-education.pdf" class="bare">https://education.github.com/git-cheat-sheet-education.pdf</a></p>
</li>
<li>
<p>official documentation <a href="https://git-scm.com/docs" class="bare">https://git-scm.com/docs</a></p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_for_who_why">For who, why ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A version control system (VCS: version control system) helps to <strong>manage the history</strong> of the changes made by people, teams, or only one person who collaborate on a project.</p>
</div>
<div class="paragraph">
<p>When the project evolves, people can at any time, find an old version of the code.</p>
</div>
<div class="paragraph">
<p>Git answers these questions quickly</p>
</div>
<div class="ulist">
<ul>
<li>
<p>What changes have been made?</p>
</li>
<li>
<p>Who made the changes?</p>
</li>
<li>
<p>When were the changes made?</p>
</li>
<li>
<p>Why were the changes made?</p>
</li>
</ul>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Git is a decentralized source management software (DVCS) created in 2005 by Linus Torvald (creator of the Linux kernel).
The sources are stored both on the computer of each contributor of the project, but also on a centralized server.</p>
</div>
</blockquote>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/outil/git.svg" alt="Git">
</div>
<div class="title">Figure 1. logo Git</div>
</div>
<div class="paragraph">
<p>Today, most of the open source or commercial projects developed use Git (More than 90% of developers, according <a href="https://survey.stackoverflow.co/2022#section-version-control-version-control-systems">stackoverflow</a> insights).</p>
</div>
<div class="paragraph">
<p>Git allows access to all files, branches, versions (releases) or tags of a project to authorized people.</p>
</div>
<div class="paragraph">
<p>Basically you don&#8217;t need a centralized solution with Git, but online solutions have emerged like <a href="https://github.com">Github</a> or <a href="https://about.gitlab.com/">Gitlab</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/outil/github.svg" alt="Github">
</div>
<div class="title">Figure 2. logo Github</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/outil/gitlab.svg" alt="Gitlab">
</div>
<div class="title">Figure 3. logo Gitlab</div>
</div>
<div class="paragraph">
<p>These services extend Git and offer more features like pull requests, code reviews&#8230;&#8203; <a href="https://github.com">Github</a> was the precursor but today <a href="https://about.gitlab.com/">Gitlab</a> is equivalent, and you can use the one you prefer.</p>
</div>
<div class="paragraph">
<p>As I had to make a choice for our courses, I choose Github. From now on, I will only talk about Github. Back up your sources regularly. At the end of our courses, you will have to provide me the URGithub URL of your repository which will contain the sources of your project.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_did_we_do_before">What did we do before ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Before Git, it was difficult to follow the history, especially when we had multiple project copies.</p>
</div>
<div class="paragraph">
<p>Early solutions, like CSV or SVN (Subversion) were quickly limited.</p>
</div>
<div class="paragraph">
<p>It was often awful to refactor your code because of their limitations.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_whats_a_repository">What&#8217;s a repository ?</h2>
<div class="sectionbody">
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>A Git repository contains all the files and directories associated with your project. It also contains all the history of changes made on each one. You can retrieve any changes made by any developer at any time.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Publishing changes is called a commit. Each commit is linked to another (this is a chained list).</p>
</div>
<div class="paragraph">
<p>Commits can be organized into several parallel branches.</p>
</div>
<div class="paragraph">
<p>Projects are stand-alone units, and anyone with a copy of the repository can access the entire code and its history. You can execute different operations like logging, cloning, branch creation, commit, merging&#8230;&#8203;</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/outil/git-repo.png" alt="Github" width="800">
</div>
<div class="title">Figure 4. Centralized repository, local repository</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_install_git">Install Git</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you use Windows, you can download Git here <a href="https://git-scm.com/downloads" class="bare">https://git-scm.com/downloads</a></p>
</div>
<div class="paragraph">
<p>On a Linux (Fedora)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.7034">sudo yum install git</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.7034')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>On Linux (Debian, Ubuntu) use</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.597">sudo apt-get install git</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.597')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>To check your install, display the git version in terminal</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.6042">~@dollar@ git --version

git version 2.34.1</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.6042')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_first_commands">First commands</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_configure_git">Configure Git</h3>
<div class="paragraph">
<p>It&#8217;s important to provide some information to Git, especially when you push your changes to a centralized repository. Use the <code>git config</code> operation to set your name and your email.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.325">~@dollar@ git config --global user.name &quot;Guillaume EHRET Dev-Mind&quot;
~@dollar@ git config --global user.email &quot;guillaume@dev-mind.fr&quot;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.325')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>By default, Git will create a branch called <code>master</code> when you create a new repository with the command <code>git init</code>. The terms master and slave are often used in computer industry&#8217;s. After many protests, these harmful and antiquated terms were no longer considered appropriate. Github used the term <code>main branch</code>. To use the same configuration, you can execute</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.2886">~@dollar@  git config --global init.defaultBranch main</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.2886')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_clone_a_git_project">Clone a Git project</h3>
<div class="paragraph">
<p>Go in your working directory, and in a terminal type</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.8096">~@dollar@ git clone https://github.com/Dev-Mind/git-demo.git</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.8096')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The remote project <code>git-demo</code> is downloaded on your computer. You get all the history, all the files, all the branches &#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>For example you can run these commands</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.7712">~@dollar@ cd git-demo
~@dollar@ git log</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.7712')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_initialize_a_git_repository">Initialize a Git repository</h3>
<div class="paragraph">
<p>For a new project, it&#8217;s better to start from 0. Delete the directory to recreate it</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.0066">~@dollar@ cd ..
~@dollar@ rm -rf git-demo
~@dollar@ mkdir git-demo
~@dollar@ cd git-demo</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.0066')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>To link this directory to Git, launch</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.8682">~@dollar@ git init

Initialized empty Git repository in /home/devmind/Workspace/java/git-demo/.git/</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.8682')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>A <code>.git</code> directory has been added and it contains the different files, logs, traces</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.6482">---
~@dollar@ ls -la
total 28
drwxr-xr-x  3 devmind devmind  4096 sept. 26 22:46 .
drwxr-xr-x 10 devmind devmind  4096 sept. 26 22:46 ..
drwxr-xr-x  8 devmind devmind  4096 sept. 26 22:46 .git
----</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.6482')">Copy</button></pre>
</div>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Git will display a warning if you name the default branch master (default configuration). Read the chapter about <a href="https://dev-mind.fr/training/outil/git.html#_initialize_a_git_repository">Git configuration</a> to set another default branch name.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_linking_files_to_git">Linking files to Git</h3>
<div class="paragraph">
<p>Let&#8217;s start by creating files in this <code>git-demo</code> directory</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.1445">~@dollar@ echo &quot;Hello world&quot; @GT hello.txt
~@dollar@ echo &quot;@LThtml@GT@LTbody@GT@LTh1@GTHello World@LT/h1@GT@LT/body@GT@LT/html@GT&quot; @GT hello.html
~@dollar@ echo &quot;Hello world&quot; @GT hello.md
~@dollar@ ls
hello.html  hello.txt  hello.md</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.1445')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Use <code>git status</code> to know the state</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.817">~@dollar@ git status

On branch main

No commits yet

Untracked files:
  (use &quot;git add @LTfile@GT...&quot; to include in what will be committed)
	hello.html
	hello.md
	hello.txt

nothing added to commit but untracked files present (use &quot;git add&quot; to track)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.817')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Use the <code>git add</code> command to indicate that a new or multiple files will be handled by git.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.5613">~@dollar@ git add hello.txt
~@dollar@ git add .</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.5613')">Copy</button></pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Adds hello.txt file</p>
</li>
<li>
<p>Adds all the files</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>At this moment, our files are not saved in Git. They are in a staging area. We have only a snapshot of the changes</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.4136">~@dollar@ git status

On branch main

No commits yet

Changes to be committed:
  (use &quot;git rm --cached @LTfile@GT...&quot; to unstage)
	new file:   hello.html
	new file:   hello.md
	new file:   hello.txt</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.4136')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_saving_modifications">Saving modifications</h3>
<div class="paragraph">
<p>The following command saves the snapshot in the project history and completes the change tracking process. In short, a commit works like taking a photo. We freeze in time what we have done.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.7124">~@dollar@ git commit -m &quot;First commit&quot;

[main a7d5b84] First commit
 3 files changed, 3 insertions(+)
 create mode 100644 hello.html
 create mode 100644 hello.md
 create mode 100644 hello.txt</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.7124')">Copy</button></pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>-m</code> to add a message.
It&#8217;s very important to be able to understand why a commit was made</p>
</li>
<li>
<p>Git displays the name of the branch &#8658; <code>main</code> and the hash of the commit@backtick@ a7d5b84@backtick@ (this is the number of the photo)</p>
</li>
</ol>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Our Git history is a living, ever-changing, searchable record that tells the story of how and why our code is the way it is.
It&#8217;s important to explain the purpose of a commit.And try to commit often your work.
It is a security if you want to restore your work.
For example</p>
</div>
</blockquote>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/outil/github_history.png" alt="History">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_know_the_current_state">Know the current state</h3>
<div class="paragraph">
<p>We will delete the <code>hello.txt</code> file, update <code>hello.md</code> and add a <code>hello.adoc</code> file</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.5935">~@dollar@ rm hello.md
~@dollar@ echo &quot;My first Git example&quot; &gt; hello.md
~@dollar@ echo &quot;Hello World&quot; &gt; hello.adoc</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.5935')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Launch the following command to know where Git is</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.2854">~@dollar@ git status</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.2854')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Git should indicate that you have a modified file <code>hello.md</code> and an untracked file <code>hello.adoc</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.1113">~@dollar@ git add .
~@dollar@ git commit -m &quot;Second commit&quot;

[main 7b7d8e6] Second commit
 3 files changed, 2 insertions(+), 2 deletions(-)
 create mode 100644 hello.adoc
 delete mode 100644 hello.txt</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.1113')">Copy</button></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.1677">~@dollar@ git status

On branch main
nothing to commit, working tree clean</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.1677')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Now all the changes are saved</p>
</div>
</div>
<div class="sect2">
<h3 id="_see_history">See history</h3>
<div class="paragraph">
<p>Use the log command</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.5388">~@dollar@ git log

commit 7b7d8e69a06af284c9da7aa4a8c28835d23318fe (HEAD @LAMBDA main)
Author: Guillaume EHRET Dev-Mind @LTguillaume@dev-mind.fr@GT
Date:   Wed Sep 26 23:22:46 2018 +0200

    Second commit

commit a7d5b843ebc65ac6e94c37872d6a936e1c03a6b5
Author: Guillaume EHRET Dev-Mind @LTguillaume@dev-mind.fr@GT
Date:   Wed Sep 26 23:08:00 2018 +0200

    First commit</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.5388')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>We find our two commits, with the names we have set, at what time &#8230;&#8203;</p>
</div>
</div>
<div class="sect2">
<h3 id="_see_current_changes">See current changes</h3>
<div class="paragraph">
<p>We will update a file and run the <code>diff</code> command</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.4255">~@dollar@ echo &quot;Fichier Asciidoc&quot; @GT hello.adoc
~@dollar@ git diff</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.4255')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You should see, what has been added and removed in the file.</p>
</div>
<div class="paragraph">
<p>You can use IDE (like IntelliJ) and its visual tools for tracking changes. For example</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/outil/ide_git.png" alt="Github" width="700">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_go_back_in_the_history">Go back in the history</h3>
<div class="paragraph">
<p>You can use a <code>reset</code> to go back to the state of the last commit</p>
</div>
<div class="paragraph">
<p>For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.985">~@dollar@ echo &quot;Hello World&quot; @GT hello.adoc
~@dollar@ git status
On branch main
Changes not staged for commit:
  (use &quot;git add @LTfile@GT...&quot; to update what will be committed)
  (use &quot;git restore @LTfile@GT...&quot; to discard changes in working directory)
	modified:   hello.adoc

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)

~@dollar@ git reset --hard
~@dollar@ git status
On branch main
nothing to commit, working tree clean</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.985')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_working_with_branches">Working with branches</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Generally on a project we have a main branch (generally called <code>main</code>). We can open different branches in parallel to fix bugs, add new features.</p>
</div>
<div class="paragraph">
<p>These branches are merged on the main branch when they are completes. For example when the code will be reviewed by co-coworkers and the app tested by users.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/outil/git-branch.jpg" alt="Github" width="800">
</div>
<div class="title">Figure 5. Branch Principle</div>
</div>
<div class="sect2">
<h3 id="_see_the_current_branch">See the current branch</h3>
<div class="paragraph">
<p>Run the following command to see the current branch</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.1987">~@dollar@ git branch
feat/hairs
* main</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.1987')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>For the moment we have 2 local branches <code>feat/hairs</code> and <code>main</code>. Character * shows the current branch.</p>
</div>
</div>
<div class="sect2">
<h3 id="_create_a_branch">Create a branch</h3>
<div class="paragraph">
<p>A branch is just a name without special characters or spaces. To create a branch we use <code>git branch [name]</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.8276">~@dollar@ git branch test
~@dollar@ git branch
* main
test</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.8276')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>By default the created branch is not active (it does not have *)</p>
</div>
<div class="paragraph">
<p>A prefix is often used by convention, when you want to name a branch. for example</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>fix/1233-hair-color</code>: a branch to fix a hair color problem. The ticket number of the bug tracker is often indicated</p>
</li>
<li>
<p><code>feat/add-glasses</code>: a branch to add a feature</p>
</li>
<li>
<p><code>chore/upgrade-jquery</code>: a branch to perform a technical task</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_change_the_current_branch">Change the current branch</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.1943">~@dollar@ git checkout test
~@dollar@ git branch
main
main
* test</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.1943')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>test</code> branch is now the default</p>
</div>
<div class="paragraph">
<p>You can make a change and save it</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.8345">~@dollar@ echo &quot;Fichier Asciidoc updated&quot; @GT hello.adoc
~@dollar@ git add .
~@dollar@ git commit -m &quot;Third commit&quot;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.8345')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can launch the following commands</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.7776">~@dollar@ git log
~@dollar@ git checkout main
~@dollar@ git log</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.7776')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>As we returned on the <code>main</code> branch we don&#8217;t see the last commit (only present in the <code>test</code> branch)</p>
</div>
</div>
<div class="sect2">
<h3 id="_compare_2_branches">Compare 2 branches</h3>
<div class="paragraph">
<p>We will reuse the <code>git diff</code> command but we specify the 2 branches separated by <code>&#8230;&#8203;</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.1104">~@dollar@ git diff test...main</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.1104')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This command should show nothing because <code>test</code> is based on@backtick@ main@backtick@ and it is just ahead, it contains all main commits</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.0005">~@dollar@ git diff main...test</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.0005')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This time, as <code>test</code> branch is the reference, Git detects that there are differences</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.3892">~@dollar@ git log

commit 4529128a723e0a16cf405b218f37f2da58c5a9fd (HEAD @LAMBDA test)  (1)
Author: Guillaume EHRET Dev-Mind @LTguillaume@dev-mind.fr@GT
Date:   Thu Sep 27 00:00:00 2018 +0200

    Third commit

commit 9fd87d1ffc654a74105f3f279032e7f88d3d265b (main)       (2)
Author: Guillaume EHRET Dev-Mind @LTguillaume@dev-mind.fr@GT
Date:   Wed Sep 26 23:51:10 2018 +0200

    Second  commit
...</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.3892')">Copy</button></pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Git indicates the HEAD of the test branch</p>
</li>
<li>
<p>Git displays the name of the parent branch =&#8658; <code>main</code> and where it is in the history</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>You can go back to <code>main</code> and create another branch@backtick@ test2@backtick@</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451236.083">~@dollar@ git checkout main
~@dollar@ git branch test2
~@dollar@ git checkout test2
~@dollar@ echo &quot;Fichier toto&quot; &gt; toto.adoc
~@dollar@ git add .
~@dollar@ git commit -m &quot;Fourth commit&quot;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451236.083')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_merge_2_branches">Merge 2 branches</h3>
<div class="paragraph">
<p>If you want to post your changes from the <code>test</code> branch to@backtick@ main@backtick@, you&#8217;re going to do a merge</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451237.6545">~@dollar@ git checkout main
~@dollar@ git merge test</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451237.6545')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_delete_a_branch">Delete a branch</h3>
<div class="paragraph">
<p>You can delete a branch if this branch is not the active one</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451237.3643">~@dollar@ git checkout test
~@dollar@ git branch -d test
error: Cannot delete branch &#x27;test&#x27; checked out at &#x27;/home/devmind/Workspace/java/git-demo&#x27;

~@dollar@ git checkout main
~@dollar@ git branch -d test
Deleted branch test (was 9fd87d1).</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451237.3643')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_github">Github</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_link_your_local_repository_to_a_remote_repository">Link your local repository to a remote repository</h3>
<div class="paragraph">
<p>You can install a centralized Git repository by using <a href="https://github.com/">Github Enterprise</a>, <a href="https://gitlab.com/">Gitlab Enterprise</a>, <a href="https://gogs.io/">Gogs</a>.But you can also use an online service</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create an account under Github</p>
</li>
<li>
<p>Once you are logged in on Github,  you can create your first repository</p>
</li>
</ol>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/outil/github_new.png" alt="Nouveau projet sous Github" width="800">
</div>
<div class="title">Figure 6. New project under Github</div>
</div>
<div class="paragraph">
<p>Github provides you commands to connect this remote repository to your local repository.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/outil/github_new2.png" alt="github new2" width="800">
</div>
<div class="title">Figure 7. commands to connect this remote repository</div>
</div>
<div class="paragraph">
<p>To link your local project type the following commands</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451237.9495">~@dollar@ git checkout main
~@dollar@ git remote add origin https://github.com/Dev-Mind/git-demo.git  (1)
~@dollar@ git push -u origin main                                       (2)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451237.9495')">Copy</button></pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Git adds remote origin to your local project</p>
</li>
<li>
<p>The push command allows to send what you have on the current branch (local main branch) on the server</p>
</li>
</ol>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>If you have a problem to use your login and password in the command line, you can follow this <a href="https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token">documentation</a> to generate an access token.
When you have a token you can use it as password</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Github allows teams to synchronize throughout the life of a project.
You can push any branch.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451237.0652">~@dollar@ git checkout feat/new_hair
~@dollar@ git push -u origin feat/new_hair</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451237.0652')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>These commands</p>
</div>
<div class="ulist">
<ul>
<li>
<p>activate the <code>feat/new_hair</code> branch and</p>
</li>
<li>
<p>push the changes on Github.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you want to retrieve local changes made by your colleagues do</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451237.5283">~@dollar@ git pull</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451237.5283')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>git fetch</code> command retrieves the history of all branches locally.</p>
</div>
</div>
<div class="sect2">
<h3 id="_git_project_workflow">Git Project Workflow</h3>
<div class="paragraph">
<p>When we are working in team, the workflow will be</p>
</div>
<div class="paragraph">
<p><strong>Create a branch</strong><br>
We usually create a branch from main (or another branch).
Some companies have, for example, a branch dev for the current developments, a branch <code>prod</code> that corresponding to what is in production.
Branches created on these canonical branches must have a short life duration.</p>
</div>
<div class="paragraph">
<p><strong>Add commits</strong><br>
Every small changes should be made as often as possible.
Each commit, within a branch creates restoration points in the project history.</p>
</div>
<div class="paragraph">
<p><strong>Open a pull request</strong><br>
When you pushed your changes on Github, you can open a pull request.
This allows to discuss about the current development (for example with the people who will test)</p>
</div>
<div class="paragraph">
<p><strong>Code Review</strong><br>
In a mature development team, your code is always read by another developers.
Your code is often also tested by other people.
Anyone can make returns on the Pull request.
You can make changes on the branch and pushed other commits to fix the review remarks.</p>
</div>
<div class="paragraph">
<p><strong>Merge</strong>
+When everything is OK you can click the <code>Merge</code> button on the pull request.GitHub automatically performs the equivalent of a local 'git merge' operation.</p>
</div>
<div class="paragraph">
<p><strong>Deploy</strong><br>
Teams can install your updates or continue development</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>There&#8217;s still a lot of things to say about Git and Github. Some concepts can be complex like <code>rebase</code> or <code>conflict resolution</code>. IDEs will simplify some tasks.You can find more resources on the web <a href="http://try.github.io/" class="bare">http://try.github.io/</a></p>
</div>
<div class="paragraph">
<p>This course is there to give you the basics in order to be able to realize the TP using Git. You are now able to save your sources, to share them, to find them easily from one computer to another.</p>
</div>
<div class="paragraph">
<p>So enjoy with Git</p>
</div>
</div>
</div>`;var ff=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_introduction">Introduction</a></li>
<li><a class="link" fragment="#_why_a_build_tool">Why a build tool?</a></li>
<li><a class="link" fragment="#_usage">Usage</a></li>
<li><a class="link" fragment="#_principle">Principle</a></li>
<li><a class="link" fragment="#_starting_with_gradle">Starting with Gradle</a></li>
<li><a class="link" fragment="#_gradle_wrapper">Gradle wrapper</a></li>
<li><a class="link" fragment="#_flask_first_example"><span class="icon">[flask&#93;</span> First example</a></li>
<li><a class="link" fragment="#_how_gradle_works">How Gradle works ?</a></li>
<li><a class="link" fragment="#_tasks">Tasks</a></li>
<li><a class="link" fragment="#_incremental_build">Incremental build</a></li>
<li><a class="link" fragment="#_flask_create_your_own_tasks"><span class="icon">[flask&#93;</span> Create your own tasks</a></li>
<li><a class="link" fragment="#_gradle_life_cycle">Gradle Life cycle</a></li>
<li><a class="link" fragment="#_plugins">Plugins</a></li>
<li><a class="link" fragment="#_flask_custom_tasks_and_their_configurations"><span class="icon">[flask&#93;</span> Custom tasks and their configurations</a></li>
<li><a class="link" fragment="#_dependency_management">Dependency management</a></li>
<li><a class="link" fragment="#_reference">Reference</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this training, we will learn how Gradle works and how use it in our projects.</p>
</div>
<div class="paragraph">
<p>It&#8217;s just a fast presentation of this tool, and you will find more informations on official website <a href="https://docs.gradle.org/current/userguide/userguide.html" class="bare">https://docs.gradle.org/current/userguide/userguide.html</a></p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle.png" alt="Gradle by Dev-Mind" width="800">
</div>
</div>
<div class="paragraph">
<p>Gradle is an open source tool for automating the build of your Java, Kotlin, Android, Web projects&#8230;&#8203; If you only have a web project, you don&#8217;t need to use Gradle, but when all your projects are in a mono repository on Git, with heterogeneous languages, it&#8217;s easier to use a same life cycle tool like Gradle.</p>
</div>
<div class="paragraph">
<p>Gradle is not the only solution in the ecosystem. You can also use Maven or older tool like Ant.</p>
</div>
<div class="paragraph">
<p>Gradle has the Ant flexibility and apply many Maven conventions.</p>
</div>
<div class="paragraph">
<p>Maven helps to build only one project. But Gradle was created to be more flexible, you can build several artifacts for example. That&#8217;s why the Android community has chosen this tool. You can define different flavors and build 2 artifacts : one for the free version for example and another one for the paid version.</p>
</div>
<div class="paragraph">
<p>Java users use both Maven and Gradle. But I choose Gradle for you, because we will use this tool in our Java/Spring project, and in the Android project.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Highly customizable</strong><br>
You have a convention to use the plugins but everything is customizable.
You can write your scripts in Kotlin (default) or in Groovy (the legacy solution)</p>
</div>
<div class="paragraph">
<p><strong>Fast / Incremental build / Cache / Parallel</strong> <br>
Incremental build : Gradle reuses outputs from previous executions, processing only inputs that changed. For a fastest build, you can also execute tasks in parallel and you can configure Gradle cache.</p>
</div>
<div class="paragraph">
<p><strong>Powerful</strong><br>
Gradle build projects in several languages but its success is linked to Android developers. Today</p>
</div>
<div class="paragraph">
<p><strong>Useful</strong><br>
Based on Ivy and supports Maven, it simplifies the project dependencies (libraries). By the default, the dependency resolution is transitive. If you declare one dependency and if this library depends from another ones, you don&#8217;t need to declare all the libraries tree because Gradle is able to resolve this task for you.</p>
</div>
<div class="paragraph">
<p><strong>JVM foundation</strong><br>
Gradle runs on the JVM and you must have a Java Development Kit (JDK) installed to use it. You can also use Gradle for native projects like Spring native, Micronaut or Quarkus.</p>
</div>
<div class="paragraph">
<p><strong>Extensibility</strong><br>
You can extend Gradle to provide your own task types, your own plugins or even your own build model. Android added for example many new build concepts such as flavors and build types.</p>
</div>
<div class="paragraph">
<p><strong>IDE support</strong><br>
Major IDEs allow you to import Gradle builds</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_why_a_build_tool">Why a build tool?</h2>
<div class="sectionbody">
<div class="paragraph">
<p><strong>Write once, run everywhere</strong></p>
</div>
<div class="paragraph">
<p>Build automation is the act of scripting or automating a wide variety of <strong>tasks</strong> that software developers have to do in their day to day activities such as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>compiling program source code into binary code</p>
</li>
<li>
<p>packaging a compiled program for delivery</p>
</li>
<li>
<p>running automated tests</p>
</li>
<li>
<p>deploying to production systems</p>
</li>
<li>
<p>generating documentation and/or release notes.</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_usage">Usage</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can execute Gradle
* In command line in a terminal
* In your IDE (development tools to write and execute code) <span class="small">NetBeans, Eclipse or IntelliJ (we will use IntelliJ)</span></p>
</div>
<div class="paragraph">
<p>Online documentation is very complete for the main usages <a href="https://docs.gradle.org/current/userguide/userguide.html" class="bare">https://docs.gradle.org/current/userguide/userguide.html</a>. It&#8217;s more difficult when you want to create your own plugins. But it&#8217;s not a problem in our case.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_principle">Principle</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Gradle was not the first build tool. In the past we used <a href="https://ant.apache.org/">Ant</a> and after <a href="https://maven.apache.org/">Maven</a></p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://ant.apache.org/">Ant</a> is very powerful, but you describe your build in an xml file, the configuration is not readable and difficult to use on a project with a lot of people, because you don&#8217;t have conventions to use this tool.</p>
</li>
<li>
<p><a href="https://maven.apache.org/">Maven</a> is better but in my opinion Gradle is the best solution because Maven is</p>
<div class="ulist">
<ul>
<li>
<p>very verbose (you have to write a lot of thing to configure a build)</p>
</li>
<li>
<p>the project is not very flexible by its governance</p>
</li>
<li>
<p>slower than Gradle: incremental build is present in the last version and the Gradle cache and parallel execution give an advantage to Gradle</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_starting_with_gradle">Starting with Gradle</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can install the last version on <a href="https://gradle.org/install/" class="bare">https://gradle.org/install/</a>. If you followed the installation of the package manager <a href="https://sdkman.io/">Sdk Man</a> in the <a href="https://dev-mind.fr/training/outil/install-development-environment.html">first lesson</a>, you just have to launch</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.7122">sdk install gradle 8.2.1</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.7122')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Gradle runs on all major operating systems and requires only a Java JDK version 17 or higher to be installed.</p>
</div>
<div class="paragraph">
<p>To check, run java -version in a terminal on your laptop:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.5286">@dollar@ java -version

java version &quot;17.0.7&quot; 2023-04-18 LTS
Java(TM) SE Runtime Environment Oracle GraalVM 17.0.7+8.1 (build 17.0.7+8-LTS-jvmci-23.0-b12)
Java HotSpot(TM) 64-Bit Server VM Oracle GraalVM 17.0.7+8.1 (build 17.0.7+8-LTS-jvmci-23.0-b12, mixed mode, sharing)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.5286')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Open a terminal on your laptop or computer to create and initialize a new Gradle project.
You will create a directory and link it to Gradle</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.184">mkdir gradle-demo
cd gradle-demo
gradle init</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.184')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If you use a Gradle version @GT 7, you will have to respond to few questions</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.0703">Select type of project to generate:
  1: basic
  2: application
  3: library
  4: Gradle plugin
Enter selection (default: basic) [1..4] 2

Select implementation language:
  1: C++
  2: Groovy
  3: Java
  4: Kotlin
  5: Scala
  6: Swift
Enter selection (default: Java) [1..6] 3

Generate multiple subprojects for application? (default: no) [yes, no] no
Select build script DSL:
  1: Kotlin
  2: Groovy
Enter selection (default: Kotlin) [1..2] 1

Select test framework:
  1: JUnit 4
  2: TestNG
  3: Spock
  4: JUnit Jupiter
Enter selection (default: JUnit Jupiter) [1..4] 4

Generate build using new APIs and behavior (some features may change in the next minor release)? (default: no) [yes, no] no</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.0703')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You should have this message after</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.995">@GT Task :init
Get more help with your project: Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.5/samples

BUILD SUCCESSFUL in 56s
2 actionable tasks: 2 executed</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.995')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Gradle should have generated this tree</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.0557">|-- app
|   | src
|   | -- build.gradle.kts  (1)
|-- .gitattributes (2)
|-- .gitignore (2)
|-- gradle
|   | -- wrapper
|       | -- gradle-wrapper.jar  (3)
|       | -- gradle-wrapper.properties  (4)
|-- gradlew  (5)
|-- gradlew.bat (5)
|-- settings.gradle.kts (6)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.0557')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>(1). Gradle configuration script for the project<br>
(2). A git init is automatically made on the project generation<br>
(3). This jar contains Gradle Wrapper classes and libraries<br>
(4). Wrapper configuration file (you find the Gradle version used by the project)<br>
(5). These scripts are used to launch Gradle via the wrapper (2 scripts, one for Unix one for Windows)<br>
(6). general configuration file (used to declare Gradle sub modules, and global variables)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_gradle_wrapper">Gradle wrapper</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Team members can have different versions of Gradle on their laptop. But on a project everybody must use the same version.</p>
</div>
<div class="paragraph">
<p>From one project to another, you can have different versions of the tool (it&#8217;s difficult to switch the version on your computer).</p>
</div>
<div class="paragraph">
<p>Gradle wrapper resolves these problems. The recommended way to execute any Gradle build, is with the help of the Gradle Wrapper (in short just \u201CWrapper\u201D). The Wrapper is a script that invokes a declared version of Gradle (it fixes the version used in your project), downloading it beforehand if necessary.</p>
</div>
<div class="paragraph">
<p>As a result, developers can get up and running with a Gradle project quickly without having to follow manual installation.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/wrapper.png" alt="wrapper" width="800">
</div>
</div>
<div class="listingblock code-height">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.5261">@dollar@ ./gradlew -v
Downloading https://services.gradle.org/distributions/gradle-8.2.1-bin.zip
..........10%...........20%...........30%...........40%...........50%...........60%...........70%...........80%...........90%...........100%

------------------------------------------------------------
Gradle 8.2.1
------------------------------------------------------------

Build time:   2023-07-10 12:12:35 UTC
Revision:     a38ec64d3c4612da9083cc506a1ccb212afeecaa

Kotlin:       1.8.20
Groovy:       3.0.17
Ant:          Apache Ant(TM) version 1.10.13 compiled on January 4 2023
JVM:          17.0.7 (Oracle Corporation 17.0.7+8-LTS-jvmci-23.0-b12)
OS:           Linux 5.19.0-50-generic amd64</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.5261')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_first_example"><span class="icon">[flask&#93;</span> First example</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Clone the Github project <a href="https://github.com/Dev-Mind/gradle-demo.git" class="bare">https://github.com/Dev-Mind/gradle-demo.git</a></p>
</div>
<div class="paragraph">
<p>Go in IntelliJ in the menu <code>File</code> \u2192 <code>New</code> \u2192 <code>Project From Existing Sources</code> and select the Gradle model</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/idea1.png" alt="idea1" width="800">
</div>
</div>
<div class="paragraph">
<p>When everything is finished you have your project opened in your IDE with the Gradle configuration loaded.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/idea1&2.png" alt="idea1&amp;2" width="1000">
</div>
</div>
<div class="paragraph">
<p>You can browse the gradle files as in the tree below</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.674">|-- app
|   | -- src
|      | -- main
|          | -- java
|          | -- resources
|      | -- test
|          | -- java
|          | -- resources
|   | -- build.gradle.kts
|-- gradle
|   | -- wrapper
|       | -- gradle-wrapper.jar
|       | -- gradle-wrapper.properties
|-- .gitattributes
|-- .gitignore
|-- gradle.properties
|-- gradlew
|-- gradlew.bat
|-- settings.gradle.kts</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.674')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Open the main file called <code>build.gradle.kts</code>.
This is a Java project. So we use the plugin provided by Gradle to manage an application written in Java.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912451180.5803">plugins {
    <span class="hljs-comment">// Apply the application plugin to add support for building a CLI application in Java.</span>
    application
}

repositories {
    <span class="hljs-comment">// Use Maven Central for resolving dependencies.</span>
    mavenCentral()
}

dependencies {
    <span class="hljs-comment">// Use JUnit Jupiter for testing.</span>
    testImplementation(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter:5.10.0&quot;</span>)

    <span class="hljs-comment">// This dependency is used by the application.</span>
    implementation(<span class="hljs-string">&quot;org.springframework:spring-context:6.0.11&quot;</span>)
}

<span class="hljs-comment">// Apply a specific Java toolchain to ease working on different environments.</span>
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(<span class="hljs-number">17</span>))
    }
}

application {
    <span class="hljs-comment">// Define the main class for the application.</span>
    mainClass.set(<span class="hljs-string">&quot;com.devmind.gradle.MyApplication&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.5803')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can now launch this command</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451180.8982">@dollar@ ./gradlew build

BUILD SUCCESSFUL in 7s
8 actionable tasks: 8 executed</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451180.8982')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Gradle executes tasks and in our case Java plugin has launched 8 tasks to build the project. As this is the first build you should have 8 executed task.</p>
</div>
<div class="paragraph">
<p>If you try to relaunch the same command you should have this output</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.5105">@dollar@ ./gradlew build
BUILD SUCCESSFUL in 517ms
8 actionable tasks: 8 up-to-date</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.5105')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can observe the execution time. The 8 tasks are now executed in 517ms. As you changed nothing Gradle does not relaunch each task. All task have the status UP-TO-DATE</p>
</div>
<div class="paragraph">
<p>You can launch the <code>run</code> task to execute your app</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.3">@dollar@ ./gradlew :app:run
@GT Task :app:run
I want to learn Gradle

BUILD SUCCESSFUL in 503ms
3 actionable tasks: 1 executed, 2 up-to-date</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.3')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>With IntelliJ, we have a synthetic view of dependencies and tasks</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/idea3.png" alt="idea3" width="600">
</div>
</div>
<div class="paragraph">
<p>Now try to list all available tasks in a command window. Run</p>
</div>
<div class="listingblock code-height">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.0667">@dollar@ ./gradlew tasks

@GT Task :tasks

------------------------------------------------------------
Tasks runnable from root project &#x27;gradle-demo&#x27;
------------------------------------------------------------

Application tasks
-----------------
run - Runs this project as a JVM application

Build tasks
-----------
assemble - Assembles the outputs of this project.
build - Assembles and tests this project.
buildDependents - Assembles and tests this project and all projects that depend on it.
buildNeeded - Assembles and tests this project and all projects it depends on.
classes - Assembles main classes.
clean - Deletes the build directory.
jar - Assembles a jar archive containing the classes of the &#x27;main&#x27; feature.
testClasses - Assembles test classes.

Build Setup tasks
-----------------
init - Initializes a new Gradle build.
wrapper - Generates Gradle wrapper files.

Distribution tasks
------------------
assembleDist - Assembles the main distributions
distTar - Bundles the project as a distribution.
distZip - Bundles the project as a distribution.
installDist - Installs the project as a distribution as-is.

Documentation tasks
-------------------
javadoc - Generates Javadoc API documentation for the &#x27;main&#x27; feature.

Help tasks
----------
buildEnvironment - Displays all buildscript dependencies declared in root project &#x27;gradle-demo&#x27;.
dependencies - Displays all dependencies declared in root project &#x27;gradle-demo&#x27;.
dependencyInsight - Displays the insight into a specific dependency in root project &#x27;gradle-demo&#x27;.
help - Displays a help message.
javaToolchains - Displays the detected java toolchains.
kotlinDslAccessorsReport - Prints the Kotlin code for accessing the currently available project extensions and conventions.
outgoingVariants - Displays the outgoing variants of root project &#x27;gradle-demo&#x27;.
projects - Displays the sub-projects of root project &#x27;gradle-demo&#x27;.
properties - Displays the properties of root project &#x27;gradle-demo&#x27;.
resolvableConfigurations - Displays the configurations that can be resolved in root project &#x27;gradle-demo&#x27;.
tasks - Displays the tasks runnable from root project &#x27;gradle-demo&#x27; (some of the displayed tasks may belong to subprojects).

Verification tasks
------------------
check - Runs all checks.
test - Runs the test suite.

To see all tasks and more detail, run gradlew tasks --all

To see more detail about a task, run gradlew help --task @LTtask@GT

BUILD SUCCESSFUL in 1s
1 actionable task: 1 executed</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.0667')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how_gradle_works">How Gradle works ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you want to manage your project with Gradle, you will define a configuration file to declare</p>
</div>
<div class="ulist">
<ul>
<li>
<p>how to download Gradle plugins (that provide a set of tasks)</p>
</li>
<li>
<p>how to configure Gradle plugins (properties)</p>
</li>
<li>
<p>how to download dependencies of our project (Java libraries)</p>
</li>
<li>
<p>add or configure your own tasks</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Everything is configured via a DSL (Domain Specific Language) written in Kotlin (or Groovy)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_tasks">Tasks</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You have many predefined tasks (provided by plugins)</p>
</div>
<div class="paragraph">
<p>A task</p>
</div>
<div class="ulist">
<ul>
<li>
<p>defines what to do on a set of resources</p>
</li>
<li>
<p>may depend on one or more tasks.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Gradle models its builds as Directed Acyclic Graphs (DAGs) of tasks (units of work).</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/1_dag.png" alt="How Gradle works ?" width="500">
</div>
</div>
<div class="paragraph">
<p>You can add your own tasks and let them depend on others</p>
</div>
<div class="paragraph">
<p>Task graph can be defined by both plugins and your own build scripts, with tasks linked together via the task dependency mechanism.</p>
</div>
<div class="paragraph">
<p>Tasks themselves consist of:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Actions</strong> \u2014 pieces of work that do something, like copy files or compile source</p>
</li>
<li>
<p><strong>Inputs</strong> \u2014 values, files and directories that the actions use or operate on</p>
</li>
<li>
<p><strong>Outputs</strong> \u2014 files and directories that the actions modify or generate</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_incremental_build">Incremental build</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When inputs and outputs on a gradle task have no change, Gradle won&#8217;t execute this task and will display <strong>UP-TO-DATE</strong></p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/1_incremetal.png" alt="Incremental build" width="700">
</div>
<div class="title">Figure 1. Example with JavaCompile task</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_create_your_own_tasks"><span class="icon">[flask&#93;</span> Create your own tasks</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Add these lines to your <code>build.gradle.kts</code> file</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.877">tasks.create(&quot;hello&quot;) {
    doLast {
        println(&quot;Hello&quot;)
    }
}
tasks.create(&quot;world&quot;) {
    dependsOn(&quot;hello&quot;)
    doLast {
        println(&quot;World&quot;)
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.877')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Test by launching these tasks</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.4553">@dollar@ ./gradlew hello
@dollar@ ./gradlew world</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.4553')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_gradle_life_cycle">Gradle Life cycle</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A Gradle build has 3 steps</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>Initialization</strong><br>
Gradle determines which projects are involved in the build. A project can have subprojects. All of them have a <code>build.gradle.kts</code>.</p>
</li>
<li>
<p><strong>Configuration</strong><br>
Gradle parses the <code>build.gradle.kts</code> configuration file (or more if you have some subprojects). After this step, Gradle has built its Directed Acyclic Graphs (DAGs)</p>
</li>
<li>
<p><strong>Execution</strong><br>
Gradle executes one or several tasks (arguments added to <code>./gradlew</code>) according to this task graph. Gradle executes tasks one by one in the order defined in the graph.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_plugins">Plugins</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A plugin provides a task set and entry points to configure this plugin. For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451181.2578">plugins {
    java
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.2578')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The Java plugin has these tasks</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/gradle/pluginJava.png" alt="Fonctionnement de Gradle" width="100%">
</div>
</div>
<div class="paragraph">
<p>In the next lab, we will use Spring and Spring Boot. We will use Gradle to manage our projects. We will use 2 more plugins</p>
</div>
<div class="listingblock code-height">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.6953">buildscript {
    plugins {  (1)
      java
      id(&quot;org.springframework.boot&quot;) version &quot;3.1.2&quot;
      id(&quot;io.spring.dependency-management&quot;) version &quot;1.1.2&quot;
    }

    repositories { (2)
      mavenCentral()
    }

    group = &quot;com.devmind.automacorp&quot;
    version = &quot;0.0.1-SNAPSHOT&quot;

    java { (3)
      sourceCompatibility = JavaVersion.VERSION_17
    }


    dependencies {
       implementation(&quot;org.springframework.boot:spring-boot-starter&quot;) (4)
       testImplementation(&quot;org.springframework.boot:spring-boot-starter-test&quot;)
    }

    tasks.withType@LTTest@GT {
      useJUnitPlatform()
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.6953')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>(1). Gradle plugin used<br>
(2). repository used to download plugins or app libraries<br>
(3). Personalization of the <code>java</code> plugin.
(4). Application dependencies (libraries used by the project)</p>
</div>
<div class="paragraph">
<p>You have a lot of free plugin to enrich your build. All of them are available on this URL <a href="https://plugins.gradle.org/" class="bare">https://plugins.gradle.org/</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_custom_tasks_and_their_configurations"><span class="icon">[flask&#93;</span> Custom tasks and their configurations</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Open your project <code>gradle-demo</code> in IntelliJ and add the following code in <code>build.gradle</code></p>
</div>
<div class="listingblock code-height">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.1152">println(&quot;This is executed during the configuration phase.&quot;)

tasks.create(&quot;configured&quot;) {
    description = &quot;My own configured task&quot;
    println(&quot;This (configured) is also executed during the configuration phase.&quot;)
}

tasks.create(&quot;testWrite&quot;) {
    description = &quot;My own testWrite task&quot;
    doLast {
        println(&quot;This (testWrite) is executed during the execution phase.&quot;)
    }
}

tasks.create(&quot;testWriteBoth&quot;) {
    description = &quot;My own testWriteBoth task&quot;
    doFirst {
        println(&quot;This (testWriteBoth) is executed first during the execution phase.&quot;)
    }
    doLast {
        println(&quot;This (testWriteBoth) is executed last during the execution phase.&quot;)
    }
    println(&quot;This (testWriteBoth) is executed during the configuration phase as well.&quot;)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.1152')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Launch the following command to see new tasks</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.6013">@dollar@ ./gradlew tasks --all</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.6013')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Then you can test your new task</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.8494">@dollar@ ./gradlew testWrite</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.8494')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>And</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.1565">@dollar@ ./gradlew testWriteBoth</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.1565')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Try to understand what happens ? If you are lost I can help you during face-to-face sessions</p>
</div>
<div class="listingblock code-height">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451181.8179">@dollar@ ./gradlew testWrite

@GT Configure project :
This is executed during the configuration phase.
This (configured) is also executed during the configuration phase.
This (testWriteBoth) is executed during the configuration phase as well.

...</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.8179')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_dependency_management">Dependency management</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You have to define the project dependencies in the build.gradle.kts</p>
</div>
<div class="paragraph">
<p>Every dependency declared for a Gradle project applies to a specific scope. For example for a Java project, some dependencies should be used</p>
</div>
<div class="ulist">
<ul>
<li>
<p>for compiling source code (scope <code>implementation</code>)</p>
</li>
<li>
<p>for compiling test code (scope <code>testImplementation</code>)</p>
</li>
<li>
<p>for running your code (scope <code>runtime</code>)</p>
</li>
<li>
<p>for running your tests (scope <code>testRuntime</code>)</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451181.8862">dependencies {
    <span class="hljs-comment">// Use JUnit Jupiter for testing.</span>
    testImplementation(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter:5.10.0&quot;</span>)
    testRuntimeOnly(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter-engine:5.10.0&quot;</span>)

    <span class="hljs-comment">// This dependency is used by the application.</span>
    implementation(<span class="hljs-string">&quot;org.springframework:spring-context:6.0.11&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.8862')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>A scope correspond to a configuration in Gradle. A plugin can add pre-defined configurations to your project. The Java plugin, for example, adds several configurations</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/5_dependencies.png" alt="5 dependencies" width="1000">
</div>
<div class="title">Figure 2. Source : <a href="https://docs.gradle.org" class="bare">https://docs.gradle.org</a></div>
</div>
<div class="paragraph">
<p>A configuration can extend other configurations to form an inheritance hierarchy. Child configurations inherit the whole set of dependencies declared for any of its parent.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/5_dependencies_confiog.png" alt="5 dependencies confiog" width="500">
</div>
<div class="title">Figure 3. Source : <a href="https://docs.gradle.org" class="bare">https://docs.gradle.org</a></div>
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>You can define a module dependency (reference to a library in a repository [maven central for example]).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451181.6533">dependencies {
    implementation(group = <span class="hljs-string">&quot;org.springframework&quot;</span>, name = <span class="hljs-string">&quot;spring-core&quot;</span>, version = <span class="hljs-string">&quot;2.5&quot;</span>)
    implementation(<span class="hljs-string">&quot;org.hibernate:hibernate:3.0.5&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.6533')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can define a project dependency if you have a multi-project configuration</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451181.6577">dependencies {
    implementation(project(<span class="hljs-string">&quot;:shared&quot;</span>))
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.6577')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>A module can have dependencies on other modules to work properly, so-called transitive dependencies.  By default, Gradle resolves transitive dependencies automatically.</p>
</div>
<div class="paragraph">
<p>In some case we can help Gradle to not use this mode, to exclude some dependencies or to force a specific version if we have a conflict</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451181.1328">dependencies {
    implementation(<span class="hljs-string">&quot;org.hibernate:hibernate:3.1&quot;</span>) {
        exclude(module = <span class="hljs-string">&quot;cglib&quot;</span>) <span class="hljs-comment">//by artifact name</span>
        exclude(group = <span class="hljs-string">&quot;org.jmock&quot;</span>) <span class="hljs-comment">//by group</span>

        <span class="hljs-comment">//disabling all transitive dependencies of this dependency</span>
        isTransitive = <span class="hljs-literal">false</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451181.1328')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This schema resumes how Gradle download a dependency</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/gradle/dependencies.png" alt="dependencies" width="800">
</div>
</div>
<div class="paragraph">
<p>(1) Gradle looks in his cache if the dependency is present<br>
(2) It parses the given remote repository(ies), downloads the dependency and stores it in his cache<br>
(3) Dependency can be provided to project. If this dependency has another dependencies, Gradle loads them transitively</p>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect1">
<h2 id="_reference">Reference</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p><a href="https://gradle.org/">Gradle web site</a></p>
</li>
<li>
<p><a href="https://docs.gradle.org/current/userguide/userguide.html">Official documentation</a></p>
</li>
<li>
<p><a href="https://melix.github.io/blog/2021/03/version-catalogs.html">Library version management</a></p>
</li>
</ul>
</div>
</div>
</div>`;var bf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_software_testing">Software testing</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_why_do_we_need_testing">Why do we need testing ?</a></li>
<li><a class="link" fragment="#_why_do_we_need_to_automate_testing">Why do we need to automate testing ?</a></li>
<li><a class="link" fragment="#_what_are_the_different_types_of_tests">What are the different types of tests ?</a></li>
<li><a class="link" fragment="#_how_to_facilitate_the_writing_of_tests">How to facilitate the writing of tests?</a></li>
</ul>
</li>
<li><a class="link" fragment="#_unit_tests">Unit tests</a></li>
<li><a class="link" fragment="#_black_box">Black box</a></li>
<li><a class="link" fragment="#_junit">Junit</a></li>
<li><a class="link" fragment="#_assertions">Assertions</a></li>
<li><a class="link" fragment="#_mockito">Mockito</a></li>
<li><a class="link" fragment="#_flask_unit_tests"><span class="icon">[flask&#93;</span> Unit tests</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this course you will learn how to write a unit test, how to simulate the collaborator behaviors and how to check the results</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-tests.png" alt="background" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_software_testing">Software testing</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_why_do_we_need_testing">Why do we need testing ?</h3>
<div class="paragraph">
<p>Software testing is very important when you create an application, because it</p>
</div>
<div class="ulist">
<ul>
<li>
<p>checks if the actual results match the expected results</p>
</li>
<li>
<p>helps to identify errors by testing limits</p>
</li>
<li>
<p>helps to not reproduce errors : when a bug occurs, we create a new test case, we fix the bug.. And after each code update, we execute this tests to know if the bug won&#8217;t occur anymore</p>
</li>
<li>
<p>helps to know how your code works : tests are often the best documentation to understand how a piece of source code works</p>
</li>
<li>
<p>helps you be more confident when you need to evolve your code: if you have good code coverage by testing, you will identify regressions quickly</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_why_do_we_need_to_automate_testing">Why do we need to automate testing ?</h3>
<div class="paragraph">
<p>You can test your software manually</p>
</div>
<div class="ulist">
<ul>
<li>
<p>but you have to do that before each feature update</p>
</li>
<li>
<p>and more your application is rich more you need to do more tests</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The solution is <strong>to have automatic tests</strong> and code them</p>
</div>
<div class="paragraph">
<p>Manual tests are cheaper on short-term but more expensive on long-term</p>
</div>
<div class="paragraph">
<p>Automated tests are expensive on short-term but cheaper on long-term</p>
</div>
<div class="paragraph">
<p>A human will tire when he has to execute the same tests continuously. He will be less conscientious and less attentive. It&#8217;s not the case for a test program</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/systemrobot.png" alt="systemrobot" width="800">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_what_are_the_different_types_of_tests">What are the different types of tests ?</h3>
<div class="paragraph">
<p>You have different types of tests</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Installation testing</strong>: A software is often a set of little apps (web app, spring boot app, datasource&#8230;&#8203;.). This kind of test helps to check if your installation procedure is correct and if the software can be used</p>
</li>
<li>
<p><strong>Security testing</strong>: Checks the security and if your data keep confidential and not available from hackers</p>
</li>
<li>
<p><strong>Performance testing</strong>: to determine how a system or sub-system performs in terms of responsiveness and stability under a particular workload</p>
</li>
<li>
<p><strong>End to end testing</strong>: You test your app as a user. These tests are sometimes called functional tests</p>
</li>
<li>
<p><strong>Unit testing</strong>: We test every units of source code (each class, each methods&#8230;&#8203;).</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_how_to_facilitate_the_writing_of_tests">How to facilitate the writing of tests?</h3>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>If you are having trouble writing tests, <strong>your code can/must be improved</strong>. Good code is easily testable code.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>If you want to facilitate your tests you can apply several rules</p>
</div>
<div class="ulist">
<ul>
<li>
<p>use <strong>interface</strong> to define the contract to code and to test.</p>
</li>
<li>
<p>when using an object language, it is easy to distribute responsibilities among several classes. Avoid centralizing all your code in a single service class. The less code a class has, the easier it will be to test.</p>
</li>
<li>
<p>use <strong>dependency injection</strong>. This mechanism helps to use for example</p>
<div class="ulist">
<ul>
<li>
<p>a mock object, to simulate the object behavior in a test and</p>
</li>
<li>
<p>the real implementation in production code</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_unit_tests">Unit tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A unit test is a method that instantiates a small portion of your application (one method for example) and checks its behavior independently from other parts.</p>
</div>
<div class="paragraph">
<p>Portion to test, can be viewed as an independent system.We talk about System Under Test (SUT)</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/test1.png" alt="test1" width="800">
</div>
</div>
<div class="paragraph">
<p>We are going to take an example with a service interface.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451259.0884"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FriendService</span> {
   <span class="hljs-comment">/**
    * Compute friend age from his birth year
    */</span>
   <span class="hljs-type">int</span> <span class="hljs-title function_">computeFriendAge</span><span class="hljs-params">(Friend friend)</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451259.0884')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The service implementation is this one</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451259.9724"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FriendServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FriendService</span> {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">computeFriendAge</span><span class="hljs-params">(Friend friend)</span> {
        <span class="hljs-keyword">if</span>(friend == <span class="hljs-literal">null</span>) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Friend is required&quot;</span>);
        }
        <span class="hljs-keyword">return</span> LocalDate.now().getYear() - friend.getBirthYear();
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451259.9724')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>When you write a test you have to test all the cases. In our example you have to check when the user is null and when a user is defined and has a birth year.</p>
</div>
<div class="paragraph">
<p>In an application this SUT (System Under Test) will interact with other components</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/test2.png" alt="test2" width="800">
</div>
</div>
<div class="paragraph">
<p>These other components are called collaborators.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/test4.png" alt="test4" width="800">
</div>
</div>
<div class="paragraph">
<p>For example if we change our service</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451259.178"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FriendServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FriendService</span> {

    <span class="hljs-keyword">private</span> FriendRepository friendRepository;
    <span class="hljs-keyword">private</span> IntegerComputer integerComputer;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FriendServiceImpl</span><span class="hljs-params">(FriendRepository friendRepository,
                             IntegerComputer integerComputer)</span> {
        <span class="hljs-built_in">this</span>.friendRepository = friendRepository;
        <span class="hljs-built_in">this</span>.integerComputer = integerComputer;
    }


    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451259.178')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><code>FriendRepository</code> and <code>IntegerComputer</code> are 2 collaborators.</p>
</div>
<div class="paragraph">
<p>When you want to write a test of your SUT, you need to simulate the collaborator behaviors.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/test3.png" alt="test3" width="800">
</div>
</div>
<div class="paragraph">
<p>To simulate collabators, you have several possibilities</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Use a fake object</strong>: You create an object only for your test</p>
</li>
<li>
<p><strong>Use a spy object</strong>: You create a spy from the real implementation of one collaborator. You use a library for that, and you can override the returned values</p>
</li>
<li>
<p><strong>Use a mock object</strong>: A mock is created via a library from a specified contract (an interface). And you can pre preprogram these objects to return your wanted values during the test</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_black_box">Black box</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you want to write a test you have to consider this SUT (system under test) as a black box.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/test6.png" alt="test6" width="800">
</div>
</div>
<div class="paragraph">
<p>The code to test is not important, it&#8217;s the black box&#8230;&#8203; you have to focus on inputs and outputs</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/test7.png" alt="test7" width="800">
</div>
</div>
<div class="paragraph">
<p>Your black box can have inputs (method parameters for example) : in your test you will invoke the SUT and you test this one by sending inputs</p>
</div>
<div class="paragraph">
<p>Your black box can return a result or update the system state (we have an output) : in your test you will check the result and assert if this result is equals to the expected behavior</p>
</div>
<div class="paragraph">
<p>When you write you can follow a pattern</p>
</div>
<div class="ulist">
<ul>
<li>
<p>AAA : arrange /act /assert</p>
</li>
<li>
<p>Behavior-Driven Development : Given / When / Then#</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/test8.png" alt="test8" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_junit">Junit</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://junit.org/junit5/">Junit</a> is a framework to develop and execute unit tests in Java. <a href="https://junit.org/junit5/">Junit</a> is used to automate test execution.</p>
</div>
<div class="paragraph">
<p><a href="https://junit.org/junit5/">Junit</a> allows you to separate the source code of the class from the code used to test it.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/test9.png" alt="test9" width="600">
</div>
</div>
<div class="paragraph">
<p>Test cases are grouped into Java classes that contain one or more test methods. Test cases can be executed individually or as test suites.</p>
</div>
<div class="paragraph">
<p>These test cases perform the following tasks:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>Arrange</strong> : creation of an instance of the class and any other object necessary for the tests (prepare inputs)</p>
</li>
<li>
<p><strong>Act</strong> : call of the method to be tested</p>
</li>
<li>
<p><strong>Assert</strong> : comparison of the expected result with the obtained result (output): in case of failure, an exception is raised</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451260.7373"><span class="hljs-keyword">package</span> com.devmind.unitests.friend;

<span class="hljs-keyword">import</span> org.junit.jupiter.api.Assertions;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;

<span class="hljs-keyword">import</span> java.time.LocalDate;

<span class="hljs-keyword">class</span> <span class="hljs-title class_">FriendServiceImplTest</span> {

    <span class="hljs-keyword">private</span> FriendService friendService;

    <span class="hljs-meta">@BeforeEach</span> <span class="hljs-comment">// 1.</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> {
        friendService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FriendServiceImpl</span>();
    }

    <span class="hljs-meta">@Test</span> <span class="hljs-comment">// 2.</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeFriendAge</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">// Arrange</span>
        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">birthday</span> <span class="hljs-operator">=</span> LocalDate.parse(<span class="hljs-string">&quot;1978-06-09&quot;</span>);
        <span class="hljs-type">Friend</span> <span class="hljs-variable">friend</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Friend</span>(birthday, <span class="hljs-string">&quot;Bellamy&quot;</span>);

        <span class="hljs-comment">// Act</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> friendService.computeFriendAge(friend);

        <span class="hljs-comment">// Assert</span>
        Assertions.assertEquals(<span class="hljs-number">45</span>, age); <span class="hljs-comment">// 3.</span>
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeFriendAgeWithNullFriendShouldFail</span><span class="hljs-params">()</span> { <span class="hljs-comment">// 4.</span>
        Assertions.assertThrows(IllegalArgumentException.class, () <span class="hljs-meta">@LAMBDA</span> friendService.computeFriendAge(<span class="hljs-literal">null</span>));
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451260.7373')">Copy</button></pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Method annotated with @BeforeEach is executed before each tests (a @AfterEach exists)</p>
</li>
<li>
<p>Method annotated with @Test is a unit test method. We write a method for each test case</p>
</li>
<li>
<p>We use Assertions object provided by Junit to write assertions. Later we will use the object of another library, assertJ</p>
</li>
<li>
<p>We expect an exception when friend is null. It&#8217;s important to use an explicit test method name</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_assertions">Assertions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Assertions methods provided by Junit are not very readable. We prefer to use the <a href="https://assertj.github.io/doc/">AssertJ</a> library</p>
</div>
<div class="paragraph">
<p><a href="https://assertj.github.io/doc/">AssertJ</a> provides a fluent API and with this API you always use the method <code>asserThat</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451260.971">Assertions.assertThat(age).isEqualTo(<span class="hljs-number">45</span>);
Assertions.assertThat(name).isEqualTo(<span class="hljs-string">&quot;Bellamy&quot;</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451260.971')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>With assertJ you can test the exception thrown by a method, its type, its message</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451260.7695">Assertions.assertThatThrownBy(() <span class="hljs-meta">@LAMBDA</span> friendService.computeFriendAge(<span class="hljs-literal">null</span>))
                .isExactlyInstanceOf(IllegalArgumentException.class)
                .hasMessage(<span class="hljs-string">&quot;Friend is required&quot;</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451260.7695')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If your expected result is a list of friends</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451260.2285">List<span class="hljs-meta">@LTFriend</span><span class="hljs-meta">@GT</span> myFriends = Arrays.asList(
                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Friend</span>(<span class="hljs-string">&quot;Elodie&quot;</span>, <span class="hljs-number">1999</span>),
                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Friend</span>(<span class="hljs-string">&quot;Charles&quot;</span>, <span class="hljs-number">2001</span>));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451260.2285')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>you can check the content of this list</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451260.8389">Assertions.assertThat(myFriends)
                  .hasSize(<span class="hljs-number">2</span>)
                  .extracting(Friend::getName)
                  .containsExactlyInAnyOrder(<span class="hljs-string">&quot;Elodie&quot;</span>, <span class="hljs-string">&quot;Charles&quot;</span>);

Assertions.assertThat(myFriends)
          .hasSize(<span class="hljs-number">2</span>)
          .extracting(Friend::getName, Friend::getBirthYear)
          .containsExactlyInAnyOrder(
                  Tuple.tuple(<span class="hljs-string">&quot;Elodie&quot;</span>, <span class="hljs-number">1999</span>),
                  Tuple.tuple(<span class="hljs-string">&quot;Charles&quot;</span>, <span class="hljs-number">2001</span>));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451260.8389')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>AssertJ is IDE friendly and its fluent API can be discovered by completion</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/unit-test/assertj-completion.png" alt="assertj completion">
</div>
</div>
<div class="paragraph">
<p>You can find more informations on the official website <a href="https://assertj.github.io/doc/" class="bare">https://assertj.github.io/doc/</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_mockito">Mockito</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We will use <a href="https://static.javadoc.io/org.mockito/mockito-core/2.23.0/org/mockito/Mockito.html">Mockito</a> to simulate collaborators behaviors.</p>
</div>
<div class="paragraph">
<p><a href="https://static.javadoc.io/org.mockito/mockito-core/2.23.0/org/mockito/Mockito.html">Mockito</a> is a popular mock framework which can be used in conjunction with JUnit.</p>
</div>
<div class="paragraph">
<p><a href="https://static.javadoc.io/org.mockito/mockito-core/2.23.0/org/mockito/Mockito.html">Mockito</a> allows you to create and configure mock objects. Using Mockito simplifies the development of tests for classes with external dependencies significantly.</p>
</div>
<div class="paragraph">
<p>Our <code>FriendServiceImpl</code> will use a collaborator to manage the friends <code>friendRepository</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451261.1274"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FriendServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FriendService</span> {

    <span class="hljs-keyword">private</span> FriendRepository friendRepository; <span class="hljs-comment">// 1.</span>

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FriendServiceImpl</span><span class="hljs-params">(FriendRepository friendRepository)</span> { <span class="hljs-comment">// 2.</span>
        <span class="hljs-built_in">this</span>.friendRepository = friendRepository;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">computeFriendAgeAverage</span><span class="hljs-params">()</span> {
        List<span class="hljs-meta">@LTFriend</span><span class="hljs-meta">@GT</span> friends = friendRepository.findAll();
        <span class="hljs-keyword">return</span> friends.stream().collect(Collectors.averagingInt(<span class="hljs-built_in">this</span>::computeFriendAge));
    }

    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451261.1274')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In this code we use <code>friendRepository</code>. You have to declare it as a property (1), and declare a constructor to inject an implementation (2)</p>
</div>
<div class="paragraph">
<p>In <code>FriendServiceImplTest</code> we will use Mockito to simulate <code>FriendRepository</code> and create the class to test <code>FriendServiceImpl</code></p>
</div>
<div style="page-break-after: always;"></div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451261.7515"><span class="hljs-meta">@ExtendWith(MockitoExtension.class)</span> <span class="hljs-comment">// 1.</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">FriendServiceTest</span> {

    <span class="hljs-meta">@Mock</span> <span class="hljs-comment">// 2.</span>
    <span class="hljs-keyword">private</span> FriendRepository friendRepository;
    <span class="hljs-keyword">private</span> FriendService friendService;

    <span class="hljs-meta">@BeforeEach</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> { <span class="hljs-comment">// 3.</span>
        friendService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FriendServiceImpl</span>(friendRepository);
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">computeFriendAgeAverage</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">// Arrange</span>
        List<span class="hljs-meta">@LTFriend</span><span class="hljs-meta">@GT</span> myFriends = List.of(
                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Friend</span>(<span class="hljs-string">&quot;Elodie&quot;</span>, LocalDate.of(<span class="hljs-number">1999</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)),
                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Friend</span>(<span class="hljs-string">&quot;Charles&quot;</span>, LocalDate.of(<span class="hljs-number">2001</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))
        );
        Mockito.when(friendRepository.findAll()).thenReturn(myFriends); <span class="hljs-comment">// 4.</span>

        <span class="hljs-comment">// Act</span>
        <span class="hljs-type">double</span> <span class="hljs-variable">average</span> <span class="hljs-operator">=</span> friendService.computeFriendAgeAverage(); <span class="hljs-comment">// 5.</span>

        <span class="hljs-comment">// Assert</span>
        Assertions.assertThat(average).isEqualTo(<span class="hljs-number">22.0</span>);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451261.7515')">Copy</button></pre>
</div>
</div>
<div style="page-break-after: always;"></div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>We use <code>MockitoExtension</code>. This extension is able to manage annotations <code>@Mock</code></p>
</li>
<li>
<p>Property annotated with <code>@Mock</code> will be generated by Mockito. Mockito create a mock (each collaborator have to be defined as mocks). You can define a mock behavior on a test</p>
</li>
<li>
<p>We use an init method to create the class to test and inject inside the mocks</p>
</li>
<li>
<p>You can define the mock object behavior in your test. Here, we want the mock will return a list of friends</p>
</li>
<li>
<p>You can call your SUT and check the result</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Mockito allows to configure the returned values. If you don&#8217;t specify the mock behavior, the mock will return</p>
</div>
<div class="ulist">
<ul>
<li>
<p>null for objects</p>
</li>
<li>
<p>0 for numbers</p>
</li>
<li>
<p>false for boolean</p>
</li>
<li>
<p>empty collections for collections</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can also return an exception in place of a value. For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451261.2046">Mockito.when(friendRepository.findAll()).thenThrow(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Error&quot;</span>));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451261.2046')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>I won&#8217;t talk about several features of Mockito, but you can read the official documentation to know how</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><a href="https://static.javadoc.io/org.mockito/mockito-core/2.23.0/org/mockito/Mockito.html#13">Create a Spy</a> a real object and override its behavior</p>
</li>
<li>
<p><a href="https://static.javadoc.io/org.mockito/mockito-core/2.23.0/org/mockito/Mockito.html#4">Verify</a> that a mock was called (it&#8217;s sometimes usefull when you want to check if a void method was called)</p>
</li>
<li>
<p>other use cases on <a href="https://static.javadoc.io/org.mockito/mockito-core/2.23.0/org/mockito/Mockito.html" class="bare">https://static.javadoc.io/org.mockito/mockito-core/2.23.0/org/mockito/Mockito.html</a></p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_unit_tests"><span class="icon">[flask&#93;</span> Unit tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Use Git to clone the following project in a folder in your workspace. Use a terminal and launch this command if you use basic auth in Github</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451262.5151">git clone https://github.com/Dev-Mind/unitTestInAction.git</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451262.5151')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If you use a SSH key launch</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451262.7766">git clone git@github.com:Dev-Mind/unitTestInAction.git</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451262.7766')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This project is a <a href="https://dev-mind.fr/training/gradle/gradle.html">Gradle</a> project. You can open it in IntelliJ and configure it as we explained in the last course lecture.</p>
</div>
<div class="paragraph">
<p>In this lab we want to create a class to test the <code>FriendService</code> contract. Open the interface <code>FriendService</code> and its implementation <code>FriendServiceImpl</code>.</p>
</div>
<div class="paragraph">
<p>This service use a collaborator to load the friend list. This collaborator is <code>FriendRepository</code> and for the moment we have no implementation for this class. It&#8217;s not a problem to write a test, because as this collaborator is injected via a constructor and as we know the collaborator contract, we will use Mockito to inject a mock object in place of the real one in the class to test.</p>
</div>
<div class="paragraph">
<p>We&#8217;re going to update the Gradle configuration to load libraries needed to write the tests.</p>
</div>
<div class="paragraph">
<p>Open the file <code>build.gradle.kts</code> and add these dependencies</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451263.5286">dependencies {
    implementation(<span class="hljs-string">&quot;org.springframework:spring-context-support:6.0.11&quot;</span>)
    testImplementation(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter-api:5.10.0&quot;</span>)
    testRuntimeOnly(<span class="hljs-string">&quot;org.junit.jupiter:junit-jupiter-engine:5.10.0&quot;</span>)
    testImplementation(<span class="hljs-string">&quot;org.mockito:mockito-junit-jupiter:5.4.0&quot;</span>)
    testImplementation(<span class="hljs-string">&quot;org.assertj:assertj-core:3.24.2&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451263.5286')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You need to refresh your project to update the dependencies in IntelliJ. You can click on the button which appears in your file <code>build.gradle.kts</code> when your Gradle synchronisation is not up to date.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/refresh_gradle1.png" alt="refresh gradle1" width="600">
</div>
</div>
<div class="paragraph">
<p>Or you can open the Gradle tab in IntelliJ to reload the configuration</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/refresh_gradle2.png" alt="refresh gradle2" width="600">
</div>
</div>
<div class="paragraph">
<p>Go on <code>FriendServiceImpl</code> and generate a test class with <code>Ctrl</code> + <code>Shift</code> + <code>T</code></p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/unit-test/generate-test.png" alt="generate test" width="600">
</div>
</div>
<div class="paragraph">
<p>Write the tests to check the methods <code>computeFriendAge</code> and <code>computeFriendAgeAverage</code>. You can read the previous chapter to know how to do that. The main steps are these ones</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Add an annotation <code>@ExtendWith(MockitoExtension.class)</code> to be able to use the Mockito injection</p>
</li>
<li>
<p>Declare 2 properties of type <code>FriendRepository</code> (mocked dependency) and <code>FriendService</code> (class to test)</p>
</li>
<li>
<p>In <code>@BeforeEach</code> block, create <code>FriendService</code> and inject the mock of <code>FriendRepository</code></p>
</li>
<li>
<p>Write a unit test method to compute your age.For that use the pattern AAA</p>
<div class="ulist">
<ul>
<li>
<p>Arrange &#8658; define a Friend object with your firstname and your birthYear</p>
</li>
<li>
<p>Act &#8658; call the method <code>computeFriendAge</code></p>
</li>
<li>
<p>Assert &#8658; check that the result is equal to your age</p>
</li>
</ul>
</div>
</li>
<li>
<p>Don&#8217;t forget to add the <code>@Test</code> annotation on the method</p>
</li>
<li>
<p>Execute test (red means fail and green means pass)</p>
</li>
<li>
<p>Write a second test and verify the exception thrown when you call computeFriendAge with a null friend</p>
</li>
<li>
<p>Use now Mockito to simulate the <code>FriendRepository</code> behavior and write a test to check <code>computeFriendAgeAverage</code> method.</p>
</li>
<li>
<p>Create a new test to check <code>computeFriendAgeAverage</code> behavior when <code>FriendRepository</code> returns a an empty list of friends.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>What happens ?</p>
</div>
<div class="paragraph">
<p>Writing tests help to fix problems. Fix the code of <code>computeFriendAgeAverage</code> and return 0 when the list is empty. You can now fix your test</p>
</div>
</div>
</div>`;var yf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_introduction">Introduction</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_requirements">Requirements</a></li>
<li><a class="link" fragment="#_whats_spring">What&#8217;s Spring ?</a></li>
<li><a class="link" fragment="#_spring_framework">Spring framework</a></li>
<li><a class="link" fragment="#_documentation">Documentation</a></li>
</ul>
</li>
<li><a class="link" fragment="#_spring_boot">Spring Boot</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_spring_boot_starters">Spring boot starters</a></li>
<li><a class="link" fragment="#_spring_boot_autoconfiguration">Spring Boot autoconfiguration</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_start_a_new_project"><span class="icon">[flask&#93;</span> Start a new project</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_generate">Generate</a></li>
<li><a class="link" fragment="#_import_zip_in_your_ide">Import zip in your IDE</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_launch_application"><span class="icon">[flask&#93;</span> Launch application</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_with_gradle">With Gradle</a></li>
<li><a class="link" fragment="#_application_packaging">Application packaging</a></li>
<li><a class="link" fragment="#_launch_application_in_dev_mode">Launch application in dev mode</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_update_the_welcome_page_of_your_app"><span class="icon">[flask&#93;</span> Update the welcome page of your app</a></li>
<li><a class="link" fragment="#_understand_whats_happened">Understand what&#8217;s happened</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_spring_framework_2">Spring Framework</a></li>
<li><a class="link" fragment="#_spring_boot_2">Spring Boot</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Since the beginning, <a href="https://spring.io/">Spring</a> has been a set of tools designed to simplify the development of <a href="https://www.java.com/fr/">Java</a> applications for every developer. Spring\u2019s focus on speed, simplicity, and productivity has made it the world&#8217;s most popular Java framework.</p>
</div>
<div class="paragraph">
<p>The last versions of Spring supports other languages on the JVM like <a href="https://kotlinlang.org/">Kotlin</a>. But we will focus on Java in this lecture course.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro.png" alt="spring intro" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_requirements">Requirements</h3>
<div class="paragraph">
<p>To be able to learn <a href="https://spring.io/">Spring</a> you must have</p>
</div>
<div class="ulist">
<ul>
<li>
<p>some basics in Java and JEE.
If you need to follow a complete course you can see the fabulous work of <a href="https://www.youtube.com/c/coursenlignejava/videos?view=0&amp;sort=da&amp;flow=grid">Jose Paumard</a> and watch his video to learn Java.</p>
</li>
<li>
<p>know unit testing in Java.
If not you have a <a href="/training/unit-test/unit_test_in_java.html">course</a> on this web site.</p>
</li>
<li>
<p>have knowledge of the Web mechanisms</p>
</li>
<li>
<p>know about <a href="https://docs.oracle.com/javase/tutorial/jdbc/basics/index.html">JDBC</a> and <a href="https://hibernate.org/orm/documentation/6.5">Hibernate</a>. We will see the main principles of these libraries during this course.</p>
</li>
<li>
<p>a PC with a good IDE as <a href="https://www.jetbrains.com/idea">IntelliJ</a>. Follow this <a href="../training/outil/install_development_environment.html">page</a> to install your dev environment (IDE + Java)</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_whats_spring">What&#8217;s Spring ?</h3>
<div class="paragraph">
<p>Spring is the most used Java framework.
A framework comes with rules to organize developments</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Good practices</p>
</li>
<li>
<p>Abstraction of the complexity</p>
</li>
<li>
<p>Provides utility classes</p>
</li>
<li>
<p>Helps to focus on the business code and not on the technical plumbing</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Spring is</p>
</div>
<div class="ulist">
<ul>
<li>
<p>an <a href="https://github.com/spring-projects">Open Source</a> Java framework. You can see the code and contribute to the project</p>
</li>
<li>
<p>an entire <a href="https://spring.io/">ecosystem</a>. Spring provide a lot of tool to develop your app, deploy your app, manage your app</p>
</li>
<li>
<p>a <a href="https://spring.io/community">community</a></p>
</li>
<li>
<p>a company (Spring is open source Licence \xABApache 2.0\xBB but managed by a company Broadcom)</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_spring_framework">Spring framework</h3>
<div class="paragraph">
<p>Spring projects were created to facilitate Java development</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://spring.io/projects/spring-framework">Spring Core</a> provides a framework to simplify project technical aspects</p>
</li>
<li>
<p>Sub-projects deal with more specific technical issues (Data, Security, Cloud&#8230;&#8203;)</p>
</li>
<li>
<p>Nothing is mandatory, everything is configurable</p>
</li>
<li>
<p>Big effort on backward compatibility to be able to always upgrade your project to the last versions.</p>
</li>
</ul>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/spring-projects.png" alt="canvas" width="800">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_documentation">Documentation</h3>
<div class="paragraph">
<p>You can read the documentation related to everything we will see together during these lessons</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Spring Core <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/" class="bare">https://docs.spring.io/spring/docs/current/spring-framework-reference/</a></p>
</li>
<li>
<p>Spring Boot <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle" class="bare">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle</a></p>
</li>
<li>
<p>Spring Data JPA <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/" class="bare">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/</a></p>
</li>
<li>
<p>Spring Security <a href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/" class="bare">https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/</a></p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_spring_boot">Spring Boot</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring Boot helps you to create stand-alone, production-grade Spring applications.</p>
</div>
<div class="paragraph">
<p>The goal is to start an application in 3 lines. To do that, Spring Boot takes <strong>an opinionated view of the Spring platform</strong> and third-party libraries. A default convention is applied out of the box, but you can deviate easily from the defaults if you need to.</p>
</div>
<div class="paragraph">
<p>Spring Boot provides a range of non-functional features that are common to large classes of projects (such as embedded servers, security, metrics, health checks, and externalized configuration).</p>
</div>
<div class="sect2">
<h3 id="_spring_boot_starters">Spring boot starters</h3>
<div class="paragraph">
<p>Starters are a set of convenient dependency descriptors that you can include in your application.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>spring-boot-starter-web</strong> : Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container</p>
</li>
<li>
<p><strong>spring-boot-starter-data-jpa</strong> : Starter to configure Hibernate and a datasource to store your data in a DBMS.</p>
</li>
<li>
<p><strong>spring-boot-starter-test</strong> : Starter for testing Spring Boot applications with libraries including JUnit, AssertJ and Mockito</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_spring_boot_autoconfiguration">Spring Boot autoconfiguration</h3>
<div class="paragraph">
<p>Spring Boot attempts to automatically configure your Spring application based on the jar dependencies that you have added. For example, if you have a database driver in your classpath, you don&#8217;t have to configure any database, the Spring Boot auto-configuration do the job for you. You juste have to configure some properties to customize the datasource username, password and Url.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_start_a_new_project"><span class="icon">[flask&#93;</span> Start a new project</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_generate">Generate</h3>
<div class="paragraph">
<p>To start a new project, you can (you should) use the official generator <a href="https://start.spring.io/" class="bare">https://start.spring.io/</a></p>
</div>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/spring-intro/springboot-init19.png" alt="springboot init19" width="1000"></span></p>
</div>
<div class="paragraph">
<p>Use these settings</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Project</strong> : Gradle Kotlin</p>
</li>
<li>
<p><strong>Project metadata</strong>:</p>
<div class="ulist">
<ul>
<li>
<p>group : <code>com.emse.spring</code></p>
</li>
<li>
<p>Spring version: <code>3.3.2</code></p>
</li>
<li>
<p>artifact &amp; name :  <code>automacorp</code></p>
</li>
<li>
<p>Packaging : <code>jar</code></p>
</li>
<li>
<p>Java : <code>21</code></p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>Dependencies</strong>, click on button "ADD DEPENDENCIES"" to choose which sub projects we will use. Choose <strong>Spring Web</strong></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Click on the Generate button (bottom of the screen) to download a zip with generated files.</p>
</div>
</div>
<div class="sect2">
<h3 id="_import_zip_in_your_ide">Import zip in your IDE</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Unzip the project into a directory (you can put it next to the first project we did in the TPs)</p>
</li>
<li>
<p>Open the project in <a href="../outil/install-development-environment">IntelliJ Idea</a>. This step may take a long time if your Internet connectivity is slow. IntelliJ will update Gradle and all dependencies needed by the project.</p>
</li>
<li>
<p>You should have this project structure. One Application is generated with tests</p>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/spring-intro/springboot-tree.png" alt="springboot tree" width="350"></span></p>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>We will open the main generated files</p>
</div>
<div class="sect3">
<h4 id="_read_gradle_configuration">Read Gradle configuration</h4>
<div class="paragraph">
<p>File : <strong>@GT settings.gradle.kts</strong> contains the project name</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451346.3481">rootProject.name = <span class="hljs-string">&quot;automacorp&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451346.3481')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>File : <strong>@GT build.gradle.kts</strong> contains information used by Gradle to build app</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451347.2031">plugins {
	java <span class="hljs-comment">// (1)</span>
	id(<span class="hljs-string">&quot;org.springframework.boot&quot;</span>) version <span class="hljs-string">&quot;3.3.2&quot;</span> <span class="hljs-comment">// (2)</span>
	id(<span class="hljs-string">&quot;io.spring.dependency-management&quot;</span>) version <span class="hljs-string">&quot;1.1.6&quot;</span> <span class="hljs-comment">// (3)</span>
}

group = <span class="hljs-string">&quot;com.emse.spring&quot;</span> <span class="hljs-comment">// (4)</span>
version = <span class="hljs-string">&quot;0.0.1-SNAPSHOT&quot;</span>

repositories { <span class="hljs-comment">// (5)</span>
	mavenCentral()
}

java { <span class="hljs-comment">// (6)</span>
	toolchain {
		languageVersion = JavaLanguageVersion.of(<span class="hljs-number">21</span>)
	}
}


dependencies { <span class="hljs-comment">// (7)</span>
	implementation(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>) <span class="hljs-comment">// (8)</span>
	testImplementation(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>) <span class="hljs-comment">// (9)</span>
  testRuntimeOnly(<span class="hljs-string">&quot;org.junit.platform:junit-platform-launcher&quot;</span>) <span class="hljs-comment">// (10)</span>
}

tasks.<span class="hljs-symbol">withType@</span><span class="hljs-symbol">LTTest@</span>GT { <span class="hljs-comment">// (11)</span>
	useJUnitPlatform()
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451347.2031')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) Adds the Java plugin to help Gradle to manage our Java app lifecycle</p>
</li>
<li>
<p>(2) Adds the Spring Boot plugin to be able to add task to run, compile, assemble our Spring Boot app</p>
</li>
<li>
<p>(3) Adds Spring dependency management plugin to use the compatible dependencies with the Spring Boot version</p>
</li>
<li>
<p>(4) Project id and versions</p>
</li>
<li>
<p>(5) Tell Gradle where it will find all libraries</p>
</li>
<li>
<p>(6) Customize the Java plugin and define the default Java version used by the project</p>
</li>
<li>
<p>(7) This block contains all dependencies used by our app.</p>
</li>
<li>
<p>(8) spring-boot-starter-web to load all the elements to start a web app (embedded server, libs to write REST services&#8230;&#8203;)</p>
</li>
<li>
<p>(9) spring-boot-starter-test contains all lib used in tests (Junit, Mockito, Assetj&#8230;&#8203;)</p>
</li>
<li>
<p>(10) configure junit runner to test execution</p>
</li>
<li>
<p>(11) declare the Junit 5 runner to use to execute the tests</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_app_files">App files</h4>
<div class="paragraph">
<p>File : <strong>@GT src @GT main @GT java @GT com.emse.spring.automacorp.AutomacorpApplication</strong></p>
</div>
<div class="paragraph">
<p>The annotation <code>@SpringBootApplication</code> initialize a Spring Boot application. This is your app entry point</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451348.7625"><span class="hljs-keyword">package</span> com.emse.spring.automacorp;

<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;
<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;

<span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutomacorpApplication</span> {
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
		SpringApplication.run(AutomacorpApplication.class, args);
	}
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.7625')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>On startup Spring Boot will automatically scan all sub packages, defined below <code>com.emse.spring.automacorp</code>.</p>
</div>
<div class="paragraph">
<p>If these packages contain classes annotated with special annotations like <code>@Controller</code>, <code>@Service</code>, Spring Boot will automatically add them to the Spring context. This classes will be called Spring Beans. We will see more in the next chapter.</p>
</div>
<div class="paragraph">
<p>File : <strong>@GT src @GT main @GT java @GT com.emse.spring.automacorp.AutomacorpApplicationTests</strong></p>
</div>
<div class="paragraph">
<p>This class is the test file of your AutomacorpApplication. In a good application, all files are tested and verified by unit tests</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451348.533"><span class="hljs-meta">@SpringBootTest</span> <span class="hljs-comment">// (2)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutomacorpApplicationTests</span> {
    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> { <span class="hljs-comment">// (3)</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.533')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) Runner to use when we want to test a Spring class. This Junit runner is a class that extends the Junit Runner to add more feature when your test is launched. x</p>
</li>
<li>
<p>(2) Annotation which creates an application context dedicated for tests. Spring Boot provide several annotations to <a href="https://docs.spring.io/spring-boot/reference/testing/spring-boot-applications.html">facilitate tests</a>. <code>@SpringBootTest</code> will launch a complete context and help to test a class in a real context. To be more efficient you can load only some part of the context. <code>@DataJpaTest</code> will only load the database objects and the class to test&#8230;&#8203;.</p>
</li>
<li>
<p>(3) In a Junit test you always have to write a test method. This method will be executed when you launch the test. Even if the content is empty, in this example Spring will try to launch all the context. If somethings is wrong you will have an error</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can run this test if you click on green button</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="1000" height="500" src="https://www.youtube.com/embed/6FlusTFOmRA?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p>File : <strong>@GT src @GT main @GT resources @GT application.properties</strong></p>
</div>
<div class="paragraph">
<p>It contains all the application properties. For the moment this file is empty</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A property has a key and a value.</p>
</li>
<li>
<p>In your code you read a property by its key and Spring will load the value at runtime</p>
</li>
<li>
<p>Properties help to customize app on a particular environment+</p>
</li>
</ul>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_launch_application"><span class="icon">[flask&#93;</span> Launch application</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_with_gradle">With Gradle</h3>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451348.5781">./gradlew --continuous bootRun // (1)

[...]
2023-08-22T17:15:59.685+02:00  INFO 124158 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#x27;&#x27;
2023-08-22T17:15:59.697+02:00  INFO 124158 --- [  restartedMain] c.e.spring.automacorp.AutomacorpApplication  : Started AutomacorpApplication in 1.76 seconds (process running for 2.126)
2023-08-22T17:16:04.331+02:00  INFO 124158 --- [nio-8085-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#x27;dispatcherServlet&#x27;
2023-08-22T17:16:04.332+02:00  INFO 124158 --- [nio-8085-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#x27;dispatcherServlet&#x27;
2023-08-22T17:16:04.334+02:00  INFO 124158 --- [nio-8085-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
&lt;==========---&gt; 80% EXECUTING
<span class="hljs-meta prompt_">&gt; </span><span class="language-bash">:bootRun  // (2)&lt;/==========---&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.5781')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) the <em>--continuous</em> gradle option will restart the server when we recompile the project</p>
</li>
<li>
<p>(2) the build gets "stuck" at XX%, but the server is actually started and ready to accept connections. To stop the application use kbd: [Ctrl + c]</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A this step you can open URL localhost:8080 in your favorite browser. You should see this page</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/spring-intro/spring-page-first.png" alt="spring page first">
</div>
</div>
<div class="paragraph">
<p>If Spring can&#8217;t start your app you must read the logs in your terminal. For example il port 8080 is already used you will have this error</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451348.542">***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that&#x27;s listening on port 8080 or configure this application to listen on another port.</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.542')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If you need to use another port you can. For that open the file <code>application.properties</code> and add a new entry</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-properties" id="1732912451348.96"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8085</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.96')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can relaunch the app. To stop the running app use <strong>Use  [Ctrl + c] to stop the application</strong>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_application_packaging">Application packaging</h3>
<div class="paragraph">
<p>With Spring Boot, your application is packaged in a jar file containing an embedded application server to run your code. You have only one jar and all dependencies are inside</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451348.6826">./gradlew assemble</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.6826')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>This task generate a jar (Java archive) in <code>build/libs</code>.</p>
</li>
<li>
<p>jar name is <code>automacorp-0.0.1-SNAPSHOT.jar</code>. The version is defined in your Gradle configuration. It contains everything you need to launch the application (conf + libs)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To launch your Spring Boot App you can execute</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451348.8499">java -jar build/libs/automacorp-0.0.1-SNAPSHOT.jar</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.8499')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can stop your app [Ctrl + c]</p>
</div>
</div>
<div class="sect2">
<h3 id="_launch_application_in_dev_mode">Launch application in dev mode</h3>
<div class="paragraph">
<p><strong>com.emse.spring.automacorp.AutomacorpApplication</strong> is a bootable class because it contains a main class</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451348.4548"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> { }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.4548')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Open this class. You can click on the green button in the margin</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="700" height="300" src="https://www.youtube.com/embed/f8mRHwIgxAY?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p>or use launch configuration in your toolbar <span class="image"><img src="../../img/training/spring-intro/run-config.png" alt="run config"></span></p>
</div>
<div class="paragraph">
<p>When app is started, <strong>Run pannel</strong> is opened on the bottom. This pannel contains logs (if you search informations on errors). The button stop (red square) can be used to stop app</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/spring-intro/run-class2.png" alt="run class2"></span></p>
</div>
<div class="paragraph">
<p><strong>This third solution to launch the application is the one recommended when you develop your application</strong></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_update_the_welcome_page_of_your_app"><span class="icon">[flask&#93;</span> Update the welcome page of your app</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a new file in <code><strong>src/main/resources/static</strong></code>. The name will be <code><strong>index.html</strong></code></p>
</li>
<li>
<p>In this file copy the following code</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912451348.9727"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> Spring in practice<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
        Hello world
    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451348.9727')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>Recompile your code or restart your app</p>
</li>
<li>
<p>Reopen <a href="http://localhost:8080" class="bare">http://localhost:8080</a> in your browser. You should see your Hello message</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>If you want to have a nicer page, you can include a CSS library as Bootstrap (see the <a href="https://getbootstrap.com/docs/5.3/getting-started/introduction/#cdn-links">CDN links</a>)</p>
</div>
<div class="paragraph">
<p>You can copy this line in the header of your HTML page.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912451349.7175"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451349.7175')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>After this import you can use the different CSS components provided by <a href="https://getbootstrap.com/">Bootstrap</a>. To see the result update your page</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-html" id="1732912451349.844"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Automacorp<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lead&quot;</span>&gt;</span>
            Welcome on the Automacorp App used to learn Spring.
        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451349.844')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_understand_whats_happened">Understand what&#8217;s happened</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In few lines you have started your first Spring project. I spoke about Spring, Spring Framework, Spring Boot&#8230;&#8203; But what&#8217;s the difference ?</p>
</div>
<div class="sect2">
<h3 id="_spring_framework_2">Spring Framework</h3>
<div class="paragraph">
<p>Spring Framework is a popular, open-source, Java-based application framework. You have the core library but you have a lot of another ones when you want to add more features in your application : data storage, web, security, &#8230;&#8203;.!</p>
</div>
<div class="paragraph">
<p>When you add a new Spring or non Spring library, you need to configure your application (configuration beans, properties&#8230;&#8203;)</p>
</div>
<div class="paragraph">
<p>You can have to do a lot of thing. That&#8217;s why we prefer use Spring Boot.</p>
</div>
</div>
<div class="sect2">
<h3 id="_spring_boot_2">Spring Boot</h3>
<div class="paragraph">
<p>Spring Boot takes an opinionated view of the Spring platform and third-party libraries.</p>
</div>
<div class="paragraph">
<p>With Spring Boot, it\u2019s easy to create applications for all types of workloads. Most Spring Boot applications need very little Spring configuration.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Spring Boot is a "convention over configuration" type of framework, with no code generation.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>When we use Spring MVC (the original web framework built on the Servlet API), we need to configure for example the dispatcher servlet among other things.
When we use the Spring support of Hibernate/JPA, we would need to configure a datasource, an entity manager factory, a transaction manage&#8230;&#8203;.</p>
</div>
<div class="paragraph">
<p>Spring Boot simplifies all of these configuration elements, by auto-configuration. For example, when it sees <code>spring-webmvc</code> on the classpath, Spring Boot adds automatically <code>@EnableWebMvc</code> on your context.</p>
</div>
<div class="paragraph">
<p>With Spring boot we will use <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter">starters</a></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451349.7239">dependencies {
 implementation(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span>)
 testImplementation(<span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451349.7239')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The starter name starts by <strong>spring-boot-starter-XXXX</strong> and use a suffix XXXX (web, cache, data-jpa, mustache, web&#8230;&#8203;)</p>
</div>
<div class="paragraph">
<p>In the next course we will see how to add objects to our app and how we can linked them each other&#8230;&#8203;</p>
</div>
</div>
</div>
</div>`;var jf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_objects_and_application">Objects and application</a></li>
<li><a class="link" fragment="#_inversion_of_control_ioc_principle">Inversion of Control (IOC) Principle</a></li>
<li><a class="link" fragment="#_spring_beans">Spring Beans</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_create_a_bean">Create a bean</a></li>
<li><a class="link" fragment="#_add_dependencies">Add dependencies</a></li>
<li><a class="link" fragment="#_how_it_works">How it works ?</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_using_dependency_injection"><span class="icon">[flask&#93;</span> Using Dependency Injection</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_create_a_first_bean">Create a first bean</a></li>
<li><a class="link" fragment="#_inject_your_bean">Inject your bean</a></li>
<li><a class="link" fragment="#_inject_your_bean_in_configuration_bean">Inject your bean in configuration bean</a></li>
<li><a class="link" fragment="#_other_cases">Other cases</a></li>
</ul>
</li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this course you will learn one of the main principle of software design, the dependency injection</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Fundamental principle of software design</p>
</li>
<li>
<p>Introduced by <a href="https://martinfowler.com/articles/injection.html">Martin Fowler</a> (famous english computer engineer)</p>
</li>
<li>
<p>Helps to split responsibilities in your code &#8658; weakly coupled components</p>
</li>
<li>
<p>Facilitates testing</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Spring ecosystem was built on this concept and understand dependency injection is a first step to understand Spring.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-core.png" alt="spring core" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_objects_and_application">Objects and application</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When writing an application, as developers, we break down the problem we\u2019re trying to solve into smaller ones, and do our best to comply with the architecture and design principles we\u2019ve chosen for our application: flexible, decoupled, testable, easy to understand, etc.</p>
</div>
<div class="paragraph">
<p>For that we use a lot of objects</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/java-objects.png" alt="java objects" width="1000">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Service contains implementations of your business rules</p>
</li>
<li>
<p>Components help to resolve a technical problem</p>
</li>
<li>
<p>Repository interacts with external systems as database, webapi&#8230;&#8203;</p>
</li>
<li>
<p>Controllers are in front of your app to read and check data sent by users</p>
</li>
<li>
<p>And you have objects to transport data DTO, entities</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When we want to define an object we write for example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451364.2124"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameService</span> {

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Guillaume&quot;</span>;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451364.2124')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>And to use this object elsewhere we have to create a new instance with a <code>new</code> instruction</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451364.7637"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WelcomeService</span> {

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> {
        <span class="hljs-type">NameService</span> <span class="hljs-variable">nameService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NameService</span>();
        System.out.println(<span class="hljs-string">&quot;Hello &quot;</span> + nameService.getName());
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451364.7637')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>We have a strong coupling between these classes <strong>WelcomeService</strong> and <strong>NameService</strong>.
If we want to change <strong>NameService</strong> we have a good chance of having to update <strong>WelcomeService</strong>.</p>
</div>
<div class="paragraph">
<p>For example, if <strong>NameService</strong> need to use others objects, you have to update the <strong>WelcomeService</strong> class constructor</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451364.6812"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameService</span> {

    <span class="hljs-keyword">private</span> UserService userService;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NameService</span><span class="hljs-params">(UserService userService)</span> {
        <span class="hljs-built_in">this</span>.userService = userService;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Guillaume&quot;</span>;
    }

    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451364.6812')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>As the constructor changed you must update the coupled class</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451365.4895"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WelcomeService</span> {

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> {
        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();
        <span class="hljs-type">NameService</span> <span class="hljs-variable">nameService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NameService</span>(userService);
        System.out.println(<span class="hljs-string">&quot;Hello &quot;</span> + nameService.getName());
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451365.4895')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>We have to resolve these problems (break coupling and use singleton) and the solution is <strong>Inversion of Control</strong> (IOC).</p>
</div>
<div class="paragraph">
<p>To introduce this principle we will use a simpler example</p>
</div>
<div class="paragraph">
<p>If a class A uses a class B</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/ioc1.png" alt="ioc1" width="700">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451365.0203"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> {
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Guillaume&quot;</span>;
    }
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> {
        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();
        System.out.println(<span class="hljs-string">&quot;Hello &quot;</span> + b.name());
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451365.0203')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Other consideration: in a web application, you should not implement a service at every call. It&#8217;s not efficient if a class has a lot of collaborators, and if a service is called in different points in your application.</p>
</div>
<div class="paragraph">
<p>In this case the class which not change must be created only once. We often use the Singleton design pattern to do that.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_inversion_of_control_ioc_principle">Inversion of Control (IOC) Principle</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To resolve this problem, we can use a client, a factory to instantiate class B and inject it into class A.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/ioc2.png" alt="ioc2" width="700">
</div>
</div>
<div class="paragraph">
<p>If an object needs other objects, it does not instantiate itself but they are provided by a factory or a client (a container).</p>
</div>
<div class="paragraph">
<p>Objects define their collaborators (that is, the other objects they work with) through constructor arguments or properties.
Container is responsible for the construction of the objects.</p>
</div>
<div class="paragraph">
<p>It will provide (inject) the collaborators requested by an object.</p>
</div>
<div class="paragraph">
<p>The first version of Spring was created to resolve this problem.
Spring provides <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans">a container</a> to create and inject objects.</p>
</div>
<div class="paragraph">
<p>You must remember</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>If an object needs other objects, it does not instantiate itself, but they are provided by a factory (in our case Spring).</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Therefore, we no longer have to find the <code>new</code> key word in your code.</p>
</div>
<div class="paragraph">
<p>The only exception is for objects which contain data : Entity and DTO.</p>
</div>
<div class="paragraph">
<p><strong>Inversion of Control (IoC) principle is also known as dependency injection (DI)</strong>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_spring_beans">Spring Beans</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans.</p>
</div>
<div class="paragraph">
<p>A <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-definition">bean</a> is an object that is instantiated, assembled, and managed by a Spring IoC container</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>The Java language was named Java in reference to Java coffee, the coffee of Indonesia. The Java logo is a cup of tea. With Spring an app can be seen as a set of Java beans</p>
</div>
</blockquote>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/java-beans.png" alt="java beans" width="800">
</div>
<div class="title">Figure 1. In this image I play the role of the garbage collector. I clean up the unused Java Beans (beans without reference)</div>
</div>
<div class="sect2">
<h3 id="_create_a_bean">Create a bean</h3>
<div class="sect3">
<h4 id="_by_annotation">By annotation</h4>
<div class="paragraph">
<p>In Spring, we can use a stereotype on our classes to defined them as Bean: <code>@Service</code>, <code>@Component</code>, <code>@Repository</code>, <code>@Controller</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451365.9065"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGreetingService</span> {
   <span class="hljs-comment">// Code ...</span>
}

<span class="hljs-meta">@Controller</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGreetingController</span> {
   <span class="hljs-comment">// Code ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451365.9065')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Spring Boot is able to scan classpath to auto-detect and auto-configure beans annotated with <code>@Service</code>, <code>@Component</code>, <code>@Repository</code>, or <code>@Controller</code>.
Each annotation is equivalent, but a sterotype (<code>@Service</code>, <code>@Repository</code>&#8230;&#8203;) helps to understand the object role in your app</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/java-objects.png" alt="java objects" width="1000">
</div>
</div>
</div>
<div class="sect3">
<h4 id="_by_configuration">By configuration</h4>
<div class="paragraph">
<p>Also, we can create a Spring bean in a configuration bean, when we need to configure it.</p>
</div>
<div class="paragraph">
<p>The first step is to create a Configuration bean annotated with <code>@Configuration</code>.
This annotation indicates that the class can be used by the Spring IoC container as a source of bean definitions</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451365.4148"><span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAppConfiguration</span> {

    <span class="hljs-comment">// ...</span>

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451365.4148')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Beans are components instances. A method annotated with <code>@Bean</code> will return an object that should be registered as a bean in the Spring application context.</p>
</div>
<div class="paragraph">
<p><code>@Bean</code> is used to explicitly declare a single bean, rather than letting Spring do it automatically as @Component, @Service&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>In this example we said to Spring that our UserStore object needs a <code>DataStoreConnectionPool</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451365.6453"><span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAppConfiguration</span> {

  <span class="hljs-meta">@Bean</span>
  <span class="hljs-keyword">public</span> UserStore <span class="hljs-title function_">userStore</span><span class="hljs-params">(DataStoreConnectionPool connectionPool)</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserStore</span>(connectionPool.fetchConnection());
  }

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451365.6453')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This way of declaring a bean is used to configure Spring or another library. With these declarations, we can override the default beans configured by Spring.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_add_dependencies">Add dependencies</h3>
<div class="paragraph">
<p>When a class need another object, we use @Autowired to inject them via Spring. You have 2 ways to inject a bean in another</p>
</div>
<div class="paragraph">
<p><strong>Injection by setter</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451366.2053"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span> {

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> B b;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setB</span><span class="hljs-params">(B b)</span> {
        <span class="hljs-built_in">this</span>.b = b;
    }

    <span class="hljs-keyword">public</span> B <span class="hljs-title function_">getB</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> b;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451366.2053')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Injection by constructor</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451366.2505"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span> {

    <span class="hljs-keyword">private</span> B b;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AImpl</span><span class="hljs-params">(B b)</span> {
        <span class="hljs-built_in">this</span>.b = b;
    }

    <span class="hljs-keyword">public</span> B <span class="hljs-title function_">getB</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> b;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451366.2505')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If you have only one constructor <code>@Autowired</code> is not mandatory for Spring. However, if several constructors are available and there is no primary/default constructor, at least one of the constructors must be annotated with @Autowired in order to instruct the container which one to use.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>You have 2 ways of injecting dependencies into an object but injection by constructor is the one recommended by the community</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>In this example UserStore and CertificateManager are injected into AuthenticationService</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451366.9084"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthenticationService</span> {

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserStore userStore;
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CertificateManager certManager;

  <span class="hljs-keyword">public</span> <span class="hljs-title function_">AuthenticationService</span><span class="hljs-params">(UserStore userStore, CertificateManager certManager)</span> {
    <span class="hljs-built_in">this</span>.userStore = userStore;
    <span class="hljs-built_in">this</span>.certManager = certManager;
  }

  <span class="hljs-keyword">public</span> AcccountStatus <span class="hljs-title function_">getAccountStatus</span><span class="hljs-params">(UserAccount account)</span> {
    <span class="hljs-comment">// here we can use the UserStore with this.userStore</span>
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451366.9084')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_how_it_works">How it works ?</h3>
<div class="paragraph">
<p>Spring looks for components by scanning your application classpath : looking for annotated classes in the app packages or the beans you\u2019ve declared in your configuration beans.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/spring-intro/appcontext1.png" alt="appcontext1">
</div>
</div>
<div class="paragraph">
<p>All those components are registered in an application context.</p>
</div>
<div class="paragraph">
<p>Spring searches a Bean by its type or else by its name</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/spring-intro/appcontext2.png" alt="appcontext2">
</div>
</div>
<div class="paragraph">
<p>Spring throws a NoSuchBeanDefinitionException if a bean can&#8217;t be found</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/spring-intro/appcontext3.png" alt="appcontext3">
</div>
</div>
<div class="paragraph">
<p>Spring throws a NoUniqueBeanDefinitionException if several beans are found and if it doesn&#8217;t know which bean use</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/spring-intro/appcontext4.png" alt="appcontext4">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_using_dependency_injection"><span class="icon">[flask&#93;</span> Using Dependency Injection</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_create_a_first_bean">Create a first bean</h3>
<div class="paragraph">
<p>First, let\u2019s create an interface for our application called <code>GreetingService</code> in package <code>com.emse.spring.automacorp.hello</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451366.4268"><span class="hljs-keyword">package</span> com.emse.spring.automacorp.hello;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GreetingService</span> {

  <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">(String name)</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451366.4268')">Copy</button></pre>
</div>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Don\u2019t forget to commit periodically your work on Git. If you need more information about Git you can read <a href="https://dev-mind.fr/training/outil/git.html">this course</a>.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>Your first job is to output <code>"Hello, Spring!</code> in the console when the application starts.</p>
</div>
<div class="paragraph">
<p>For that, do the following:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create in package <code>com.emse.spring.automacorp.hello</code> a class called <code>ConsoleGreetingService</code>. This class has to implement <code>GreetingService</code> interface</p>
</li>
<li>
<p>Mark it as a service with <code>@Service</code> annotation.</p>
</li>
<li>
<p>Implement <em>greet</em> method. This method should write to the console using <code>System.out.println</code>.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>To check your work you have to create this test in folder <code>src/test</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451367.1877"><span class="hljs-keyword">package</span> com.emse.spring.automacorp.hello;

<span class="hljs-keyword">import</span> org.assertj.core.api.Assertions;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;
<span class="hljs-keyword">import</span> org.springframework.boot.test.system.CapturedOutput;
<span class="hljs-keyword">import</span> org.springframework.boot.test.system.OutputCaptureExtension;

<span class="hljs-meta">@ExtendWith(OutputCaptureExtension.class)</span> <span class="hljs-comment">// (1)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingServiceTest</span> {

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGreeting</span><span class="hljs-params">(CapturedOutput output)</span> {
        <span class="hljs-type">GreetingService</span> <span class="hljs-variable">greetingService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsoleGreetingService</span>(); <span class="hljs-comment">// (2)</span>
        greetingService.greet(<span class="hljs-string">&quot;Spring&quot;</span>);
        Assertions.assertThat(output.getAll()).contains(<span class="hljs-string">&quot;Hello, Spring!&quot;</span>);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451367.1877')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) We load a <a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/system/OutputCaptureExtension.html">Junit5 extension</a> to capture output (log generated by your app)</p>
</li>
<li>
<p>(2) We\u2019re testing our service implementation without Spring being involved. We create a new instance of this service with a new</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can verify that your implementation is working properly by running  <code>./gradlew test</code> command or by buttons in your IDEA.See this video to see the different solutions</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="1000" height="500" src="https://www.youtube.com/embed/6FlusTFOmRA?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p>The test source code is valid. If the test execution fails, you have to fix your code.</p>
</div>
</div>
<div class="sect2">
<h3 id="_inject_your_bean">Inject your bean</h3>
<div class="paragraph">
<p>Your second Job is to create a new interface <code>UserService</code> in package <code>com.emse.spring.automacorp.hello</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451367.77"><span class="hljs-keyword">package</span> com.emse.spring.automacorp.hello;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> {
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">greetAll</span><span class="hljs-params">(List<span class="hljs-meta">@LTString</span><span class="hljs-meta">@GT</span> name)</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451367.77')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can now</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>create an implementation of this interface called <code>DummyUserService</code></p>
</li>
<li>
<p>Mark it as a service.</p>
</li>
<li>
<p>Inject service <code>GreetingService</code> (use interface and not implementation)</p>
</li>
<li>
<p>Write <code>greetAll</code> method. You have to call <code>greet</code> method of the <code>GreetingService</code> for each name</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>As for the first service, we&#8217;re going to check this new service with a unit test</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451367.5615"><span class="hljs-keyword">package</span> com.emse.spring.automacorp.hello;

<span class="hljs-keyword">import</span> org.assertj.core.api.Assertions;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.boot.test.system.CapturedOutput;
<span class="hljs-keyword">import</span> org.springframework.boot.test.system.OutputCaptureExtension;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;

<span class="hljs-meta">@ExtendWith(OutputCaptureExtension.class)</span>
<span class="hljs-meta">@ExtendWith(SpringExtension.class)</span> <span class="hljs-comment">// (1)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">DummyUserServiceTest</span> {

    <span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// (2)</span>
    <span class="hljs-meta">@ComponentScan(&quot;com.emse.spring.automacorp.hello&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DummyUserServiceTestConfig</span>{}

    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">// (3)</span>
    <span class="hljs-keyword">public</span> DummyUserService dummyUserService;

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGreetingAll</span><span class="hljs-params">(CapturedOutput output)</span> {
        dummyUserService.greetAll(List.of(<span class="hljs-string">&quot;Elodie&quot;</span>, <span class="hljs-string">&quot;Charles&quot;</span>));
        Assertions.assertThat(output).contains(<span class="hljs-string">&quot;Hello, Elodie!&quot;</span>, <span class="hljs-string">&quot;Hello, Charles!&quot;</span>);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451367.5615')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) We use <code>SpringExtension</code> to link our test to Spring. With this annotation a Spring Context will be loaded when this test will run<br></p>
</li>
<li>
<p>(2) We have to configure how the context is loaded. In our case we added <code>@ComponentScan("com.emse.spring.automacorp.hello")</code> to help Spring to found our classes. In our app this scan is made by SpringBoot, but in our test SpringBoot is not loaded <br></p>
</li>
<li>
<p>(3) As our test has is own Spring Context we can inject inside the bean to test</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can verify that your implementation is working properly by running <code>./gradlew test</code> command.</p>
</div>
</div>
<div class="sect2">
<h3 id="_inject_your_bean_in_configuration_bean">Inject your bean in configuration bean</h3>
<div class="paragraph">
<p>Now, a new class <code>AutomacorpApplicationConfig</code> in <code>com.emse.spring.automacorp</code> package next <code>AutomacorpApplication</code> class. We want to create a new bean of type <code>CommandLineRunner</code>.</p>
</div>
<div class="paragraph">
<p>CommandLineRunner instances are found by Spring Boot in the Spring context and are executed during the application startup phase.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451367.4053"><span class="hljs-comment">// (1)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutomacorpApplicationConfig</span> {

  <span class="hljs-comment">// (2)</span>
  <span class="hljs-keyword">public</span> CommandLineRunner <span class="hljs-title function_">greetingCommandLine</span><span class="hljs-params">()</span> { <span class="hljs-comment">// (3)</span>
    <span class="hljs-keyword">return</span> args <span class="hljs-meta">@LAMBDA</span> {
      <span class="hljs-comment">// (4)</span>
    };
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451367.4053')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) First, annotate this class to mark it as a configuration bean</p>
</li>
<li>
<p>(2) Add annotation to say that this method return a new Bean Spring</p>
</li>
<li>
<p>(3) Then, tell Spring that here we need here a <strong>GreetingService</strong> component, by declaring it as a method argument</p>
</li>
<li>
<p>(4) Finally, call here some service method to output the "Hello, Spring!" message at startup; since we\u2019re getting <strong>GreetingService</strong>, no need to instantiate one manually</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Starting your application, you should see something like:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451367.5786">2023-08-23T19:59:02.183+02:00  INFO 152677 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2023-08-23T19:59:02.210+02:00  INFO 152677 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8085 (http) with context path &#x27;&#x27;
2023-08-23T19:59:02.219+02:00  INFO 152677 --- [  restartedMain] c.e.spring.automacorp.AutomacorpApplication  : Started AutomacorpApplication in 1.825 seconds (process running for 2.506)
Hello, Spring!</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451367.5786')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_other_cases">Other cases</h3>
<div class="paragraph">
<p>Now, we\u2019re going to test a few cases to understand how a Spring Application reacts to some situations. For each case, try the suggested modifications, restart your application and see what happens.</p>
</div>
<div class="paragraph">
<p>Of course, after each case, revert those changes, to get "back to normal". (You can use Git for that)</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>What happens if you comment the @Component / @Service annotation on your <em>ConsoleGreetingService</em>?</p>
</li>
<li>
<p>Now, try adding <code>AnotherConsoleGreetingService</code> (which says "Bonjour" instead of "Hello"), marked as a component as well. Try again this time after adding a <strong>@Primary</strong> annotation on <code>ConsoleGreetingService</code>.</p>
</li>
<li>
<p>Finally, try the following - what happens and why?</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451368.4663"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsoleGreetingService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GreetingService</span> {

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CycleService cycleService;

  <span class="hljs-meta">@Autowired</span>
  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConsoleGreetingService</span><span class="hljs-params">(CycleService cycleService)</span> {
    <span class="hljs-built_in">this</span>.cycleService = cycleService;
  }

  <span class="hljs-meta">@Override</span>
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">(String name)</span> {
    System.out.println(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;!&quot;</span>);
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451368.4663')">Copy</button></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451368.8293"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CycleService</span> {

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConsoleGreetingService consoleGreetingService;

  <span class="hljs-meta">@Autowired</span>
  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CycleService</span><span class="hljs-params">(ConsoleGreetingService consoleGreetingService)</span> {
    <span class="hljs-built_in">this</span>.consoleGreetingService = consoleGreetingService;
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451368.8293')">Copy</button></pre>
</div>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>@Primary is not the only way to resolve multiple candidates, you can also use @Qualifier; check its javadoc to see how you could use it.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>More information on @Primary <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation-primary">here</a>, and qualifiers <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation-qualifiers">here</a>.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Does Spring Framework be only Dependency Injection container? The answer is No.</p>
</div>
<div class="paragraph">
<p>It builds on the core concept of Dependeny Injection but comes with a number of other features (Web, Persistence, etc.) which bring simple abstractions.</p>
</div>
<div class="paragraph">
<p>Aim of these abstractions is to reduce Boilerplate Code and Duplication Code, promoting Loose Coupling of your application architecture.</p>
</div>
</div>
</div>`;var wf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_database">Database</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_java_api">Java API</a></li>
<li><a class="link" fragment="#_database_2">Database</a></li>
<li><a class="link" fragment="#_flask_database_and_sql"><span class="icon">[flask&#93;</span> Database and SQL</a></li>
</ul>
</li>
<li><a class="link" fragment="#_java_and_jdbc">Java and JDBC</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_open_a_connection">Open a connection</a></li>
<li><a class="link" fragment="#_execute_a_request">Execute a request</a></li>
<li><a class="link" fragment="#_transaction">Transaction</a></li>
</ul>
</li>
<li><a class="link" fragment="#_jpa">JPA</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_jpa_entity">JPA Entity</a></li>
<li><a class="link" fragment="#_entity_manager">Entity manager</a></li>
<li><a class="link" fragment="#_transaction_and_spring">Transaction and Spring</a></li>
<li><a class="link" fragment="#_schema_generation">Schema generation</a></li>
</ul>
</li>
<li><a class="link" fragment="#_jpa_and_association_mappings">JPA and association mappings</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_onetoone">@OneToOne</a></li>
<li><a class="link" fragment="#_onetomany">@OneToMany</a></li>
<li><a class="link" fragment="#_manytoone">@ManyToOne</a></li>
<li><a class="link" fragment="#_onetomany_manytoone">@OneToMany @ManyToOne</a></li>
<li><a class="link" fragment="#_manytomany">@ManyToMany</a></li>
<li><a class="link" fragment="#_fetching_strategy">Fetching Strategy</a></li>
</ul>
</li>
<li><a class="link" fragment="#_jpql">JPQL</a></li>
<li><a class="link" fragment="#_data_access_object_dao">Data Access Object (DAO)</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_spring_data_jpa">Spring Data JPA</a></li>
<li><a class="link" fragment="#_custom_dao">Custom DAO</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_jpa"><span class="icon">[flask&#93;</span> : JPA</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_entity_creation">Entity creation</a></li>
<li><a class="link" fragment="#_populate_data">Populate data</a></li>
<li><a class="link" fragment="#_dao_creation">Dao creation</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>How use a database in your project ? We will add <a href="https://docs.spring.io/spring-data/commons/docs/2.5.4/reference/html/#reference">Spring Data</a> in our project to automatically configure Hibernate as JPA implementation and a H2 database.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-data.png" alt="spring data" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_database">Database</h2>
<div class="sectionbody">
<div class="paragraph">
<p>An application needs access to data, write data, update these data &#8230;&#8203;</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/app-data.png" alt="app data" width="900">
</div>
</div>
<div class="paragraph">
<p>Today we can access a multitude of data sources &#8230;&#8203; and Spring will help us</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/app-data2.png" alt="app data2" width="900">
</div>
</div>
<div class="sect2">
<h3 id="_java_api">Java API</h3>
<div class="paragraph">
<p>Java language provides different API to communicate with a database</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>a low level standard : <strong>JDBC</strong> (Java Database Connectivity) to connect to a database and launch SQL requests</p>
</li>
<li>
<p>an API, <strong>JPA</strong> (Java Persistence API) to manage entities and relationships between them.</p>
</li>
<li>
<p>an API, <strong>JTA</strong> (Java Transaction API) to manage transactions</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_database_2">Database</h3>
<div class="paragraph">
<p>Each database editor provides its driver (a jar added to your project). A DBMS (DataBase Management System) helps to define, store, retrieve, and manage the data within a database.</p>
</div>
<div class="paragraph">
<p>For a relational database, the driver implements the JDBC API.</p>
</div>
<div class="paragraph">
<p>In our tests we will use a database written in Java, the H2 database</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/h2-logo.png" alt="h2 logo" width="150px">
</div>
</div>
<div class="paragraph">
<p>I choose this database for different reasons.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Open source, JDBC driver</p>
</li>
<li>
<p>Embedded database you can embed the database in your Spring application</p>
</li>
<li>
<p>In memory database (perfect for tests)</p>
</li>
<li>
<p>Browser based Console application</p>
</li>
<li>
<p>Small footprint</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_flask_database_and_sql"><span class="icon">[flask&#93;</span> Database and SQL</h3>
<div class="paragraph">
<p>Go in your <code>AutomacorpApplication</code>. We need to add new Spring Boot starters and the H2 driver in the declared dependencies.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912451311.9001">implementation(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;</span>) <span class="hljs-comment">// libs to use JPA in your project</span>
implementation(<span class="hljs-string">&quot;com.h2database:h2&quot;</span>) <span class="hljs-comment">// libs to use a H2 database</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451311.9001')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Check your <code>build.gradle.kts</code> file and update it. Reload your Gradle project to apply changes. You can use the button <span class="image"><img src="../../img/training/spring-data/refresh-gradle-btn1.png" alt="refresh gradle btn1" width="48"></span> displayed when your Gradle config is updated. Or you can use the button <span class="image"><img src="../../img/training/spring-data/refresh-gradle-btn2.png" alt="refresh gradle btn2" width="40"></span> displayed in the Gradle view.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-data/refresh-gradle.png" alt="refresh gradle">
</div>
</div>
<div class="paragraph">
<p>Spring Boot analyses jars defined in classpath and Spring is able to auto-configure features as the database, the H2 console&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Add some properties in file <code>src/main/resources/application.properties</code> to customize your H2 database (database will be recreated after each app reload)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-properties" id="1732912451313.8203"><span class="hljs-comment"># Spring boot : configure H2 datasource</span>
<span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:h2:mem:automacorp;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</span>
<span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">sa</span>
<span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string"></span>
<span class="hljs-attr">spring.datasource.driverClassName</span>=<span class="hljs-string">org.h2.Driver</span>
<span class="hljs-comment">
# Spring boot : activate H2 console</span>
<span class="hljs-attr">spring.h2.console.enabled</span>=<span class="hljs-string">true</span>
<span class="hljs-attr">spring.h2.console.path</span>=<span class="hljs-string">/console</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451313.8203')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>To verify that everything is fine, launch your app and open this URL in your browser: <a href="http://localhost:8080/console" class="bare">http://localhost:8080/console</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/spring-intro/h2-console0.png" alt="h2 console0" width="500">
</div>
</div>
<div class="paragraph">
<p><strong>Use JDBC URL, user, password defined in your @backtick@application.properties</strong> and click on <strong>Connect</strong> button.</p>
</div>
<div class="paragraph">
<p>You should access to the console</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/spring-intro/h2-console.png" alt="h2 console">
</div>
</div>
<div class="paragraph">
<p>You can execute several SQL orders</p>
</div>
<div class="ulist">
<ul>
<li>
<p>SQL order to create a table. Each table must have a primary key. In this example it will be the column id. We use  <code>auto_increment</code> option to let the database increment the id when a new line is inserted</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sql" id="1732912451315.2212"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> ROOM(ID <span class="hljs-type">BIGINT</span> auto_increment <span class="hljs-keyword">PRIMARY</span> KEY, NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451315.2212')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>SQL order to insert data in this table</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sql" id="1732912451316.0364"><span class="hljs-comment">-- Let the database generate an id (a positive value)</span>
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ROOM(NAME) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;Room1&#x27;</span>);
<span class="hljs-comment">-- You can force an id (we use here a negative value to be sure to not have a conflict with a generated value)</span>
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> ROOM(ID, NAME) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-10</span>, <span class="hljs-string">&#x27;Room2&#x27;</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451316.0364')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>SQL order to select these data</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sql" id="1732912451316.8176"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> ROOM;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451316.8176')">Copy</button></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_java_and_jdbc">Java and JDBC</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To understand the value of Spring and JPA, it is important to see the code that would have to be done if we wanted to directly use the JDBC API which is a low level API requiring a lot of code.</p>
</div>
<div class="sect2">
<h3 id="_open_a_connection">Open a connection</h3>
<div class="paragraph">
<p>This code open a database connection in Java with JDBC API</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><span class="hljs-keyword">try</span> {
  <span class="hljs-title class_">Class</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;org.h2.Drive&quot;</span>); <span class="hljs-comment">// (1)</span>
}
<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">ClassNotFoundException</span> e) {
  logger.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Unable to load JDBC Driver&quot;</span>, e);
}
<span class="hljs-keyword">try</span> {
  <span class="hljs-title class_">String</span> database_url = <span class="hljs-string">&quot;jdbc:h2:mem:bigcorp;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE&quot;</span>; <span class="hljs-comment">// (2)</span>
  <span class="hljs-title class_">Connection</span> connection = <span class="hljs-title class_">DriverManager</span>.<span class="hljs-title function_">getConnection</span>(database_url, username, password); <span class="hljs-comment">// (3)</span>
}
<span class="hljs-keyword">catch</span> (<span class="hljs-title class_">SQLException</span> e) {
  logger.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;Unable to connect to the database&quot;</span>, e);
}</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) Load JDBC driver (here H2 driver)</p>
</li>
<li>
<p>(2) We define the URL to access to the database (here we say that we use a H2 database in memory)<br></p>
</li>
<li>
<p>(3) Open a connection with username/password</p>
</li>
<li>
<p>(1) (2) (3) for each step we have to manage exceptions</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This operation is slow. If you have thousands connections on your app per second your application will fail.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/pool0.png" alt="pool0" width="850">
</div>
</div>
<div class="paragraph">
<p>To prevent this problem, we use a connection pool with pre-opened connections. Several connections are opened when the pool is launched.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/pool1.png" alt="pool1" width="850">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_execute_a_request">Execute a request</h3>
<div class="paragraph">
<p>With JDBC you need to write a lot of code when you want to execute a request. For example</p>
</div>
<div class="paragraph">
<p><strong>For an insert</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSite</span>(<span class="hljs-params">Site site</span>) {
    <span class="hljs-title function_">try</span>(<span class="hljs-params">Connection conn = dataSource.getConnection()</span>){
        <span class="hljs-title class_">String</span> sql = <span class="hljs-string">&quot;insert into SITE (id, name) values (?, ?)&quot;</span>;
        <span class="hljs-title function_">try</span>(<span class="hljs-params">PreparedStatement stmt = conn.prepareStatement(sql)</span>){
          stmt.<span class="hljs-title function_">setString</span>(<span class="hljs-number">1</span>, site.<span class="hljs-title function_">getId</span>());
          stmt.<span class="hljs-title function_">setString</span>(<span class="hljs-number">2</span>, site.<span class="hljs-title function_">getName</span>());
          stmt.<span class="hljs-title function_">executeUpdate</span>();
        }
    }
    <span class="hljs-keyword">catch</span>(<span class="hljs-title class_">SQLException</span> e) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseException</span>(<span class="hljs-string">&quot;Impossible to insert site &quot;</span> +
            site.<span class="hljs-title function_">getName</span>(), e);
    }
}</pre>
</div>
</div>
<div class="paragraph">
<p><strong>For a select</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight">public <span class="hljs-title class_">List</span>@<span class="hljs-title class_">LTSite</span>@<span class="hljs-variable constant_">GT</span> <span class="hljs-title function_">findAll</span>(<span class="hljs-params"></span>) {
    <span class="hljs-title class_">List</span>@<span class="hljs-title class_">LTSite</span>@<span class="hljs-variable constant_">GT</span> sites = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>@<span class="hljs-variable constant_">LT</span>@<span class="hljs-title function_">GT</span>();
    <span class="hljs-title function_">try</span>(<span class="hljs-params">Connection conn = dataSource.getConnection()</span>){
        <span class="hljs-title class_">String</span> sql = <span class="hljs-string">&quot;select id, name from SITE&quot;</span>;
        <span class="hljs-title function_">try</span>(<span class="hljs-params">PreparedStatement stmt = conn.prepareStatement(sql)</span>){
            <span class="hljs-keyword">try</span> (<span class="hljs-title class_">ResultSet</span> resultSet = stmt.<span class="hljs-title function_">executeQuery</span>()) {
                <span class="hljs-keyword">while</span>(resultSet.<span class="hljs-title function_">next</span>()) {
                    <span class="hljs-title class_">Site</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Site</span>(resultSet.<span class="hljs-title function_">getString</span>(<span class="hljs-string">&quot;name&quot;</span>));
                    s.<span class="hljs-title function_">setId</span>(resultSet.<span class="hljs-title function_">getString</span>(<span class="hljs-string">&quot;id&quot;</span>));
                    sites.<span class="hljs-title function_">add</span>(s);
                }
            }
        }
    }
    <span class="hljs-keyword">catch</span>(<span class="hljs-title class_">SQLException</span> e) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseException</span>(<span class="hljs-string">&quot;Impossible to read sites&quot;</span>, e);
    }
    <span class="hljs-keyword">return</span> sites;
}</pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>The code is heavy and difficult to read</p>
</li>
<li>
<p>We need to manipulate data types in SQL and in our Java entities</p>
</li>
<li>
<p>We manipulate SQL while we are in an object language</p>
</li>
<li>
<p>We would like to be more productive, simplified relationship management&#8230;&#8203;</p>
</li>
<li>
<p>What about transactions?</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_transaction">Transaction</h3>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/transaction1.png" alt="transaction1" width="850">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>What happens if a query fails, or if an exception occurs?</p>
</li>
<li>
<p>What happens if 2 requests run in parallel?</p>
</li>
<li>
<p>What happens if a request is too long?</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The solution is to work in a transaction. A database transaction symbolizes a unit of work performed within a database. A transaction generally represents any change in a database. Transactions have two main purposes:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>to provide reliable units of work that allow correct recovery from failures and keep a database consistent even in cases of system failure, when execution stops (completely or partially) and many operations upon a database remain uncompleted, with unclear status.</p>
</li>
<li>
<p>To provide isolation between concurrent accesses. If this isolation is not provided, data could be erroneous.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We can try to use a transaction in our code</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight">public <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSite</span>(<span class="hljs-params">Site site</span>) {
        <span class="hljs-title function_">try</span>(<span class="hljs-params">Connection conn = dataSource.getConnection()</span>){
            conn.<span class="hljs-title function_">setAutoCommit</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">// 1.</span>
            <span class="hljs-title class_">String</span> sql = <span class="hljs-string">&quot;insert into SITE (id, name) values (?, ?)&quot;</span>;

            <span class="hljs-title function_">try</span>(<span class="hljs-params">PreparedStatement stmt = conn.prepareStatement(sql)</span>){
                stmt.<span class="hljs-title function_">setString</span>(<span class="hljs-number">1</span>, site.<span class="hljs-title function_">getId</span>());
                stmt.<span class="hljs-title function_">setString</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;toto&quot;</span>);
                stmt.<span class="hljs-title function_">executeUpdate</span>();
                conn.<span class="hljs-title function_">commit</span>(); <span class="hljs-comment">// 2.</span>
            }
            <span class="hljs-keyword">catch</span>(<span class="hljs-title class_">SQLException</span> e) {
                conn.<span class="hljs-title function_">rollback</span>(); <span class="hljs-comment">// 3.</span>
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseException</span>(<span class="hljs-string">&quot;Impossible ins\xE9rer site &quot;</span> + site.<span class="hljs-title function_">getName</span>(), e);
            }
        }
        <span class="hljs-keyword">catch</span>(<span class="hljs-title class_">SQLException</span> e) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatabaseException</span>(<span class="hljs-string">&quot;Impossible ins\xE9rer site &quot;</span> + site.<span class="hljs-title function_">getName</span>(), e);
        }
    }</pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>autocommit</code> is sometimes the default value. We have to disabled it</p>
</li>
<li>
<p>If everything is OK a <strong>commit</strong> persist data</p>
</li>
<li>
<p>If we have an error everything is cancelled by a <strong>rollback</strong>.</p>
</li>
</ol>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/transaction2.png" alt="transaction2" width="850">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_jpa">JPA</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Java Persistence API (JPA) is a Java application programming interface specification that describes the management of relational data in applications using Java Platform, Standard Edition and Java Platform, Enterprise Edition.</p>
</div>
<div class="paragraph">
<p><a href="http://hibernate.org/orm/">Hibernate ORM</a> is the JPA implementation that we\u2019re going to use in this lab. we will use Hibernate via <a href="https://projects.spring.io/spring-data-jpa/">Spring Data JPA</a></p>
</div>
<div class="paragraph">
<p>We\u2019re going to use <a href="https://projects.spring.io/spring-data-jpa/">Spring Data JPA</a> to store and retrieve data in our relational database.</p>
</div>
<div class="paragraph">
<p>With Persistence API/Framework, the approach is to :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>work with Java objects (Java entities) and not with database tables</p>
</li>
<li>
<p>add annotations to map entity properties to table columns</p>
</li>
<li>
<p>generate common database request (Create, Update, Delete, Read)</p>
</li>
<li>
<p>fill the SQL imperfections: inheritance, relationships, customs types, validation</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Spring provides several sub projects to make database interactions easy</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/app-data3.png" alt="app data3" width="850">
</div>
</div>
<div class="paragraph">
<p>&#160;</p>
</div>
<div class="paragraph">
<p>Do not confuse <a href="https://projects.spring.io/spring-data/">Spring Data</a> with <a href="https://projects.spring.io/spring-data-jpa/">Spring Data JPA</a>. We can read on in the offical doc that</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>"Spring Data\u2019s mission is to provide a familiar and consistent, Spring-based programming model for data access while still retaining the special traits of the underlying data store. It makes it easy to use data access technologies, relational and non-relational databases, map-reduce frameworks, and cloud-based data services. This is an umbrella project which contains many subprojects that are specific to a given database [\u2026\u200B]</p>
</div>
</blockquote>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Spring Data JPA is part of Spring Data, lets implement JPA based repositories. It makes it easier to build Spring-powered applications that use data access technologies."</p>
</div>
</blockquote>
</div>
<div class="sect2">
<h3 id="_jpa_entity">JPA Entity</h3>
<div class="paragraph">
<p>Object relation mapping (ORM) is one of the main feature in the JPA specification. The ORM layer (Hibernate) performs the translation of the app model objects into a relational database. For that we just have to use different JPA annotations on our entity objects.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s take the example of a Java class named <strong>Sensor</strong> and see how to use JPA to bind it to the SP_SENSOR table of our database.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451322.1877"><span class="hljs-keyword">import</span> jakarta.persistence.*;

<span class="hljs-meta">@Entity</span> <span class="hljs-comment">// (1).</span>
<span class="hljs-meta">@Table(name = &quot;SP_SENSOR&quot;)</span> <span class="hljs-comment">// (2).</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorEntity</span> {
    <span class="hljs-meta">@Id</span> <span class="hljs-comment">// (3).</span>
    <span class="hljs-meta">@GeneratedValue</span>
    <span class="hljs-keyword">private</span> Long id;

    <span class="hljs-meta">@Column(nullable=false, length=255)</span>  <span class="hljs-comment">// (4).</span>
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@Column(name = &quot;sensor_value&quot;)</span> <span class="hljs-comment">// (5)</span>
    <span class="hljs-keyword">private</span> Double value;

    <span class="hljs-meta">@Column(name = &quot;sensor_type&quot;)</span> <span class="hljs-comment">// (5).</span>
    <span class="hljs-meta">@Enumerated(EnumType.STRING)</span> <span class="hljs-comment">// (6).</span>
    <span class="hljs-keyword">private</span> SensorType sensorType;

    <span class="hljs-meta">@Transient</span> <span class="hljs-comment">// (7).</span>
    <span class="hljs-keyword">private</span> Integer notImportant;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SensorEntity</span><span class="hljs-params">()</span> { <span class="hljs-comment">// (8).</span>
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SensorEntity</span><span class="hljs-params">(SensorType sensorType, String name)</span> { <span class="hljs-comment">// (9).</span>
        <span class="hljs-built_in">this</span>.name = name;
        <span class="hljs-built_in">this</span>.sensorType = sensorType;
    }

    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> { <span class="hljs-comment">// (10).</span>
        <span class="hljs-keyword">return</span> id;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> {
        <span class="hljs-built_in">this</span>.id = id;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> name;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> {
        <span class="hljs-built_in">this</span>.name = name;
    }

    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> value;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Double value)</span> {
        <span class="hljs-built_in">this</span>.value = value;
    }

    <span class="hljs-keyword">public</span> SensorType <span class="hljs-title function_">getSensorType</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> sensorType;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSensorType</span><span class="hljs-params">(SensorType sensorType)</span> {
        <span class="hljs-built_in">this</span>.sensorType = sensorType;
    }

    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getNotImportant</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> notImportant;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNotImportant</span><span class="hljs-params">(Integer notImportant)</span> {
        <span class="hljs-built_in">this</span>.notImportant = notImportant;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451322.1877')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) <strong>@Entity</strong> indicates that this class is an entity managed by Hibernate</p>
</li>
<li>
<p>(2) <strong>@Table(name = "SP_SENSOR")</strong> you can customize the table name (optional) if this annotation is not present, the table name will be the entity name</p>
</li>
<li>
<p>(3) <strong>@Id</strong> you have always an id annotated with <code>@jakarta.persistence.Id</code> (auto generated in this example). This ID is immutable (as the primary key in the database)</p>
</li>
<li>
<p>(4) <strong>@Column</strong> by default, each property is mapped to a column. You can customize the nullability or the column name.</p>
</li>
<li>
<p>(5) You can personalize the column used in the database to store the data</p>
</li>
<li>
<p>(6) <strong>@Enumerated(EnumType.STRING)</strong> Java enum persisted as a String (choose always EnumType.STRING)</p>
</li>
<li>
<p>(7) If a property should not be persisted, use <strong>@Transient</strong></p>
</li>
<li>
<p>(8) an entity <strong>must have an empty constructor</strong> (public or protected).<br>
<span class="small  small-block">An empty constructor is needed to create a new instance via reflection (using <code>Class@LTT@GT.newInstance()</code>) by Hibernate which has to instantiate your Entity dynamically. If you don\u2019t provide any additional constructors with arguments for the class, you don\u2019t need to provide an empty constructor because you get one per default. Java always gives you a default invisible empty constructor. If an argument constructor is provided in your class, then jvm will not add the no-argument constructor.</span></p>
</li>
<li>
<p>(9) you can add (and you should) a constructor to build an object with all required properties</p>
</li>
<li>
<p>(10) you have to define a getter and a setter for each property</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_entity_manager">Entity manager</h3>
<div class="paragraph">
<p>When your app need to launch a query, it will call an <a href="https://docs.jboss.org/hibernate/orm/6.2/userguide/html_single/Hibernate_User_Guide.html#architecture">EntityManager</a> to execute it</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/em.png" alt="em" width="800">
</div>
</div>
<div class="paragraph">
<p>Entities managed by Hibernate have a life-cycle associated with them. Either you can create a new object and save it into the database or your can fetch the data from the database.</p>
</div>
<div class="paragraph">
<p>Entities go through several stages in the life-cycle.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/lifecycle.png" alt="lifecycle" width="800">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Transient Objects</strong>: Transient objects are non transactional and in fact Hibernate has no knowledge of these objects</p>
</li>
<li>
<p><strong>Persistent Objects</strong>: Persistent entity has a valid database identity associated with.</p>
</li>
<li>
<p><strong>Removed Object</strong>: An object scheduled for deletion either by calling delete or because of orphan deletion of entities.</p>
</li>
<li>
<p><strong>Detached Object</strong>: The object in persistent state go into detached state after the persistent context is closed. Detached objects can be brought into other persistent context by reattachment or merging. Detached object still has a valid primary key attribute but it is no longer managed by Hibernate.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We have different operations to several stages in the life-cycle.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>persist()</strong>  makes a persistent entity. It will be written in the database at the next commit of the transaction we are in..</p>
</li>
<li>
<p><strong>remove()</strong>: inverse of persist(). It will be erased from the database at the next commit of the transaction we are in.</p>
</li>
<li>
<p><strong>refresh()</strong>: synchronizes the state of an entity to its database state. If the fields of an entity have been updated in the current transaction, these changes will be canceled. This operation only applies to persistent entities (otherwise we have an IllegalArgumentException)</p>
</li>
<li>
<p><strong>detach()</strong>: detaches an entity from  entity manager. This entity will not be taken into account during the next commit of the transaction in which we are</p>
</li>
<li>
<p><strong>merge()</strong>: attach an entity to the current entity manager. This is used to associate an entity with another entity manager than the one that was used to create or read it.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_transaction_and_spring">Transaction and Spring</h3>
<div class="paragraph">
<p>We must work in transactions to ensure data integrity. When you use Spring, Transactional policy is managed by Spring with <strong>@Transactional</strong> annotation. For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451323.3066"><span class="hljs-meta">@Service</span>
<span class="hljs-meta">@Transactional</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SiteServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SiteService</span> {

    <span class="hljs-keyword">public</span> Site <span class="hljs-title function_">addSite</span><span class="hljs-params">(String name)</span>{
        <span class="hljs-type">Site</span> <span class="hljs-variable">site</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Site</span>(name);
        site.addSensor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Sensor</span>(<span class="hljs-string">&quot;default&quot;</span>, site)
                               .withPowerSource(PowerSource.FIXED)
                               .withDefaultPowerInWatt(<span class="hljs-number">1_000_000</span>));
        siteDao.save(site);
        <span class="hljs-keyword">return</span> site;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451323.3066')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Your services, your components must use a <strong>@Transactional</strong> annotation to work in a transaction.</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>Hibernate stores everything read from the database in a first-level cache. This cache is linked to the current transaction.</p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>At the end of the transaction, Hibernate will launch a flush() of this cache</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Calculation of the modifications of the objects contained in this cache</p>
</li>
<li>
<p>Execution of all requests as a result</p>
</li>
<li>
<p>Launching commit() if everything is OK or rollback()</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>With the first level of cache, if you execute twice a <code>find()</code> on the same instance, it will only be loaded once</p>
</div>
</div>
<div class="sect2">
<h3 id="_schema_generation">Schema generation</h3>
<div class="paragraph">
<p>Hibernate (JPA implementation) is able to parse yours entities to generate your database schema.It&#8217;s very useful when you develop an app.</p>
</div>
<div class="paragraph">
<p>In Spring you just have to add some properties in <code>application.properties</code> file.</p>
</div>
<div class="paragraph">
<p>Update the file <code>application.properties</code> and add these keys</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451323.519"># Spring boot : JPA
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.generate-ddl=<span class="hljs-literal">true</span>
spring.jpa.show_sql=<span class="hljs-literal">true</span>
spring.jpa.defer-datasource-initialization=<span class="hljs-literal">true</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451323.519')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>H2Dialect gives information to Hibernate for native SQL</p>
</li>
<li>
<p><strong>generate-ddl</strong> allows you to auto generate the schema (tables, constraints) from your Java data model (false if you do not want to do anything)</p>
</li>
<li>
<p><strong>show_sql</strong> displays queries in the logs (usefull in development)</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_jpa_and_association_mappings">JPA and association mappings</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Association mappings are one of the key features of JPA and Hibernate.
They define the relationship between the database tables and the attributes in your Entity.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/relationship.png" alt="relationship" width="800">
</div>
</div>
<div class="paragraph">
<p>An association between JPA entities, can be unidirectional or bidirectional.
In this second case, one of the two entities must be the parent (the main entity) and the other the child.</p>
</div>
<div class="paragraph">
<p>It defines in which direction you can use the association.</p>
</div>
<div class="sect2">
<h3 id="_onetoone">@OneToOne</h3>
<div class="paragraph">
<p>Example of <strong>unidirectional association</strong>: a city has a mayor but the mayor does not know his city</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/relationship_1to1_uni.png" alt="relationship 1to1 uni" width="200">
</div>
</div>
<div class="paragraph">
<p>A column <strong>mayor_id</strong> will be added in the table <strong>City</strong> and a foreign key will be created</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451323.6929"><span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mayor</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-comment">//...</span>
}


<span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">City</span> {
     <span class="hljs-meta">@Id</span>
     <span class="hljs-keyword">private</span> Long id;
     <span class="hljs-keyword">private</span> String name;
     <span class="hljs-meta">@OneToOne</span>
     <span class="hljs-keyword">private</span> Mayor mayor;

     <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451323.6929')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Example of <strong>bidirectional</strong> association: a city has a mayor and the mayor now knows his city</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/relationship_1to1_bi.png" alt="relationship 1to1 bi" width="200">
</div>
</div>
<div class="paragraph">
<p>We can' t add a column <code><strong>mayor_id</strong></code> in the <code><strong>City</strong></code> table and a column <code><strong>city_id</strong></code> in the <code><strong>Mayor</strong></code> table because of the cycle.</p>
</div>
<div class="paragraph">
<p>In Hibernate entity model, we have to use a <code>mappedBy</code> to define the field that owns the relationship. This element is only specified on the inverse (non-owning) side of the association.</p>
</div>
<div class="paragraph">
<p>For example the mappedBy can be defined on the OneToOne defined in the mayor entity</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451323.6135"><span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">City</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@OneToOne</span>
    <span class="hljs-keyword">private</span> Mayor mayor;

    <span class="hljs-comment">// ...</span>
}

<span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mayor</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@OneToOne(mappedBy = &quot;mayor&quot;)</span>
    <span class="hljs-keyword">private</span> City city;

    <span class="hljs-comment">//...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451323.6135')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>With this code a column <strong>mayor_id</strong> will be added in the <code><strong>City</strong></code> table and a foreign key will be created. <strong>Mayor</strong> table won&#8217;t have a reference to the city table.</p>
</div>
<div class="paragraph">
<p><strong>mappedby</strong> tells hibernate not to map this field because it&#8217;s already mapped by this field [here property mayor in City entity].</p>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>If you forget to define a parent and a child in the association (no association with a mappedBy), you will have a mayor_id reference in the City table and a city_id reference in the Mayor table with 2 constraints.
In this case, you will not be able to delete a row because you will always have a constraint error.</p>
</div>
</blockquote>
</div>
</div>
<div class="sect2">
<h3 id="_onetomany">@OneToMany</h3>
<div class="paragraph">
<p>Example of <strong>unidirectional</strong> association: a site has one or more sensors (sensor does not link to a site)</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/relationship_1ton_uni.png" alt="relationship 1ton uni" width="200">
</div>
</div>
<div class="paragraph">
<p>A join table is added (with 2 foreign keys)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451324.939"><span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sensor</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

     <span class="hljs-comment">// ...</span>
}

<span class="hljs-meta">@Entity()</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Site</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@OneToMany</span>
    <span class="hljs-keyword">private</span> Set<span class="hljs-meta">@LTSensor</span><span class="hljs-meta">@GT</span> sensors = Set.of();

    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451324.939')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_manytoone">@ManyToOne</h3>
<div class="paragraph">
<p>Example of <strong>unidirectional</strong> association: a measurement is linked to a sensor and the sensor does not have the measurement list</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/relationship_nto1_uni.png" alt="relationship nto1 uni" width="230">
</div>
</div>
<div class="paragraph">
<p>A <strong>sensor_id</strong> column will be added to the <strong>Measurement</strong> table and a foreign key will be created</p>
</div>
<div class="listingblock langage-small">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451324.6816"><span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sensor</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-comment">// ...</span>
}

<span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Measurement</span> {

    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;

    <span class="hljs-meta">@ManyToOne(optional = false)</span>
    <span class="hljs-keyword">private</span> Sensor sensor;

    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451324.6816')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_onetomany_manytoone">@OneToMany @ManyToOne</h3>
<div class="paragraph">
<p>Example of <strong>bidirectional</strong> association: a sensor has n measures and measure knows its sensor</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/relationship_1ton_nto1_bi.png" alt="relationship 1ton nto1 bi" width="200">
</div>
</div>
<div class="paragraph">
<p><strong>@ManyToOne ha nos property <code>mappedBy</code>.
So you can&#8217;t make a mistake, add this <code>mappedBy</code> property on @OneToMany</strong> (which is used to designate the parent)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451324.6924"><span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Measure</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@ManyToOne</span>
    <span class="hljs-keyword">private</span> Sensor sensor;
}

<span class="hljs-meta">@Entity()</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sensor</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@OneToMany(mappedBy = &quot;sensor&quot;)</span>
    <span class="hljs-keyword">private</span> Set<span class="hljs-meta">@LTMeasure</span><span class="hljs-meta">@GT</span> measures = Set.of();
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451324.6924')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If you forget the mapped <code>mappedBy</code> property on the @OneToMany* you will have an unexpected join table betwwen the sensor and the measure.</p>
</div>
</div>
<div class="sect2">
<h3 id="_manytomany">@ManyToMany</h3>
<div class="paragraph">
<p>Example of <strong>unidirectional</strong> association: a musician plays several instruments (instrument does not know who uses it)</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/relationship_nton_uni.png" alt="relationship nton uni" width="200">
</div>
</div>
<div class="paragraph">
<p>A join table is added (with 2 foreign keys)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451324.5242"><span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Instrument</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

     <span class="hljs-comment">// ...</span>
}

<span class="hljs-meta">@Entity()</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Musician</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@ManyToMany</span>
    <span class="hljs-keyword">private</span> Set<span class="hljs-meta">@LTInstrument</span><span class="hljs-meta">@GT</span> instruments;

    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451324.5242')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Example <strong>bidirectional</strong> association: a musician plays several instruments (instrument knows that they play musicians)</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/relationship_nton_bi.png" alt="relationship nton bi" width="200">
</div>
</div>
<div class="paragraph">
<p>A join table is always present (with 2 foreign keys) but we must define the <code>mappedBy</code> property on one entity</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451325.6763"><span class="hljs-comment">// Child</span>
<span class="hljs-meta">@Entity</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Instrument</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@ManyToMany</span>
    <span class="hljs-keyword">private</span> Set<span class="hljs-meta">@LTMusician</span><span class="hljs-meta">@GT</span> musicians;
     <span class="hljs-comment">// ...</span>
}

<span class="hljs-comment">// Parent</span>
<span class="hljs-meta">@Entity()</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Musician</span> {
    <span class="hljs-meta">@Id</span>
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-meta">@ManyToMany(mappedBy=&quot;musicians&quot;)</span>
    <span class="hljs-keyword">private</span> Set<span class="hljs-meta">@LTInstrument</span><span class="hljs-meta">@GT</span> instruments;

    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451325.6763')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_fetching_strategy">Fetching Strategy</h3>
<div class="paragraph">
<p>The fetching strategy allows you to specify the loading strategy.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>LAZY</strong> the value is loaded only when it is used  (default)</p>
</li>
<li>
<p><strong>EAGER</strong> the value is always loaded</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight">@<span class="hljs-title class_">OneToMany</span>(fetch = <span class="hljs-title class_">FetchType</span>.<span class="hljs-property">EAGER</span>)
private <span class="hljs-title class_">Set</span>@<span class="hljs-title class_">LTSensor</span>@<span class="hljs-variable constant_">GT</span> sensors = <span class="hljs-title class_">Set</span>.<span class="hljs-title function_">of</span>();</pre>
</div>
</div>
<div class="paragraph">
<p>By default, we are in Lazy mode because the goal is to load the minimum of things.  If you navigate in your object and if relations are set in Lazy mode, you have 2 cases</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You are attached to a persistence context : one or more queries are started to load the missing data</p>
</li>
<li>
<p>You are not attached to a persistence context: a LazyInitializationException is launched</p>
</li>
</ul>
</div>
<div class="listingblock langage-small">
<div class="content">
<pre class="highlight">org.<span class="hljs-property">hibernate</span>.<span class="hljs-property">LazyInitializationException</span>: could not initialize proxy</pre>
</div>
</div>
<div class="paragraph">
<p>If you have to serialize your object or send it to another layer, you have to use DTO. We will see that later</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_jpql">JPQL</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With JPA we don&#8217;t write SQL but <a href="https://docs.oracle.com/html/E13946_04/ejb3_langref.html">JPQL</a> (Java Persistence Query Language). <strong>We don&#8217;t use the column names but we use the JPA entities</strong> in.</p>
</div>
<div class="paragraph">
<p>In SQL we select a list of columns belonging to one or more tables. In JPQL we select an entity.</p>
</div>
<div class="listingblock langage-small">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451325.4019"><span class="hljs-comment">// Selection sensors</span>
select c from SensorEntity c

<span class="hljs-comment">// Selection sites linked to a sensor</span>
select c.site from SensorEntity c</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451325.4019')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can use implicit join</p>
</div>
<div class="listingblock langage-small">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451325.8606">select c from SensorEntity c where c.site.id = :siteId</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451325.8606')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Or you can use explicit join</p>
</div>
<div class="listingblock langage-small">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451326.6748">select c from SensorEntity c join c.site s where s.id = :siteId
select c from SensorEntity c left join c.site s where s.id = :siteId</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451326.6748')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_data_access_object_dao">Data Access Object (DAO)</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A DAO (Data Access Object) lets you persist your Entities. The DAO is basically an object or an interface that provides access to an underlying database or any other persistence storage.</p>
</div>
<div class="paragraph">
<p>That definition from <a href="http://en.wikipedia.org/wiki/Data_access_object">Wikipedia</a></p>
</div>
<div class="paragraph">
<p>An example of Spring Data Jpa repository (DAO)</p>
</div>
<div class="listingblock langage-small">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451326.4546"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SensorDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span><span class="hljs-meta">@LTSensorEntity</span>, Long<span class="hljs-meta">@GT</span> {
    <span class="hljs-meta">@Query(&quot;select c from SensorEntity c where c.name=:name&quot;)</span>
    SensorEntity <span class="hljs-title function_">findByName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451326.4546')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories"><strong>JpaRepository</strong></a> is a Spring Data interface, which provides common methods such as <strong>findOne</strong>, <strong>save</strong>, <strong>delete</strong> and more. This example will handle Sensors entities, and those are identified by an Id of type Long (generics type used in JpaRepository).</p>
</div>
<div class="paragraph">
<p>With Spring Data, you write an interface with the expected annotations and the library will generate the implementation for you, when the code is compiled.</p>
</div>
<div class="sect2">
<h3 id="_spring_data_jpa">Spring Data JPA</h3>
<div class="paragraph">
<p>With Spring Data Jpa, if you respect conventions you don&#8217;t need to create a DAO implementation</p>
</div>
<div class="listingblock langage-small">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451326.6882"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SensorDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span><span class="hljs-meta">@LTSensorEntity</span>, Long<span class="hljs-meta">@GT</span> {

    List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findBySiteId(Long siteId); <span class="hljs-comment">// (1).</span>

    <span class="hljs-meta">@Query(&quot;select c from SensorEntity c where c.name=:name&quot;)</span>  <span class="hljs-comment">// (2)</span>
    Sensor <span class="hljs-title function_">findByName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String name)</span>;

    <span class="hljs-meta">@Modifying</span> <span class="hljs-comment">// (3)</span>
    <span class="hljs-meta">@Query(&quot;delete from SensorEntity c where c.name = ?1&quot;)</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByName</span><span class="hljs-params">(String name)</span>;
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451326.6882')">Copy</button></pre>
</div>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>findBy</strong> pattern allows to execute a query and return an occurrence or an occurrence list</p>
</li>
<li>
<p><strong>@Query</strong> helps to execute a JPQL query. Here we use a named parameter called name.</p>
</li>
<li>
<p>Another example with an update. In this case, you must use an <strong>@Modifying</strong> annotation</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>If a method starts by <code>findBy</code>, <code>findDistinctBy</code>, <code>countBy</code>, &#8230;&#8203;</p>
</div>
<div class="ulist">
<ul>
<li>
<p>You can after add a property</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451326.1306">List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findByName(String name);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451326.1306')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>You can add a property of a property</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451326.345">List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findBySiteId(String siteId);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451326.345')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>You can cumulate criteria</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451326.771">List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findByNameAndSiteId(String name, String siteId);
List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findByNameOrSiteId(String name, String siteId);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451326.771')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>You can ignore upper or lower case</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451326.0452">List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findByNameIgnoreCase(String name);
List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findByNameAndSiteIdAllIgnoreCase(String name, String siteId);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451326.0452')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>You can sort data</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451327.5925">List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findByNameOrderByNameAsc(String name);
List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findByNameOrderByNameDesc(String name);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451327.5925')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>You can select only one element (if you have for example an unicity constraint). But in this case if several elements are found an exception is thrown</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451327.687">SensorEntity <span class="hljs-title function_">findByName</span><span class="hljs-params">(String name)</span>;</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451327.687')">Copy</button></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>For more informations read <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.details">the documentation</a> to know more things</p>
</div>
</div>
<div class="sect2">
<h3 id="_custom_dao">Custom DAO</h3>
<div class="paragraph">
<p>If you need to create your own queries, you have to create a new interface</p>
</div>
<div class="listingblock langage-verysmall">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451327.8723"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SensorCustomDao</span> {
    List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findBySiteText(String searchText);
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451327.8723')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You need to update the main interface. In our code we will always inject a <strong>SensorDao</strong>. This Dao will have all JpaRepository methods and all your custom queries.</p>
</div>
<div class="listingblock langage-verysmall">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451327.937"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SensorDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span><span class="hljs-meta">@LTSensorEntity</span>, String<span class="hljs-meta">@GT</span>, SensorCustomDao {
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451327.937')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Implement your <code>SensorCustomDao</code> and use entitiy manager to execute requests</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451327.9785"><span class="hljs-meta">@Repository</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorCustomDaoImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SensorCustomDao</span> {

    <span class="hljs-meta">@PersistenceContext</span>
    <span class="hljs-keyword">private</span> EntityManager em;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> List<span class="hljs-meta">@LTSensorEntity</span><span class="hljs-meta">@GT</span> findBySiteText(String searchText) {
        <span class="hljs-keyword">return</span> em.createQuery(<span class="hljs-string">&quot;select c from SensorEntity c inner join c.site s where lover(s.name) like :searchText&quot;</span>,
                              SensorEntity.class)
                 .setParameter(<span class="hljs-string">&quot;searchText&quot;</span>, <span class="hljs-string">&quot;%&quot;</span> + searchText.toLowerCase() + <span class="hljs-string">&quot;%&quot;</span>)
                 .getResultList();
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451327.9785')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_jpa"><span class="icon">[flask&#93;</span> : JPA</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It&#8217;s time for you to create a real application that can manage sensors in a building. The management of sanitary conditions, user comfort and energy efficiency require concurrent management of window openings in the buildings of the \xC9cole des Mines.</p>
</div>
<div class="paragraph">
<p>It is necessary to ventilate as much as possible to limit air pollution, but with the approach of winter it will become important to heat buildings to ensure the comfort of users.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/tp.png" alt="tp" width="700">
</div>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>We will now create an application which will able to manage the building windows.<br>
- the building has an outside temperature, and rooms<br>
- each room has zero or more heaters, has zero or more windows, a name, a floor, a current temperature, a target temperature.<br>
- each heater has a name, an <code>on</code> or <code>off</code> status, possibly a power.<br>
- each window has a name, an a status <code>open</code> or <code>closed</code></p>
</div>
</blockquote>
</div>
<div class="paragraph">
<p>The heater status, the window status and the temperature are measured by external sensors.</p>
</div>
<div class="sect2">
<h3 id="_entity_creation">Entity creation</h3>
<div class="sect3">
<h4 id="_sensor_entity">Sensor entity</h4>
<div class="paragraph">
<p>The <code>SensorEntity</code> entity was given <a href="https://dev-mind.fr/training/spring/spring-data.html#_jpa_entity">higher</a> on the page. You can remove the <code>notImportant</code> property</p>
</div>
<div class="paragraph">
<p>Create a Java enum called <code>SensorType</code> in package <code>com.emse.spring.automacorp.model</code> to define the type of the sensor.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451327.0056"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SensorType</span> { TEMPERATURE, POWER, STATUS }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451327.0056')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_window_entity">Window entity</h4>
<div class="paragraph">
<p>Create an Entity called <code>WindowEntity</code> in package <code>com.emse.spring.automacorp.model</code> (an entity is a class). You have to use the JPA annotations seen previously.</p>
</div>
<div class="paragraph">
<p>You can copy this code. For the moment this entity has no property room because this entity will be created later.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451328.1653"><span class="hljs-comment">// (1)</span>
<span class="hljs-comment">// (2)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowEntity</span> {
    <span class="hljs-comment">// (3)</span>
    <span class="hljs-keyword">private</span> Long id;

    <span class="hljs-comment">// (4)</span>
    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-comment">// (5)</span>
    <span class="hljs-keyword">private</span> SensorEntity windowStatus;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WindowEntity</span><span class="hljs-params">()</span> {
    }

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WindowEntity</span><span class="hljs-params">(String name, SensorEntity sensor)</span> {
        <span class="hljs-built_in">this</span>.windowStatus = sensor;
        <span class="hljs-built_in">this</span>.name = name;
    }

    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> {
        <span class="hljs-built_in">this</span>.id = id;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> name;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> {
        <span class="hljs-built_in">this</span>.name = name;
    }

    <span class="hljs-keyword">public</span> Sensor <span class="hljs-title function_">getWindowStatus</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> windowStatus;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWindowStatus</span><span class="hljs-params">(Sensor windowStatus)</span> {
        <span class="hljs-built_in">this</span>.windowStatus = windowStatus;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451328.1653')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Use the good annotations to</p>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) Mark this class as a JPA entity</p>
</li>
<li>
<p>(2) Give a different name for your table &#8658; SP_WINDOW</p>
</li>
<li>
<p>(3) Declare this field as the table ID. This ID must to be auto generated</p>
</li>
<li>
<p>(4) This field must be not nullable</p>
</li>
<li>
<p>(5) The <code>windowStatus</code> is a SensorEntity. You need to use the good annotation to define the unidirectional association. This field must be not nullable</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For the moment this entity has no property room because this entity will be created later.</p>
</div>
<div class="paragraph">
<p>You can start your application. If you updated your configuration (see this <a href="spring-data.html#_schema_generation">chapter</a>) you should see in your app logs</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Hibernate: drop table if exists sp_sensor cascade
Hibernate: drop table if exists sp_window cascade
Hibernate: drop sequence if exists sp_sensor_seq
Hibernate: drop sequence if exists sp_window_seq
Hibernate: create sequence sp_sensor_seq start with 1 increment by 50
Hibernate: create sequence sp_window_seq start with 1 increment by 50
Hibernate: create table sp_sensor (sensor_value float(53), id bigint not null, name varchar(255) not null, sensor_type varchar(255) check (sensor_type in ('TEMPERATURE','POWER','STATUS')), primary key (id))
Hibernate: create table sp_window (id bigint not null, window_status_id bigint not null, name varchar(255) not null, primary key (id))
Hibernate: alter table if exists sp_window add constraint FKqdj6jbtn59whbpgt93n927yjn foreign key (window_status_id) references sp_sensor</pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_room_entity">Room entity</h4>
<div class="paragraph">
<p>Create the <strong>RoomEntity</strong> entity with</p>
</div>
<div class="ulist">
<ul>
<li>
<p>an auto generated id</p>
</li>
<li>
<p>a non nullable floor (Integer)</p>
</li>
<li>
<p>a non nullable String name</p>
</li>
<li>
<p>a current temperature (SensorEntity) the current temperature is measured by a sensor</p>
</li>
<li>
<p>a target temperature (Double)</p>
</li>
<li>
<p>a list of windows. You have to define a bidirectional association between <code>RoomEntity</code> and <code>WindowEntity</code> : update the <code>Window</code> entity constructor to always send the room when a room is created, ie add an argument <code>RoomEntity</code> in the <code>WindowEntity</code> constructor</p>
</li>
<li>
<p>create a constructor with non nullable fields and a default constructor</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can relaunch your application.</p>
</div>
<div class="paragraph">
<p>Open your H2 console you should see</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-data/console-example.png" alt="console example" width="400">
</div>
</div>
<div class="paragraph">
<p><em>If you more tables you forgot to declare a bidirectional association&#8230;&#8203;</em></p>
</div>
</div>
<div class="sect3">
<h4 id="_other_entities">Other entities</h4>
<div class="paragraph">
<p>You can continue the different exercises. If you choose to follow the given subject for your final project and evaluation, you will have to implement later:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the <code>HeaterEntity</code> entity with</p>
<div class="ulist">
<ul>
<li>
<p>an auto generated id</p>
</li>
<li>
<p>a non nullable String name</p>
</li>
<li>
<p>a non nullable room</p>
</li>
<li>
<p>a non nullable status. This field is a Sensor.</p>
</li>
<li>
<p>create a constructor with non nullable fields and a default constructor</p>
</li>
</ul>
</div>
</li>
<li>
<p>update the room entity to define a list of heaters. You have to define a bidirectional association between <code>RoomEntity</code> and <code>HeaterEntity</code> : update the <code>HeaterEntity</code> entity constructor to always send the room when a room is created, ie add an argument <code>RoomEntity</code> in the <code>HeaterEntity</code> constructor</p>
</li>
<li>
<p>the <code>BuildingEntity</code> entity. The building has an outside temperature (a SensorEntity), and rooms.</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_populate_data">Populate data</h3>
<div class="paragraph">
<p>We&#8217;re going to populate our database and insert data in tables. You can execute the script below in your H2 console, but data will be deleted on the next app reload. Fortunately Spring Boot offers a mechanism to populate a database at startup.</p>
</div>
<div class="paragraph">
<p>Create a file <code>data.sql</code> in <code>src/main/resources</code> next to <code>application.properties</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-sql" id="1732912451328.4404"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_SENSOR(id, name, sensor_value, sensor_type) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-10</span>, <span class="hljs-string">&#x27;Temperature room 2&#x27;</span>, <span class="hljs-number">21.3</span>, <span class="hljs-string">&#x27;TEMPERATURE&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_SENSOR(id, name, sensor_value, sensor_type) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-9</span>, <span class="hljs-string">&#x27;Window 1 status room 1&#x27;</span>, <span class="hljs-number">1.0</span>, <span class="hljs-string">&#x27;STATUS&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_SENSOR(id, name, sensor_value, sensor_type) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-8</span>, <span class="hljs-string">&#x27;Window 2 status room 1&#x27;</span>, <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;STATUS&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_SENSOR(id, name, sensor_value, sensor_type) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-7</span>, <span class="hljs-string">&#x27;Window 1 status room 2&#x27;</span>, <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;STATUS&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_SENSOR(id, name, sensor_value, sensor_type) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-6</span>, <span class="hljs-string">&#x27;Window 2 status room 2&#x27;</span>, <span class="hljs-number">0.0</span>, <span class="hljs-string">&#x27;STATUS&#x27;</span>);

<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_ROOM(id, name, floor) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-10</span>, <span class="hljs-string">&#x27;Room1&#x27;</span>, <span class="hljs-number">1</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_ROOM(id, name, floor, current_temperature_id, target_temperature) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-9</span>, <span class="hljs-string">&#x27;Room2&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">20.0</span>);

<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_WINDOW(id, window_status_id, name, room_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-10</span>, <span class="hljs-number">-9</span>, <span class="hljs-string">&#x27;Window 1&#x27;</span>, <span class="hljs-number">-10</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_WINDOW(id, window_status_id, name, room_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-9</span>, <span class="hljs-number">-8</span>, <span class="hljs-string">&#x27;Window 2&#x27;</span>, <span class="hljs-number">-10</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_WINDOW(id, window_status_id, name, room_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-8</span>, <span class="hljs-number">-7</span>, <span class="hljs-string">&#x27;Window 1&#x27;</span>, <span class="hljs-number">-9</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SP_WINDOW(id, window_status_id, name, room_id) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">-7</span>, <span class="hljs-number">-6</span>, <span class="hljs-string">&#x27;Window 2&#x27;</span>, <span class="hljs-number">-9</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451328.4404')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_dao_creation">Dao creation</h3>
<div class="sect3">
<h4 id="_simple_dao">Simple DAO</h4>
<div class="paragraph">
<p>Write now 3 <a href="spring-data.html#_data_access_object_dao">Spring data DAO</a> <code>SensorDao</code>, <code>WindowDao</code> and <code>RoomDao</code> in package <code>com.emse.spring.automacorp.dao</code> (interface that extends JpaRepository with the good types for entity and its id)</p>
</div>
<div class="paragraph">
<p>You&#8217;re going to write your own DAO methods (for specific requests), you have to create custom interfaces and implementations with your custom methods.</p>
</div>
<div class="paragraph">
<p>To check <code>WindowDao</code>, create a class <code>WindowDaoTest</code> in <strong>src/test/java/com.emse.spring.automacorp.dao</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451329.158"><span class="hljs-keyword">import</span> com.emse.spring.automacorp.model.Window;
<span class="hljs-keyword">import</span> com.emse.spring.automacorp.model.WindowStatus;
<span class="hljs-keyword">import</span> org.assertj.core.api.Assertions;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
<span class="hljs-keyword">import</span> org.springframework.test.context.junit.jupiter.SpringExtension;

<span class="hljs-meta">@DataJpaTest</span> <span class="hljs-comment">// (1)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowDaoTest</span> {
    <span class="hljs-meta">@Autowired</span> <span class="hljs-comment">// (2)</span>
    <span class="hljs-keyword">private</span> WindowDao windowDao;

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFindAWindowById</span><span class="hljs-params">()</span> {
        <span class="hljs-type">WindowEntity</span> <span class="hljs-variable">window</span> <span class="hljs-operator">=</span> windowDao.getReferenceById(-<span class="hljs-number">10L</span>); <span class="hljs-comment">// (3)</span>
        Assertions.assertThat(window.getName()).isEqualTo(<span class="hljs-string">&quot;Window 1&quot;</span>);
        Assertions.assertThat(window.getWindowStatus().getValue()).isEqualTo(<span class="hljs-number">1.0</span>);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451329.158')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) <code>DataJpaTest</code> is a SpringBoot annotation to help the DAO tests. This annotation initialize a in memory database and a Spring context with the objects needed for our tests</p>
</li>
<li>
<p>(2) With this initialization we can inject a Spring Bean, our DAO to test</p>
</li>
<li>
<p>(3) and we can call the DAO to interact with the database</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Execute your test. This test should be green.</p>
</div>
<div class="paragraph">
<p>You can write similar tests to test <strong>RoomDao</strong> and <strong>SensorDao</strong></p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="1000" height="500" src="https://www.youtube.com/embed/-BtxXL5bA8Q?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_custom_dao_2">Custom DAO</h4>
<div class="paragraph">
<p>Create your own interface <strong>WindowDaoCustom</strong> in package <code>com.emse.spring.automacorp.dao</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451329.7039"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WindowDaoCustom</span> {
    List<span class="hljs-meta">@LTWindowEntity</span><span class="hljs-meta">@GT</span> findRoomsWithOpenWindows(Long id);
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451329.7039')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Refactor your <strong>WindowDao</strong> interface : it must extend <strong>JpaRepository</strong> and <strong>WindowDaoCustom</strong></p>
</div>
<div class="paragraph">
<p>Create your own implementation of <strong>WindowDaoCustom</strong> with your custom methods and inject the EntityManager (JPA)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451330.2822"><span class="hljs-keyword">import</span> com.emse.spring.automacorp.model.Window;
<span class="hljs-keyword">import</span> jakarta.persistence.EntityManager;
<span class="hljs-keyword">import</span> jakarta.persistence.PersistenceContext;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowDaoCustomImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WindowDaoCustom</span> {
    <span class="hljs-meta">@PersistenceContext</span>
    <span class="hljs-keyword">private</span> EntityManager em;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> List<span class="hljs-meta">@LTWindowEntity</span><span class="hljs-meta">@GT</span> findRoomsWithOpenWindows(Long id) {
        <span class="hljs-type">String</span> <span class="hljs-variable">jpql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select w from Window w inner join w.windowStatus s &quot;</span> +
                <span class="hljs-string">&quot;where w.room.id = :id and s.value @GT 0.0 order by w.name&quot;</span>;
        <span class="hljs-keyword">return</span> em.createQuery(jpql, WindowEntity.class)
                .setParameter(<span class="hljs-string">&quot;id&quot;</span>, id)
                .getResultList();
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451330.2822')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You have to test your DAO. When Spring context is loaded, the database is populated with the file <code>data.sql</code> and we can test these values. For that update <code>WindowDaoTest</code> test and add these methods</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451330.6877"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFindRoomsWithOpenWindows</span><span class="hljs-params">()</span> {
    List<span class="hljs-meta">@LTWindowEntity</span><span class="hljs-meta">@GT</span> result = windowDao.findRoomsWithOpenWindows(-<span class="hljs-number">10L</span>);
    Assertions.assertThat(result)
              .hasSize(<span class="hljs-number">1</span>)
              .extracting(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>)
              .containsExactly(Tuple.tuple(-<span class="hljs-number">10L</span>, <span class="hljs-string">&quot;Window 1&quot;</span>));
}

<span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldNotFindRoomsWithOpenWindows</span><span class="hljs-params">()</span> {
    List<span class="hljs-meta">@LTWindowEntity</span><span class="hljs-meta">@GT</span> result = windowDao.findRoomsWithOpenWindows(-<span class="hljs-number">9L</span>);
    Assertions.assertThat(result).isEmpty();
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451330.6877')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You have to test and develop :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a custom DAO with a method to find all windows by room name</p>
</li>
<li>
<p>add a method in WindowDao to delete all windows in a room.</p>
</li>
<li>
<p>a method to close or open all windows in a room</p>
</li>
<li>
<p>you have to develop these methods and their tests</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>To check that window room are deleted you can add this test method in <strong>WindowDaoTest</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451330.384"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldDeleteWindowsRoom</span><span class="hljs-params">()</span> {
    <span class="hljs-type">RoomEntity</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> roomDao.getById(-<span class="hljs-number">10L</span>);
    List<span class="hljs-meta">@LTLong</span><span class="hljs-meta">@GT</span> roomIds = room.getWindows().stream().map(Window::getId).collect(Collectors.toList());
    Assertions.assertThat(roomIds).hasSize(<span class="hljs-number">2</span>);

    windowDao.deleteByRoom(-<span class="hljs-number">10L</span>);
    List<span class="hljs-meta">@LTWindowEntity</span><span class="hljs-meta">@GT</span> result = windowDao.findAllById(roomIds);
    Assertions.assertThat(result).isEmpty();

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451330.384')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>That&#8217;s all for the moment. In this course you learnt how to configure and use a database in Spring Boot app.</p>
</div>
</div>
</div>
</div>
</div>`;var kf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_introduction">Introduction</a></li>
<li><a class="link" fragment="#_data_transfert_object">Data Transfert Object</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_serialization">Serialization</a></li>
<li><a class="link" fragment="#_mapper">Mapper</a></li>
<li><a class="link" fragment="#_flask_create_your_dto_and_their_mapper"><span class="icon">[flask&#93;</span> : Create your DTO and their mapper</a></li>
</ul>
</li>
<li><a class="link" fragment="#_http">HTTP</a></li>
<li><a class="link" fragment="#_rest">REST</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_write_a_controller">Write a controller</a></li>
<li><a class="link" fragment="#_test_a_controller">Test a controller</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_create_your_rest_services"><span class="icon">[flask&#93;</span> : Create your rest services</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_a_basic_example">A basic example</a></li>
<li><a class="link" fragment="#_test_your_service_in_your_browser">Test your service in your browser</a></li>
<li><a class="link" fragment="#_test_your_service_with_springdoc_openapi_and_swagger_ui">Test your service with SpringDoc, OpenApi and Swagger UI</a></li>
<li><a class="link" fragment="#_add_sensorcontroller">Add SensorController</a></li>
<li><a class="link" fragment="#_more_rest_service">More Rest service</a></li>
</ul>
</li>
<li><a class="link" fragment="#_resttemplate">RestTemplate</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_how_use_resttemplate">How use RestTemplate ?</a></li>
<li><a class="link" fragment="#_flask_call_a_remote_rest_api"><span class="icon">[flask&#93;</span> Call a remote REST API</a></li>
</ul>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Spring purpose 2 web frameworks to build an application : the Servlet-based <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#spring-web">Spring MVC</a> web framework and, in parallel, the <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#spring-webflux">Spring WebFlux</a> reactive web framework.</p>
</div>
<div class="paragraph">
<p>In this course we will focus on <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#spring-web">Spring MVC</a> because this framework is the most used.</p>
</div>
<div class="paragraph">
<p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#spring-web">Spring MVC</a> helps you write web applications and takes care of a lot of boilerplate code, so you just have to focus on your application features.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-boot.png" alt="spring boot" width="800">
</div>
</div>
<div class="paragraph">
<p>With Spring Web (Spring MVC) you can write screens with a template solution which are used to generate HTML. But we don&#8217;t use this solution in this course. We will see how to write REST services. However if you are interested you can read <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-view">official documentation</a>.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/spring-mvc.png" alt="spring mvc" width="800">
</div>
</div>
<div class="paragraph">
<p>With Spring Web you can expose REST services to another app (web api, JS app, android app&#8230;&#8203;).This is the purpose of this lesson.You will learn how to develop endpoints on a backend application.These REST endpoints will be used later by a JS app or an Android app.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/mvc-rest.png" alt="mvc rest" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_data_transfert_object">Data Transfert Object</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_serialization">Serialization</h3>
<div class="paragraph">
<p>A DTO is an object that carries data between processes. Data need to be serializable to go across the HTTP connection</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/dto.png" alt="dto" width="800">
</div>
</div>
<div class="paragraph">
<p>Serialization is the process of translating data structures or object into a format that can be transmitted</p>
</div>
<div class="paragraph">
<p>A DTO is often just a POJO (Plain Old Java Object), a bunch of fields and the getters and setters for them. Since Java 16 you can also use Record objects.</p>
</div>
<div class="paragraph">
<p>A record is a class that has specific characteristics:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>this is a final class which cannot be enriched by inheritance from another record or from another class</p>
</li>
<li>
<p>each element of the description is encapsulated in a private and final field to guarantee immutability</p>
</li>
<li>
<p>a public getter is proposed for each element</p>
</li>
<li>
<p>a default <code>equals()</code> and <code>hashCode()</code> methods are provided, but you can override them.</p>
</li>
</ul>
</div>
<div class="listingblock small">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451404.5486"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Sensor</span><span class="hljs-params">(Long id, String name, Double value, SensorType sensorType)</span> {
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451404.5486')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>DTO will be used to transfer and to receive data in our REST controllers (entry point in our Java webapp).</p>
</div>
</div>
<div class="sect2">
<h3 id="_mapper">Mapper</h3>
<div class="paragraph">
<p>You can write an util class to help the DTO creation from an entity or the entity creation from a DTO. This class is called a mapper.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451404.4304"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorMapper</span> {
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Sensor <span class="hljs-title function_">of</span><span class="hljs-params">(SensorEntity sensor)</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sensor</span>(
        sensor.getId(),
        sensor.getName(),
        sensor.getValue(),
        sensor.getSensorType()
    );
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451404.4304')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_flask_create_your_dto_and_their_mapper"><span class="icon">[flask&#93;</span> : Create your DTO and their mapper</h3>
<div class="paragraph">
<p>Create a record object for your respective entities : <code>SensorEntity</code>, <code>WindowEntity</code>, <code>RoomEntity</code>, &#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>To prevent cycle in your record you should not map the bidirectional relation between a room and its windows. For example your record for the window can only mapped the room id.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451404.1914"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Window</span><span class="hljs-params">(Long id, String name, Sensor windowStatus, Long roomId)</span> {
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451404.1914')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Create mappers to create a record from an entity</p>
</div>
<div class="paragraph">
<p>Write a test for each mapper. As I am nice I will give you 2 useful classes.</p>
</div>
<div class="paragraph">
<p>One to create fake entities in your tests. <code>FakeEntityBuilder</code> expose different static methods to create entities</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451405.032"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FakeEntityBuilder</span> {

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RoomEntity <span class="hljs-title function_">createRoomEntity</span><span class="hljs-params">(Long id, String name, BuildingEntity building)</span> {
        <span class="hljs-comment">// Sensor is recreated before each test</span>
        <span class="hljs-type">RoomEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoomEntity</span>(
                name,
                createSensorEntity(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Temp&quot;</span>, TEMPERATURE, <span class="hljs-number">23.2</span>),
                <span class="hljs-number">1</span>);

        entity.setBuilding(building);
        entity.setTargetTemperature(<span class="hljs-number">26.4</span>);
        entity.setId(id);
        entity.setWindows(Set.of(
                createWindowEntity(id * <span class="hljs-number">10</span> + <span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Window1&quot;</span> + name, entity),
                createWindowEntity(id * <span class="hljs-number">10</span> + <span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Window2&quot;</span> + name, entity)
        ));
        entity.setHeaters(Set.of(
                createHeaterEntity(id * <span class="hljs-number">10</span> + <span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Heater1&quot;</span> + name, entity),
                createHeaterEntity(id * <span class="hljs-number">10</span> + <span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Heater2&quot;</span> + name, entity)
        ));
        <span class="hljs-keyword">return</span> entity;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WindowEntity <span class="hljs-title function_">createWindowEntity</span><span class="hljs-params">(Long id, String name, RoomEntity roomEntity)</span> {
        <span class="hljs-comment">// Sensor is recreated before each test</span>
        <span class="hljs-type">WindowEntity</span> <span class="hljs-variable">windowEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowEntity</span>(
                name,
                createSensorEntity(id * <span class="hljs-number">10</span> + <span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Status&quot;</span> + id, SensorType.STATUS, <span class="hljs-number">0.0</span>),
                roomEntity
        );
        windowEntity.setId(id);
        <span class="hljs-keyword">return</span> windowEntity;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HeaterEntity <span class="hljs-title function_">createHeaterEntity</span><span class="hljs-params">(Long id, String name, RoomEntity roomEntity)</span> {
        <span class="hljs-comment">// Sensor is recreated before each test</span>
        <span class="hljs-type">HeaterEntity</span> <span class="hljs-variable">heaterEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeaterEntity</span>(
                name,
                createSensorEntity(id * <span class="hljs-number">10</span> + <span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Status&quot;</span> + id, SensorType.STATUS, <span class="hljs-number">0.0</span>),
                roomEntity
        );
        heaterEntity.setId(id);
        <span class="hljs-keyword">return</span> heaterEntity;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SensorEntity <span class="hljs-title function_">createSensorEntity</span><span class="hljs-params">(Long id, String name, SensorType type, Double value)</span> {
        <span class="hljs-comment">// Sensor is recreated before each test</span>
        <span class="hljs-type">SensorEntity</span> <span class="hljs-variable">sensorEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SensorEntity</span>(type, name);
        sensorEntity.setId(id);
        sensorEntity.setValue(value);
        <span class="hljs-keyword">return</span> sensorEntity;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451405.032')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>And the class to test the most complicated mapper</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451406.3364"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomMapperTest</span> {

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldMapRoom</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">// Arrange</span>
        <span class="hljs-type">RoomEntity</span> <span class="hljs-variable">roomEntity</span> <span class="hljs-operator">=</span> FakeEntityBuilder.createBuildingEntity(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Building&quot;</span>)
                .getRooms()
                .stream()
                .min(Comparator.comparing(RoomEntity::getName))
                .orElseThrow(IllegalArgumentException::<span class="hljs-keyword">new</span>);

        <span class="hljs-comment">// Act</span>
        <span class="hljs-type">Room</span> <span class="hljs-variable">room</span> <span class="hljs-operator">=</span> RoomMapper.of(roomEntity);

        <span class="hljs-comment">// Assert</span>
        <span class="hljs-type">Room</span> <span class="hljs-variable">expectedRoom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Room</span>(
                <span class="hljs-number">11L</span>,
                <span class="hljs-string">&quot;Room1Building&quot;</span>,
                <span class="hljs-number">1</span>,
                <span class="hljs-number">23.2</span>,
                <span class="hljs-number">26.4</span>,
                List.of(
                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>(
                                <span class="hljs-number">111L</span>,
                                <span class="hljs-string">&quot;Window1Room1Building&quot;</span>,
                                WindowStatus.CLOSED,
                                <span class="hljs-number">11L</span>
                        ),
                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>(
                                <span class="hljs-number">112L</span>,
                                <span class="hljs-string">&quot;Window2Room1Building&quot;</span>,
                                WindowStatus.CLOSED,
                                <span class="hljs-number">11L</span>
                        )
                ),
                List.of(
                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Heater</span>(
                                <span class="hljs-number">111L</span>,
                                <span class="hljs-string">&quot;Heater1Room1Building&quot;</span>,
                                HeaterStatus.OFF,
                                <span class="hljs-number">11L</span>
                        ),
                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Heater</span>(
                                <span class="hljs-number">112L</span>,
                                <span class="hljs-string">&quot;Heater2Room1Building&quot;</span>,
                                HeaterStatus.OFF,
                                <span class="hljs-number">11L</span>
                        )
                )
        );
        Assertions.assertThat(room).usingRecursiveAssertion().isEqualTo(expectedRoom);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451406.3364')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_http">HTTP</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Hypertext Transfer Protocol (HTTP) is an application protocol used for data communication on the World Wide Web.</p>
</div>
<div class="paragraph">
<p>HTTP defines methods (sometimes referred to as verbs) to indicate the desired action to be performed on the identified <strong>resource</strong></p>
</div>
<div class="paragraph">
<p>A resource can be an image, a video, an HTML page, a JSON document.</p>
</div>
<div class="paragraph">
<p>To receive a response you have to send a request with a verb in a client an application as Curl, Wget&#8230;&#8203;. or with a website</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/http-verbs.png" alt="http verbs" width="800">
</div>
</div>
<div class="paragraph">
<p>Each HTTP response has a status identified by a code. This code is sent by the server, by your app</p>
</div>
<div class="ulist">
<ul>
<li>
<p>1XX : Wait\u2026 request in progress</p>
</li>
<li>
<p>2XX : Here ! I send you a resource</p>
</li>
<li>
<p>3XX : Go away !</p>
</li>
<li>
<p>4XX : You made a mistake</p>
</li>
<li>
<p>5XX : I made a mistake</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_rest">REST</h2>
<div class="sectionbody">
<div class="paragraph">
<p>HTTP requests are handled by the methods of a REST service. In Spring\u2019s approach a REST service is a controller. It is able to respond to HTTP requests</p>
</div>
<div class="ulist">
<ul>
<li>
<p>GET: read resource</p>
</li>
<li>
<p>POST: creates new record or executing a query</p>
</li>
<li>
<p>PUT: edit a resource (sometimes we use only a post request)</p>
</li>
<li>
<p>DELETE: delete a record</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_write_a_controller">Write a controller</h3>
<div class="paragraph">
<p>Controllers are the link between the web http clients (browsers, mobiles) and your application. They should be lightweight and call other components in your application to perform actual work (DAO for example).</p>
</div>
<div class="paragraph">
<p>These components are easily identified by the <code>@RestController</code> annotation.</p>
</div>
<div class="paragraph">
<p>Example of addressable resources
Node Express server listening on <a href="http://localhost:4000" class="bare">http://localhost:4000</a></p>
</div>
<div class="ulist">
<ul>
<li>
<p>Retrieve a sensor list : GET <code>/api/sensors</code></p>
</li>
<li>
<p>Retrieve a particular sensor : GET <code>/api/sensors/{sensor_id}</code></p>
</li>
<li>
<p>Create a sensor : POST <code>/api/sensors</code></p>
</li>
<li>
<p>Update a sensor : PUT <code>/api/sensors/{sensor_id}</code></p>
</li>
<li>
<p>Delete a sensor : DELETE <code>/api/sensors/{sensor_id}</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This SensorController handles GET requests for <code>/api/sensors</code> by returning a list of Window.</p>
</div>
<div class="paragraph">
<p>A complete example to manage sensors</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451406.4097"><span class="hljs-meta">@CrossOrigin</span>
<span class="hljs-meta">@RestController</span> <span class="hljs-comment">// (1)</span>
<span class="hljs-meta">@RequestMapping(&quot;/api/sensors&quot;)</span> <span class="hljs-comment">// (2)</span>
<span class="hljs-meta">@Transactional</span> <span class="hljs-comment">// (3)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorController</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SensorDao sensorDao;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SensorController</span><span class="hljs-params">(SensorDao sensorDao)</span> {
        <span class="hljs-built_in">this</span>.sensorDao = sensorDao;
    }

    <span class="hljs-meta">@GetMapping</span> <span class="hljs-comment">// (5)</span>
    <span class="hljs-keyword">public</span> List<span class="hljs-meta">@LTSensor</span><span class="hljs-meta">@GT</span> findAll() {
        <span class="hljs-keyword">return</span> sensorDao.findAll()
                .stream()
                .map(SensorMapper::of)
                .sorted(Comparator.comparing(Sensor::name))
                .collect(Collectors.toList());  <span class="hljs-comment">// (6)</span>
    }

    <span class="hljs-meta">@GetMapping(path = &quot;/{id}&quot;)</span>
    <span class="hljs-keyword">public</span> Sensor <span class="hljs-title function_">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> {
        <span class="hljs-keyword">return</span> sensorDao.findById(id).map(SensorMapper::of).orElse(<span class="hljs-literal">null</span>); <span class="hljs-comment">// (7)</span>
    }

    <span class="hljs-meta">@PostMapping</span> <span class="hljs-comment">// (8)</span>
    <span class="hljs-keyword">public</span> ResponseEntity<span class="hljs-meta">@LTSensor</span><span class="hljs-meta">@GT</span> create(<span class="hljs-meta">@RequestBody</span> SensorCommand sensor) { <span class="hljs-comment">// (9)</span>
        <span class="hljs-type">SensorEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SensorEntity</span>(sensor.sensorType(), sensor.name());
        entity.setValue(sensor.value());
        <span class="hljs-type">SensorEntity</span> <span class="hljs-variable">saved</span> <span class="hljs-operator">=</span> sensorDao.save(entity);
        <span class="hljs-keyword">return</span> ResponseEntity.ok(SensorMapper.of(saved));
    }

    <span class="hljs-meta">@PutMapping(path = &quot;/{id}&quot;)</span> <span class="hljs-comment">// (10)</span>
    <span class="hljs-keyword">public</span> ResponseEntity<span class="hljs-meta">@LTSensor</span><span class="hljs-meta">@GT</span> update(<span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@RequestBody</span> SensorCommand sensor) {
        <span class="hljs-type">SensorEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> sensorDao.findById(id).orElse(<span class="hljs-literal">null</span>);
        <span class="hljs-keyword">if</span> (entity == <span class="hljs-literal">null</span>) {
            <span class="hljs-keyword">return</span> ResponseEntity.badRequest().build();
        }
        entity.setValue(sensor.value());
        entity.setName(sensor.name());
        entity.setSensorType(sensor.sensorType());
        <span class="hljs-comment">// (11)</span>
        <span class="hljs-keyword">return</span> ResponseEntity.ok(SensorMapper.of(entity));
    }

    <span class="hljs-meta">@DeleteMapping(path = &quot;/{id}&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> {
        sensorDao.deleteById(id);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451406.4097')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) <strong>RestController</strong> is a Spring stereotype to mark a class as a rest service</p>
</li>
<li>
<p>(2) <strong>@RequestMapping</strong> is used to define a global URL prefix used to manage a resource (in our example all requests that start with <code>/api/sensors</code> will be handle by this controller)</p>
</li>
<li>
<p>(3) <strong>@Transactional</strong> is used to delegate a transaction opening to Spring. Spring will initiate a transaction for each entry point of this controller. This is important because with Hibernate you cannot execute a query outside of a transaction.</p>
</li>
<li>
<p>(4) DAO used by this controller is injected via constructor</p>
</li>
<li>
<p>(5) <strong>@GetMapping</strong> indicates that the following method will respond to a GET request. This method will return a sensor list. We transform our entities <code>SensorEntity</code> in DTO <code>Sensor</code></p>
</li>
<li>
<p>(6) (7) We use <a href="https://www.oracle.com/technical-resources/articles/java/ma14-java-se-8-streams.html">Java Stream API</a> to manipulate our data</p>
</li>
<li>
<p>(8) <strong>@PostMapping</strong> indicates that the following method will respond to a POST request (for creation).</p>
</li>
<li>
<p>(9) To return HTTP errors the method return a <code>ResponseEntity</code>. This object contains different builders to manipulate the HTTP response</p>
</li>
<li>
<p>(10) <strong>@PutMapping</strong> indicates that the following method will respond to a PUT request (for creation).</p>
</li>
<li>
<p>(11) For an update you don&#8217;t need to call the DAO save method. The <code>findById</code> attach the entity to the persistence context and each update will be updated when the transaction will be commited.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Note, that we don&#8217;t use the same object for an update or a creation. We often use simples command object where all relationships are flatten. Here the command object is this one</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451407.9824"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">SensorCommand</span><span class="hljs-params">(String name, Double value, SensorType sensorType)</span> {
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451407.9824')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If this object has a relationship with another (for example a Room). The object for reading will return a complete Room object. The command object would only contain the data necessary to create/update ie a roomId. Sometimes we can use an object specific to creation, another to update.</p>
</div>
</div>
<div class="sect2">
<h3 id="_test_a_controller">Test a controller</h3>
<div class="paragraph">
<p>To check if Spring MVC controllers are working as expected, use the <code>@WebMvcTest</code> annotation. <code>@WebMvcTest</code> auto-configures the Spring MVC infrastructure and the Mock MVC component.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Mock MVC offers a powerful way to quickly test MVC controllers without needing to start a full HTTP server.</p>
</li>
<li>
<p>Annotation <code>@MockBean</code> provides mock implementations for required collaborators in place of the real implementations.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>With Mock MVC you can perform requests for each HTTP methods</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451407.5088"><span class="hljs-comment">// static import of MockMvcRequestBuilders.*</span>

<span class="hljs-comment">// a post example</span>
mockMvc.perform(post(<span class="hljs-string">&quot;/hotels/{id}&quot;</span>, <span class="hljs-number">42</span>).accept(MediaType.APPLICATION_JSON));

<span class="hljs-comment">// you can specify query parameters in URI template style</span>
mockMvc.perform(get(<span class="hljs-string">&quot;/hotels&quot;</span>).param(<span class="hljs-string">&quot;thing&quot;</span>, <span class="hljs-string">&quot;somewhere&quot;</span>));</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451407.5088')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can define expectations by appending one or more andExpect(..) calls after performing a request, as the following example shows. As soon as one expectation fails, no other expectations will be asserted.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451407.596"><span class="hljs-comment">// static import of MockMvcRequestBuilders.* and MockMvcResultMatchers.*</span>

mockMvc.perform(get(<span class="hljs-string">&quot;/accounts/1&quot;</span>)).andExpect(status().isOk());</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451407.596')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can use <a href="https://goessner.net/articles/JsonPath/index.html#e2">Json path expression</a> to check your JSON result. And if you want to test your syntax this <a href="https://jsonpath.com/">website</a> will help you.</p>
</div>
<div class="paragraph">
<p>You can find several example in the <code>SensorController</code> test</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451409.5432"><span class="hljs-keyword">package</span> com.emse.spring.automacorp.web;

<span class="hljs-keyword">import</span> com.emse.spring.automacorp.dao.SensorDao;
<span class="hljs-keyword">import</span> com.emse.spring.automacorp.model.SensorEntity;
<span class="hljs-keyword">import</span> com.emse.spring.automacorp.model.SensorType;
<span class="hljs-keyword">import</span> com.emse.spring.automacorp.record.Sensor;
<span class="hljs-keyword">import</span> com.emse.spring.automacorp.record.SensorMapper;
<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;
<span class="hljs-keyword">import</span> org.hamcrest.Matchers;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;
<span class="hljs-keyword">import</span> org.mockito.Mockito;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
<span class="hljs-keyword">import</span> org.springframework.boot.test.mock.mockito.MockBean;
<span class="hljs-keyword">import</span> org.springframework.http.MediaType;
<span class="hljs-keyword">import</span> org.springframework.test.web.servlet.MockMvc;
<span class="hljs-keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
<span class="hljs-keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;

<span class="hljs-keyword">import</span> java.util.List;
<span class="hljs-keyword">import</span> java.util.Optional;


<span class="hljs-meta">@WebMvcTest(SensorController.class)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">SensorControllerTest</span> {
    <span class="hljs-comment">// Spring object to mock call to our app</span>
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> MockMvc mockMvc;

    <span class="hljs-comment">// The serializer used by Spring to send and receive data to/from the REST controller</span>
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> ObjectMapper objectMapper;

    <span class="hljs-comment">// We choose to mock the DAO used in the REST controller to limit the scope of our test</span>
    <span class="hljs-meta">@MockBean</span>
    <span class="hljs-keyword">private</span> SensorDao sensorDao;

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFindAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        Mockito.when(sensorDao.findAll()).thenReturn(List.of(
                FakeEntityBuilder.createSensorEntity(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Temperature room 1&quot;</span>),
                FakeEntityBuilder.createSensorEntity(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;Temperature room 2&quot;</span>)
        ));

        mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/sensors&quot;</span>).accept(MediaType.APPLICATION_JSON))
                <span class="hljs-comment">// check the HTTP response</span>
                .andExpect(MockMvcResultMatchers.status().isOk())
                <span class="hljs-comment">// the content can be tested with Json path</span>
                .andExpect(
                        MockMvcResultMatchers
                                .jsonPath(<span class="hljs-string">&quot;[*].name&quot;</span>)
                                .value(Matchers.containsInAnyOrder(<span class="hljs-string">&quot;Temperature room 1&quot;</span>, <span class="hljs-string">&quot;Temperature room 2&quot;</span>))
                );
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldReturnNullWhenFindByUnknownId</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        Mockito.when(sensorDao.findById(<span class="hljs-number">999L</span>)).thenReturn(Optional.empty());

        mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/sensors/999&quot;</span>).accept(MediaType.APPLICATION_JSON))
                <span class="hljs-comment">// check the HTTP response</span>
                .andExpect(MockMvcResultMatchers.status().isOk())
                <span class="hljs-comment">// the content can be tested with Json path</span>
                .andExpect(MockMvcResultMatchers.content().string(<span class="hljs-string">&quot;&quot;</span>));
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFindById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        <span class="hljs-type">SensorEntity</span> <span class="hljs-variable">sensorEntity</span> <span class="hljs-operator">=</span> FakeEntityBuilder.createSensorEntity(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Temperature room 1&quot;</span>);
        Mockito.when(sensorDao.findById(<span class="hljs-number">999L</span>)).thenReturn(Optional.of(sensorEntity));

        mockMvc.perform(MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/api/sensors/999&quot;</span>).accept(MediaType.APPLICATION_JSON))
                <span class="hljs-comment">// check the HTTP response</span>
                .andExpect(MockMvcResultMatchers.status().isOk())
                <span class="hljs-comment">// the content can be tested with Json path</span>
                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;@dollar@.name&quot;</span>).value(<span class="hljs-string">&quot;Temperature room 1&quot;</span>));
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldNotUpdateUnknownEntity</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        <span class="hljs-type">SensorEntity</span> <span class="hljs-variable">sensorEntity</span> <span class="hljs-operator">=</span> FakeEntityBuilder.createSensorEntity(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Temperature room 1&quot;</span>);
        <span class="hljs-type">SensorCommand</span> <span class="hljs-variable">expectedSensor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SensorCommand</span>(sensorEntity.getName(), sensorEntity.getValue(), sensorEntity.getSensorType());
        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(expectedSensor);

        Mockito.when(sensorDao.findById(<span class="hljs-number">1L</span>)).thenReturn(Optional.empty());

        mockMvc.perform(
                        MockMvcRequestBuilders
                                .put(<span class="hljs-string">&quot;/api/sensors/1&quot;</span>)
                                .content(json)
                                .contentType(MediaType.APPLICATION_JSON_VALUE)
                )
                <span class="hljs-comment">// check the HTTP response</span>
                .andExpect(MockMvcResultMatchers.status().isBadRequest());
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        <span class="hljs-type">SensorEntity</span> <span class="hljs-variable">sensorEntity</span> <span class="hljs-operator">=</span> FakeEntityBuilder.createSensorEntity(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Temperature room 1&quot;</span>);
        <span class="hljs-type">SensorCommand</span> <span class="hljs-variable">expectedSensor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SensorCommand</span>(sensorEntity.getName(), sensorEntity.getValue(), sensorEntity.getSensorType());
        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(expectedSensor);

        Mockito.when(sensorDao.findById(<span class="hljs-number">1L</span>)).thenReturn(Optional.of(sensorEntity));

        mockMvc.perform(
                        MockMvcRequestBuilders
                                .put(<span class="hljs-string">&quot;/api/sensors/1&quot;</span>)
                                .content(json)
                                .contentType(MediaType.APPLICATION_JSON_VALUE)
                )
                <span class="hljs-comment">// check the HTTP response</span>
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;@dollar@.name&quot;</span>).value(<span class="hljs-string">&quot;Temperature room 1&quot;</span>))
                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;@dollar@.id&quot;</span>).value(<span class="hljs-string">&quot;1&quot;</span>));
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldCreate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        <span class="hljs-type">SensorEntity</span> <span class="hljs-variable">sensorEntity</span> <span class="hljs-operator">=</span> FakeEntityBuilder.createSensorEntity(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;Temperature room 1&quot;</span>);
        <span class="hljs-type">SensorCommand</span> <span class="hljs-variable">expectedSensor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SensorCommand</span>(sensorEntity.getName(), sensorEntity.getValue(), sensorEntity.getSensorType());
        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(expectedSensor);

        Mockito.when(sensorDao.existsById(<span class="hljs-number">1L</span>)).thenReturn(<span class="hljs-literal">false</span>);
        Mockito.when(sensorDao.save(Mockito.any(SensorEntity.class))).thenReturn(sensorEntity);

        mockMvc.perform(
                        MockMvcRequestBuilders
                                .post(<span class="hljs-string">&quot;/api/sensors&quot;</span>)
                                .content(json)
                                .contentType(MediaType.APPLICATION_JSON_VALUE)
                )
                <span class="hljs-comment">// check the HTTP response</span>
                .andExpect(MockMvcResultMatchers.status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;@dollar@.name&quot;</span>).value(<span class="hljs-string">&quot;Temperature room 1&quot;</span>))
                .andExpect(MockMvcResultMatchers.jsonPath(<span class="hljs-string">&quot;@dollar@.id&quot;</span>).value(<span class="hljs-string">&quot;1&quot;</span>));
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
        mockMvc.perform(MockMvcRequestBuilders.delete(<span class="hljs-string">&quot;/api/sensors/999&quot;</span>))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451409.5432')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_create_your_rest_services"><span class="icon">[flask&#93;</span> : Create your rest services</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_a_basic_example">A basic example</h3>
<div class="paragraph">
<p>This is the time to create your first REST controller with Spring.</p>
</div>
<div class="paragraph">
<p>Create a new class <code>HelloController</code> in package <code>com.emse.spring.automacorp.api</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451409.6997"><span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/api/hello&quot;)</span>
<span class="hljs-meta">@Transactional</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> {
    <span class="hljs-meta">@GetMapping(&quot;/{name}&quot;)</span>
    <span class="hljs-keyword">public</span> Message <span class="hljs-title function_">welcome</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String name)</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;Hello &quot;</span> + name);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Message</span><span class="hljs-params">(String message)</span> {
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451409.6997')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_test_your_service_in_your_browser">Test your service in your browser</h3>
<div class="paragraph">
<p>If your REST service expose an handler for a GET HTTP request, this handler can be tested in a browser.</p>
</div>
<div class="paragraph">
<p>Launch your app and open the URL <a href="http://localhost:8080/api/hello/Guillaume" class="bare">http://localhost:8080/api/hello/Guillaume</a> in your browser</p>
</div>
<div class="paragraph">
<p>When you type an URL in the adress bar, your browser send a GET HTTP request. You should see a response as this one</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912451410.6763">{<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;Hello Guillaume}</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.6763')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_test_your_service_with_springdoc_openapi_and_swagger_ui">Test your service with SpringDoc, OpenApi and Swagger UI</h3>
<div class="paragraph">
<p>With a browser you are limited to GET requests. If you want to test PUT, POST or DELETE HTTP requests, you need another tool. We will usehttps://springdoc.org/[springdoc].</p>
</div>
<div class="paragraph">
<p>The advantage of swagger is that it is very well integrated into the Spring world. Update your <code>build.gradle.kts</code> file and add these dependencies</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451410.8723">implementation(<span class="hljs-string">&quot;org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.8723')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You also need to add this property in your <code>application.properties</code> file</p>
</div>
<div class="listingblock">
<div class="content">
<pre>spring.mvc.pathmatch.matching-strategy=ant_path_matcher</pre>
</div>
</div>
<div class="paragraph">
<p>And now you can relaunch your app and open swagger interface <a href="http://localhost:8080/swagger-ui/index.html" class="bare">http://localhost:8080/swagger-ui/index.html</a></p>
</div>
<div class="paragraph">
<p>All your endpoints are available. You can click on one of them to test it</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="600" height="330" src="https://www.youtube.com/embed/f6FUpLs0H_4?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_add_sensorcontroller">Add SensorController</h3>
<div class="paragraph">
<p>Read the previous examples and create</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the REST service <code>SensorController</code></p>
</li>
<li>
<p>a rest service which is able to</p>
<div class="ulist">
<ul>
<li>
<p>Retrieve a sensor list via a GET</p>
</li>
<li>
<p>Retrieve a particular sensor via a GET</p>
</li>
<li>
<p>Create a sensor via a POST</p>
</li>
<li>
<p>Update a sensor via a PUT</p>
</li>
<li>
<p>Delete a window via a DELETE</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>Use swagger to test your API</p>
</div>
<div class="ulist">
<ul>
<li>
<p>create a new sensor</p>
</li>
<li>
<p>list all the sensor</p>
</li>
<li>
<p>find the sensor with id <code>-8</code></p>
</li>
<li>
<p>update a sensor</p>
</li>
<li>
<p>deletes this sensor</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_more_rest_service">More Rest service</h3>
<div class="paragraph">
<p>You can now write <code>WindowController</code> and <code>RoomController</code>. These routes must be implemented</p>
</div>
<div class="paragraph">
<p>You can now create BuildingDto, RoomDtoo, HeaterDto and write services which follow this service</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451410.0684">/api/windows (GET) send windows list
/api/windows (POST) add a window
/api/windows/{id} (PUT) update a window
/api/windows/{id} (GET) read a window
/api/windows/{id} (DELETE) delete a window</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.0684')">Copy</button></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451410.3584">/api/rooms (GET) send room list
/api/rooms (POST) add or update a room
/api/rooms/{room_id} (GET) read a room
/api/rooms/{room_id} (DELETE) delete a room and all its windows and its heaters
/api/rooms/{room_id}/openWindows switch the room windows to OPEN (status != 0)
/api/rooms/{room_id}/closeWindows switch the room windows to CLOSED (status = 0)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.3584')">Copy</button></pre>
</div>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_resttemplate">RestTemplate</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you need to call remote REST services from your application, you can use the Spring Framework\u2019s RestTemplate class.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/resttemplate.png" alt="resttemplate" width="600">
</div>
</div>
<div class="paragraph">
<p>A Java method for each HTTP method</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>DELETE</strong> : delete(&#8230;&#8203;)</p>
</li>
<li>
<p><strong>GET</strong> :	getForObject(&#8230;&#8203;)</p>
</li>
<li>
<p><strong>HEAD</strong> :	headForHeaders(&#8230;&#8203;)</p>
</li>
<li>
<p><strong>OPTIONS</strong> :	optionsForAllow(&#8230;&#8203;)</p>
</li>
<li>
<p><strong>POST</strong> : postForObject(&#8230;&#8203;)</p>
</li>
<li>
<p><strong>PUT</strong> : put(&#8230;&#8203;)</p>
</li>
<li>
<p><strong>any method</strong> : exchange(&#8230;&#8203;) or execute(&#8230;&#8203;)</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_how_use_resttemplate">How use RestTemplate ?</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>You need to create DTOs to serialize inputs and deserialize outputs</p>
</li>
<li>
<p>Use <code>RestTemplate</code> to call the service with the good HTTP method</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451410.616"> <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(
         <span class="hljs-string">&quot;http://example.com/hotels/{hotel}/bookings/{booking}&quot;</span>,
         String.class,
         <span class="hljs-string">&quot;42&quot;</span>,
         <span class="hljs-string">&quot;21&quot;</span>);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.616')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>will perform a GET on <code><a href="http://example.com/hotels/42/bookings/21" class="bare">http://example.com/hotels/42/bookings/21</a>.</code></p>
</div>
<div class="paragraph">
<p>The map variant expands the template based on variable name, and is therefore more useful when using many variables, or when a single variable is used multiple times. For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451410.3142"> Map<span class="hljs-meta">@LTString</span>, String<span class="hljs-meta">@GT</span> vars = Collections.singletonMap(<span class="hljs-string">&quot;hotel&quot;</span>, <span class="hljs-string">&quot;42&quot;</span>);
 <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(
         <span class="hljs-string">&quot;http://example.com/hotels/{hotel}/rooms/{hotel}&quot;</span>,
         String.class,
         vars
);</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.3142')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>will perform a GET on <code><a href="http://example.com/hotels/42/rooms/42" class="bare">http://example.com/hotels/42/rooms/42</a>.</code></p>
</div>
<div class="paragraph">
<p>Since RestTemplate instances often need to be customized before being used, Spring Boot does not provide any single auto-configured RestTemplate bean but a builder to help the creation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451410.977"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SearchService</span> {

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RestTemplate restTemplate;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AdressSearchService</span><span class="hljs-params">(RestTemplateBuilder restTemplateBuilder)</span> {
        <span class="hljs-built_in">this</span>.restTemplate = restTemplateBuilder.rootUri(<span class="hljs-string">&quot;https://example.com&quot;</span>).build();
    }

    <span class="hljs-keyword">public</span> ResponseDto <span class="hljs-title function_">findUsers</span><span class="hljs-params">()</span> {
        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> UriComponentsBuilder.fromUriString(<span class="hljs-string">&quot;/users/search&quot;</span>)
                                         .queryParam(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Guillaume&quot;</span>)
                                         .build()
                                         .toUriString();
        <span class="hljs-keyword">return</span> restTemplate.getForObject(uri, ResponseDto.class);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.977')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>will perform a GET on <code><a href="http://example.com/users/search?name=Guillaume" class="bare">http://example.com/users/search?name=Guillaume</a></code></p>
</div>
<div style="page-break-after: always;"></div>
</div>
<div class="sect2">
<h3 id="_flask_call_a_remote_rest_api"><span class="icon">[flask&#93;</span> Call a remote REST API</h3>
<div class="paragraph">
<p>Now we can see how call a remote REST API in a Spring application.</p>
</div>
<div class="paragraph">
<p>We will test <a href="https://adresse.data.gouv.fr/api-doc/adresse" class="bare">https://adresse.data.gouv.fr/api-doc/adresse</a></p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/ap--gouv.png" alt="ap  gouv" width="700">
</div>
</div>
<div class="paragraph">
<p>You can test a request in your terminal with the curl tool or in a browser as it&#8217;s a GET request.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>curl "https://api-adresse.data.gouv.fr/search/?q=cours+fauriel+&amp;limit=15"</pre>
</div>
</div>
<div class="paragraph">
<p>You have a JSON as result</p>
</div>
<div class="listingblock">
<div class="content">
<pre>{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "geometry": {
        "type": "Point",
        "coordinates": [4.402982, 45.426444]
      },
      "properties": {
        "label": "Cours Fauriel 42100 Saint-\xC9tienne",
        "score": 0.8910727272727272,
        "id": "42218_3390",
        "name": "Cours Fauriel",
        "postcode": "42100,
        "city": "Saint-\xC9tienne",
        "context": "42, Loire, Auvergne-Rh\xF4ne-Alpes",
        "type": "street"
      }
    }
  ],
  "query": "cours fauriel "
}</pre>
</div>
</div>
<div class="paragraph">
<p>Now you have to implement a service to call the API.</p>
</div>
<div class="sect3">
<h4 id="_create_the_dtos">Create the DTOs</h4>
<div class="paragraph">
<p>To help your job you can use these DTOs used to deserialize the returned JSON in Java objects.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>ApiGouvResponseDto describes the API response. Inside you will have a list of&#8230;&#8203;</p>
</li>
<li>
<p>&#8230;&#8203;ApiGouvFeatureDto. Each feature will have different properties &#8230;&#8203;</p>
</li>
<li>
<p>&#8230;&#8203;ApiGouvAdressDto</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451410.1143"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">ApiGouvResponse</span><span class="hljs-params">(
    String version,
    String query,
    Integer limit,
    List@LTApiGouvFeature@GT features
)</span> {

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.1143')">Copy</button></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451410.9265"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">ApiGouvFeature</span><span class="hljs-params">(
    String type,
    ApiGouvAdress properties
)</span> {</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.9265')">Copy</button></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451410.096"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">ApiGouvAdress</span><span class="hljs-params">(
    String id,
    String label,
    String housenumber,
    Double score,
    String postcode,
    String citycode,
    String city,
    String context,
    String type,
    Double x,
    Double y
)</span> {

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451410.096')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_create_the_service">Create the service</h4>
<div class="paragraph">
<p>Now you are able to write</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>a service called <code>AdressSearchService</code></p>
</li>
<li>
<p>with a constructor in which you will create the <code>restTemplate</code></p>
</li>
<li>
<p>add a method to return the <code>List@LTApiGouvAdressDto@GT</code></p>
</li>
<li>
<p>this method can have a list of String to define the parameters to send to the API</p>
</li>
<li>
<p>You can build the URI with this code</p>
</li>
</ol>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451411.9202"><span class="hljs-type">String</span> <span class="hljs-variable">params</span> <span class="hljs-operator">=</span> String.join(<span class="hljs-string">&quot;+&quot;</span>, keys);
UriComponentsBuilder.fromUriString(<span class="hljs-string">&quot;/search&quot;</span>).queryParam(<span class="hljs-string">&quot;q&quot;</span>, params).queryParam(<span class="hljs-string">&quot;limit&quot;</span>, <span class="hljs-number">15</span>).build().toUriString()<span class="hljs-meta">@backtick</span>@</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451411.9202')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_test_your_service_with_swagger">Test your service with Swagger</h4>
<div class="paragraph">
<p>You can expose a new REST endpoint in a controller to use Swagger to test this API</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-intro/adress-api.png" alt="adress api" width="800">
</div>
</div>
</div>
<div class="sect3">
<h4 id="_test_your_service_with_a_unit_test">Test your service with a unit test</h4>
<div class="paragraph">
<p>You can use the @RestClientTest annotation to test REST clients. By default, it auto-configures Jackson, configures a RestTemplateBuilder, and adds support for MockRestServiceServer.</p>
</div>
<div class="paragraph">
<p>This test should work</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451411.029"><span class="hljs-keyword">package</span> com.emse.spring.automacorp.adress;

<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;
<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;
<span class="hljs-keyword">import</span> org.assertj.core.api.Assertions;
<span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.boot.test.autoconfigure.web.client.RestClientTest;
<span class="hljs-keyword">import</span> org.springframework.http.MediaType;
<span class="hljs-keyword">import</span> org.springframework.test.web.client.MockRestServiceServer;
<span class="hljs-keyword">import</span> org.springframework.test.web.client.match.MockRestRequestMatchers;
<span class="hljs-keyword">import</span> org.springframework.test.web.client.response.MockRestResponseCreators;
<span class="hljs-keyword">import</span> org.springframework.web.util.UriComponentsBuilder;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@RestClientTest(AdressSearchService.class)</span> <span class="hljs-comment">// (1)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">AdressSearchServiceTest</span> {
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> AdressSearchService service;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> ObjectMapper objectMapper;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> MockRestServiceServer server; <span class="hljs-comment">// (2)</span>

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldFindAdresses</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException {
        <span class="hljs-comment">// Arrange</span>
        <span class="hljs-type">ApiGouvResponse</span> <span class="hljs-variable">expectedResponse</span> <span class="hljs-operator">=</span> simulateApiResponse();

        <span class="hljs-type">String</span> <span class="hljs-variable">expectedUrl</span> <span class="hljs-operator">=</span> UriComponentsBuilder
                .fromUriString(<span class="hljs-string">&quot;/search&quot;</span>)
                .queryParam(<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;cours+fauriel&quot;</span>)
                .queryParam(<span class="hljs-string">&quot;limit&quot;</span>, <span class="hljs-number">15</span>)
                .build()
                .toUriString();

        <span class="hljs-built_in">this</span>.server
                .expect(MockRestRequestMatchers.requestTo(expectedUrl))
                .andRespond(
                        MockRestResponseCreators.withSuccess(
                                objectMapper.writeValueAsString(expectedResponse),
                                MediaType.APPLICATION_JSON
                        )
                );

        <span class="hljs-comment">// Act</span>
        List<span class="hljs-meta">@LTApiGouvAdress</span><span class="hljs-meta">@GT</span> adresses = <span class="hljs-built_in">this</span>.service.searchAdress(List.of(<span class="hljs-string">&quot;cours&quot;</span>, <span class="hljs-string">&quot;fauriel&quot;</span>));

        <span class="hljs-comment">// Assert</span>
        Assertions
                .assertThat(adresses)
                .hasSize(<span class="hljs-number">1</span>)
                .extracting(ApiGouvAdress::city)
                .contains(<span class="hljs-string">&quot;Saint Etienne&quot;</span>);
    }

    <span class="hljs-keyword">private</span> ApiGouvResponse <span class="hljs-title function_">simulateApiResponse</span><span class="hljs-params">()</span> {
        <span class="hljs-type">ApiGouvAdress</span> <span class="hljs-variable">adress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiGouvAdress</span>(
                <span class="hljs-string">&quot;ad1&quot;</span>,
                <span class="hljs-string">&quot;Cours Fauriel 42100 Saint-\xC9tienne&quot;</span>,
                <span class="hljs-string">&quot;2&quot;</span>,
                <span class="hljs-number">0.98</span>,
                <span class="hljs-string">&quot;42100&quot;</span>,
                <span class="hljs-string">&quot;42218&quot;</span>,
                <span class="hljs-string">&quot;Saint Etienne&quot;</span>,
                <span class="hljs-string">&quot;context&quot;</span>,
                <span class="hljs-string">&quot;type&quot;</span>,
                <span class="hljs-number">0.0</span>,
                <span class="hljs-number">0.0</span>
                );

        <span class="hljs-type">ApiGouvFeature</span> <span class="hljs-variable">feature</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiGouvFeature</span>(<span class="hljs-string">&quot;type&quot;</span>, adress);
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiGouvResponse</span>(<span class="hljs-string">&quot;v1&quot;</span>, <span class="hljs-string">&quot;cours+fauriel&quot;</span>, <span class="hljs-number">15</span>, List.of(feature));
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451411.029')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
</div>`;var _f=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_introduction">Introduction</a></li>
<li><a class="link" fragment="#_cors">CORS</a></li>
<li><a class="link" fragment="#_authentication">Authentication</a></li>
<li><a class="link" fragment="#_authorization">Authorization</a></li>
<li><a class="link" fragment="#_how_to_install">How to install ?</a></li>
<li><a class="link" fragment="#_flask_security_level_1"><span class="icon">[flask&#93;</span> : Security level 1</a></li>
<li><a class="link" fragment="#_how_it_works">How it works ?</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_web_filter">Web filter</a></li>
<li><a class="link" fragment="#_architecture">Architecture</a></li>
</ul>
</li>
<li><a class="link" fragment="#_configuration">Configuration</a></li>
<li><a class="link" fragment="#_get_the_user">Get the user</a></li>
<li><a class="link" fragment="#_check_permission">Check permission</a></li>
<li><a class="link" fragment="#_flask_personalize_your_configuration"><span class="icon">[flask&#93;</span> : Personalize your configuration</a></li>
<li><a class="link" fragment="#_unit_tests">Unit tests</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_resolve_error_401">Resolve error 401</a></li>
<li><a class="link" fragment="#_resolve_error_403">Resolve error 403</a></li>
<li><a class="link" fragment="#_on_a_web_application">On a web application</a></li>
</ul>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_introduction">Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://docs.spring.io/spring-security/reference/index.html">Spring Security</a> provides comprehensive support for authentication, authorization, and protection against <a href="https://docs.spring.io/spring-security/reference/features/exploits/index.html">common exploits</a>.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-security.png" alt="spring security" width="800">
</div>
</div>
<div class="paragraph">
<p>The security is a complex subject. We retrieve this complexity in Spring Security</p>
</div>
<div class="paragraph">
<p>But Spring Security and Spring Boot come with an abstraction to make easier the integration with the main tools and concepts : SSO, OpenID, Oauth, NTLM, LDAP, Kerberos</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cors">CORS</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Today browsers forbid a website to access to resources served by another website defined on a different domain.</p>
</div>
<div class="paragraph">
<p>If you want to call your API on <a href="http://localhost:8080" class="bare">http://localhost:8080</a> from a webapp exposed on a different port you should have this error.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><span class="hljs-title class_">Access</span> to fetch at <span class="hljs-string">&#x27;http://localhost:8080/api/rooms&#x27;</span> <span class="hljs-keyword">from</span> origin <span class="hljs-string">&#x27;null&#x27;</span> has been blocked by <span class="hljs-variable constant_">CORS</span> <span class="hljs-attr">policy</span>:
<span class="hljs-title class_">No</span> <span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span> header is present on the requested resource. <span class="hljs-title class_">If</span> an opaque response serves
your needs, set the request<span class="hljs-string">&#x27;s mode to &#x27;</span>no-cors<span class="hljs-string">&#x27; to fetch the resource with CORS disabled.</span></pre>
</div>
</div>
<div class="paragraph">
<p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">Cross-Origin Resource Sharing</a> is a mechanism that allows this dialog</p>
</div>
<div class="paragraph">
<p>To resolve this problem you have to manage CORS headers in the different requests. With Spring you can add annotation <code>@CrossOrigin</code> to your <code>@RestController</code> to open your API to all other apps</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451379.8865"><span class="hljs-meta">@CrossOrigin</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451379.8865')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If your Vue.js app is launched on <a href="http://localhost:3010" class="bare">http://localhost:3010</a> ou can open your API only for this app</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451379.466"><span class="hljs-meta">@CrossOrigin(origins = { &quot;http://localhost:3010&quot; }, maxAge = 3600)</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451379.466')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>On a web application you can also install a proxy.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_authentication">Authentication</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Authentication is how we verify the identity of who is trying to access a particular resource.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-security/authentication.png" alt="authentication" width="600">
</div>
</div>
<div class="paragraph">
<p>A common way to authenticate users is to force them to enter a username and password. If user is unknown, app will return a 401 error (Bad authentication)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_authorization">Authorization</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Once authentication is performed we know the identity and can perform authorization.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-security/authorization.png" alt="authorization" width="600">
</div>
</div>
<div class="paragraph">
<p>If user has no access to a resource, he will receive a 403 error (Forbidden)</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how_to_install">How to install ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can use the Spring Boot starters (one for the main libs and one for tests)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451379.3074">implementation(<span class="hljs-string">&quot;org.springframework.boot:spring-boot-starter-security&quot;</span>)
testImplementation(<span class="hljs-string">&quot;org.springframework.security:spring-security-test&quot;</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451379.3074')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>With nothing else, Spring Security will add a basic auth to your application and you can configure the default user in <code>application.properties</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre>spring.security.user.name=user
spring.security.user.password=password</pre>
</div>
</div>
<div class="paragraph">
<p>Spring generate this page for you</p>
</div>
<div class="paragraph text-center">
<p><span class="image"><img src="../../img/training/spring-security/authent_screen.png" alt="authent screen" width="600"></span></p>
</div>
<div class="paragraph">
<p>You can logout when you try to call
<a href="http://localhost:8080/logout" class="bare">http://localhost:8080/logout</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_security_level_1"><span class="icon">[flask&#93;</span> : Security level 1</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Update your project to be able to secure you app with the default security form (follow the given steps above)</p>
</div>
<div class="paragraph">
<p>At this step you can connect to your app but several things must be set to continue to use Swagger and run your controller tests. We will fix these problems in the next lab.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_how_it_works">How it works ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>On a Spring web application, Spring Security support is based on Servlet Filters, so it is helpful to look at the role of Filters generally first.</p>
</div>
<div class="sect2">
<h3 id="_web_filter">Web filter</h3>
<div class="paragraph">
<p>When a request is sent to call a controller, the HTTP request is sent to a chain of filters. Activated filters and servlets depend on the path of the request URI.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-security/filter.png" alt="filter" width="800">
</div>
</div>
<div class="paragraph">
<p>In a Spring MVC application you have only one Servlet. This Servlet is an instance of DispatcherServlet. The servlet can handle a single HttpServletRequest and HttpServletResponse.</p>
</div>
<div class="paragraph">
<p>Filters can read the request and stop the filter chain if we have a problem and the filter can also update the response</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451380.145"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(
        ServletRequest request,
        ServletResponse response,
        FilterChain chain)</span> {
	  <span class="hljs-comment">// do something before the rest of the application</span>
    chain.doFilter(request, response); <span class="hljs-comment">// invoke the rest of the application</span>
    <span class="hljs-comment">// do something after the rest of the application</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451380.145')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Filters can be activated only on a given path URI and you can add different filter chain depending on this path</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-security/filter2.png" alt="filter2" width="800">
</div>
</div>
<div class="paragraph">
<p>Spring Security add several filters. And Spring filter will throw an exception if user is not authenticated or if he has no right to access to a resource</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-security/filter3.png" alt="filter3" width="800">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_architecture">Architecture</h3>
<div class="paragraph">
<p>The security context is hold by a SecurityContextHolder. This object uses a ThreadLocal to store its data (one value by user thread)</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-security/architecture.png" alt="architecture" width="500">
</div>
</div>
<div class="paragraph">
<p><code>SecurityContext</code> contains an <code>Authentication</code> object.</p>
</div>
<div class="paragraph">
<p>An <code>Authentication</code> represents the currently authenticated user.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>principal</code> contains the details (often an instance of UserDetails)</p>
</li>
<li>
<p><code>credentials</code> contains the password or the token</p>
</li>
<li>
<p><code>authorities</code> contains the user permissions. These permissions are usually loaded by a <code>UserDetailsService</code> class.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>An <code>Authentication</code> request is processed by an <code>AuthenticationProvider</code>. You can have different  providers in you app. For example,</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/spring-security/architecture2.png" alt="architecture2" width="700">
</div>
</div>
<div class="paragraph">
<p><code>DaoAuthenticationProvider</code> supports username/password based authentication while <code>JwtAuthenticationProvider</code> supports authenticating a JWT token.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_configuration">Configuration</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We can configure our own <code>UserDetailsService</code> to manage the user and their permissions. In this basic example we will use a in memory configuration</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451380.7173"><span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringSecurityConfig</span> {

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROLE_USER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;USER&quot;</span>;

    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">// We create a password encoder</span>
        <span class="hljs-type">PasswordEncoder</span> <span class="hljs-variable">encoder</span> <span class="hljs-operator">=</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();
        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();
        manager.createUser(
                User.withUsername(<span class="hljs-string">&quot;user&quot;</span>).password(encoder.encode(<span class="hljs-string">&quot;myPassword&quot;</span>)).roles(ROLE_USER).build()
        );
        <span class="hljs-keyword">return</span> manager;
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451380.7173')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can add a <code>SecurityFilterChain</code> to secure an http route. The default configuration in Spring Boot is this one</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451380.1633"><span class="hljs-meta">@Bean</span>
<span class="hljs-meta">@Order(SecurityProperties.BASIC_AUTH_ORDER)</span>
SecurityFilterChain <span class="hljs-title function_">defaultSecurityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {
			http.authorizeHttpRequests((requests) <span class="hljs-meta">@LAMBDA</span> requests.anyRequest().authenticated());
			http.formLogin(withDefaults());
			http.httpBasic(withDefaults());
			<span class="hljs-keyword">return</span> http.build();
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451380.1633')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) Ensures that any request to our application requires the user to be authenticated</p>
</li>
<li>
<p>(2) Allows users to authenticate with form based login</p>
</li>
<li>
<p>(3) Allows users to authenticate with HTTP Basic authentication</p>
</li>
</ul>
</div>
<div style="page-break-after: always;"></div>
<div class="paragraph">
<p>But you can use several <code>SecurityFilterChain</code> to implement different security level. You can add another filter to only let admin user access to the route <code>/api/**</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451380.2766"><span class="hljs-meta">@Bean</span>
<span class="hljs-meta">@Order(1)</span>
<span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception {
    <span class="hljs-keyword">return</span> http
            .authorizeHttpRequests((requests) <span class="hljs-meta">@LAMBDA</span> requests
                    .requestMatchers(AntPathRequestMatcher.antMatcher(<span class="hljs-string">&quot;/api/**&quot;</span>)).hasRole(ROLE_USER) <span class="hljs-comment">// (2)</span>
                    .anyRequest().permitAll() <span class="hljs-comment">// (3)</span>
            )
            .formLogin(withDefaults())
            .httpBasic(withDefaults())
            .build();
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451380.2766')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) If you have more than one filter you need to use an annotation <code>Order</code> to define the first one to use</p>
</li>
<li>
<p>(2) requestMatchers states that this HttpSecurity will only be applicable to URLs that start with <code>/api/</code>. And for each URL we want an authenticated user with the User role</p>
</li>
<li>
<p>(3) we permit all other requests</p>
</li>
</ul>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect1">
<h2 id="_get_the_user">Get the user</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The simplest way to retrieve the currently authenticated principal is via a static call to the SecurityContextHolder.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451380.5776"><span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();
<span class="hljs-type">String</span> <span class="hljs-variable">currentPrincipalName</span> <span class="hljs-operator">=</span> authentication.getName();</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451380.5776')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Alternatively, we can also inject the user via the AuthenticationPrincipal annotation in a web controller.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451381.7468"><span class="hljs-meta">@CrossOrigin</span>
<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/api/admin/users&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityController</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">User</span><span class="hljs-params">(String username)</span> {
    }

    <span class="hljs-meta">@GetMapping(path = &quot;/me&quot;)</span>
    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserName</span><span class="hljs-params">(<span class="hljs-meta">@AuthenticationPrincipal</span> UserDetails userDetails)</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(userDetails.getUsername());
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451381.7468')">Copy</button></pre>
</div>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect1">
<h2 id="_check_permission">Check permission</h2>
<div class="sectionbody">
<div class="paragraph">
<p>You can configure your app to secure yours methods. For that, add an annotation <code>PreAuthorize</code> where you need to check a user role</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451381.2063"><span class="hljs-meta">@PreAuthorize(&quot;hasRole(&#x27;ADMIN&#x27;)&quot;)</span> <span class="hljs-comment">// 1</span>
<span class="hljs-meta">@GetMapping(path = &quot;/me&quot;)</span>
<span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserName</span><span class="hljs-params">(<span class="hljs-meta">@AuthenticationPrincipal</span> UserDetails userDetails)</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(userDetails.getUsername());
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451381.2063')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>(1) Here we add a constraint on the user role and user must have the role ADMIN</p>
</li>
</ul>
</div>
<div style="page-break-after: always;"></div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_personalize_your_configuration"><span class="icon">[flask&#93;</span> : Personalize your configuration</h2>
<div class="sectionbody">
<div class="ulist">
<ul>
<li>
<p>Implement a custom config to manage your users in your own <code>UserDetailsService</code>. You must have one classical user and one admin user</p>
</li>
<li>
<p>Configure security to secure all the routes exposed with /api. The user must have the role User or Admin to access to our api.</p>
</li>
<li>
<p>Add a new REST endpoint to return the username. This endpoint must be only accessible to an admin user</p>
</li>
<li>
<p>the H2 console must be also secured and only admins can manage the database via this console</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_unit_tests">Unit tests</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_resolve_error_401">Resolve error 401</h3>
<div class="paragraph">
<p>With Spring Security configuration you have to update your controller tests. You have to simulate a user to not receive a 401 or 403 HTTP error.</p>
</div>
<div class="paragraph">
<p>To simulate a user you can use a Spring Security test annotation called <code>@WithMockUser</code></p>
</div>
<div class="paragraph">
<p>For example in the following test, you can use this annotation to define a user with a given name or roles</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451381.5764"><span class="hljs-meta">@Test</span>
<span class="hljs-meta">@WithMockUser(username = &quot;admin&quot;, roles = &quot;ADMIN&quot;)</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldLoadAWindowAndReturnNullIfNotFound</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
    given(windowDao.findById(<span class="hljs-number">999L</span>)).willReturn(Optional.empty());
        mockMvc.perform(get(<span class="hljs-string">&quot;/api/windows/999&quot;</span>).accept(APPLICATION_JSON))
                <span class="hljs-comment">// check the HTTP response</span>
                .andExpect(status().isOk())
                <span class="hljs-comment">// the content can be tested with Json path</span>
                .andExpect(content().string(<span class="hljs-string">&quot;&quot;</span>));
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451381.5764')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_resolve_error_403">Resolve error 403</h3>
<div class="paragraph">
<p>For put, post or delete HTTP methods, Spring Security add a security level and force you to send a CSRF token. You can read more information on the <a href="https://docs.spring.io/spring-security/reference/features/exploits/csrf.html">Spring website</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_on_a_web_application">On a web application</h3>
<div class="paragraph">
<p>If you use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>, you can update the headers sent in a request. For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-javascript" id="1732912451382.6418"><span class="hljs-keyword">const</span> headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>();
headers.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;Authorization&#x27;</span>, <span class="hljs-string">&#x27;Basic &#x27;</span> + <span class="hljs-title function_">btoa</span>(username + <span class="hljs-string">&quot;:&quot;</span> + password));
<span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;myurl&#x27;</span>, {headers});</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451382.6418')">Copy</button></pre>
</div>
</div>
<div class="sect3">
<h4 id="_in_the_tests">In the tests</h4>
<div class="paragraph">
<p>In your test you can configure csrf like on the code below</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451382.8225"><span class="hljs-meta">@Test</span>
<span class="hljs-meta">@WithMockUser(username = &quot;admin&quot;, roles = &quot;ADMIN&quot;)</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">shouldSwitchWindow</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception {
    <span class="hljs-type">Window</span> <span class="hljs-variable">expectedWindow</span> <span class="hljs-operator">=</span> createWindow(<span class="hljs-string">&quot;window 1&quot;</span>);
    Assertions.assertThat(expectedWindow.getWindowStatus()).isEqualTo(WindowStatus.OPEN);

    given(windowDao.findById(<span class="hljs-number">999L</span>)).willReturn(Optional.of(expectedWindow));

    mockMvc.perform(put(<span class="hljs-string">&quot;/api/windows/999/switch&quot;</span>).accept(APPLICATION_JSON).with(csrf()))
            <span class="hljs-comment">// check the HTTP response</span>
            .andExpect(status().isOk())
            .andExpect(jsonPath(<span class="hljs-string">&quot;@dollar@.name&quot;</span>).value(<span class="hljs-string">&quot;window 1&quot;</span>))
            .andExpect(jsonPath(<span class="hljs-string">&quot;@dollar@.windowStatus&quot;</span>).value(<span class="hljs-string">&quot;CLOSED&quot;</span>));
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451382.8225')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_in_the_api">In the API</h4>
<div class="paragraph">
<p>You can also disable csrf on your global configuration to be able to use your REST API. To do that add</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight">http
    .<span class="hljs-title function_">csrf</span>(<span class="hljs-title class_">AbstractHttpConfigurer</span>::disable)
    .<span class="hljs-title function_">headers</span>(headers @<span class="hljs-variable constant_">LAMBDA</span> headers.<span class="hljs-title function_">frameOptions</span>(<span class="hljs-title class_">HeadersConfigurer</span>.<span class="hljs-property">FrameOptionsConfig</span>::disable));</pre>
</div>
</div>
<div class="paragraph">
<p>in your <code>SpringSecurityConfig</code> when you configure the <code>SecurityFilterChain</code> bean</p>
</div>
</div>
<div class="sect3">
<h4 id="_connect_your_own_login_page">Connect your own login page</h4>
<div class="paragraph">
<p>If nous need to use your own login page, you can configure Spring Security to use it.</p>
</div>
<div class="paragraph">
<p>You can read this <a href="https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/form.html">documentation</a></p>
</div>
</div>
</div>
</div>
</div>`;var xf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_executable_class">Executable class</a></li>
<li><a class="link" fragment="#_types">Types</a></li>
<li><a class="link" fragment="#_immutability">Immutability</a></li>
<li><a class="link" fragment="#_nullability">Nullability</a></li>
<li><a class="link" fragment="#_functions">Functions</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_function_declarations">Function declarations</a></li>
<li><a class="link" fragment="#_default_arguments">Default arguments</a></li>
<li><a class="link" fragment="#_named_arguments">Named arguments</a></li>
</ul>
</li>
<li><a class="link" fragment="#_classes">Classes</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_definition">Definition</a></li>
<li><a class="link" fragment="#_inheritance">Inheritance</a></li>
<li><a class="link" fragment="#_simple_data_object_data_class">Simple data object &amp; data class</a></li>
<li><a class="link" fragment="#_enums">Enums</a></li>
<li><a class="link" fragment="#_interfaces">Interfaces</a></li>
<li><a class="link" fragment="#_inner_class">Inner class</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_your_first_project_in_kotlin"><span class="icon">[flask&#93;</span> : Your first project in Kotlin</a></li>
<li><a class="link" fragment="#_function_extension">Function extension</a></li>
<li><a class="link" fragment="#_higher_order_functions">Higher-Order Functions</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_example_in_language">Example in language</a></li>
<li><a class="link" fragment="#_other_example_write_a_dsl_domain_specific_language">Other example : write a DSL (Domain-specific language)</a></li>
</ul>
</li>
<li><a class="link" fragment="#_more">More</a></li>
<li><a class="link" fragment="#_flask_kotlin_by_the_practise"><span class="icon">[flask&#93;</span> Kotlin by the practise</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_use_println_to_display_a_message_in_the_console">Use println to display a message in the console</a></li>
<li><a class="link" fragment="#_concert_ticket_price">Concert ticket price</a></li>
<li><a class="link" fragment="#_currency_converter">Currency converter</a></li>
<li><a class="link" fragment="#_user_profile">User profile</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In few words Kotlin is</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Concise</strong> Drastically reduce the amount of boilerplate code</p>
</li>
<li>
<p><strong>Interoperable</strong> Leverage existing libraries for the JVM, Android, and the browser. You can call Kotlin code in Java or Java code in Kotlin</p>
</li>
<li>
<p><strong>Safe</strong> Kotlin tries to help you reduce errors like null pointer exceptions</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For several years Java has been trying to catch up with Koltin. Kotlin has allowed a questioning of Java but Java will still take a long time to catch up.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/learn-kotlin.png" alt="Learn Kotlin" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_executable_class">Executable class</h2>
<div class="sectionbody">
<div class="paragraph">
<p>An executable Java class is a class which, when handed over to the JVM, starts its execution at a particular point in the class, the main method.</p>
</div>
<div class="paragraph">
<p>For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451209.0483"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldApplication</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Guillaume&quot;</span>;
        System.out.println(<span class="hljs-string">&quot;Hello EMSE I am &quot;</span> + name);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451209.0483')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In IntelliJ you can use the contextual menu (right click) to run this class and see the result in console</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Hello EMSE I am Guillaume</pre>
</div>
</div>
<div class="paragraph">
<p>With Kotlin you can write to produce the same result.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.4243"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>@<span class="hljs-type">LTString</span>@<span class="hljs-type">GT</span>)</span></span> {
    <span class="hljs-keyword">val</span> name = <span class="hljs-string">&quot;Guillaume&quot;</span>
    println(<span class="hljs-string">&quot;Hello EMSE I am @dollar@name&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.4243')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>You can write functions not attached to a class (the compiler will do it for you)</p>
</li>
<li>
<p>The <code>public</code> visibility is the default in Kotlin and therefore no need to define it each time</p>
</li>
<li>
<p>Semicolons are no longer necessary</p>
</li>
<li>
<p>Kotlin does a lot of type inference (the compiler tries to guess which type you are using) and you don&#8217;t need to define the type if the compiler can infer it (example of the name or you don&#8217;t need to specify the type String)</p>
</li>
<li>
<p>You can use String templates and directly access the content of a variable with <code>@dollar@</code></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you want to test Kotlin code in your browser you can use <a href="https://play.kotlinlang.org" class="bare">https://play.kotlinlang.org</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_types">Types</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Kotlin use <a href="https://kotlinlang.org/docs/reference/basic-types.html">basic types</a>. The most used are</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Integer numbers : Int (Integer in Java), Long</p>
</li>
<li>
<p>Floating-point number : Double, Float</p>
</li>
<li>
<p>String</p>
</li>
<li>
<p>Boolean</p>
</li>
<li>
<p>Arrays</p>
</li>
<li>
<p>Collections : List, Set, Map&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_immutability">Immutability</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Kotlin forces you to use immutability when you develop. An immutable object is an object whose state cannot be modified after it is created. It allows you to write safer and cleaner code.</p>
</div>
<div class="paragraph">
<p>When you want to declare a variable you can use the keyword <strong>val</strong>. We did that in our first example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.6829"><span class="hljs-keyword">val</span> name = <span class="hljs-string">&quot;Guillaume&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.6829')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>When the value is defined you can&#8217;t update it. With the code below, the compiler will fail with an Error "Val cannot be reassigned".</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.031">name = <span class="hljs-string">&quot;Someone else&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.031')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If you need to reassign the value you can use keyword  <strong>var</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.6506"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;Guillaume&quot;</span>
name = <span class="hljs-string">&quot;Someone else&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.6506')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Collections (List, Set, Map&#8230;&#8203;) are also immutable in Kotlin. The code below will fail because type List is immutable and method add does not exist</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.5618"><span class="hljs-keyword">val</span> rooms: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTRoom@</span>GT = listOf()
rooms.add(Room(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Room1&quot;</span>))</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.5618')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>When you want a mutable collection you have dedicated types</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.181"><span class="hljs-keyword">val</span> rooms: <span class="hljs-symbol">MutableList@</span><span class="hljs-symbol">LTRoom@</span>GT = mutableListOf()
rooms.add(Room(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Room1&quot;</span>))</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.181')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_nullability">Nullability</h2>
<div class="sectionbody">
<div class="paragraph">
<p>One of the most common pitfalls in many programming languages, including Java, is that accessing a member of a null reference will result in a null reference exception. Kotlin&#8217;s type system is aimed at eliminating the danger of null references from code.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.887"><span class="hljs-keyword">var</span> a: String = <span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-comment">// Regular initialization means non-null by default</span>
a = <span class="hljs-literal">null</span> <span class="hljs-comment">// compilation error</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.887')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In Kotlin, the type system distinguishes between references that can hold null (nullable references) and those that can not (non-null references). To allow nulls, we can declare a variable as nullable string, written <strong>String?</strong>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.5693"><span class="hljs-keyword">var</span> b: String? = <span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-comment">// can be set null</span>
b = <span class="hljs-literal">null</span> <span class="hljs-comment">// ok</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.5693')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><strong>When you want declare a nullable value add ? to the type</strong></p>
</div>
<div class="paragraph">
<p>For more details read this <a href="https://kotlinlang.org/docs/reference/null-safety.html">article</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_functions">Functions</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_function_declarations">Function declarations</h3>
<div class="paragraph">
<p>A function is define with the keyword <strong>fun</strong>. In Kotlin. Arguments args, returned type are always after  For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.6104"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">double</span><span class="hljs-params">(x: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.6104')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can call this function</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.8025"><span class="hljs-keyword">val</span> result = double(<span class="hljs-number">2</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.8025')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_default_arguments">Default arguments</h3>
<div class="paragraph">
<p>You can use default argument in Kotlin. For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451210.4402"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">double</span><span class="hljs-params">(x: <span class="hljs-type">Int</span> = <span class="hljs-number">4</span>)</span></span>: <span class="hljs-built_in">Int</span> {
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * x
}

double(<span class="hljs-number">2</span>) <span class="hljs-comment">// returns 4</span>
double() <span class="hljs-comment">// returns 8 (the default value is applied)</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451210.4402')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_named_arguments">Named arguments</h3>
<div class="paragraph">
<p>When calling a function, you can name one or more of its arguments. This may be helpful when a function has a large number of arguments</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451211.779"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">(bar: <span class="hljs-type">Int</span> = <span class="hljs-number">0</span>, baz: <span class="hljs-type">Int</span>)</span></span> : <span class="hljs-built_in">Int</span> { <span class="hljs-comment">/*...*/</span> }
<span class="hljs-keyword">val</span> result = foo(baz = <span class="hljs-number">4</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451211.779')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_classes">Classes</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_definition">Definition</h3>
<div class="paragraph">
<p>Classes in Kotlin are declared using the keyword <strong>class</strong>. A class in Kotlin can have a primary constructor and one or more secondary constructors. The primary constructor is part of the class header: it goes after the class name (and optional type parameters).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451211.3938"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">constructor</span>(firstName: String) { <span class="hljs-comment">/*...*/</span> }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451211.3938')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If the primary constructor does not have any annotations or visibility modifiers, the constructor keyword can be omitted:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451211.505"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(firstName: String) { <span class="hljs-comment">/*...*/</span> }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451211.505')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_inheritance">Inheritance</h3>
<div class="paragraph">
<p><strong>By default, Kotlin classes are final: they can\u2019t be inherited</strong>. To make a class inheritable, mark it with the open keyword.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451211.61"><span class="hljs-keyword">open</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>(p: <span class="hljs-built_in">Int</span>)
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span>(p: <span class="hljs-built_in">Int</span>) : Base(p)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451211.61')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>For more detail read this <a href="https://kotlinlang.org/docs/reference/classes.html#inheritance">article</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_simple_data_object_data_class">Simple data object &amp; data class</h3>
<div class="paragraph">
<p>We frequently create classes whose main purpose is to hold data. In such a class some standard functionality and utility functions are often mechanically derivable from the data.</p>
</div>
<div class="paragraph">
<p>Example in Java</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451212.5676"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowDto</span> {
<span class="hljs-keyword">private</span> Long id;
<span class="hljs-keyword">private</span> String name;
<span class="hljs-keyword">private</span> WindowStatus windowStatus;
<span class="hljs-keyword">private</span> String roomName;
<span class="hljs-keyword">private</span> Long roomId;

    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> id;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> {
        <span class="hljs-built_in">this</span>.id = id;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> name;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> {
        <span class="hljs-built_in">this</span>.name = name;
    }

    <span class="hljs-keyword">public</span> WindowStatus <span class="hljs-title function_">getWindowStatus</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> windowStatus;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWindowStatus</span><span class="hljs-params">(WindowStatus windowStatus)</span> {
        <span class="hljs-built_in">this</span>.windowStatus = windowStatus;
    }

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRoomName</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> roomName;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoomName</span><span class="hljs-params">(String roomName)</span> {
        <span class="hljs-built_in">this</span>.roomName = roomName;
    }

    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getRoomId</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> roomId;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoomId</span><span class="hljs-params">(Long roomId)</span> {
        <span class="hljs-built_in">this</span>.roomId = roomId;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> {
        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        <span class="hljs-type">WindowDto</span> <span class="hljs-variable">windowDto</span> <span class="hljs-operator">=</span> (WindowDto) o;
        <span class="hljs-keyword">return</span> Objects.equals(name, windowDto.name) &amp;amp;&amp;amp;
                Objects.equals(roomId, windowDto.roomId);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> Objects.hash(id, name, windowStatus, roomName, roomId);
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451212.5676')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In Kotlin, you can use a <a href="https://kotlinlang.org/docs/reference/data-classes.html">data class</a> to do the same thing</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451212.834"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowDto</span>(
    <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>,
    <span class="hljs-keyword">val</span> name: String,
    <span class="hljs-keyword">val</span> windowStatus: WindowStatus,
    <span class="hljs-keyword">val</span> roomName: String,
    <span class="hljs-keyword">val</span> roomId: <span class="hljs-built_in">Long</span>
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451212.834')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The compiler automatically derives the following members from all properties declared in the primary constructor</p>
</div>
<div class="ulist">
<ul>
<li>
<p>equals()/hashCode() functions</p>
</li>
<li>
<p>toString() of the form "WindowDto(id=12, name=Window1, roomName=S12, roomId=23)";</p>
</li>
<li>
<p>copy() to easily copy this data class</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_enums">Enums</h3>
<div class="paragraph">
<p>The most basic usage of enum classes is implementing type-safe enums:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451212.1035"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Direction</span> {
    NORTH, SOUTH, WEST, EAST
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451212.1035')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_interfaces">Interfaces</h3>
<div class="paragraph">
<p>Interfaces in Kotlin can contain declarations of abstract methods, as well as method implementations. What makes them different from abstract classes is that interfaces cannot store state (they can have properties but these need to be abstract or to provide accessor implementations.)</p>
</div>
<div class="paragraph">
<p>An interface is defined using the keyword <strong>interface</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451212.281"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyInterface</span> {
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> {
        <span class="hljs-comment">// optional body</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451212.281')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>A class or object can implement one or more interfaces</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451212.9521"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> : <span class="hljs-type">MyInterface</span> {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">bar</span><span class="hljs-params">()</span></span> {
        <span class="hljs-comment">// body</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451212.9521')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_inner_class">Inner class</h3>
<div class="paragraph">
<p>When you program in Java or Kotlin, you very often use inner classes.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451212.1636"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> {

    <span class="hljs-keyword">public</span> String name(){
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dev-Mind&quot;</span>;
    }

    <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> {
        <span class="hljs-keyword">public</span> void hello(){
            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello world&quot;</span> + name()); <span class="hljs-comment">// Compilation error @ARROW method name() is not visible</span>
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451212.1636')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Inner classes in Java are non-static by default, so you can use the global methods or attributes of the enclosing class in the inner class. For example in our example, class <code>A</code> can use the  <code>name()</code> method.</p>
</div>
<div class="paragraph">
<p>A non-static inner class has a reference to its enclosing class. When ths inner class is no longer in use, the garbage collector cannot do its job and delete it. Indeed the inner class is considered active (used by the internal class). It is not a problem if your app use singletons (Spring). But in the Android world, on a device with limited resources, it&#8217;s more problematic. Especially if we use inner classes in objects which are very often destroyed and rebuilt (activities are deleted and recreated after each configuration change). Many developers get tricked into introducing memory leaks in their applications in this way.</p>
</div>
<div class="paragraph">
<p>In Java to avoid the problem you have to use <code>static inner class</code>. In Kotlin when you create a nested class you do not have access to the variables and methods of the class (equivalent of a static inner class)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451213.6965"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> {

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span> = <span class="hljs-string">&quot;Dev-Mind&quot;</span>

    <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> {
        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span></span> {
            println(<span class="hljs-string">&quot;Hello world&quot;</span> + name())
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451213.6965')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can still create the equivalent of an inner class using the <code>internal inner class</code> syntax. Once again, the language has chosen to simplify the most common use case.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_your_first_project_in_kotlin"><span class="icon">[flask&#93;</span> : Your first project in Kotlin</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To develop these exercices, you can use IntelliJ, Android or this <a href="https://play.kotlinlang.org/">website</a>.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a main function to display the message "Hello Kotlin World" in the console</p>
</li>
<li>
<p>Create a data class to manage your rooms. You should define</p>
<div class="ulist">
<ul>
<li>
<p>a non nullable <code>id</code> of type <code>Long</code></p>
</li>
<li>
<p>a non nullabe <code>name</code> of type <code>String</code></p>
</li>
<li>
<p>a nullabe <code>currentTemperature</code> of type <code>Double</code> with a default value to null</p>
</li>
</ul>
</div>
</li>
<li>
<p>Create an immutable List in your main function with several rooms. If your class is correct the following code will compile</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451213.6687"><span class="hljs-keyword">val</span> rooms = listOf(
    RoomDto(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Room1&quot;</span>),
    RoomDto(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Room2&quot;</span>, <span class="hljs-number">20.3</span>),
    RoomDto(id = <span class="hljs-number">3</span>, name = <span class="hljs-string">&quot;Room3&quot;</span>, currentTemperature = <span class="hljs-number">20.3</span>),
    RoomDto(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;Room4&quot;</span>, currentTemperature = <span class="hljs-number">19.3</span>),
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451213.6687')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>Display the name of each room in the console. You should use</p>
<div class="ulist">
<ul>
<li>
<p>a <a href="https://kotlinlang.org/docs/collection-transformations.html">map</a> function to extract the name,</p>
</li>
<li>
<p>a <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/join-to-string.html">joinToString</a> function to join all the value in a String with a ',' separator</p>
</li>
<li>
<p>a <code>println</code> function to obtain <code>Room1, Room2, Room3, Room4</code> in the console</p>
</li>
</ul>
</div>
</li>
<li>
<p>Filter the rooms with a temperature greater than 20\xB0 and display the result in the console. You should obtain  <code>Room4</code></p>
</li>
<li>
<p>Declare a nullable variable called mainRoom in your code. Initialize this value with <code>RoomDto(5, "Room5", currentTemperature = 19.3)</code>. Display in the console currentTemperature of the room  (To compile your code you should use a <code>?</code>)</p>
</li>
<li>
<p>Create a function to compute the number of characters in a room name. This function must have one nullable room as argument.</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_function_extension">Function extension</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When we program we use many external libraries, and we do not have control on them. Consider a use case. We have to do statistics by citizen age.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451213.0593"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Citizen</span>(<span class="hljs-keyword">val</span> firstname: String,
                   <span class="hljs-keyword">val</span> lastname: String,
                   <span class="hljs-keyword">val</span> sexe: Sexe,
                   <span class="hljs-keyword">val</span> birthdate: LocalDate)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451213.0593')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>To determine the age you can write a function</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451213.0144"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAge</span><span class="hljs-params">(date: <span class="hljs-type">LocalDate</span>)</span></span> = LocalDate.now().year - date.year

<span class="hljs-keyword">val</span> barackObama = Citizen(<span class="hljs-string">&quot;Barack&quot;</span>, <span class="hljs-string">&quot;Obama&quot;</span>, Sexe.MALE, LocalDate.parse(<span class="hljs-string">&quot;1961-08-04&quot;</span>))
<span class="hljs-keyword">val</span> barackAge = getAge(barackObama.birthdate)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451213.0144')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>With Kotlin you can also extend the <code>LocalDate</code> class and create a new method (function extension) that will be specific to you and that you can use in your whole project. for example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451213.9656"><span class="hljs-function"><span class="hljs-keyword">fun</span> LocalDate.<span class="hljs-title">getAge</span><span class="hljs-params">()</span></span> = LocalDate.now().year - <span class="hljs-keyword">this</span>.year

<span class="hljs-comment">// With this function extension you can write</span>
<span class="hljs-keyword">val</span> barackAge = barackObama.birthdate.getAge()</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451213.9656')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Better instead of exposing a function you can expose a property</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451213.3206"><span class="hljs-keyword">val</span> LocalDate.age
    <span class="hljs-keyword">get</span>() = LocalDate.now().year - <span class="hljs-keyword">this</span>.year

<span class="hljs-keyword">val</span> barackAge = barackObama.birthdate.age</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451213.3206')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_higher_order_functions">Higher-Order Functions</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A higher order function is a function that takes a function as an argument. In this case you don&#8217;t need to pass a lambda when calling the method but you can add an execution block just after the method call</p>
</div>
<div class="paragraph">
<p>Said like that you must be lost and it&#8217;s normal</p>
</div>
<div class="sect2">
<h3 id="_example_in_language">Example in language</h3>
<div class="paragraph">
<p>Kotlin used higher order functions (and extensions) to simplify the use of Java streams</p>
</div>
<div class="listingblock">
<div class="title">kotlin.collections code</div>
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451213.2424"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> @LTT@GT Iterable@LTT@GT.<span class="hljs-title">find</span><span class="hljs-params">(predicate: (<span class="hljs-type">T</span>) @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Boolean</span>)</span></span>: T? {
    <span class="hljs-keyword">return</span> firstOrNull(predicate)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451213.2424')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If we have a collection of speakers we can select the first one with the first name Guillaume via this code</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451214.1055"><span class="hljs-keyword">val</span> guillaume = speakers.firstOrNull {
    it.firstname == <span class="hljs-string">&quot;Guillaume&quot;</span>  <span class="hljs-comment">// it is the current item in the collection</span>
}

<span class="hljs-comment">//  You can also write</span>
<span class="hljs-keyword">val</span> guillaume = speakers.firstOrNull { speaker <span class="hljs-meta">@LAMBDA</span>
    speaker.firstname == <span class="hljs-string">&quot;Guillaume&quot;</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451214.1055')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>To remember in Java equivalent is</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451214.9219"><span class="hljs-type">Speaker</span> <span class="hljs-variable">speaker</span> <span class="hljs-operator">=</span> speakers.stream()
                          .filter(s <span class="hljs-meta">@LAMBDA</span> s.getName().equals(<span class="hljs-string">&quot;Guillaume&quot;</span>))
                          .findFirst()
                          .orElse(<span class="hljs-literal">null</span>)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451214.9219')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The Stream Java API is great to use, but the Kotlin collections and extension functions are even nicer.</p>
</div>
</div>
<div class="sect2">
<h3 id="_other_example_write_a_dsl_domain_specific_language">Other example : write a DSL (Domain-specific language)</h3>
<div class="paragraph">
<p>Kotlin is increasingly known for the flexibility it offers to write a DSL with strong typing.</p>
</div>
<div class="paragraph">
<p>An example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451214.7915"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cell</span>(<span class="hljs-keyword">val</span> content: String)

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Row</span>(<span class="hljs-keyword">val</span> cells: <span class="hljs-symbol">MutableList@</span><span class="hljs-symbol">LTCell@</span>GT = mutableListOf()) {
    <span class="hljs-comment">// Define an Higher-Order Function</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">cell</span><span class="hljs-params">(adder: () @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Cell</span>)</span></span>: Row {
        cells.add(adder())
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span>(<span class="hljs-keyword">val</span> rows: <span class="hljs-symbol">MutableList@</span><span class="hljs-symbol">LTRow@</span>GT = mutableListOf()) {
    <span class="hljs-comment">// Define an Higher-Order Function</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">row</span><span class="hljs-params">(adder: () @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Row</span>)</span></span>: Table {
        rows.add(adder())
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451214.7915')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In my <code>Table</code> class I added a@backtick@ row@backtick@ function (with a function as argument) which allows to add a row. The same was done in the <code>Row</code> class for a cell. So I can write</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451214.036"><span class="hljs-keyword">val</span> table = Table()
    .row { Row().cell { Cell(<span class="hljs-string">&quot;Test&quot;</span>) }}
    .row { Row().cell { Cell(<span class="hljs-string">&quot;Test2&quot;</span>) }}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451214.036')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_more">More</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This is just an introduction. If you want to become a rock star in Kotlin you can read the official documentation: <a href="https://kotlinlang.org/docs/reference/" class="bare">https://kotlinlang.org/docs/reference/</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_kotlin_by_the_practise"><span class="icon">[flask&#93;</span> Kotlin by the practise</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We will use <a href="https://play.kotlinlang.org/" class="bare">https://play.kotlinlang.org/</a> to do the exercices. This website allows you to write and test your Kotlin code in your browser.</p>
</div>
<div class="sect2">
<h3 id="_use_println_to_display_a_message_in_the_console">Use println to display a message in the console</h3>
<div class="paragraph">
<p>You are developed an app on your phone and you want to display a summary of notifications.</p>
</div>
<div class="paragraph">
<p>You have this code to complete. We want to display the number of notifications received. If the number of notifications is less than 100, we want to display the exact number of notifications. If the number of notifications is 100 or more, we want to display 99+ as the number of notifications.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451214.0193"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">val</span> morningNotification = <span class="hljs-number">51</span>
    <span class="hljs-keyword">val</span> eveningNotification = <span class="hljs-number">135</span>

    printNotificationSummary(morningNotification)
    printNotificationSummary(eveningNotification)
}


<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printNotificationSummary</span><span class="hljs-params">(numberOfMessages: <span class="hljs-type">Int</span>)</span></span> {
    <span class="hljs-comment">// Write the code here.</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451214.0193')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The console output should be</p>
</div>
<div class="listingblock">
<div class="content">
<pre>You received 51 notifications
You received 99+ notifications</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_concert_ticket_price">Concert ticket price</h3>
<div class="paragraph">
<p>You are developing a ticketing system for a concert. The ticket price is determined based on the age of the concertgoer.</p>
</div>
<div class="paragraph">
<p>In the initial code provided in the following code snippet, write a program that calculates these age-based ticket prices:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a children&#8217;s ticket price of @dollar@10 for people 12 years old or younger.</p>
</li>
<li>
<p>a standard ticket price of @dollar@20 for people between 13 and 64 years old.</p>
</li>
<li>
<p>a senior ticket price of @dollar@15 for people 65 years old and older.</p>
</li>
<li>
<p>a null value indicate that the price is invalid when a user fills an age out the bounds</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451215.019"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">val</span> child = <span class="hljs-number">5</span>
    <span class="hljs-keyword">val</span> adult = <span class="hljs-number">28</span>
    <span class="hljs-keyword">val</span> senior = <span class="hljs-number">87</span>
    <span class="hljs-keyword">val</span> oops = -<span class="hljs-number">1</span>

    println(<span class="hljs-string">&quot;The movie ticket price for a person aged @dollar@child is @dollar@@dollar@{ticketPrice(child)}.&quot;</span>)
    println(<span class="hljs-string">&quot;The movie ticket price for a person aged @dollar@adult is @dollar@@dollar@{ticketPrice(adult)}.&quot;</span>)
    println(<span class="hljs-string">&quot;The movie ticket price for a person aged @dollar@senior is @dollar@@dollar@{ticketPrice(senior)}.&quot;</span>)
    println(<span class="hljs-string">&quot;The movie ticket price for a person aged oops is @dollar@@dollar@{ticketPrice(oops)}.&quot;</span>)
}

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ticketPrice</span><span class="hljs-params">(age: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span>? {
    <span class="hljs-comment">// Write the code here.</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451215.019')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Complete the ticketPrice() function so that the program prints these lines:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>The movie ticket price for a person aged 5 is @dollar@15.
The movie ticket price for a person aged 28 is @dollar@25.
The movie ticket price for a person aged 87 is @dollar@20.
The movie ticket price for a person aged oops is null.</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_currency_converter">Currency converter</h3>
<div class="paragraph">
<p>You are developing a currency converter app. The app will convert a given amount of money from one currency to another. You will have to call the function <code>convertCurrency()</code> which use a function as last argument (more detail in <a href="/training/kotlin/kotlin_for_java_developer.html#_higher_order_functions">Higher order function</a>])</p>
</div>
<div class="paragraph">
<p>We will suppose that the conversion rate is</p>
</div>
<div class="ulist">
<ul>
<li>
<p>1 USD = 0.95 EUR</p>
</li>
<li>
<p>1 EUR = 1.05 USD</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If you want to use the euro currency in your code you can use the <code>java.util.Currency.getInstance("EUR")</code> static function.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451215.037"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
    <span class="hljs-comment">// Write the code here.</span>
}


<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">convertCurrency</span><span class="hljs-params">(
    amount: <span class="hljs-type">Double</span>,
    initialCurrency: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Currency</span>,
    targetCurrency: <span class="hljs-type">java</span>.<span class="hljs-type">util</span>.<span class="hljs-type">Currency</span>,
    conversionFormula: (<span class="hljs-type">Double</span>) @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Double</span>
)</span></span> {
    <span class="hljs-keyword">val</span> convertedAmount = String.format(<span class="hljs-string">&quot;%.2f&quot;</span>, conversionFormula(amount)) <span class="hljs-comment">// round the result to 2 decimal places</span>
    println(<span class="hljs-string">&quot;@dollar@amount @dollar@initialCurrency can be changed in @dollar@convertedAmount @dollar@targetCurrency.&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451215.037')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The console output should be</p>
</div>
<div class="listingblock">
<div class="content">
<pre>12.3 EUR can be changed in 12.92 USD.
12.3 USD can be changed in 11.69 EUR.</pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_user_profile">User profile</h3>
<div class="paragraph">
<p>You need to create a user profile for an online website. The profile contains the following information:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The username (a String)</p>
</li>
<li>
<p>The user&#8217;s age (a Int)</p>
</li>
<li>
<p>his/her favorite hobby (a String)</p>
</li>
<li>
<p>an optional link to define a favorite hobby partner&#8217;s profile (a nullable profile)</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451215.374"><span class="hljs-comment">// Create a data class to represent the user profile here.</span>
<span class="hljs-comment">// Write the code here.</span>

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> {
    <span class="hljs-keyword">val</span> elodie = Profile(<span class="hljs-string">&quot;Elodie&quot;</span>, <span class="hljs-number">21</span>, <span class="hljs-string">&quot;Tennis&quot;</span>, <span class="hljs-literal">null</span>)
    <span class="hljs-keyword">val</span> eduardo = Profile(<span class="hljs-string">&quot;Eduardo&quot;</span>, <span class="hljs-number">22</span>, <span class="hljs-string">&quot;Tennis&quot;</span>, elodie)

    listOf(elodie, eduardo).forEach{
        println(<span class="hljs-string">&quot;Name : @dollar@{it.username}&quot;</span>)
        <span class="hljs-comment">// Write the code here.</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451215.374')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You should display</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Name : Elodie
Age : 21
Hobby : like Tennis
Name : Eduardo
Age : 22
Hobby : like Tennis  with Elodie</pre>
</div>
</div>
<div class="paragraph">
<p>You are now ready to start your first project in Kotlin.</p>
</div>
</div>
</div>
</div>`;var Cf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_clever_cloud">Clever Cloud</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_account_creation">Account creation</a></li>
<li><a class="link" fragment="#_configure_your_project">Configure your project</a></li>
<li><a class="link" fragment="#_deploy_on_clevercloud">Deploy on Clevercloud</a></li>
</ul>
</li>
<li><a class="link" fragment="#_common_errors">Common errors</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_java_version">Java version</a></li>
<li><a class="link" fragment="#_windows">Windows</a></li>
</ul>
</li>
</ul>
</div>
<div class="sect1">
<h2 id="_clever_cloud">Clever Cloud</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Clever cloud is a platform designed by developers for developers.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/clever-cloud.png" alt="clever cloud" width="800">
</div>
</div>
<div class="paragraph">
<p>You Write Code.They Run It.</p>
</div>
<div class="paragraph">
<p>When you write code, you push sources on Github. Clever Cloud is able to install your app from your Github repository.</p>
</div>
<div class="sect2">
<h3 id="_account_creation">Account creation</h3>
<div class="paragraph">
<p>Sign in on <a href="https://github.com/" class="bare">https://github.com/</a> with your account. If you haven&#8217;t an account you have to create one</p>
</div>
<div class="paragraph">
<p>When you are connected, you can create a new account on <a href="https://www.clever-cloud.com/en/" class="bare">https://www.clever-cloud.com/en/</a></p>
</div>
<div class="paragraph">
<p>Click on Login button</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever-connect0.png" alt="Connection" width="800">
</div>
</div>
<div class="paragraph">
<p>Click on the connect button with Github.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever-connect00.png" alt="Use your github account" width="500">
</div>
</div>
<div class="quoteblock">
<blockquote>
<div class="paragraph">
<p>It&#8217;s important to create your account from your Github account. <strong>When you account is created send me your email and I will add you on the common repository</strong>. When you will receive a confirmation email, click on "Join CoursEmse2023" Button</p>
</div>
</blockquote>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/mail.png" alt="mail" width="800">
</div>
</div>
<div class="paragraph">
<p>EMSE space will be added on your clever cloud environment</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever0.png" alt="clever0" width="800">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_configure_your_project">Configure your project</h3>
<div class="paragraph">
<p>Before this deployment you have to create a folder called "<strong>clevercloud</strong>" in your Spring Boot project</p>
</div>
<div class="paragraph">
<p>Inside, add a file <code>gradle.json</code>.This file will contain</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451190.5916">{
  <span class="hljs-string">&quot;build&quot;</span>: {
    <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;gradle&quot;</span>,
    <span class="hljs-string">&quot;goal&quot;</span>: <span class="hljs-string">&quot;assemble&quot;</span>
  },
  <span class="hljs-string">&quot;deploy&quot;</span>: {
    <span class="hljs-string">&quot;jarName&quot;</span>: <span class="hljs-string">&quot;./build/libs/automacorp-0.0.1-SNAPSHOT.jar&quot;</span>
  }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451190.5916')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>To know the name of your jar go on folder <code>./build/libs/</code>. Push your last changes on your Github repository. For the moment, CleverCloud used only Github</p>
</div>
</div>
<div class="sect2">
<h3 id="_deploy_on_clevercloud">Deploy on Clevercloud</h3>
<div class="paragraph">
<p>You are ready to deploy your app in Clever Cloud.Open <a href="https://console.clever-cloud.com/organisations/orga_1e317288-9f24-486c-b843-6f7d6e311917">EMSE Clever Cloud space</a></p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever0.png" alt="Clever Cloud" width="900">
</div>
</div>
<div class="paragraph">
<p>Click on button called <strong>"Create&#8230;&#8203;"</strong> and select <strong>"an application"</strong>. This application will be generated from your Github repository. Select the project to deploy</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever1.png" alt="Clever Cloud" width="600">
</div>
</div>
<div class="paragraph">
<p>You have to choose the kind of your application. For a Spring Boot application it will be a <strong>Java or Groovy + Gradle</strong> application</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever2.png" alt="Clever Cloud">
</div>
</div>
<div class="paragraph">
<p>The next step is to choose the type and the number of your server.With our free plan you must keep the default configuration and click on <strong>Next</strong> button. But in real life you can choose the power and the number of servers.More your server will be powerful more the price is expensive</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever3.png" alt="Clever Cloud" width="800">
</div>
</div>
<div class="paragraph">
<p>You have to use a specific name. It&#8217;s important when you have several apps.In our case you have to use <code><strong>automacorp-firstname-lastname</strong></code>. You must also select in which zone of the world your application will be deployed (you can only select France in this lab).</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever4.png" alt="Clever Cloud" width="800">
</div>
</div>
<div class="paragraph">
<p>In the next step you can choose if you need an add-on as a database for example. We don&#8217;t need to install a database because your app use an embedded H2 database. Click on <strong>I don&#8217;t need any add-ons</strong> button</p>
</div>
<div class="paragraph">
<p>You can define environment variables and it&#8217;s important for us. We need to override the default Java Version used by Clever Cloud. For that add a new environment variables called</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>CC_JAVA_VERSION</code> and with a value equals to 17.</p>
</li>
<li>
<p><code>PORT</code> and with a value equals to 8080.</p>
</li>
</ol>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever6.png" alt="Clever Cloud" width="900">
</div>
</div>
<div class="paragraph">
<p>Installation starts and you have to wait several minutes.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever7.png" alt="Clever Cloud" width="900">
</div>
</div>
<div class="paragraph">
<p>You can explore different section to update the app setup</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever7_1.png" alt="Clever Cloud" width="200">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Overview : contains buttons to reinstall your app and the link to access to your app</p>
</li>
<li>
<p>Information</p>
</li>
<li>
<p>Scalability</p>
</li>
<li>
<p>Domain names : helps to personalize the URL of its application or parameter its own domain main</p>
</li>
<li>
<p>Environment variables</p>
</li>
<li>
<p>Service dependencies</p>
</li>
<li>
<p>Exposed configuration</p>
</li>
<li>
<p>Activity</p>
</li>
<li>
<p>Logs if deployment fail you have to go in this section to find the error</p>
</li>
<li>
<p>Metrics</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Define a custom URL to access to your application and click on the star to use it by default</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/cloud/clever8.png" alt="clever8" width="900">
</div>
</div>
<div class="paragraph">
<p>Now you can use your app deployed on the Internet. This app will be automatically redeployed, when you will push a new commit on Github. If you have done previous lessons, you should open http://[yourname].cleverapps.io/swagger-ui/index.html</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_common_errors">Common errors</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_java_version">Java version</h3>
<div class="paragraph">
<p>If you have this error</p>
</div>
<hr>
<div class="paragraph">
<p>2023-09-05T21:04:32+02:00 - Incompatible because this component declares a component for use during compile-time, compatible with Java 17 and the consumer needed a component for use during runtime, compatible with Java 11
---</p>
</div>
<div class="paragraph">
<p>You forgot to follow the section on environment variables</p>
</div>
</div>
<div class="sect2">
<h3 id="_windows">Windows</h3>
<div class="paragraph">
<p>If you are on Windows you can have this error</p>
</div>
<div class="listingblock">
<div class="content">
<pre>2020-11-23T13:58:00+01:00 A gradlew script has been found. Let's use it.
2020-11-23T13:58:01+01:00 /home/bas/rubydeployer/scripts/build-java.sh: line 9: ./gradlew: Permission denied
2020-11-23T13:58:01+01:00 Build failed</pre>
</div>
</div>
<div class="paragraph">
<p>To fix it you can follow <a href="https://medium.com/@akash1233/change-file-permissions-when-working-with-git-repos-on-windows-ea22e34d5cee">this article</a>.Or execute this command</p>
</div>
<div class="listingblock">
<div class="content">
<pre>git update-index --chmod=+x gradlew
git push origin main</pre>
</div>
</div>
</div>
</div>
</div>`;var Sf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_android_ecosystem">Android ecosystem</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_android_the_most_used_os">Android the most used OS</a></li>
<li><a class="link" fragment="#_principle_of_mobile_programming">Principle of mobile programming</a></li>
</ul>
</li>
<li><a class="link" fragment="#_android_platform">Android platform</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_linux_kernel">Linux kernel</a></li>
<li><a class="link" fragment="#_hardware_abstraction_layer_hal">Hardware abstraction layer (HAL)</a></li>
<li><a class="link" fragment="#_kotlin_language">Kotlin Language</a></li>
<li><a class="link" fragment="#_development_tool_and_ide">Development tool and IDE</a></li>
<li><a class="link" fragment="#_security">Security</a></li>
</ul>
</li>
<li><a class="link" fragment="#_fragmentation">Fragmentation</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_fragmentation_on_the_os_versions">Fragmentation on the OS versions</a></li>
<li><a class="link" fragment="#_screen_level_fragmentation">Screen-level fragmentation</a></li>
<li><a class="link" fragment="#_fragmentation_at_the_hardware_level">Fragmentation at the hardware level</a></li>
</ul>
</li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>To understand the specifics of Android development it is important to understand how the platform was built</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/intro/android-intro.png" alt="Android course step1" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_android_ecosystem">Android ecosystem</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_android_the_most_used_os">Android the most used OS</h3>
<div class="paragraph">
<p>There are two major players in the mobile world: Apple (iOS) and Google (Android).</p>
</div>
<div class="paragraph">
<p>Android is today the most used mobile OS in the world.</p>
</div>
<div class="paragraph">
<p>Nearly <a href="https://gs.statcounter.com/os-market-share">70% of users</a> in Western countries use this platform. In Africa or Asia, Apple&#8217;s pricing policy means that Android market shares are even stronger and continue to climb.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/intro/android_vs_ios.png" alt="Android usage" width="800">
</div>
</div>
<div class="paragraph">
<p>Doing mobile programming still has an interest. Access to IT (web or other) is increasingly done with <a href="https://gs.statcounter.com/platform-market-share/desktop-mobile-tablet">mobiles and tablets</a>.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/intro/desktop_vs_mobile.png" alt="Android in mobile market" width="800">
</div>
</div>
<div class="paragraph">
<p>Android has become the <a href="https://gs.statcounter.com/os-market-share">most used OS</a> worldwide for all systems combined.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/intro/os_market.png" alt="Android vs other OS" width="800">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_principle_of_mobile_programming">Principle of mobile programming</h3>
<div class="paragraph">
<p>Mobility has transformed the devices we used. When you are on a desktop PC or a laptop you always have approximately the same components: CPU, graphics card, hard drive, photo card reader, input/output ports.</p>
</div>
<div class="paragraph">
<p>On a mobile you will have more components to help you in this context of mobility: GPS, camera, accelometer, pedometer&#8230;&#8203; We have more and more sensors to interpret the context of use of the device</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/intro/sensors.png" alt="Android sensors" width="800">
</div>
</div>
<div class="paragraph">
<p>The price of a device depends on the number and quality of all these sensors. Today Android is present everywhere</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/intro/everywhere.png" alt="Android everywhere" width="800">
</div>
</div>
<div class="paragraph">
<p>And you have different versions of Android. One for each platform</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/intro/platform.png" alt="Android vs other OS" width="1000">
</div>
</div>
<div class="sect3">
<h4 id="_when_use_native_programming">When use native programming</h4>
<div class="paragraph">
<p>The specificity of mobile programming is to offer applications that recover and aggregate the data emitted by the different sensors to meet a user need. When you want to interface with these sensors, bring responsiveness to your applications, native development is the solution.</p>
</div>
</div>
<div class="sect3">
<h4 id="_when_use_web_programming">When use web programming</h4>
<div class="paragraph">
<p>Creating a mobile app to display static content doesn&#8217;t make sense. For this need, we will prefer responsive web applications (PWA) which are much more optimal and less expensive. A native application must be dynamic and take advantage of the APIs and sensors exposed by the devices. And today web APIs offer solutions for interacting with a device&#8217;s sensors.</p>
</div>
</div>
<div class="sect3">
<h4 id="_combine_the_two_worlds">Combine the two worlds</h4>
<div class="paragraph">
<p>Today there are solutions to develop once and deploy either on the web or native code on Android or Ios. <a href="https://flutter.dev/">Flutter</a>, for example, is widely used today. In the Android world Google is working with Jetbrains on <a href="https://developer.android.com/jetpack/compose">Jetpack compose</a> which will allow the same thing via a Kotlin API.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_android_platform">Android platform</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Here is a simplified image of the Android platform</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/intro/platform2.png" alt="Android vs other OS" width="800">
</div>
</div>
<div class="sect2">
<h3 id="_linux_kernel">Linux kernel</h3>
<div class="paragraph">
<p>Android was built on a <a href="https://www.kernel.org/">Linux kernel</a>. But Android is not completely Open Source. Only a little <a href="https://source.android.com/">part</a> is free of rights.</p>
</div>
<div class="paragraph">
<p>Android draws on the strengths of Linux to provide a stable and reliable OS: memory management, process management, security, etc.</p>
</div>
<div class="paragraph">
<p>And thanks to Android, Linux is the most used OS in the world :-)</p>
</div>
</div>
<div class="sect2">
<h3 id="_hardware_abstraction_layer_hal">Hardware abstraction layer (HAL)</h3>
<div class="paragraph">
<p>Android offers a virtual machine to execute bytecode. This is not a classic JVM. Google engineers tried to work on bytecode with a smaller memory footprint.</p>
</div>
<div class="paragraph">
<p>In Android the compiler will create <code>.dex</code> files (Dalvik executable). Dalvik was the first compiler used on the platform. Like current JVMs, Dalvik transformed bytecode into machine language at runtime: Just In Time (JIT) compilation.</p>
</div>
<div class="paragraph">
<p>Today this virtual machine has been replaced by ART (Android Runtime). The transformation into machine language is done when the application is installed: AOT (ahead of time) compilation. As the bytecode is compiled into machine language earlier, applications launch faster and the CPU is less required during execution (and therefore preserves your battery).</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/blog/2019/android_pf_02.png" alt="Android compilation" width="1000">
</div>
</div>
<div class="paragraph">
<p>I deliberately misused language by indicating that the bytecode was transformed into machine language. This is not really the case. If we really had machine language we would no longer need a VM.</p>
</div>
<div class="paragraph">
<p>In fact during installation the bytecode is transformed into an intermediate format: .oat files (ahead of time). The VM is necessary because it will manage memory allocations and freeing up space with the Garbage collector. Even if compilation is no longer Just In Time, optimizations are still made at runtime so that the code executes as quickly as possible.</p>
</div>
<div class="paragraph">
<p>You can find more information in the <a href="https://source.android.com/docs/core/runtime">documentation</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_kotlin_language">Kotlin Language</h3>
<div class="paragraph">
<p>In 2017 a big announcement was made at Google IO. The Kotlin language became the second reference language for developing applications. 2 years later 50% of developers use Kotlin and Google announced at Google I/O 2019 that the platform was becoming Kotlin-first. They recommend starting new developments in Kotlin.</p>
</div>
<div class="paragraph">
<p>Developing today on Android with the Java language is very painful, because you have a lot of tedious code to write.</p>
</div>
</div>
<div class="sect2">
<h3 id="_development_tool_and_ide">Development tool and IDE</h3>
<div class="paragraph">
<p>Initially the recommended development studio was Eclipse but the more features were enriched, the longer the IDE took and became unusable. Google therefore worked in partnership with JetBrains (publisher of Webstorm, IntelliJ, Kotlin) to adapt their Open Source version and create Android Studio .</p>
</div>
<div class="paragraph">
<p>You will find inside this IDE all the functionalities necessary for development. You have utilities for</p>
</div>
<div class="ulist">
<ul>
<li>
<p>check your code</p>
</li>
<li>
<p>manage different versions of the Android SDK</p>
</li>
<li>
<p>launch a virtual device on your machine to manually or automatically test your code</p>
</li>
<li>
<p>monitor and debug your application</p>
</li>
<li>
<p>package your application in order to publish it on the Google store</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_security">Security</h3>
<div class="paragraph">
<p>As Android is based on a Linux kernel, the platform benefits from security implemented at the kernel level.</p>
</div>
<div class="paragraph">
<p>When an application is installed, Android assigns it an user ID. Each application is launched in a separate process and uses its own ART virtual machine. Execution rights are specific to this application user. The application has no idea of \u200B\u200Bthis ID. So an application cannot access the data of another application because everything is closed by this device. The same goes for native apps.</p>
</div>
<div class="paragraph">
<p>Each application is therefore isolated from the others and has its own CPU, memory, etc. resources.</p>
</div>
<div class="paragraph">
<p>On top of this "low level" security, Android has added a more "high level" level of security over time. Each external action that can be requested by your application must be declared in a manifest file. For example</p>
</div>
<div class="ulist">
<ul>
<li>
<p>read contacts,</p>
</li>
<li>
<p>to take a picture,</p>
</li>
<li>
<p>access the Internet</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A user can choose to leave the requested rights to the installation, but he can also choose to remove certain rights. Personally I limit the number of applications that can connect to the network, can use my contacts, my files, etc.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fragmentation">Fragmentation</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Fragmentation is a real problem on the platform and as a developer you will have to make choices based on your target user.</p>
</div>
<div class="paragraph">
<p>Android is an OS that can be used by any phone manufacturer. As I said above, the cost of adapting a version to a device is not negligible. This is why manufacturers limit these updates. Their interest is to sell new devices and not to maintain them.</p>
</div>
<div class="paragraph">
<p>Fragmentation is not only linked to OS versions but we also have fragmentation linked to devices and their components. Depending on the price range, each device may have different technical characteristics.</p>
</div>
<div class="sect2">
<h3 id="_fragmentation_on_the_os_versions">Fragmentation on the OS versions</h3>
<div class="paragraph">
<p>For several years, Google has released a new version of Android per year. Typically developers can start testing and providing feedback in the second and third quarters and the release is made available in the last quarter of a calendar year.</p>
</div>
<div class="paragraph">
<p>Each new version is associated with a letter (which increments with each version) and a dessert (chosen by the Android team). The dessert is often a french dessert. Since the beginning, the Android team has included several French people.</p>
</div>
<div class="paragraph">
<p>When you start a new development you must make a version choice. In fact you have to make two choices</p>
</div>
<div class="ulist">
<ul>
<li>
<p>define a target version: generally you should always choose the latest version of the OS</p>
</li>
<li>
<p>define a minimum version: you define the minimum version of the OS supported. The compiler is able to alert you when you try to use an API that is not supported</p>
</li>
</ul>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/intro/versions.png" alt="Android versions" width="800">
</div>
</div>
<div class="paragraph">
<p>Version usage statistics are published regularly on <a href="https://developer.android.com/about/dashboards">this dashboard</a>, which compiles the data reported by Google Store (the official source of Android applications).</p>
</div>
<div class="paragraph">
<p>In the web world, you can use polyfills to use the latest features of the language in browsers that do not yet implement these features. In the Android world, Google also suggests using specific objects that manage this backward compatibility. The base class for developing a screen is <code>android.app.Activity</code>, but in practice we will always use <code>androidx.appcompat.app.AppCompatActivity</code>, which was developed to port the latest news to old Android releases. This is the same thing for all main objects.</p>
</div>
</div>
<div class="sect2">
<h3 id="_screen_level_fragmentation">Screen-level fragmentation</h3>
<div class="paragraph">
<p>After versions, the biggest difference between devices concerns screen quality and size.</p>
</div>
<div class="paragraph">
<p>As a reminder</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <strong>resolution</strong> of a screen represents the number of horizontal pixels multiplied by the number of vertical pixels. For example (800 x 600)</p>
</li>
<li>
<p>the <strong>size</strong> of a screen is the number of inches of the diagonal of the screen</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Android offers a classification linked to the width of a screen.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/blog/2019/android_fg_03.png" alt="Android vs other OS" width="1000">
</div>
</div>
<div class="paragraph">
<p>As in the web world, you must adapt your UI either by using components and resizable layouts, or by using different layouts depending on the size (in Android you can use fragments)</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/blog/2019/android_fg_04.png" alt="Android vs other OS" width="1000">
</div>
</div>
<div class="paragraph">
<p><strong>Pixel density</strong> is the number of dots per inch (dot per inch \u21D2 dpi). Density is important on a device. For example, if you display an image expressed in pixels on 2 screens of different density, you will not have the same rendering.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/blog/2019/android_fg_05.png" alt="Pixel density" width="700">
</div>
</div>
<div class="paragraph">
<p>If we display the same images expressed with the <strong>dp</strong> unit (density-independent pixels) you will have the following result</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/blog/2019/android_fg_06.png" alt="dp unit" width="700">
</div>
</div>
<div class="paragraph">
<p>The rule is to <strong>never express sizes in px in an application but always in dp</strong> (in the web world we will use the em unit). To express the size of the fonts, you will instead use the unit sp (scalable pixels) which has the advantage of increasing depending on the user accessibility settings.</p>
</div>
<div class="paragraph">
<p>You will be able to create different resources depending on the size. When you have a nice screen with good resolution and high density, you will expect quality images. These same images have no interest on screens that are not capable of displaying them.</p>
</div>
</div>
<div class="sect2">
<h3 id="_fragmentation_at_the_hardware_level">Fragmentation at the hardware level</h3>
<div class="paragraph">
<p>We have focused on the 2 biggest differences between devices but we could go further because you also have a big difference in quality and performance in terms of the basic components of a mobile or tablet. You do not have the same components in entry-level devices and more luxurious ones</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/blog/2019/android_fg_07.png" alt="Hardware Fragmentation" width="1000">
</div>
</div>
<div class="paragraph">
<p>To provide a good user experience, you can apply a few simple rules</p>
</div>
<div class="paragraph">
<p>As your users can and most have limited resources try to</p>
</div>
<div class="ulist">
<ul>
<li>
<p>limit network calls which consume a lot of resources and therefore use up the battery,</p>
</li>
<li>
<p>ensure that you have a deliverable of a reasonable size. If you integrate a lot of images make several archives with different targets depending on the quality of the devices</p>
</li>
<li>
<p>avoid storing too much data on your users' phone (either on disk or in the shared database). If you must store items, plan to purge unnecessary items</p>
</li>
<li>
<p>favor dark UIs which preserve the battery</p>
</li>
<li>
<p>apply the KISS principle (keep it simple, stupid)</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We have just seen how the platform was built and the problems related to fragmentation. In the next course we will get down to business and look at how to develop a first Android application.</p>
</div>
<div class="paragraph">
<p>If you are interested in the platform, I advise you to follow a few enthusiasts (Googlers or not): Chet Haase, Jake Wharton, Romain Guy, Cyril Mottier</p>
</div>
<div class="paragraph">
<p>If you want more information you can consult <a href="https://developer.android.com" class="bare">https://developer.android.com</a> and if you are a fan of podcasts in French I advise you to follow <a href="http://androidleakspodcast.com/" class="bare">http://androidleakspodcast.com/</a></p>
</div>
</div>
</div>`;var Tf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_android_studio">Android studio</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_installation">Installation</a></li>
<li><a class="link" fragment="#_update_android_studio">Update Android Studio</a></li>
<li><a class="link" fragment="#_update_android_sdk">Update Android SDK</a></li>
</ul>
</li>
<li><a class="link" fragment="#_fundamental_concepts">Fundamental concepts</a></li>
<li><a class="link" fragment="#_flask_a_first_example_with_jetpack_compose"><span class="icon">[flask&#93;</span> : A first example with Jetpack compose</a></li>
<li><a class="link" fragment="#_most_important_files">Most important files</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_manifest_file">Manifest file</a></li>
<li><a class="link" fragment="#_activity">Activity</a></li>
<li><a class="link" fragment="#_resource_files">Resource files</a></li>
<li><a class="link" fragment="#_gradle_file">Gradle file</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_launch_your_application"><span class="icon">[flask&#93;</span> : Launch your application</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_configure_a_real_android_device">Configure a real Android device</a></li>
<li><a class="link" fragment="#_configure_a_virtual_device">Configure a virtual device</a></li>
<li><a class="link" fragment="#_run_your_app">Run your app</a></li>
</ul>
</li>
<li><a class="link" fragment="#_resources">Resources</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>The aim of this course is to learn you, how write a simple application for Android and how to run it on your phone.
To do that, we will develop with Kotlin language.
If you know Java, everything will be easier with Kotlin.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/android-course1.png" alt="Android course step1" width="800">
</div>
</div>
<div class="paragraph">
<p>We have a limited number of lesson hours. We will therefore quickly go over some concepts.
If you want to go deeper, you will find more informations on <a href="https://developer.android.com/" class="bare">https://developer.android.com/</a></p>
</div>
<div class="paragraph">
<p>The aim is to be able to develop a simple application to call a REST API developed in Java (Spring) to display building rooms and manage windows in these rooms. It is necessary to ventilate as much as possible rooms, but as winter approaches it will become important to heat the buildings to ensure user comfort. Windows should be open during and after classes, closed at night or in case of heavy rain or severe cold.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_android_studio">Android studio</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Android studio is the tool we use to write Android code.
You need to install it on your computer (installation requires 900MB) on <a href="https://developer.android.com/studio" class="bare">https://developer.android.com/studio</a>.</p>
</div>
<div class="sect2">
<h3 id="_installation">Installation</h3>
<div class="paragraph">
<p>For a Linux installation you have to go in the installation directory (for me ~/appli) with a terminal and launch script <code>launch.sh</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-shell" id="1732912451137.1313">cd ~/appli/android-studio/bin
sh ./studio.sh</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451137.1313')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Follow the wizard and choose a standard installation.
It&#8217;s important to do that to download the last version of Android SDK, recent images for Emulator&#8230;&#8203;</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio.png" alt="Follow wizard" width="700">
</div>
</div>
<div class="paragraph">
<p>After the installation, you should have this screen</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio1.png" alt="Follow wizard" width="700">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_update_android_studio">Update Android Studio</h3>
<div class="paragraph">
<p>It&#8217;s always better to use the last version of Android Studio. To update it, you can go in the menu <strong>Help @GT Check for updates</strong>.</p>
</div>
<div class="paragraph">
<p>If a version is available, you can download it and install it.</p>
</div>
</div>
<div class="sect2">
<h3 id="_update_android_sdk">Update Android SDK</h3>
<div class="paragraph">
<p>If you already have a version of Android Studio on your laptop, you should update Android Sdk.
For that go on menu <strong>Tools @GT SDK manager</strong></p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio-update1.png" alt="Menu SDK manager" width="800">
</div>
</div>
<div class="paragraph">
<p>Below on my example, I choose to install the last version of the SDK, keep the version 14 and remove Android 13</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio-update2.png" alt="Choose SDK versions" width="800">
</div>
</div>
<div class="paragraph">
<p>When you develop in Android you should always do it on the last SDK version. Google requires you to always target this latest version when you publish apps to the official store. In our case we have to target the VanillaCream version (API level 35)</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_fundamental_concepts">Fundamental concepts</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Android apps are built as a combination of components that can be invoked individually.
We have several kind of components</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Activity</strong> : an activity is the entry point for interacting with the user.
It represents a single screen with a user interface</p>
</li>
<li>
<p><strong>Service</strong> : a service is an entry point for keeping an app running in the background (app data synchronization, media player&#8230;&#8203;)</p>
</li>
<li>
<p><strong>Broadcast provider</strong> : A broadcast receiver is a component that enables the system to deliver events to the app (low battery, screen rotation, dark mode&#8230;&#8203;).</p>
</li>
<li>
<p><strong>Content provider</strong> : A content provider manages a shared set of app data that you can store in the file system, in a SQLite database, on the web, or on any other persistent storage location that your app can access.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In this course we will only manipulate activities.</p>
</div>
<div class="paragraph">
<p>After you will finish your first app, you can learn more about the other app components on the <a href="https://developer.android.com/guide/components/fundamentals">Google developper website</a>.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s focus on activities.</p>
</div>
<div class="paragraph">
<p>When you click on your app&#8217;s icon on your phone, you will launch the "main" activity.
This activity is often your home activity from which you will launch other activities.</p>
</div>
<div class="paragraph">
<p>An activity interact with an XML resource file where your view content is defined.
Android allows you to provide different resources for different devices.
For example, you can create different layouts for different screen sizes.
The system determines which layout to use based on the screen size of the current device.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-activities.png" alt="A view is an activity and an XML file" width="800">
</div>
</div>
<div class="paragraph">
<p>Note that there is also another important concept in Android development with the <a href="https://developer.android.com/guide/fragments?hl=en">fragments</a>. A Fragment represents a reusable portion of your app&#8217;s UI. A fragment defines and manages its own layout, has its own lifecycle, and can handle its own input events. Fragments can&#8217;t live on their own. They must be hosted by an activity.</p>
</div>
<div class="paragraph">
<p>Another remark, today you can always write your screen interface in an XML file. But you can also do this job in Kotlin with the Jetpack Compose library. This library is a modern toolkit for building native Android UI. It simplifies and accelerates UI development on Android.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/jetpack-compose.svg" alt="Jetpacj compose" width="60">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_a_first_example_with_jetpack_compose"><span class="icon">[flask&#93;</span> : A first example with Jetpack compose</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this lab, you will learn how create a new Android project with Android Studio</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Launch Android Studio. If you need to install it see you on the <a href="http://localhost:8080/training/android/android-first-app.html#_android_studio">first chapter</a></p>
</li>
<li>
<p>In the Welcome to Android Studio window, click Start a new Android Studio project. If you have a project already opened, select <strong>File @GT New @GT New Project.</strong></p>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio1.png" alt="Follow wizard" width="700">
</div>
</div>
</li>
<li>
<p>Android Studio will initialize a new project with an activity.
It asks you to select a template for this activity.
In the <strong>Select a Project Template window</strong>, select <strong>Empty Activity</strong> (in JetPack compose) and click Next.</p>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio2.png" alt="Select project type" width="700">
</div>
</div>
</li>
<li>
<p>In the next wizard window, you have to define the app name and the language</p>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio-new.png" alt="New project" width="700">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Enter <em>automacorp</em> in the <strong>Name</strong> field.</p>
</li>
<li>
<p>Enter <em>com.automacorp </em>in the <strong>Package name</strong> field.</p>
</li>
<li>
<p>If you&#8217;d like to place the project in a different folder, change its <strong>Save location</strong>.</p>
</li>
<li>
<p>Select <em>Kotlin</em> from the <strong>Language</strong> drop-down menu.</p>
</li>
<li>
<p>Select the lowest version of Android your app will support in the Minimum SDK field.
A message indicates you on how many device your app will be available.
If you want to target more devices you can select a lower API version.
If you want to use last Android features you can select higher version.
You can click on <strong>Help me choose</strong> link to select the good API version</p>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-versions.png" alt="API versions" width="700">
</div>
</div>
</li>
</ul>
</div>
</li>
<li>
<p>Click on <strong>Finish</strong> button.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>After some processing time for code generation, the project appears in Android Studio.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-studio3.png" alt="Follow wizard" width="1000">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_most_important_files">Most important files</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Now take a moment to review the most important files.
<a href="https://developer.android.com/studio">Android Studio</a> is organized like <a href="https://www.jetbrains.com/idea/">IntelliJ</a>, used during labs about Spring Framework. The core of these software are common and made by <a href="https://www.jetbrains.com/">Jetbrains</a>.</p>
</div>
<div class="paragraph">
<p>First, be sure the Project window is open (select <strong>View @GT Tool Windows @GT Project</strong>) and the Android view is selected from the drop-down list at the top of that window.
This Android view let see you the main files of your Android project</p>
</div>
<div class="sect2">
<h3 id="_manifest_file">Manifest file</h3>
<div class="paragraph">
<p><strong>File :</strong> <strong><em>app @GT manifests @GT AndroidManifest.xml</em></strong></p>
</div>
<div class="paragraph">
<p>Manifest file is a kind of project id card.</p>
</div>
<div class="paragraph">
<p>The manifest file describes essential information about your app to the Android build tools, the Android operating system, and Google Play.</p>
</div>
<div class="paragraph">
<p>All activities must be defined inside and one of them will be defined as entry point for your app (with an intent filter).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" id="1732912451138.369"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">application</span> <span class="hljs-attr">android:allowbackup</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:dataextractionrules</span>=<span class="hljs-string">&quot;@xml/data_extraction_rules&quot;</span> <span class="hljs-attr">android:fullbackupcontent</span>=<span class="hljs-string">&quot;@xml/backup_rules&quot;</span> <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher&quot;</span> <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/app_name&quot;</span> <span class="hljs-attr">android:roundicon</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher_round&quot;</span> <span class="hljs-attr">android:supportsrtl</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/Theme.Automacorp&quot;</span> <span class="hljs-attr">tools:targetapi</span>=<span class="hljs-string">&quot;31&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span> <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:label</span>=<span class="hljs-string">&quot;@string/app_name&quot;</span> <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/Theme.Automacorp&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>

                <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">category</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451138.369')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_activity">Activity</h3>
<div class="paragraph">
<p>You can see 3 packages <code>com.automacorp</code> in Android view.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The first one (not suffixed) contains all your Kotlin files used to write your app and our first activity</p>
</li>
<li>
<p>The second (suffixed with androidTest) contains test files executed to test your app on a device or on an emulator.</p>
</li>
<li>
<p>The last one (suffixed with test) contains unit test files used to control your code locally at each build</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Unfortunately we don&#8217;t have enough time to see how to write these tests during our labs.</p>
</div>
<div class="paragraph">
<p>But be aware that if you want to create a sustainable application, testing is the best way to limit regressions and make it easier to manage your application over time.</p>
</div>
<div class="paragraph">
<p>You can find more information about tests <a href="https://developer.android.com/training/testinghere">here</a>.</p>
</div>
<div class="paragraph">
<p><strong>File :</strong> <strong><em>app @GT java @GT com.automacorp @GT MainActivity</em></strong></p>
</div>
<div class="sect3">
<h4 id="_the_code_to_create_an_activity">The code to create an activity</h4>
<div class="paragraph">
<p>This is the main activity and it&#8217;s the entry point for your app.</p>
</div>
<div class="paragraph">
<p>When you build and run your app, the system launches an instance of this Activity and loads its layout.</p>
</div>
<div class="paragraph">
<p>Each activity (as each components in Android) has a lifecyle and you can interact at each step (ie you can overload a method to add a behavior or some code in a lifecycle phase).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/android-activity-lifecycle.png" alt="Activity lifecyle">
</div>
</div>
<div class="paragraph">
<p>For example in <code>MainActivity</code>, the view is associated in the <code>onCreate</code> function. In this example the work is done in the <code>setContent</code> block. This block is used to declare which Jetpack Compose components will be used to create the view. We load a custom type (ie <code>AutomacorpTheme</code>) and a <code>Scaffold</code> component. The <code>Scaffold</code> component is a layout component that provides a material design layout structure for the screen.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451139.7637"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">ComponentActivity</span>() {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            AutomacorpTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;
                    Greeting(
                        name = <span class="hljs-string">&quot;Android&quot;</span>,
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451139.7637')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_jetpack_component">Jetpack component</h4>
<div class="paragraph">
<p><code>Greeting</code> is a composable function. A function composable has the <code>@Composable</code> annotation.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451139.2546"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Text(text = <span class="hljs-string">&quot;Hello @dollar@name!&quot;</span>, modifier = modifier)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451139.2546')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>A few noteworthy things about this function:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The function is annotated with the @Composable annotation. All Composable functions must have this annotation; this annotation informs the Compose compiler that this function is intended to convert data into UI.</p>
</li>
<li>
<p>The function takes in data. Composable functions can accept parameters, which allow the app logic to describe the UI. In this case, our widget accepts a String so it can greet the user by name.</p>
</li>
<li>
<p>The function displays text in the UI. It does so by calling the Text() composable function, which actually creates the text UI element. Composable functions emit UI hierarchy by calling other composable functions.</p>
</li>
<li>
<p>The function doesn&#8217;t return anything. Compose functions that emit UI do not need to return anything, because they describe the desired screen state instead of constructing UI widgets.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This function is fast, idempotent, and free of side-effects. The function describes the UI without any side-effects, such as modifying properties or global variables.</p>
</div>
</div>
<div class="sect3">
<h4 id="_preview_the_component">Preview the component</h4>
<div class="paragraph">
<p>To test your app, you can run it on your phone or on an emulator. We will see that in the next chapter.</p>
</div>
<div class="paragraph">
<p>But you can write a simple function to be able to test a composable alone. The @Preview annotation lets you preview your composable functions within Android Studio without having to build and install the app to an Android device or emulator. The annotation must be used on a composable function that does not take in parameters.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451139.3608"><span class="hljs-meta">@Preview(showBackground = true)</span>
<span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">GreetingPreview</span><span class="hljs-params">()</span></span> {
    AutomacorpTheme {
        Greeting(<span class="hljs-string">&quot;Android&quot;</span>)
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451139.3608')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can choose to display the design view at the right of your code editor with the button at the top right of the editor.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/compoasable_preview.png" alt="Composable preview" width="800">
</div>
</div>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/android/firstapp/composable_view_code.png" alt="Code" width="30"></span> Code View
<span class="image"><img src="../../img/training/android/firstapp/composable_view_code_design.png" alt="Code and design" width="30"></span> Code And Design View
<span class="image"><img src="../../img/training/android/firstapp/composable_view_design.png" alt="Design" width="30"></span> Design View</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_resource_files">Resource files</h3>
<div class="paragraph">
<p>Resources are the additional files and static content that your code uses, such as images, screen definitions, strings used in interfaces, styles, animation instructions, and more.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android-resource1.png" alt="Android resource" width="800">
</div>
</div>
<div class="paragraph">
<p>You can provide alternative resources for specific device configurations, by grouping them in specially-named resource directories.</p>
</div>
<div class="paragraph">
<p>At runtime, Android uses the appropriate resource based on the current configuration.</p>
</div>
<div class="paragraph">
<p>For example, you might want to provide a different UI layout depending on the screen size or different strings depending on user language. In this case you will have a default file <code>app/src/main/res/values/string.xml</code> and a specific file for France <code>app/src/main/res/values-fr/string.xml</code></p>
</div>
</div>
<div class="sect2">
<h3 id="_gradle_file">Gradle file</h3>
<div class="paragraph">
<p><strong>File :</strong> <strong><em>Gradle Scripts @GT build.gradle.kts</em></strong></p>
</div>
<div class="paragraph">
<p>There are two files with this name:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>one for the project, <strong>Project: automacorp</strong>, and</p>
</li>
<li>
<p>one for the app module, <strong>Module: app</strong></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Each module has its own <strong>build.gradle.kts</strong> file, but this first project currently has just one module.</p>
</div>
<div class="paragraph">
<p>If you need to use external libraries you can, and you need to declare them in <strong>build.gradle.kts (Module: app)</strong>.</p>
</div>
<div class="paragraph">
<p>You can also configure the <code>android</code> plugin (APi version, SDK version).The <code>defaultConfig</code> block is important. This is where you have to define</p>
</div>
<div class="ulist">
<ul>
<li>
<p>the min sdk used by the phone that uses your app</p>
</li>
<li>
<p>the target sdk used for the compilation. It&#8217;s important to use the highest value</p>
</li>
<li>
<p>your code version and the version name. If you need to publish your app on the Google store this number must be incremented at each release.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451140.238">android {
    namespace = <span class="hljs-string">&quot;com.automacorp&quot;</span>
    compileSdk = <span class="hljs-number">34</span>

    defaultConfig {
        applicationId = <span class="hljs-string">&quot;com.automacorp&quot;</span>
        minSdk = <span class="hljs-number">31</span>
        targetSdk = <span class="hljs-number">34</span>
        versionCode = <span class="hljs-number">1</span>
        versionName = <span class="hljs-string">&quot;1.0&quot;</span>

        testInstrumentationRunner = <span class="hljs-string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span>
        vectorDrawables {
            useSupportLibrary = <span class="hljs-literal">true</span>
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = <span class="hljs-literal">false</span>
            proguardFiles(
                getDefaultProguardFile(<span class="hljs-string">&quot;proguard-android-optimize.txt&quot;</span>),
                <span class="hljs-string">&quot;proguard-rules.pro&quot;</span>
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = <span class="hljs-string">&quot;1.8&quot;</span>
    }
    buildFeatures {
        compose = <span class="hljs-literal">true</span>
    }
    composeOptions {
        kotlinCompilerExtensionVersion = <span class="hljs-string">&quot;1.5.1&quot;</span>
    }
    packaging {
        resources {
            excludes += <span class="hljs-string">&quot;/META-INF/{AL2.0,LGPL2.1}&quot;</span>
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451140.238')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_launch_your_application"><span class="icon">[flask&#93;</span> : Launch your application</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this part you will be able to launch your application on you phone or tablet. If you don&#8217;t have a device on Android operating system, you can use the emulator embedded in Android Studio.</p>
</div>
<div class="sect2">
<h3 id="_configure_a_real_android_device">Configure a real Android device</h3>
<div class="paragraph">
<p>You need to set up your phone</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Connect your device to your development machine with a USB cable. If you developed on Windows, you might need to install <a href="https://developer.android.com/studio/run/oem-usb">USB driver</a> for your device.</p>
</li>
<li>
<p>You need to update your device to activate "Developer options"</p>
<div class="ulist">
<ul>
<li>
<p>Open the <strong>Settings app</strong> on your device</p>
</li>
<li>
<p>Select item <strong>About phone</strong>.</p>
</li>
<li>
<p>Go to the bottom to <strong>Build number</strong> item</p>
</li>
<li>
<p>Tap on this <strong>Build number</strong> seven times. You should see a message which says that you are now a developer.</p>
</li>
<li>
<p>If you go back on <strong>Settings app</strong> and in <strong>System</strong> section you should see a new entry <strong>Developer options</strong></p>
</li>
<li>
<p>Tap on <strong>Developer options</strong> and scroll down to find and <strong>enable USB debugging</strong>.</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>Since few versions of Android, you can also pair your phone via your Wifi connection. Your laptop and your phone must use the same Wifi.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>On Android Studio, open the running devices window (with the button on the right of the UI).</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/android_pair_wifi1.png" alt="Pair devices using Wifi" width="800">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>Select in the toolbar the button <strong>Pair devices using Wifi</strong> <span class="image"><img src="../../img/training/android/firstapp/android_pair_wifi_button.png" alt="Pair devices using Wifi" width="30"></span></p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/android_pair_wifi3.png" alt="Pair devices using Wifi" width="500">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>On your phone, in <strong>Developer options</strong>,  select <strong>Wireless debugging</strong> and <strong>Pair using QR code</strong> and scan the QR code. If everything is OK you should see. <strong>To work you should set the same Wifi on your laptop and on your mobile</strong>.</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/adb_wifi-wireless_debugging.png" alt="Pair devices using Wifi" width="300">
</div>
</div>
<div class="ulist">
<ul>
<li>
<p>When you are connected you should see your device in the running devices window</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/android_pair_wifi2.png" alt="Pair devices using Wifi" width="500">
</div>
</div>
<div class="paragraph">
<p>Now you are ready to run your app</p>
</div>
</div>
<div class="sect2">
<h3 id="_configure_a_virtual_device">Configure a virtual device</h3>
<div class="paragraph">
<p>When you install Android Studio the first time, an AVD (Android Virtual Device) is also installed to simulate a phone. A virtual device is a configuration that defines the characteristics of an Android phone, tablet, Wear OS, Android TV, or Automotive OS device. It&#8217;s very useful to test an app for every kind of device.</p>
</div>
<div class="paragraph">
<p>You can add, update or delete your virtual devices on the AVD. Open menu  <strong>Select Tools @GT Device Manager.</strong>. You can also access this window through a side tab.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/android_pair_wifi1.png" alt="Pair devices using Wifi" width="800">
</div>
</div>
<div class="paragraph">
<p>If you click on the + button, at the top of the AVD Manager dialog you will be able to create a device. You can choose device type (TV, phone, auto&#8230;&#8203;), its configuration (OS version, density, size&#8230;&#8203;)
The Select Hardware page appears.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/android_device_manager2.png" alt="Create virtual device manager" width="700">
</div>
</div>
<div class="paragraph">
<p>For more informations you can read <a href="https://developer.android.com/studio/run/managing-avds#createavd">this article</a></p>
</div>
</div>
<div class="sect2">
<h3 id="_run_your_app">Run your app</h3>
<div class="paragraph">
<p>Everything is now ready to test your project.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>In toolbar, select your app from the run/debug configurations drop-down menu.</p>
</li>
<li>
<p>From the target device drop-down menu, select the AVD or the device, that you want to run your app on.</p>
</li>
<li>
<p>Click on Run button</p>
</li>
</ol>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/android-run.png" alt="Run application" width="500">
</div>
</div>
<div class="paragraph">
<p>If everything is OK you should see your first app. It is very simple and not very pretty but we do better in the next chapter</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/firstapp/android_emulator.png" alt="Hello world application" width="400">
</div>
</div>
<div class="paragraph">
<p>To analyze errors you can open the Logcat view to see logs send by your device or the emulated device</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/firstapp/android_error.png" alt="Logcat view">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_resources">Resources</h2>
<div class="sectionbody">
<div class="paragraph">
<p>About Android you can read</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://developer.android.com/">Android developer website</a> : you will find all resources about Android.</p>
</li>
<li>
<p><a href="https://developer.android.com/courses/kotlin-android-fundamentals/toc">Codelabs</a> : you can find more detailed examples in these codelabs created by Google training team</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can find resources on Kotlin</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://dev-mind.fr/blog/2019/kotlin_et_android.html">Kotlin and android</a> : my blog post is in French but it explains why Google prefers today Kotlin to Java</p>
</li>
<li>
<p><a href="https://play.kotlinlang.org/byExample/overview">Learn Kotlin by examples</a> : you can read documentation and test your code online</p>
</li>
<li>
<p><a href="https://kotlinlang.org/">Official website</a> documentation about this language</p>
</li>
<li>
<p><a href="https://developer.android.com/kotlin">Google developpers site for kotlin</a>: several resources on how use Kotlin to create an Android application</p>
</li>
</ul>
</div>
</div>
</div>`;var Ef=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_flask_create_a_new_activity"><span class="icon">[flask&#93;</span> : Create a new activity</a></li>
<li><a class="link" fragment="#_intent_how_communicate_with_this_new_component">Intent : how communicate with this new component ?</a></li>
<li><a class="link" fragment="#_flask_build_an_intent_to_open_an_activity"><span class="icon">[flask&#93;</span> : Build an intent to open an activity</a></li>
<li><a class="link" fragment="#_flask_create_model_to_manage_room_and_windows"><span class="icon">[flask&#93;</span> : Create model to manage room and windows</a></li>
<li><a class="link" fragment="#_flask_update_roomactivity_to_display_all_room_properties"><span class="icon">[flask&#93;</span> : Update RoomActivity to display all room properties</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this lesson, you will learn how to create a new View in your app and how to launch it with an Intent</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/android-add-activity.png" alt="Add activity" width="900">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_create_a_new_activity"><span class="icon">[flask&#93;</span> : Create a new activity</h2>
<div class="sectionbody">
<div class="olist arabic">
<ol class="arabic">
<li>
<p>In the <strong>Project window</strong>, right-click the app folder and select <strong>New @GT Compose @GT Empty Activity</strong>. You can also use menu <strong>File @GT New @GT Compose @GT Empty Activity</strong>. Enter a name for our new activity : <em>RoomActivity</em>. Leave all other properties set to their defaults and click Finish.</p>
<div class="videoblock">
<div class="content">
<iframe width="600" height="330" src="https://www.youtube.com/embed/rAAgTjU-6sc?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
</li>
<li>
<p>Android Studio automatically does does things:</p>
<div class="ulist">
<ul>
<li>
<p>Creates the <strong>RoomActivity</strong> file.</p>
</li>
<li>
<p>Adds the required <strong>@LTactivity@GT</strong> element in <strong>AndroidManifest.xml</strong> (each activity must be declared in this file).</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>For the moment the new activity is empty. We will add some widgets to display a room name.</p>
</div>
<div class="paragraph">
<p>You can also add a new key in the <code>strings.xml</code> file to store the room name</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" id="1732912451046.9539">@LTstring name=&quot;act_room_name&quot;@GTRoom name@LT/string@GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451046.9539')">Copy</button></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451046.7515"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomActivity</span> : <span class="hljs-type">ComponentActivity</span>() {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            AutomacorpTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;
                    RoomDetail(
                        name = <span class="hljs-string">&quot;Android&quot;</span>,
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }
}

<span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">RoomDetail</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Column(modifier = modifier.padding(<span class="hljs-number">16.</span>dp)) {
        <span class="hljs-keyword">var</span> nameState <span class="hljs-keyword">by</span> remember { mutableStateOf(name) }
        Text(
            text = stringResource(R.string.act_room_name),
            style = MaterialTheme.typography.labelSmall,
            modifier = Modifier.padding(bottom = <span class="hljs-number">4.</span>dp)
        )
        OutlinedTextField(
            nameState,
            onValueChange = { nameState = it },
            placeholder = { Text(stringResource(R.string.act_room_name)) },
        )
    }

}

<span class="hljs-meta">@Preview(showBackground = true)</span>
<span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">RoomDetailPreview</span><span class="hljs-params">()</span></span> {
    AutomacorpTheme {
        RoomDetail(<span class="hljs-string">&quot;Android&quot;</span>)
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451046.7515')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_intent_how_communicate_with_this_new_component">Intent : how communicate with this new component ?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>An <a href="https://developer.android.com/reference/android/content/Intent">Intent</a> is an object that provides runtime binding between separate components, such as two activities. These activities can be in the same app or not.</p>
</div>
<div class="paragraph">
<p>For example if you need to open a web page you won&#8217;t develop a new browser. You will open this web page in installed browser as Firefox or Chrome.</p>
</div>
<div class="paragraph">
<p>The <a href="https://developer.android.com/reference/android/content/Intent">Intent</a> represents an app\u2019s intent to do something. You can use intents for a wide variety of tasks, but in this lesson, your intent starts another activity in the same app.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/newactivity/android-intent.png" alt="Intent" width="700">
</div>
</div>
<div class="paragraph">
<p>The primary information contained in an Intent is the following:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Component name</strong> [optional] The name of the component to start. This information makes an intent explicit or not, meaning that the intent should be delivered only to the app component defined by the component name. Without a component name, the intent is implicit and the system decides which component should receive the intent based on the other intent information (such as the action, data, and category\u2014described below).</p>
</li>
<li>
<p><strong>Action</strong> A string that specifies the generic action to perform (such as ACTION_VIEW, ACTION_EDIT, ACTION_MAIN, etc.). The action is a string that specifies what the intent should do. For example, ACTION_VIEW might display data to the user, while ACTION_SEND might send data to another app.</p>
</li>
<li>
<p><strong>Data</strong> [optional] A URI that references the data to be acted on by the intent (such as a webpage, a contact record, etc.). The data is a URI that references the data to be acted on by the intent. For example, the data can be a webpage, a contact record, or a file.</p>
</li>
<li>
<p><strong>Extras</strong> [optional] A Bundle of additional information. This information can be used to provide extended information to the component. For example, if the intent is to send an email, the extras can include the email subject, the email text, etc.</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In this lab we will open <strong>RoomActivity</strong> when a user will click on <strong>MainActivity</strong> button <strong>Open Room name</strong></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_build_an_intent_to_open_an_activity"><span class="icon">[flask&#93;</span> : Build an intent to open an activity</h2>
<div class="sectionbody">
<div class="paragraph">
<p>It&#8217;s a good practice to define keys for intent extras with your app&#8217;s package name as a prefix. This ensures that the keys are unique, in case your app interacts with other apps. You can define a companion object in the activity class to store these keys as constant.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451047.7126"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">ComponentActivity</span>() {

    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> {
        <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> ROOM_PARAM = <span class="hljs-string">&quot;com.automacorp.room.attribute&quot;</span>
    }

    <span class="hljs-comment">// ...</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451047.7126')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>We will update the <code>onSayHelloButtonClick</code> method to open the <code>RoomActivity</code> with the name filled in the <code>MainActivity</code> (you can remove the Toast message).</p>
</div>
<div class="paragraph">
<p>For that we will define an Intent, target <code>RoomActivity</code>, and put the room name filled in <code>MainActivity</code> in the sent attributes (extra).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451047.023"><span class="hljs-keyword">val</span> onSayHelloButtonClick: (name: String) <span class="hljs-meta">@LAMBDA</span> <span class="hljs-built_in">Unit</span> = { name <span class="hljs-meta">@LAMBDA</span>
  <span class="hljs-keyword">val</span> intent = Intent(<span class="hljs-keyword">this</span>, RoomActivity::<span class="hljs-keyword">class</span>.java).apply {
    putExtra(ROOM_PARAM, name)
  }
  startActivity(intent)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451047.023')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In the <code>RoomActivity</code> class, we will read the name sent in the intent and update the Textview with this name. The job is done in the <code>onCreate</code> method. All parameters sent in the intent are stored in the <code>Bundle</code> object used as argument.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451047.486"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)
        <span class="hljs-keyword">val</span> param = intent.getStringExtra(MainActivity.ROOM_PARAM)
        enableEdgeToEdge()
        setContent {
            AutomacorpTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding <span class="hljs-meta">@LAMBDA</span>
                    RoomDetail(
                        name = param ?: <span class="hljs-string">&quot;&quot;</span>,
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451047.486')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>It&#8217;s time to test yours changes.</p>
</div>
<div class="paragraph">
<p>Click <strong>Apply Changes</strong> <span class="image"><img src="../../img/training/android/android-studio-apply.svg" alt="Apply changes"></span>  in the toolbar to run the app. Type a window name in the text field and click on the button to see the message in the second activity</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_create_model_to_manage_room_and_windows"><span class="icon">[flask&#93;</span> : Create model to manage room and windows</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A room is defined by several properties</p>
</div>
<div class="ulist">
<ul>
<li>
<p>an id</p>
</li>
<li>
<p>a name</p>
</li>
<li>
<p>a current temperature (this property can be nullable if no data is available) : in the backend app this value is read by a sensor, but here we just need the value of the current temperature</p>
</li>
<li>
<p>a target temperature (this property can be nullable if no data is available)</p>
</li>
<li>
<p>a list of window : for the moment we won&#8217;t display these data but we will</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A Window is defined by several properties</p>
</div>
<div class="ulist">
<ul>
<li>
<p>an id</p>
</li>
<li>
<p>a room</p>
</li>
<li>
<p>a status : : in the backend app this value is read by a sensor, but here we just need the value OPENED or CLOSED</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We are going to create classes to represent windows and rooms.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>In the <strong>Project window</strong>, right-click the package <em>com.automacorp</em> and select <strong>New @GT package</strong>.</p>
</li>
<li>
<p>New package will be called <strong>model</strong>. Select this package, redo a right-click and select <strong>New @GT Kotlin File/Class</strong>.</p>
</li>
<li>
<p>Fill a name. For example <strong>RoomDto</strong> (dto = data transfer object) and create window properties. You can copy this code</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451047.1143"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomDto</span>(
    <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>,
    <span class="hljs-keyword">val</span> name: String,
    <span class="hljs-keyword">val</span> currentTemperature: <span class="hljs-built_in">Double</span>?,
    <span class="hljs-keyword">val</span> targetTemperature: <span class="hljs-built_in">Double</span>?,
    <span class="hljs-keyword">val</span> windows: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTWindowDto@</span>GT,
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451047.1143')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Note: when a value is nullable you need to suffix type with ?. In our example currentTemperature can be null, so type is Double? and not Double</p>
</div>
</li>
<li>
<p>Redo same steps to create <strong>WindowDto</strong></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451047.3965"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowStatus</span> { OPENED, CLOSED}

<span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowDto</span>(
    <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>,
    <span class="hljs-keyword">val</span> name: String,
    <span class="hljs-keyword">val</span> roomName: String,
    <span class="hljs-keyword">val</span> roomId: <span class="hljs-built_in">Long</span>,
    <span class="hljs-keyword">val</span> windowStatus: WindowStatus
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451047.3965')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>We will now create a service class to manage these windows. We will write 2 methods : one to find all building windows and a second to load only one window by its id. For the moment we will use fake data. In a next lesson we will learn how call a remote service to load real data. This class can be created in the package <code>com.automacorp.service</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451048.1313"><span class="hljs-keyword">object</span> RoomService {
    <span class="hljs-keyword">val</span> ROOM_KIND: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTString@</span>GT = listOf(<span class="hljs-string">&quot;Room&quot;</span>, <span class="hljs-string">&quot;Meeting&quot;</span>, <span class="hljs-string">&quot;Laboratory&quot;</span>, <span class="hljs-string">&quot;Office&quot;</span>, <span class="hljs-string">&quot;Boardroom&quot;</span>)
    <span class="hljs-keyword">val</span> ROOM_NUMBER: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTChar@</span>GT = (<span class="hljs-string">&#x27;A&#x27;</span>..<span class="hljs-string">&#x27;Z&#x27;</span>).toList()
    <span class="hljs-keyword">val</span> WINDOW_KIND: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTString@</span>GT = listOf(<span class="hljs-string">&quot;Sliding&quot;</span>, <span class="hljs-string">&quot;Bay&quot;</span>, <span class="hljs-string">&quot;Casement&quot;</span>, <span class="hljs-string">&quot;Hung&quot;</span>, <span class="hljs-string">&quot;Fixed&quot;</span>)

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">generateWindow</span><span class="hljs-params">(id: <span class="hljs-type">Long</span>, roomId: <span class="hljs-type">Long</span>, roomName: <span class="hljs-type">String</span>)</span></span>: WindowDto {
        <span class="hljs-keyword">return</span> WindowDto(
            id = id,
            name = <span class="hljs-string">&quot;@dollar@{ WINDOW_KIND.random()} Window @dollar@id&quot;</span>,
            roomName = roomName,
            roomId = roomId,
            windowStatus = WindowStatus.values().random()
        )
    }

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">generateRoom</span><span class="hljs-params">(id: <span class="hljs-type">Long</span>)</span></span>: RoomDto {
        <span class="hljs-keyword">val</span> roomName = <span class="hljs-string">&quot;@dollar@{ROOM_NUMBER.random()}@dollar@id @dollar@{ROOM_KIND.random()}&quot;</span>
        <span class="hljs-keyword">val</span> windows = (<span class="hljs-number">1.</span>.(<span class="hljs-number">1.</span><span class="hljs-number">.6</span>).random()).map { generateWindow(it.toLong(), id, roomName) }
        <span class="hljs-keyword">return</span> RoomDto(
            id = id,
            name = roomName,
            currentTemperature = (<span class="hljs-number">15.</span><span class="hljs-number">.30</span>).random().toDouble(),
            targetTemperature = (<span class="hljs-number">15.</span><span class="hljs-number">.22</span>).random().toDouble(),
            windows = windows
        )
    }

    <span class="hljs-comment">// Create 50 rooms</span>
    <span class="hljs-keyword">val</span> ROOMS = (<span class="hljs-number">1.</span><span class="hljs-number">.50</span>).map { generateRoom(it.toLong()) }.toMutableList()

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTRoomDto@</span>GT {
        <span class="hljs-comment">// TODO return all rooms sorted by name</span>
    }

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(id: <span class="hljs-type">Long</span>)</span></span>: RoomDto? {
        <span class="hljs-comment">// TODO return the room with the given id or null</span>
    }

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findByName</span><span class="hljs-params">(name: <span class="hljs-type">String</span>)</span></span>: RoomDto? {
        <span class="hljs-comment">// TODO return the room with the given name or null</span>
    }

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateRoom</span><span class="hljs-params">(id: <span class="hljs-type">Long</span>, room: <span class="hljs-type">RoomDto</span>)</span></span>: RoomDto {
        <span class="hljs-comment">// TODO update an existing room with the given values</span>
    }

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findByNameOrId</span><span class="hljs-params">(nameOrId: <span class="hljs-type">String</span>?)</span></span>: RoomDto? {
        <span class="hljs-keyword">if</span> (nameOrId != <span class="hljs-literal">null</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span> (nameOrId.isDigitsOnly()) {
                findById(nameOrId.toLong())
            } <span class="hljs-keyword">else</span> {
                findByName(nameOrId)
            }
        }
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451048.1313')">Copy</button></pre>
</div>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>For the moment the given class is not complete. You have to implement each method. For example the <code>updateRoom</code> method can be implemented like this</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451049.7976"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateRoom</span><span class="hljs-params">(id: <span class="hljs-type">Long</span>, room: <span class="hljs-type">RoomDto</span>)</span></span>: RoomDto? {
    <span class="hljs-keyword">val</span> index = ROOMS.indexOfFirst { it.id == id }
    <span class="hljs-keyword">val</span> updatedRoom = findById(id)?.copy(
        name = room.name,
        targetTemperature = room.targetTemperature,
        currentTemperature = room.currentTemperature
    ) ?: <span class="hljs-keyword">throw</span> IllegalArgumentException()
    <span class="hljs-keyword">return</span> ROOMS.<span class="hljs-keyword">set</span>(index, updatedRoom)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451049.7976')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_update_roomactivity_to_display_all_room_properties"><span class="icon">[flask&#93;</span> : Update RoomActivity to display all room properties</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We will update the existing <code>RoomActivity</code> to display more data.</p>
</div>
<div class="paragraph">
<p>You can add a new keys in the <code>strings.xml</code> file to store the room name</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" id="1732912451049.7805">    @LTstring name=&quot;act_room_name&quot;@GTRoom name@LT/string@GT
    @LTstring name=&quot;act_room_none&quot;@GTNo round found for this id or name@LT/string@GT
    @LTstring name=&quot;act_room_current_temperature&quot;@GTCurrent temperature@LT/string@GT
    @LTstring name=&quot;act_room_target_temperature&quot;@GTTarget temperature@LT/string@GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451049.7805')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>We will search for a room that matches the name given in the Intent or if the user fill the room ID we will directly display the corresponding room.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451049.8796"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)
    enableEdgeToEdge()
    <span class="hljs-keyword">val</span> param = intent.getStringExtra(MainActivity.ROOM_PARAM)
    <span class="hljs-keyword">val</span> room = RoomService.findByNameOrId(param)

    setContent {
        AutomacorpTheme {
            Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding <span class="hljs-meta">@LAMBDA</span>
                <span class="hljs-keyword">if</span> (room != <span class="hljs-literal">null</span>) {
                    RoomDetail(room,Modifier.padding(innerPadding))
                } <span class="hljs-keyword">else</span> {
                    NoRoom(Modifier.padding(innerPadding))
                }

            }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451049.8796')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Step 1</strong>. Create a new composable called NoRoom to display a message (key <code>act_room_none</code>) when no room is found</p>
</div>
<div class="paragraph">
<p><strong>Step 2</strong>. In the composable RoomDetail, display the room name, the current temperature and the target temperature. As we want to bind the field with the room object, we will use the <code>remember</code> function to store the room object in a mutable state.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451049.0105">    <span class="hljs-keyword">var</span> room <span class="hljs-keyword">by</span> remember { mutableStateOf(roomDto) }
    Column(modifier = modifier.padding(<span class="hljs-number">16.</span>dp)) {
        <span class="hljs-comment">// ...</span>
        OutlinedTextField(
            room.name,
            modifier = Modifier.fillMaxWidth(),
            onValueChange = { room = room.copy(name = it) },
            placeholder = { Text(stringResource(R.string.act_room_name)) },
        )
        <span class="hljs-comment">// ...</span>
    }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451049.0105')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Step 3</strong>. Add a <code>Text</code> to display the current temperature. This data is not updatable so we don&#8217;t need to use a TextField</p>
</div>
<div class="paragraph">
<p><strong>Step 4</strong>. Add a <code>OutlinedTextField</code> to display the target temperature. This data is updatable so we need to use a TextField. In place of this <code>OutlinedTextField</code> you can use a  <code>Slider</code> (more detail on <a href="https://developer.android.com/develop/ui/compose/components/slider" class="bare">https://developer.android.com/develop/ui/compose/components/slider</a>)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451049.1245">    Slider(
        value = room.targetTemperature?.toFloat() ?: <span class="hljs-number">18.0f</span>,
        onValueChange = { room = room.copy(targetTemperature = it.toDouble()) },
        colors = SliderDefaults.colors(
            thumbColor = MaterialTheme.colorScheme.secondary,
            activeTrackColor = MaterialTheme.colorScheme.secondary,
            inactiveTrackColor = MaterialTheme.colorScheme.secondaryContainer,
        ),
        steps = <span class="hljs-number">0</span>,
        valueRange = <span class="hljs-number">10f</span>.<span class="hljs-number">.28f</span>
    )
    Text(text = (round((room.targetTemperature ?: <span class="hljs-number">18.0</span>) * <span class="hljs-number">10</span>) / <span class="hljs-number">10</span>).toString())</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451049.1245')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This image below show you an implementation example</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/newactivity/example.png" alt="Activity room" width="700">
</div>
</div>
</div>
</div>`;var Df=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_user_interface">User interface</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_add_a_component">Add a component</a></li>
<li><a class="link" fragment="#_use_a_layout">Use a layout</a></li>
<li><a class="link" fragment="#_component_isolation">Component isolation</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_update_the_home_page"><span class="icon">[flask&#93;</span> : Update the home page</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_update_the_greeting_text">Update the greeting text</a></li>
<li><a class="link" fragment="#_add_an_image">Add an image</a></li>
<li><a class="link" fragment="#_add_a_text_to_fill_a_name">Add a text to fill a name</a></li>
<li><a class="link" fragment="#_add_a_button">Add a button</a></li>
</ul>
</li>
<li><a class="link" fragment="#_conclusion">Conclusion</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this lesson, you will learn how to update a screen with Android Studio and JetPack Compose. Jetpack Compose is Android\u2019s modern toolkit for building native UI. It simplifies and accelerates UI development on Android bringing your apps to life with less code, powerful tools, and intuitive Kotlin APIs.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/android-course2.png" alt="Android course step2" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_user_interface">User interface</h2>
<div class="sectionbody">
<div class="paragraph">
<p>User interface for a Compose Android app is built as a hierarchy of components.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The layouts can be viewed as containers that control how their child views are positioned on the screen.</p>
</li>
<li>
<p>UI components such as buttons and text boxes&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/updateui/component_hierarchy.png" alt="View hierarchy" width="800">
</div>
</div>
<div class="paragraph text-center">
<p><em>Image credit <a href="https://developer.android.com/" class="bare">https://developer.android.com/</a></em></p>
</div>
<div class="sect2">
<h3 id="_add_a_component">Add a component</h3>
<div class="paragraph">
<p>In the generated example you have seen a first example with the <code>Greeting</code> component.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451161.551"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
  Text(
    text = <span class="hljs-string">&quot;Hello @dollar@name!&quot;</span>,
    modifier = modifier
  )
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451161.551')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>We will edit it and add some text</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451161.051"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Text(
        text = <span class="hljs-string">&quot;Hello @dollar@name!&quot;</span>,
        modifier = modifier
    )
    Text(
        text = <span class="hljs-string">&quot;I learn to create a new app&quot;</span>,
        modifier = modifier
    )
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451161.051')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This code creates two text elements inside the content view. However, since you haven&#8217;t provided any information about how to arrange them, the text elements are drawn on top of each other, making the text unreadable.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/updateui/component_supperposition.png" alt="Superposition" width="900">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_use_a_layout">Use a layout</h3>
<div class="paragraph">
<p>To arrange components, you can use a layout. In Compose, layouts are composable functions that define the structure of the UI.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The Column function lets you arrange elements vertically.</p>
</li>
<li>
<p>The Row function lets you arrange elements horizontally.</p>
</li>
<li>
<p>and Box to stack elements.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>You can find more layout in the <a href="https://developer.android.com/jetpack/compose/layout">official documentation</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/updateui/main_layouts.png" alt="Superposition" width="600">
</div>
</div>
<div class="paragraph text-center">
<p><em>Image credit <a href="https://developer.android.com/" class="bare">https://developer.android.com/</a></em></p>
</div>
<div class="paragraph">
<p>Resolve the problem by using a Column layout</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/updateui/component_row.png" alt="Superposition" width="900">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_component_isolation">Component isolation</h3>
<div class="paragraph">
<p>With Compose, you create small, stateless components that aren\u2019t associated with any specific activities or fragments. <strong>This makes them easy to reuse and test.</strong></p>
</div>
<div class="paragraph">
<p>In Compose, state must be explicit and passed to the composable. This way, there is only one source of information for state, making it encapsulated and decoupled. Then, when the application state changes, your UI is automatically updated.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/updateui/state.png" alt="Component state" width="300">
</div>
</div>
<div class="paragraph text-center">
<p><em>Image credit <a href="https://developer.android.com/" class="bare">https://developer.android.com/</a></em></p>
</div>
<div class="paragraph">
<p>For example if we add a button to our layout, we have to define what to do when the button is clicked.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451161.9973"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Column {
        Text(
            text = <span class="hljs-string">&quot;Hello @dollar@name!&quot;</span>,
            modifier = modifier
        )
        Button(onClick = {}) {
            Text(
                text = <span class="hljs-string">&quot;My first button&quot;</span>,
                modifier = modifier
            )
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451161.9973')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>We can&#8217;t call or modify the state in a composable. So the <code>onclick</code> must not be managed locally. You have to pass it as an argument.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451161.183"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(name: <span class="hljs-type">String</span>, onClick: () -&gt; <span class="hljs-type">Unit</span>,  modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Column {
        Text(
            text = <span class="hljs-string">&quot;Hello @dollar@name!&quot;</span>,
            modifier = modifier
        )
        Button(onClick = onClick) {
            Text(
                text = <span class="hljs-string">&quot;My first button&quot;</span>
            )
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451161.183')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>And in the caller (in the activity or fragment) you can define the action to do when the button is clicked.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451162.4995"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">ComponentActivity</span>() {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)

        <span class="hljs-keyword">val</span> onButtonClick: () -&gt; <span class="hljs-built_in">Unit</span> = {
            <span class="hljs-comment">// Here you can access to the activity state (ie baseContext)</span>
            Toast.makeText(baseContext, <span class="hljs-string">&quot;Hello button&quot;</span>, Toast.LENGTH_LONG).show()
        }

        setContent {
            AutomacorpTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;
                    Greeting(
                        <span class="hljs-string">&quot;Android&quot;</span>,
                        onClick = onButtonClick,
                        modifier = Modifier.padding(innerPadding),
                    )
                }
            }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451162.4995')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>When Jetpack Compose runs your composables for the first time, during initial composition, it will keep track of the composables that you call to describe your UI in a Composition. Then, when the state of your app changes, Jetpack Compose schedules a recomposition. Recomposition is when Jetpack Compose re-executes the composables that may have changed in response to state changes, and then updates the Composition to reflect any changes.</p>
</div>
<div class="paragraph">
<p>Compose will avoid recomposing them if their inputs haven\u2019t changed.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_update_the_home_page"><span class="icon">[flask&#93;</span> : Update the home page</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this new codelab you will update the <code>greeting</code> page to create a home page with</p>
</div>
<div class="ulist">
<ul>
<li>
<p>a welcome message (<code>Text</code> composable),</p>
</li>
<li>
<p>an image (<code>Image</code> composable),</p>
</li>
<li>
<p>an edit text (<code>OutlinedTextField</code> composable, we will use a placeholder with an icon) and</p>
</li>
<li>
<p>a button (<code>Button</code> composable).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>We will create</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/updateui/example.png" alt="UI example" width="400">
</div>
</div>
<div class="sect2">
<h3 id="_update_the_greeting_text">Update the greeting text</h3>
<div class="paragraph">
<p>Update the <code>Greeting</code> composable and the Text component to display this message <code>Welcome on automacorp the app to manage building windows</code>.</p>
</div>
<div class="paragraph">
<p>You can test your work, but this solution is not optimal. If you want to provide your app to people who speak different languages you must to use the Android solution to internationalize the text.</p>
</div>
<div class="paragraph">
<p>Resources are the additional files and static content that your code uses, such as images, screen definitions, strings used in interfaces, styles, animation instructions, and more. At runtime, Android uses the appropriate resource based on the current configuration.</p>
</div>
<div class="paragraph">
<p>For example, you can define different string files depending on user language.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>app/src/main/res/values/string.xml the default file</p>
</li>
<li>
<p>app/src/main/res/values-fr/string.xml the file for French language</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Open the Project window and open file <strong>app @GT res @GT values @GT strings.xml</strong>.
This is a string resources file, where you can specify all of your UI strings. It allows you to manage all of your UI strings in a single location, which makes them easier to find, update, and localize. For the moment you have only one text inside, your app name.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/updateui/component_row.png" alt="Superposition" width="800">
</div>
</div>
<div class="paragraph">
<p>You can launch <a href="https://developer.android.com/studio/write/translations-editor">Translations Editor</a>, to add or edit text for different languages (link on the top). In this lab we will use only one language. You can update this file and add these values</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" id="1732912451162.6265"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;app_name&quot;</span>&gt;</span>automacorp<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;app_logo_description&quot;</span>&gt;</span>automacorp logo<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;act_main_welcome&quot;</span>&gt;</span>Welcome on automacorp,
 the app to manage building windows<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;act_main_open&quot;</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;act_main_fill_name&quot;</span>&gt;</span>Fill a name<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451162.6265')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Update your Text definition to use the <code>stringResource</code> to use a 18n key in your code. For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451162.5627"> Text(
    stringResource(R.string.act_main_welcome),
    textAlign = TextAlign.Center
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451162.5627')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_add_an_image">Add an image</h3>
<div class="paragraph">
<p>We will add an image on the first screen on the top. Copy this xml file <a href="https://dev-mind.fr/ic_logo.xml">ic_logo.xml</a> in your directory <strong>_res @GT drawable</strong>. This file is a vector drawable image. Directory <strong>drawable</strong> contains all your images. Several formats are available (png, jpg&#8230;&#8203;) but the most optimized is a <a href="https://developer.android.com/guide/topics/graphics/vector-drawable-resources">Vector drawable</a></p>
</div>
<div class="paragraph">
<p>We can create a new composable to manage this image. The API force to define an image text description for accessibility</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451162.6814"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">AppLogo</span><span class="hljs-params">(modifier: <span class="hljs-type">Modifier</span>)</span></span> {
    Image(
        painter = painterResource(R.drawable.ic_logo),
        contentDescription = stringResource(R.string.app_logo_description),
        modifier = modifier.paddingFromBaseline(top = <span class="hljs-number">100.</span>dp).height(<span class="hljs-number">80.</span>dp),
    )
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451162.6814')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The modifier is an argument because the position will be defined by the parent. If you want to reuse this composable elsewhere, this modifier (the property to display your block) can be different.</p>
</div>
<div class="paragraph">
<p>Now you can use this new composable in the <code>Greeting</code> block in a <code>Column</code> layout to have the image above the text</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451162.1157"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(onClick: (<span class="hljs-type">name</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span>,  modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Column {
        AppLogo(Modifier.padding(top = <span class="hljs-number">32.</span>dp).fillMaxWidth())
        Text(
            stringResource(R.string.act_main_welcome),
            style = MaterialTheme.typography.headlineMedium,
            modifier = Modifier
                .padding(<span class="hljs-number">24.</span>dp)
                .align(Alignment.CenterHorizontally),
            textAlign = TextAlign.Center
        )
   }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451162.1157')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_add_a_text_to_fill_a_name">Add a text to fill a name</h3>
<div class="paragraph">
<p>TextField allows users to enter and modify text. We will use an <code>OutlinedTextField</code> to use a different style.</p>
</div>
<div class="paragraph">
<p>For the moment we will try to write a text in the console (note: the modifier is used to define the position of the component)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451163.2383">OutlinedTextField(
    <span class="hljs-string">&quot;&quot;</span>,
    onValueChange = { println(<span class="hljs-string">&quot;value of the field : @dollar@it&quot;</span>) },
    modifier = Modifier.padding(<span class="hljs-number">24.</span>dp).fillMaxWidth()
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451163.2383')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If you try to display the field and write a text, you will see that nothing happens. That&#8217;s because the TextField doesn&#8217;t update itself when its value parameter changes. This is due to how composition and recomposition work in Compose. When you update something in the field, the composable is recomposed and redisplayed. But the value of the field is lost.</p>
</div>
<div class="paragraph">
<p>We need to store the value of the field in a state with the remember function. Compose provides a way to store the state of the application in a composable. You can use the <code>mutableStateOf</code> function to create a mutable state.</p>
</div>
<div class="paragraph">
<p>Update your code to define a state for the text field, and update it when the value is updated by the user</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451163.2104"><span class="hljs-keyword">var</span> name <span class="hljs-keyword">by</span> remember { mutableStateOf(<span class="hljs-string">&quot;&quot;</span>) }

OutlinedTextField(
    name,
    onValueChange = { name = it },
    modifier = Modifier.padding(<span class="hljs-number">24.</span>dp).fillMaxWidth()
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451163.2104')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>But when you open the screen, the input value is empty. We can use a placeholder to display a text when the field is empty. We can use a <code>placeholder</code> argument to define a composable to display when the field is empty. The content of the placeholder can be a complex composable. For example, we can display an icon and a text.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451163.2344">OutlinedTextField(
    name,
    onValueChange = { name = it },
    modifier = Modifier.padding(<span class="hljs-number">24.</span>dp).fillMaxWidth(),
    placeholder = {
        Row {
            Icon(
                Icons.Rounded.AccountCircle,
                modifier = Modifier.padding(end = <span class="hljs-number">8.</span>dp),
                contentDescription = stringResource(R.string.act_main_fill_name),
            )
            Text(stringResource(R.string.act_main_fill_name))
        }
    })</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451163.2344')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>Icons</code> class is a collection of icons provided by the Material Design library.</p>
</div>
<div class="paragraph">
<p>You can relaunch your app and test the text field.</p>
</div>
</div>
<div class="sect2">
<h3 id="_add_a_button">Add a button</h3>
<div class="paragraph">
<p>We will add a button to display the filled name in the previous <code>OutlinedTextField</code>, in a floating dialog box. On the <code>Button</code> composable, the <code>onClick</code> argument is used to define the action to do when the button is clicked.</p>
</div>
<div class="paragraph">
<p>But we can&#8217;t call the <code>showDialog</code> function in the composable. We have to pass the onClick function as an argument.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451163.9722"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">Greeting</span><span class="hljs-params">(onClick: (<span class="hljs-type">name</span>: <span class="hljs-type">String</span>) -&gt; <span class="hljs-type">Unit</span>, modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Column {
        <span class="hljs-comment">// ...</span>
        <span class="hljs-keyword">var</span> name <span class="hljs-keyword">by</span> remember { mutableStateOf(<span class="hljs-string">&quot;&quot;</span>) }
        OutlinedTextField(
            name,
            onValueChange = { name = it },
            modifier = Modifier.padding(<span class="hljs-number">24.</span>dp).fillMaxWidth(),
            placeholder = {
              Text(stringResource(R.string.act_main_fill_name))
            })

        Button(
            onClick = { onClick(name) },
            modifier = Modifier.padding(<span class="hljs-number">8.</span>dp).align(Alignment.CenterHorizontally)
        ) {
            Text(stringResource(R.string.act_main_open))
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451163.9722')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In the <code>MainActivity</code> class, you can define the action to do when the button is clicked. For example, you can display a message with the name filled in the text field.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451163.187"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> : <span class="hljs-type">ComponentActivity</span>() {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)

        <span class="hljs-comment">// Action to do when the button is clicked</span>
        <span class="hljs-keyword">val</span> onSayHelloButtonClick: (name: String) -&gt; <span class="hljs-built_in">Unit</span> = { name -&gt;
            Toast.makeText(baseContext, <span class="hljs-string">&quot;Hello @dollar@name&quot;</span>, Toast.LENGTH_LONG).show()
        }

        setContent {
            AutomacorpTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding -&gt;
                    Greeting(
                        onClick = onSayHelloButtonClick,
                        modifier = Modifier.padding(innerPadding),
                    )
                }
            }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451163.187')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can now relaunch your app, fill the text field, and click on the button to see the message displayed.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In this lesson, you have learned how to update a screen with Android Studio and JetPack Compose. You have learned how to create a new component, use a layout to arrange components, and manage the state of a component. You have also learned how to use resources to manage text and images in your app.</p>
</div>
<div class="paragraph">
<p>If you want to go further, you can see the <a href="https://developer.android.com/jetpack/compose">official documentation</a> to learn more about the Compose API.</p>
</div>
</div>
</div>`;var qf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_scaffold">Scaffold</a></li>
<li><a class="link" fragment="#_floating_action_button">Floating action button</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_flask_use_a_floating_action_button_to_update_our_room"><span class="icon">[flask&#93;</span> : Use a floating action button to update our room</a></li>
</ul>
</li>
<li><a class="link" fragment="#_view_model">View model</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_why_use_a_viewmodel">Why use a ViewModel ?</a></li>
<li><a class="link" fragment="#_create_a_viewmodel">Create a ViewModel</a></li>
<li><a class="link" fragment="#_flask_use_a_floating_action_button"><span class="icon">[flask&#93;</span> : Use a floating action button</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_create_our_images_for_the_menu"><span class="icon">[flask&#93;</span> Create our images for the menu</a></li>
<li><a class="link" fragment="#_app_menu">App menu</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_flask_create_a_common_menu_in_your_app"><span class="icon">[flask&#93;</span> : Create a common menu in your app</a></li>
<li><a class="link" fragment="#_flask_use_yout_topbar_in_the_screens"><span class="icon">[flask&#93;</span> : Use yout topbar in the screens</a></li>
<li><a class="link" fragment="#_flask_intent_new_use_case"><span class="icon">[flask&#93;</span> : Intent : new use case</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>We will learn how to structure a page by adding a menu (top or bottom), a main action and a title. For this we will use the composable <a href="https://developer.android.com/develop/ui/compose/components/scaffold?hl=en">Scaffold</a></p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/android-add-menu.png" alt="Android course step2" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_scaffold">Scaffold</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The Scaffold composable provides an API you can use to quickly assemble your app&#8217;s structure according to Material Design guidelines. Scaffold accepts several composables as parameters</p>
</div>
<div class="ulist">
<ul>
<li>
<p>topBar: The app bar across the top of the screen.</p>
</li>
<li>
<p>bottomBar: The app bar across the bottom of the screen.</p>
</li>
<li>
<p>floatingActionButton: A button that hovers over the bottom-right corner of the screen that you can use to expose the main action of your screen.</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_floating_action_button">Floating action button</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The floating action button (FAB) is a primary action button that typically appears in the bottom-right corner of the screen. It&#8217;s used for a promoted action, such as creating a new item.</p>
</div>
<div class="paragraph">
<p>In Material Design, there are four types of FAB:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>FAB: A floating action button of ordinary size.</p>
</li>
<li>
<p>Small FAB: A smaller floating action button.</p>
</li>
<li>
<p>Large FAB: A larger floating action button.</p>
</li>
<li>
<p>Extended FAB: A floating action button that contains more than just an icon.</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/menu/fab.png" alt="Android course step2" width="800">
</div>
</div>
<div class="paragraph text-center">
<p><em>Image credit <a href="https://developer.android.com/" class="bare">https://developer.android.com/</a></em></p>
</div>
<div class="sect2">
<h3 id="_flask_use_a_floating_action_button_to_update_our_room"><span class="icon">[flask&#93;</span> : Use a floating action button to update our room</h3>
<div class="paragraph">
<p>You can add a floating action button to your app by using the FloatingActionButton composable.</p>
</div>
<div class="paragraph">
<p>For that we will create a new composable <code>RoomUpdateButton</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451066.1438"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">RoomUpdateButton</span><span class="hljs-params">(onClick: () @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Unit</span>)</span></span> {
    ExtendedFloatingActionButton(
        onClick = { onClick() },
        icon = {
            Icon(
                Icons.Filled.Done,
                contentDescription = stringResource(R.string.act_room_save),
            )
        },
        text = { Text(text = stringResource(R.string.act_room_save)) }
    )
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451066.1438')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This button can be declared in the Scaffold composable as a parameter <code>floatingActionButton</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451066.557"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomActivity</span> : <span class="hljs-type">ComponentActivity</span>() {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)
        enableEdgeToEdge()
        <span class="hljs-keyword">val</span> param = intent.getStringExtra(MainActivity.ROOM_PARAM)
        <span class="hljs-keyword">val</span> room = RoomService.findByNameOrId(param)

        <span class="hljs-keyword">val</span> onRoomSave: () <span class="hljs-meta">@LAMBDA</span> <span class="hljs-built_in">Unit</span> = {
            <span class="hljs-comment">// ...</span>
        }

        setContent {
            AutomacorpTheme {
                Scaffold(
                    floatingActionButton = { RoomUpdateButton(onRoomSave) },
                    modifier = Modifier.fillMaxSize()
                ) { innerPadding <span class="hljs-meta">@LAMBDA</span>
                    <span class="hljs-keyword">if</span> (viewModel.room != <span class="hljs-literal">null</span>) {
                        RoomDetail(room, Modifier.padding(innerPadding))
                    } <span class="hljs-keyword">else</span> {
                        NoRoom(Modifier.padding(innerPadding))
                    }

                }
            }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451066.557')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>But we have a problem with the action. We have no way to access to value of the different fields to update a name or the target temperature of a room. We used a state but this state is defined locally in the <code>RoomDetail</code> composable. We need to move this state in the RoomActivity and define a global state. For that we need to use a <code>ViewModel</code></p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_view_model">View model</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_why_use_a_viewmodel">Why use a ViewModel ?</h3>
<div class="paragraph">
<p>A ViewModel is a class that is responsible for preparing and managing the data for an Activity or a Fragment. It also handles the communication of the Activity / Fragment with the rest of the application (e.g. calling the business logic classes).</p>
</div>
<div class="paragraph">
<p>The Android framework manages the lifecycle of UI controllers, such as activities and fragments. The framework may decide to destroy or re-create an UI controller in response to certain user actions or device events that are completely out of your control.</p>
</div>
<div class="paragraph">
<p>If the system destroys or re-creates an UI controller, any transient UI-related data you store in them is lost. For example, your app may include a list of users in one of its activities. When the activity is re-created for a configuration change, the new activity has to re-fetch the list of users.</p>
</div>
<div class="paragraph">
<p>For simple data, the activity can use the onSaveInstanceState() method and restore its data from the bundle in onCreate(), but this approach is only suitable for small amounts of data that can be serialized then deserialized, not for potentially large amounts of data like a list of users or bitmaps.</p>
</div>
<div class="paragraph">
<p>Another problem is that UI controllers frequently need to make asynchronous calls that may take some time to return. The UI controller needs to manage these calls and ensure the system cleans them up after it\u2019s destroyed to avoid potential memory leaks.</p>
</div>
<div class="paragraph">
<p>ViewModels were created to resolve these problems and separate out view data ownership from UI controller logic. UI controllers such as activities and fragments should only display UI data, react to user actions, or handle operating system communication, such as permission requests. The data should be now managed by a ViewModel.</p>
</div>
<div class="paragraph">
<p>Using a view model helps enforce a clear separation between the code for your app\u2019s UI and its data model.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/android-view-model.svg" alt="View model">
</div>
</div>
<div class="paragraph">
<p>The ViewModel class is used to store data related to an app&#8217;s UI, and is also lifecycle aware, meaning that it responds to lifecycle events much like an activity or fragment does. If lifecycle events such as screen rotation cause an activity or fragment to be destroyed and recreated, the associated ViewModel won&#8217;t need to be recreated. We will use a ViewModel to store the state of our room.</p>
</div>
</div>
<div class="sect2">
<h3 id="_create_a_viewmodel">Create a ViewModel</h3>
<div class="paragraph">
<p>To create a model, you need to create a class that extends the ViewModel class. This class will contain the data that you want to store and manage. In our case we will store our composable state.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451066.3928"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomViewModel</span>: <span class="hljs-type">ViewModel</span>() {
    <span class="hljs-keyword">var</span> room <span class="hljs-keyword">by</span> mutableStateOf <span class="hljs-meta">@LTRoomDto</span>?<span class="hljs-meta">@GT(null)</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451066.3928')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can then use this ViewModel in your activity or fragment.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451066.8052"><span class="hljs-keyword">val</span> param = intent.getStringExtra(MainActivity.ROOM_PARAM)
        <span class="hljs-keyword">val</span> viewModel: RoomViewModel <span class="hljs-keyword">by</span> viewModels()
        viewModel.room = RoomService.findByNameOrId(param)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451066.8052')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_flask_use_a_floating_action_button"><span class="icon">[flask&#93;</span> : Use a floating action button</h3>
<div class="paragraph">
<p>You can now finish the implementation of the floating action button. You can use the ViewModel to update the room.</p>
</div>
<div class="paragraph">
<p>Update the <code>RoomDetail</code> composable signature to accept a <code>RoomViewModel</code> as parameters.!</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451067.5923"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">RoomDetail</span><span class="hljs-params">(model: <span class="hljs-type">RoomViewModel</span>, modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Column(modifier = modifier.padding(<span class="hljs-number">16.</span>dp)) {
        Text(
            text = stringResource(R.string.act_room_name),
            style = MaterialTheme.typography.labelSmall,
            modifier = Modifier.padding(bottom = <span class="hljs-number">4.</span>dp)
        )
        OutlinedTextField(
            value = model.room?.name ?: <span class="hljs-string">&quot;&quot;</span>,
            onValueChange = { model.room?.name = it },
            label = { Text(text = stringResource(R.string.act_room_name)) },
            modifier = Modifier.fillMaxWidth()
        )
        <span class="hljs-comment">// ...</span>
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451067.5923')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>When you update something in the <code>RoomDetail</code> composable, the handler can access now to the room data and update the data. After the saving you can return to the home with an Intent</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451067.2563"><span class="hljs-keyword">val</span> onRoomSave: () <span class="hljs-meta">@LAMBDA</span> <span class="hljs-built_in">Unit</span> = {
    <span class="hljs-keyword">if</span>(viewModel.room != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">val</span> roomDto: RoomDto = viewModel.room <span class="hljs-keyword">as</span> RoomDto
        RoomService.updateRoom(roomDto.id, roomDto)
        Toast.makeText(baseContext, <span class="hljs-string">&quot;Room @dollar@{roomDto.name} was updated&quot;</span>, Toast.LENGTH_LONG).show()
        startActivity(Intent(baseContext, MainActivity::<span class="hljs-keyword">class</span>.java))
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451067.2563')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_create_our_images_for_the_menu"><span class="icon">[flask&#93;</span> Create our images for the menu</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We will create 3 images for our future menu topbar from svg downloaded from my website.</p>
</div>
<div class="paragraph">
<p><a href="/img/ic_rooms.svg"><span class="image"><img src="../../img/ic_rooms.svg" alt="ic rooms" height="30"></span></a>
<a href="/img/ic_mail.svg"><span class="image"><img src="../../img/ic_mail.svg" alt="ic mail" height="30"></span></a>
<a href="/img/ic_github.svg"><span class="image"><img src="../../img/ic_github.svg" alt="ic github" height="30"></span></a></p>
</div>
<div class="paragraph">
<p>For each image follow these steps</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Download the image (right click on the image and save as)</p>
</li>
<li>
<p>In the Project window, select the Android view.</p>
</li>
<li>
<p>Right-click the res folder and select <strong>New @GT Image Asset</strong></p>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/android/menu/img_image_asset.png" alt="Add image asset" width="600"></span></p>
</div>
</li>
<li>
<p>In the <strong>Configure Image Asset</strong> dialog, select <strong>Action Bar and Tab Icons</strong> in the <strong>Icon Type</strong> field. On the path select the downloaded image</p>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/android/menu/img_configure_image_asset.png" alt="Configure image asset" width="700"></span></p>
</div>
</li>
<li>
<p>Click <strong>Next</strong> and <strong>Finish</strong></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>You should now have 5 images generated in the <strong>res/drawable/ic_actions_rooms</strong> folder (one for each screen density)</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/menu/image_asset.png" alt="image asset result" width="300">
</div>
</div>
<div class="paragraph">
<p>Repeat these steps for each image (mail and github).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_app_menu">App menu</h2>
<div class="sectionbody">
<div class="paragraph">
<p>With the <code>Scaffold</code> composable you can add a menu in the top or in the bottom bar.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A top bar is a bar that appears at the top of the screen. It provides access to key tasks and information. It generally hosts a title, core action items, and certain navigation items.</p>
</li>
<li>
<p>A bottom bar is a bar that appears at the bottom of the screen. It typically includes core navigation items. It may also provide access to other key actions, such as through a contained floating action button.</p>
</li>
</ul>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/menu/bars.png" alt="Android resource">
</div>
</div>
<div class="paragraph text-center">
<p><em>Image credit <a href="https://developer.android.com/" class="bare">https://developer.android.com/</a></em></p>
</div>
<div class="paragraph">
<p>The top bar can have different organization depending on the screen.</p>
</div>
<table class="tableblock frame-all grid-all stretch text-center">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Small</strong> :  <code>TopAppBar</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="image"><img src="../../img/training/android/menu/small_bar.png" alt="Small top bar" width="300"></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Center aligned</strong> : <code>CenterAlignedTopAppBar</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="image"><img src="../../img/training/android/menu/center_bar.png" alt="Centered top bar" width="300"></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Medium</strong> : <code>MediumTopAppBar</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="image"><img src="../../img/training/android/menu/medium_bar.png" alt="Medium top bar" width="300"></span></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><strong>Large</strong> : <code>LargeTopAppBar</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="image"><img src="../../img/training/android/menu/large_bar.png" alt="Large top bar" width="300"></span></p></td>
</tr>
</tbody>
</table>
<div class="paragraph text-center">
<p><em>Image credit <a href="https://developer.android.com/" class="bare">https://developer.android.com/</a></em></p>
</div>
<div class="paragraph">
<p>The various composables that allow you to implement the four different top app bars share several key parameters:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>title: The text that appears across the app bar.</p>
</li>
<li>
<p>navigationIcon: The primary icon for navigation. Appears on the left of the app bar.</p>
</li>
<li>
<p>actions: Icons that provide the user access to key actions. They appear on the right of the app bar.</p>
</li>
<li>
<p>scrollBehavior: Determines how the top app bar responds to scrolling of the scaffold&#8217;s inner content.</p>
</li>
<li>
<p>colors: Determines how the app bar appears.</p>
</li>
</ul>
</div>
<div class="sect2">
<h3 id="_flask_create_a_common_menu_in_your_app"><span class="icon">[flask&#93;</span> : Create a common menu in your app</h3>
<div class="paragraph">
<p>Create String resources for the menu items in the <code>res/values/strings.xml</code> file</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" id="1732912451067.7273">    @LTstring name=&quot;app_go_back_description&quot;@GTGo back@LT/string@GT
    @LTstring name=&quot;app_go_room_description&quot;@GTRooms@LT/string@GT
    @LTstring name=&quot;app_go_github_description&quot;@GTGithub@LT/string@GT
    @LTstring name=&quot;app_go_mail_description&quot;@GTSend email@LT/string@GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451067.7273')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>As we want to share the menu between different activities, we will create composable in its own Kotlin file.</p>
</div>
<div class="paragraph">
<p>Create a file named AutomacorpMenu.kt in the package com.automacorp</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451067.217"><span class="hljs-meta">@Composable</span>
<span class="hljs-meta">@OptIn(ExperimentalMaterial3Api::class)</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">AutomacorpTopAppBar</span><span class="hljs-params">(title: <span class="hljs-type">String</span>? = <span class="hljs-literal">null</span>, returnAction: () @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Unit</span> = {})</span></span> {
    <span class="hljs-keyword">val</span> colors = TopAppBarDefaults.topAppBarColors(
        containerColor = MaterialTheme.colorScheme.primaryContainer,
        titleContentColor = MaterialTheme.colorScheme.primary,
    )
    <span class="hljs-comment">// Define the actions displayed on the right side of the app bar</span>
    <span class="hljs-keyword">val</span> actions: <span class="hljs-meta">@Composable</span> RowScope.() <span class="hljs-meta">@LAMBDA</span> <span class="hljs-built_in">Unit</span> = {
        IconButton(onClick = { <span class="hljs-comment">/* do something */</span> }) {
            Icon(
                painter = painterResource(R.drawable.ic_action_rooms),
                contentDescription = stringResource(R.string.app_go_room_description)
            )
        }
        IconButton(onClick = { <span class="hljs-comment">/* do something */</span> }) {
            Icon(
                painter = painterResource(R.drawable.ic_action_mail),
                contentDescription = stringResource(R.string.app_go_mail_description)
            )
        }
        IconButton(onClick = { <span class="hljs-comment">/* do something */</span> }) {
            Icon(
                painter = painterResource(R.drawable.ic_action_github),
                contentDescription = stringResource(R.string.app_go_github_description)
            )
        }
    }
    <span class="hljs-comment">// Display the app bar with the title if present and actions</span>
    <span class="hljs-keyword">if</span>(title == <span class="hljs-literal">null</span>) {
        TopAppBar(
            title = { Text(<span class="hljs-string">&quot;&quot;</span>) },
            colors = colors,
            actions = actions
        )
    } <span class="hljs-keyword">else</span> {
        MediumTopAppBar(
            title = { Text(title) },
            colors = colors,
            <span class="hljs-comment">// The title will be displayed in other screen than the main screen.</span>
            <span class="hljs-comment">// In this case we need to add a return action</span>
            navigationIcon = {
                IconButton(onClick = returnAction) {
                    Icon(
                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,
                        contentDescription = stringResource(R.string.app_go_back_description)
                    )
                }
            },
            actions = actions
        )
    }
}

<span class="hljs-meta">@Preview(showBackground = true)</span>
<span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">AutomacorpTopAppBarHomePreview</span><span class="hljs-params">()</span></span> {
    AutomacorpTheme {
        AutomacorpTopAppBar(<span class="hljs-literal">null</span>)
    }
}

<span class="hljs-meta">@Preview(showBackground = true)</span>
<span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">AutomacorpTopAppBarPreview</span><span class="hljs-params">()</span></span> {
    AutomacorpTheme {
        AutomacorpTopAppBar(<span class="hljs-string">&quot;A page&quot;</span>)
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451067.217')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Adapt this composable to your needs. We will see how to add intents in the next chapter.</p>
</div>
<div class="paragraph">
<p>With the @Preview annotation, you can see a preview of your composable in the Android Studio preview window.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/menu/topbar.png" alt="image asset result" width="800">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_flask_use_yout_topbar_in_the_screens"><span class="icon">[flask&#93;</span> : Use yout topbar in the screens</h3>
<div class="paragraph">
<p>You can nox use your topbar in your screens. For example, update the <code>RoomActivity</code> to use the <code>AutomacorpTopAppBar</code> composable.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451068.6597">setContent {
  AutomacorpTheme {
      Scaffold(
          topBar = { AutomacorpTopAppBar(<span class="hljs-string">&quot;Room&quot;</span>, navigateBack) },
          floatingActionButton = { RoomUpdateButton(onRoomSave) },
          modifier = Modifier.fillMaxSize()
      ) {
        <span class="hljs-comment">// ...</span>
      }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451068.6597')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>To write the <code>navigateBack</code> function, you can use this code for example.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451068.906"><span class="hljs-keyword">val</span> navigateBack: () <span class="hljs-meta">@LAMBDA</span> <span class="hljs-built_in">Unit</span> = {
    startActivity(Intent(baseContext, MainActivity::<span class="hljs-keyword">class</span>.java))
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451068.906')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can now use the <code>AutomacorpTopAppBar</code> composable in all your activities.</p>
</div>
</div>
<div class="sect2">
<h3 id="_flask_intent_new_use_case"><span class="icon">[flask&#93;</span> : Intent : new use case</h3>
<div class="paragraph">
<p>I introduced the Intent concept in <a href="https://dev-mind.fr/training/android/android-add-activity.html#_intent_how_communicate_with_other_component">this chapter</a>. In the first menu item we call another activity in our app, as we already done in the lab <a href="https://dev-mind.fr/training/android/android-add-activity.html">"Add a new activity"</a>.</p>
</div>
<div class="paragraph">
<p>An <a href="https://developer.android.com/reference/android/content/Inten">intent</a> is an abstract description of an operation to be performed. It can be used to launch an Activity, a background Service&#8230;&#8203; And you can call one activity in your app or in another app installed on the device. In this case you ask to the system to find the best application to resolve an action.</p>
</div>
<div class="paragraph">
<p>The first argument for the Intent is the expected action, such as <code>ACTION_VIEW</code>, <code>ACTION_SENDTO</code>, <code>ACTION_EDIT</code>, <code>ACTION_MAIN</code>, etc.
The second one is the data to operate on, such an URL, an email, expressed as a Uri.</p>
</div>
<div class="paragraph">
<p>Some examples of action/data pairs :</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>ACTION_VIEW</code> content://contacts/people/1 : Display information about the person whose identifier is "1".</p>
</li>
<li>
<p><code>ACTION_DIAL</code> tel:0642434445 : Display the phone dialer with the given number filled in.</p>
</li>
<li>
<p><code>ACTION_EDIT</code> content://contacts/people/1 : Edit information about the person whose identifier is "1".</p>
</li>
<li>
<p>&#8230;&#8203;</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>For example you can create an intent to open a web page in the default browser</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451068.9463"><span class="hljs-keyword">val</span> intent = Intent(Intent.ACTION_VIEW, Uri.parse(<span class="hljs-string">&quot;https://dev-mind.fr&quot;</span>))
startActivity(intent)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451068.9463')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can also create an intent to send an email</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451068.2175"><span class="hljs-keyword">val</span> intent = Intent(Intent.ACTION_SENDTO, Uri.parse(<span class="hljs-string">&quot;mailto://guillaume@dev-mind.fr&quot;</span>))
startActivity(intent)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451068.2175')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Update the <code>AutomacorpTopAppBar</code> composable to add the intents to the different actions.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The first action will open the <code>RoomListActivity</code> activity. For that create a new empty activity <code>RoomListActivity</code></p>
</li>
<li>
<p>The second action will send an email to your email address</p>
</li>
<li>
<p>The third action will open your Github page</p>
<div class="literalblock">
<div class="content">
<pre>If you have an error when you try to send an email, you should check that you have an email client installed on your virtual or real device. If not you can launch Google Play Store to install an email client as Gmail.</pre>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
</div>`;var If=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_lazycolumn_lazyrow">LazyColumn &amp; LazyRow</a></li>
<li><a class="link" fragment="#_flask_display_the_room_list"><span class="icon">[flask&#93;</span> : Display the room list</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_create_a_composable_to_display_a_room_in_the_list">Create a composable to display a room in the list</a></li>
<li><a class="link" fragment="#_update_the_activity_to_display_the_list_of_rooms">Update the activity to display the list of rooms</a></li>
<li><a class="link" fragment="#_open_a_room_detail_when_clicking_on_a_room">Open a room detail when clicking on a room</a></li>
</ul>
</li>
<li><a class="link" fragment="#_more">More&#8230;&#8203;</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this lesson, you will learn how to populate a list of room in our empty rooms screen (you should have created this activity in the last lab).</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/android-activity-list.png" alt="Create an activity list" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_lazycolumn_lazyrow">LazyColumn &amp; LazyRow</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When you want to create a list view you can use the <code>Row</code> and <code>Column</code> composables with the modifier <code>verticalScroll</code> to create a list of elements. But if you have a lot of elements, it&#8217;s not the best way to do it.</p>
</div>
<div class="paragraph">
<p>You should use a <code>LazyColumn</code> or <code>LazyRow</code> composables (equivalent to the legacy <strong>RecyclerView</strong> widget). These elements are able to manage a large data sets and scrool between elements.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451034.1208">LazyColumn {
    item {
        Header()
    }
    items(<span class="hljs-keyword">data</span>) { item <span class="hljs-meta">@LAMBDA</span>
        PhotoItem(item)
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451034.1208')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>The Lazy components are responsible for adding the each item\u2019s content as required by the layout and scroll position.</p>
</div>
<div class="paragraph">
<p>For example, if your list shows music collection, each item might represent a single album. The composable creates only as many view items as are needed to display the on-screen portion of the dynamic content, plus a few extra. As the user scrolls through the list, the composable takes the off-screen views and rebinds them to the data which is scrolling onto the screen.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/list/android-listview.png" alt="Android RecyclerView">
</div>
</div>
<div class="paragraph">
<p>Compose provide also a <code>LazyVerticalGrid</code> and <code>LazyHorizontalGrid</code> to display a grid of elements. Grids have the same powerful API capabilities as lists.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/list/grid.png" alt="Grid example" width="400">
</div>
</div>
<div class="paragraph">
<p>If you need to create a very large list of elements, you can use the <a href="https://developer.android.com/develop/ui/compose/lists?hl=en#lazy-staggered-grid">LazyVerticalStaggeredGrid</a> to automatically load more data when the user scrolls to the end of the list.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_display_the_room_list"><span class="icon">[flask&#93;</span> : Display the room list</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Open the activity created in the last labs and called <code>RoomListActivity</code>. For the moment we have a basic composable with a single Text component. We will now add a list of rooms.</p>
</div>
<div class="sect2">
<h3 id="_create_a_composable_to_display_a_room_in_the_list">Create a composable to display a room in the list</h3>
<div class="paragraph">
<p>You can create a new composable called <code>RoomItem</code> to display a room in the list. This composable will take a <code>Room</code> object as parameter and display the name of the room and the current temperature.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/list/item-example.png" alt="Item example" width="500">
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451035.8318"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">RoomItem</span><span class="hljs-params">(room: <span class="hljs-type">RoomDto</span>, modifier: <span class="hljs-type">Modifier</span> = Modifier)</span></span> {
    Card(colors = CardDefaults.cardColors(containerColor = Color.Transparent),
        border = BorderStroke(<span class="hljs-number">1.</span>dp, PurpleGrey80)
    ) {
        Row(
            modifier = modifier.padding(<span class="hljs-number">20.</span>dp),
            verticalAlignment = Alignment.CenterVertically,
        ) {
            Column {
                Text(
                    text = room.name,
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = <span class="hljs-string">&quot;Target temperature : &quot;</span> + (room.targetTemperature?.toString() ?: <span class="hljs-string">&quot;?&quot;</span>) + <span class="hljs-string">&quot;\xB0&quot;</span>,
                    style = MaterialTheme.typography.bodySmall
                )
            }
            Text(
                text = (room.currentTemperature?.toString() ?: <span class="hljs-string">&quot;?&quot;</span>) + <span class="hljs-string">&quot;\xB0&quot;</span>,
                style = MaterialTheme.typography.headlineLarge,
                textAlign = TextAlign.Right,
                modifier = Modifier.fillMaxSize()
            )
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451035.8318')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This composable is a <code>Card</code> with a <code>Row</code> inside. The <code>Row</code> contains a <code>Column</code> with the room name and the target temperature and a <code>Text</code> with the current temperature. We used different styles to display the text.</p>
</div>
<div class="paragraph">
<p>You can add a function to preview this composable</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451035.0022"><span class="hljs-meta">@Preview(showBackground = true)</span>
<span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">RoomItemPreview</span><span class="hljs-params">()</span></span> {
    AutomacorpTheme {
        RoomItem(RoomService.ROOMS[<span class="hljs-number">0</span>])
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451035.0022')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_update_the_activity_to_display_the_list_of_rooms">Update the activity to display the list of rooms</h3>
<div class="paragraph">
<p>You can now use a <code>LazyColumn</code> to display the list of rooms. You can use the <code>items</code> function to iterate over the list of rooms and display a <code>RoomItem</code> for each room.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451035.078"> LazyColumn(
    contentPadding = PaddingValues(<span class="hljs-number">4.</span>dp),
    verticalArrangement = Arrangement.spacedBy(<span class="hljs-number">8.</span>dp),
    modifier = Modifier.padding(innerPadding),
) {
    <span class="hljs-keyword">val</span> rooms = RoomService.findAll()
    items(rooms, key = { it.id }) {
        RoomItem(
            room = it,
            modifier = Modifier
        )
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451035.078')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Now if you run your app, you should see the list of rooms.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/list/list-example.png" alt="Item example" width="500">
</div>
</div>
</div>
<div class="sect2">
<h3 id="_open_a_room_detail_when_clicking_on_a_room">Open a room detail when clicking on a room</h3>
<div class="paragraph">
<p>Now we will add a click listener on the <code>RoomItem</code> to open the detail of a room when the user clicks on a room. You can add the <code>clickable</code> modifier to each item in the grid to implement this behavior.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451035.6843">items(rooms, key = { it.id }) {
    RoomItem(
        room = it,
        modifier = Modifier.clickable { openRoom(it.id) },
    )
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451035.6843')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Now you can create a function <code>openRoom</code> to create an Intent to open the detail of a room (ie <code>RoomDetailActivity</code>).</p>
</div>
<div class="paragraph">
<p>For the moment, <code>RoomDetailActivity</code> should return on the 'MainActicity@backtick@ when the user clicks on the back button. You can update the function to return on the list of rooms.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_more">More&#8230;&#8203;</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you want more explanations about list and grid you can read this <a href="https://developer.android.com/develop/ui/compose/lists">article</a> made by Google</p>
</div>
</div>
</div>`;var Af=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_explore_api">Explore API</a></li>
<li><a class="link" fragment="#_retrofit">Retrofit</a></li>
<li><a class="link" fragment="#_flask_configure_retrofit"><span class="icon">[flask&#93;</span> : Configure Retrofit</a></li>
<li><a class="link" fragment="#_flask_use_retrofit"><span class="icon">[flask&#93;</span> : Use Retrofit</a></li>
<li><a class="link" fragment="#_main_thread">Main thread</a></li>
<li><a class="link" fragment="#_coroutines">Coroutines</a></li>
<li><a class="link" fragment="#_flask_use_coroutines_to_resolve_main_thread_error"><span class="icon">[flask&#93;</span> : Use coroutines to resolve main thread error</a></li>
<li><a class="link" fragment="#_android_permission">Android permission</a></li>
<li><a class="link" fragment="#_use_viewmodel_in_your_code">Use ViewModel in your code</a></li>
<li><a class="link" fragment="#_flask_update_the_screen_to_display_and_update_the_detail"><span class="icon">[flask&#93;</span> : Update the screen to display and update the detail</a></li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this lesson, we will see how to call a remote HTTP API with an external library called <a href="https://square.github.io/retrofit/">Retrofit</a>. <a href="https://square.github.io/retrofit/">Retrofit</a> was not done by Google. But when a library created by the community is widely used, well designed, the Android team does not hesitate to encourage its use.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/android-call-remote.png" alt="Call an HTTP API with Android" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_explore_api">Explore API</h2>
<div class="sectionbody">
<div class="paragraph">
<p>If you followed the previous code labs to build a Spring application, you will be able to use your own app. You should have an API to list building rooms and other to load detailed information on a room.</p>
</div>
<div class="paragraph">
<p>For the moment data are static in <code>com.automacorp.model.RoomService</code>. Now we will update this service to read data stored on a web server, as a REST web service.</p>
</div>
<div class="paragraph">
<p>You can use your own Spring API if you followed Spring course or my implementation available on <a href="https://automacorp.devmind.cleverapps.io/swagger-ui/index.html" class="bare">https://automacorp.devmind.cleverapps.io/swagger-ui/index.html</a>. This app is secured by basic auth and you can the username <code>user</code> and his password <code>password</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_retrofit">Retrofit</h2>
<div class="sectionbody">
<div class="paragraph">
<p>To interact with a remote HTTP API in Android app, your app needs to</p>
</div>
<div class="ulist">
<ul>
<li>
<p>establish a network connection to remote server which exposes your REST service and</p>
</li>
<li>
<p>communicate with that server, and then</p>
</li>
<li>
<p>receive its response data and</p>
</li>
<li>
<p>parse the data to be usable in your code.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Retrofit was made to do all these steps easily. For the last one, we need a converter to deserialize HTTP body. Several converters are available. We will use <a href="https://github.com/square/moshi/">Moshi</a> library</p>
</div>
<div class="paragraph">
<p>The mains goal of Retrofit is to turn your HTTP API into a Java interface. For example</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451085.522"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RoomsApiService</span> {
    <span class="hljs-meta">@GET(<span class="hljs-string">&quot;rooms&quot;</span>)</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>: <span class="hljs-symbol">Call@</span><span class="hljs-symbol">LTList@</span><span class="hljs-symbol">LTRoomDto@</span><span class="hljs-symbol">GT@</span>GT

    <span class="hljs-meta">@GET(<span class="hljs-string">&quot;rooms/{id}&quot;</span>)</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@Path(<span class="hljs-string">&quot;id&quot;</span>)</span> id: <span class="hljs-type">Long</span>)</span></span>: <span class="hljs-symbol">Call@</span><span class="hljs-symbol">LTRoomDto@</span>GT

    <span class="hljs-meta">@PUT(<span class="hljs-string">&quot;rooms/{id}&quot;</span>)</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateRoom</span><span class="hljs-params">(<span class="hljs-meta">@Path(<span class="hljs-string">&quot;id&quot;</span>)</span> id: <span class="hljs-type">Long</span>, <span class="hljs-meta">@Body</span> room: <span class="hljs-type">RoomCommandDto</span>)</span></span>: <span class="hljs-symbol">Call@</span><span class="hljs-symbol">LTRoomDto@</span>GT

    <span class="hljs-comment">//...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451085.522')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Annotations (GET, POST, PUT, DELETE,&#8230;&#8203;) on the interface methods and its parameters indicate how a request will be handled.</p>
</div>
<div class="paragraph">
<p>A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by { and }.</p>
</div>
<div class="paragraph">
<p>You can bind a parameter in path</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451085.3914"><span class="hljs-meta">@GET(<span class="hljs-string">&quot;rooms/{id}&quot;</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@Path(<span class="hljs-string">&quot;id&quot;</span>)</span> id: <span class="hljs-type">Long</span>)</span></span>: <span class="hljs-symbol">Call@</span><span class="hljs-symbol">LTRoomDto@</span>GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451085.3914')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>or a parameter in query</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451085.9333"><span class="hljs-meta">@GET(<span class="hljs-string">&quot;rooms&quot;</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">(<span class="hljs-meta">@Query(<span class="hljs-string">&quot;sort&quot;</span>)</span> sort: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-symbol">Call@</span><span class="hljs-symbol">LTList@</span><span class="hljs-symbol">LTRoomDto@</span><span class="hljs-symbol">GT@</span>GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451085.9333')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>An object can be specified for POST or PUT HTTP requests @Body annotation. In this case, Retrofit will use converter defined in your conf to serialize body object in JSON</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451085.9805"><span class="hljs-meta">@PUT(<span class="hljs-string">&quot;rooms/{id}&quot;</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateRoom</span><span class="hljs-params">(<span class="hljs-meta">@Path(<span class="hljs-string">&quot;id&quot;</span>)</span> id: <span class="hljs-type">Long</span>, <span class="hljs-meta">@Body</span> room: <span class="hljs-type">RoomCommandDto</span>)</span></span>: <span class="hljs-symbol">Call@</span><span class="hljs-symbol">LTRoomDto@</span>GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451085.9805')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In my example RoomCommandDto is different than RoomDto. If you use my remote API available on on <a href="https://automacorp.devmind.cleverapps.io" class="bare">https://automacorp.devmind.cleverapps.io</a> you could define these objects in your code</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451086.3796"><span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomDto</span>(
    <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>,
    <span class="hljs-keyword">val</span> name: String,
    <span class="hljs-keyword">val</span> currentTemperature: <span class="hljs-built_in">Double</span>?,
    <span class="hljs-keyword">val</span> targetTemperature: <span class="hljs-built_in">Double</span>?,
    <span class="hljs-keyword">val</span> windows: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTWindowDto@</span>GT
)

<span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomCommandDto</span>(
    <span class="hljs-keyword">val</span> name: String,
    <span class="hljs-keyword">val</span> currentTemperature: <span class="hljs-built_in">Double</span>?,
    <span class="hljs-keyword">val</span> targetTemperature: <span class="hljs-built_in">Double</span>?,
    <span class="hljs-keyword">val</span> floor: <span class="hljs-built_in">Int</span> = <span class="hljs-number">1</span>,
    <span class="hljs-comment">// Set to the default building ID (useful when you have not created screens to manage buildings)</span>
    <span class="hljs-keyword">val</span> buildingId: <span class="hljs-built_in">Long</span> = -<span class="hljs-number">10</span>
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451086.3796')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>These 2 objects are 2 projections of a Room: one for the read, one for the update.
You will find more information on <a href="https://square.github.io/retrofit/">Retrofit</a> website</p>
</div>
<div class="paragraph">
<p>It is the time to test by yourself.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_configure_retrofit"><span class="icon">[flask&#93;</span> : Configure Retrofit</h2>
<div class="sectionbody">
<div class="paragraph">
<p>As I said we need to install Retrofit to call a remote API and we also need another library to serialize/deserialize our Kotlin objects in/from JSON.</p>
</div>
<div class="paragraph">
<p>Android project use now the Gradle catalog version. Open the file <code>libs.versions.toml</code>. This file register all versions of libraries used in your project. You can add a new line to register the version of Retrofit and Moshi</p>
</div>
<div class="paragraph">
<p>Each section are defined by [] and the name of the section.</p>
</div>
<div class="paragraph">
<p>In the section <code>[versions]</code> you can add the version of Retrofit and Moshi</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-toml" id="1732912451087.8298"><span class="hljs-attr">retrofit</span> = <span class="hljs-string">&quot;2.9.0&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451087.8298')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In the section <code>[libraries]</code> you can add the dependency of Retrofit and Moshi</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-toml" id="1732912451087.612"><span class="hljs-attr">retrofit</span> = { module = <span class="hljs-string">&quot;com.squareup.retrofit2:retrofit&quot;</span>, version.ref = <span class="hljs-string">&quot;retrofit&quot;</span> }
<span class="hljs-attr">retrofit-moshi</span> = { module = <span class="hljs-string">&quot;com.squareup.retrofit2:converter-moshi&quot;</span>, version.ref = <span class="hljs-string">&quot;retrofit&quot;</span> }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451087.612')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Now open <strong>build.gradle.kts (Module: automacorp.app)</strong>. and add the following dependencies</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912451087.649">implementation (libs.retrofit)
implementation (libs.converter.moshi)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451087.649')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>As you updated your gradle configuration, Android Studio display a message to synchronize your projet. Click on <strong>Sync now</strong></p>
</div>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/android/android-gradle-sync.png" alt="Sync Gradle project"></span></p>
</div>
<div class="paragraph">
<p>Now you are ready to write the code to call your API.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>In package <code>com.automacorp.service</code> create a new interface called <code>RoomsApiService</code></p>
</li>
<li>
<p>You can apply the examples given above. In this interface we declare methods used to launch a remote call to</p>
<div class="ulist">
<ul>
<li>
<p>read all rooms</p>
</li>
<li>
<p>read one room by its id</p>
</li>
<li>
<p>update a room</p>
</li>
<li>
<p>create a room</p>
</li>
<li>
<p>delete a room by its id</p>
</li>
</ul>
</div>
</li>
<li>
<p>We need to create an implementation of this interface. This implementation will be created by the Retrofit Builder. In package <code>com.automacorp.service</code> create a new class called <strong>ApiServices</strong>. This class will use a Retrofit builder to return an instance of interface <code>RoomsApiService</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451087.1267"><span class="hljs-keyword">object</span> ApiServices {
    <span class="hljs-keyword">val</span> roomsApiService : RoomsApiService <span class="hljs-keyword">by</span> lazy {
        Retrofit.Builder()
                .addConverterFactory(MoshiConverterFactory.create()) <span class="hljs-comment">// (1)</span>
                .baseUrl(<span class="hljs-string">&quot;http://automacorp.devmind.cleverapps.io/api/&quot;</span>) <span class="hljs-comment">// (2)</span>
                .build()
                .create(RoomsApiService::<span class="hljs-keyword">class</span>.java)
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451087.1267')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p><strong>(1)</strong> a converter factory to tell Retrofit what do with the data it gets back from the web service.</p>
</div>
<div class="paragraph">
<p><strong>(2)</strong> an URL of the remote service (In this example I use an URL on my website but you can use your own API)</p>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>When an API is secured by a basic authentication, we need to adapt the settings. For that we can add 2 constant in object <code>ApiServices</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451087.3481"><span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> API_USERNAME = <span class="hljs-string">&quot;user&quot;</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> API_PASSWORD = <span class="hljs-string">&quot;password&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451087.3481')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>As often, when we have to manage credential in an HTTP request, we will create an interceptor to intercept the outgoing requests and add the authentication credential inside.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451088.1948"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicAuthInterceptor</span>(<span class="hljs-keyword">val</span> username: String, <span class="hljs-keyword">val</span> password: String): Interceptor {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">intercept</span><span class="hljs-params">(chain: <span class="hljs-type">Interceptor</span>.<span class="hljs-type">Chain</span>)</span></span>: Response {
        <span class="hljs-keyword">val</span> request = chain
            .request()
            .newBuilder()
            .header(<span class="hljs-string">&quot;Authorization&quot;</span>, Credentials.basic(username, password))
            .build()
        <span class="hljs-keyword">return</span> chain.proceed(request)
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451088.1948')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>When your interceptor is created,  you can adapt the Retrofit builder.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451088.6392"><span class="hljs-keyword">val</span> roomsApiService : RoomsApiService <span class="hljs-keyword">by</span> lazy {
    <span class="hljs-keyword">val</span> client = OkHttpClient.Builder()
            .addInterceptor(BasicAuthInterceptor(API_USERNAME, API_PASSWORD))
            .build()

    Retrofit.Builder()
        .addConverterFactory(MoshiConverterFactory.create())
        .client(client)
        .baseUrl(<span class="hljs-string">&quot;https://automacorp.devmind.cleverapps.io/api/&quot;</span>)
        .build()
        .create(RoomsApiService::<span class="hljs-keyword">class</span>.java)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451088.6392')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If your application is served over HTTPS (this is the default on Clever Cloud), you also need to customize the OkHttpClient. In the real life we use a real certificate. In our dev we just check the hostname of our remote server</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451088.2173"><span class="hljs-keyword">val</span> roomsApiService : RoomsApiService <span class="hljs-keyword">by</span> lazy {
    <span class="hljs-keyword">val</span> client = getUnsafeOkHttpClient()
            .addInterceptor(BasicAuthInterceptor(API_USERNAME, API_PASSWORD))
            .build()

    <span class="hljs-comment">// ...</span>
}

<span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getUnsafeOkHttpClient</span><span class="hljs-params">()</span></span>: OkHttpClient.Builder =
  OkHttpClient.Builder().apply {
      <span class="hljs-keyword">val</span> trustManager = <span class="hljs-keyword">object</span> : X509TrustManager {
          <span class="hljs-meta">@Throws(CertificateException::class)</span>
          <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkClientTrusted</span><span class="hljs-params">(chain: <span class="hljs-type">Array</span>@<span class="hljs-type">LTX509Certificate</span>@<span class="hljs-type">GT</span>, authType: <span class="hljs-type">String</span>)</span></span> {
          }

          <span class="hljs-meta">@Throws(CertificateException::class)</span>
          <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">checkServerTrusted</span><span class="hljs-params">(chain: <span class="hljs-type">Array</span>@<span class="hljs-type">LTX509Certificate</span>@<span class="hljs-type">GT</span>, authType: <span class="hljs-type">String</span>)</span></span> {
          }

          <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getAcceptedIssuers</span><span class="hljs-params">()</span></span>: <span class="hljs-symbol">Array@</span><span class="hljs-symbol">LTX509Certificate@</span>GT {
              <span class="hljs-keyword">return</span> arrayOf()
          }
      }
      <span class="hljs-keyword">val</span> sslContext = SSLContext.getInstance(<span class="hljs-string">&quot;SSL&quot;</span>).also {
          it.<span class="hljs-keyword">init</span>(<span class="hljs-literal">null</span>, arrayOf(trustManager), SecureRandom())
      }
      sslSocketFactory(sslContext.socketFactory, trustManager)
      hostnameVerifier { hostname, _ <span class="hljs-meta">@LAMBDA</span> hostname.contains(<span class="hljs-string">&quot;cleverapps.io&quot;</span>) }
      addInterceptor(BasicAuthInterceptor(API_USERNAME, API_PASSWORD))
  }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451088.2173')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_use_retrofit"><span class="icon">[flask&#93;</span> : Use Retrofit</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We can now adapt our code to use this API when we want to display the room list. In <code>RoomListActivity</code>, you can move the code to display the list of rooms in a new Composable function called <code>RoomList</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451089.6357"><span class="hljs-meta">@Composable</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">RoomList</span><span class="hljs-params">(
    rooms: <span class="hljs-type">List</span>@<span class="hljs-type">LTRoomDto</span>@<span class="hljs-type">GT</span>,
    navigateBack: () @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Unit</span>,
    openRoom: (<span class="hljs-type">id</span>: <span class="hljs-type">Long</span>) @<span class="hljs-type">LAMBDA</span> <span class="hljs-type">Unit</span>
)</span></span> {
    AutomacorpTheme {
        Scaffold(
            topBar = { AutomacorpTopAppBar(<span class="hljs-string">&quot;Rooms&quot;</span>, navigateBack) }
        ) { innerPadding <span class="hljs-meta">@LAMBDA</span>
            <span class="hljs-keyword">if</span> (rooms.isEmpty()) {
                Text(
                    text = <span class="hljs-string">&quot;No room found&quot;</span>,
                    modifier = Modifier.padding(innerPadding)
                )
            } <span class="hljs-keyword">else</span> {
                LazyColumn(
                    contentPadding = PaddingValues(<span class="hljs-number">4.</span>dp),
                    verticalArrangement = Arrangement.spacedBy(<span class="hljs-number">8.</span>dp),
                    modifier = Modifier.padding(innerPadding),
                ) {
                    items(rooms, key = { it.id }) {
                        RoomItem(
                            room = it,
                            modifier = Modifier.clickable { openRoom(it.id) },
                        )
                    }
                }
            }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451089.6357')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Adapt the <code>RoomListActivity</code> to use the <code>RoomList</code> composable. Now you can update the onCreate function in the activity. We don&#8217;t want to use the <code>RoomService.findAll()</code> to load the list of rooms. We will use the <code>roomsApiService</code> object to call the remote API.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451089.089"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
  <span class="hljs-comment">// ... existing code</span>

  runCatching { <span class="hljs-comment">// (1)</span>
    ApiServices.roomsApiService.findAll().execute()  <span class="hljs-comment">// (2)</span>
  }
            .onSuccess { <span class="hljs-comment">// (3)</span>
                <span class="hljs-keyword">val</span> rooms = it.body() ?: emptyList()
                <span class="hljs-comment">// Display the component with the list on room</span>
                setContent {
                    RoomList(rooms, navigateBack, openRoom)
                }
            }
            .onFailure {
                setContent {
                    RoomList(emptyList(), navigateBack, openRoom)
                }
                it.printStackTrace() <span class="hljs-comment">// (4)</span>
                Toast.makeText(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;Error on rooms loading @dollar@it&quot;</span>, Toast.LENGTH_LONG).show() <span class="hljs-comment">// (5)</span>
            }
  <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451089.089')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>(1)</strong> we use <strong>runCatching</strong> to manage successes and failures. This block is like a try/catch block in Java</p>
</li>
<li>
<p><strong>(2)</strong> <code>ApiServices.roomsApiService</code> return an implementation of our object written to call a remote API. We call the method <strong>execute</strong> to run a synchronous call</p>
</li>
<li>
<p><strong>(3)</strong> On success we update adapter with the result contained in body property. If this response is null the list is empty.</p>
</li>
<li>
<p><strong>(4)</strong> We use this line to have the real stack trace in your device log file</p>
</li>
<li>
<p><strong>(5)</strong> on error we display a message in a <a href="https://developer.android.com/guide/topics/ui/notifiers/toasts">Toast notation</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Run your app to see the changes when and open the room list.</p>
</div>
<div class="paragraph">
<p>Unfortunately you should have a toast notification with the following error message :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/android-main-thread.png" alt="Network error">
</div>
</div>
<div class="paragraph">
<p>To analyse the errors you can open the LogCat tab and filter on Error level. In my example below, we can see the same error</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/remote/android-logcat.png" alt="Logger">
</div>
</div>
<div class="paragraph">
<p>To resolve the problem we have to understand the next chapters</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_main_thread">Main thread</h2>
<div class="sectionbody">
<div class="paragraph">
<p>When the system launches your application, that application runs in a thread called <strong>Main thread</strong>. This main thread manages user interface operations (rendering, events &#8230;&#8203;), system calls&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Calling long-running operations from this main thread can lead to freezes and unresponsiveness.</p>
</div>
<div class="paragraph">
<p>Making a network request on the main thread forces it to wait, or block, until it receives a response.</p>
</div>
<div class="paragraph">
<p>When the thread is blocked, the OS isn&#8217;t able to manage UI events, which causes your app to freeze and potentially leads to an Application Not Responding (ANR) dialog. To avoid these performance issues, Android throws a <strong>MainThreadException</strong> and kills your app if you try to block this main thread.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/remote/android-main-thread-error.png" alt="Main thread">
</div>
</div>
<div class="paragraph">
<p>The solution is to run your network call, your long-running task in another thread, and when the result is available you can reattach the main thread to display the result. Only the main thread can update the interface.</p>
</div>
<div class="paragraph">
<p>If you develop in Java, Thread development can be difficult. With Kotlin and <a href="https://kotlinlang.org/docs/coroutines-guide.html">coroutines</a>, the development is really simple.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_coroutines">Coroutines</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A <a href="https://kotlinlang.org/docs/coroutines-guide.html">coroutine</a> is a concurrency design pattern that you can use on Android to simplify code that executes asynchronously tasks as an HTTP request. Coroutines help to manage long-running tasks that might otherwise block the main thread and cause your app to become unresponsive.</p>
</div>
<div class="paragraph">
<p>In Kotlin, all coroutines run inside a <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/">CoroutineScope</a>. A scope controls the lifetime of coroutines through its job. When you cancel the job of a scope, it cancels all coroutines started in that scope.</p>
</div>
<div class="paragraph">
<p>On Android, you can use a scope to cancel all running coroutines when, for example, the user navigates away from an Activity or Fragment. Scopes also allow you to specify a default dispatcher. A dispatcher controls which thread runs a coroutine.</p>
</div>
<div class="paragraph">
<p>Each object in Android which has a <a href="https://developer.android.com/topic/libraries/architecture/lifecycle">lifecycle</a> (Activity, Fragment&#8230;&#8203;), has a <code>CoroutineScope</code>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_use_coroutines_to_resolve_main_thread_error"><span class="icon">[flask&#93;</span> : Use coroutines to resolve main thread error</h2>
<div class="sectionbody">
<div class="paragraph">
<p>We need to add the coroutine library in your project. The dependency should be already present</p>
</div>
<div class="paragraph">
<p>Open <strong>build.gradle.kts (Module: automacorp.app)</strong> to check the presence of the following dependency (in dependencies block)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451089.3281">implementation(libs.androidx.lifecycle.runtime.ktx)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451089.3281')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Android Studio display a message to synchronize your projet. Click on <strong>Sync now</strong></p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/android-gradle-sync.png" alt="Sync Gradle project">
</div>
</div>
<div class="paragraph">
<p>We can now adapt the code used in <code>RoomListActivity</code> to load the room list.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Open <strong>com.automacorp.RoomListActivity</strong></p>
</li>
<li>
<p>Update code to call roomsApiService as follows</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451089.055">lifecycleScope.launch(context = Dispatchers.IO) { <span class="hljs-comment">// (1)</span>
    runCatching { ApiServices.roomsApiService.findAll().execute() }
        .onSuccess {
            <span class="hljs-keyword">val</span> rooms = it.body() ?: emptyList()
            withContext(context = Dispatchers.Main) { <span class="hljs-comment">// (2)</span>
                <span class="hljs-comment">// setContent ....</span>
            }
        .onFailure {
            withContext(context = Dispatchers.Main) { <span class="hljs-comment">// (2)</span>
                <span class="hljs-comment">// setContent .... and display error</span>
            }
        }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451089.055')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>(1)</strong> method <code>lifecycleScope.launch</code> open a new coroutine. You must specify a context other than Dispatchers. <code>Main</code> (Main thread) for the code to be executed. <code>Dispatchers.IO</code> is dedicated to Input/Output tasks</p>
</li>
<li>
<p><strong>(2)</strong> You cant' interact with the view outside the main thread. When we receive the data we use <code>withContext</code> to reattach your code to another thread</p>
</li>
</ul>
</div>
</li>
</ol>
</div>
<div class="paragraph">
<p>Relaunch your app to test your Room list screen.</p>
</div>
<div class="paragraph">
<p>Unfortunately you should have another toast notification with another error message. The error message tells you that your app might be missing the INTERNET permission.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/remote/android-permission-error.png" alt="Android permission error">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_android_permission">Android permission</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The purpose of a permission is to protect the privacy of an Android user. Android apps must request permission to access sensitive user data or features such as contacts, SMS, Internet&#8230;&#8203; Depending on the feature, the system might grant the permission automatically or might prompt the user to approve the request.</p>
</div>
<div class="paragraph">
<p>By default, an app has no permission to perform any operations that would adversely impact other apps, the operating system or the user.</p>
</div>
<div class="paragraph">
<p>To add a new permission we need to update the <code>AndroidManifest.xml</code> file (ie the id card of your app)</p>
</div>
<div class="paragraph">
<p>In the following example I add the INTERNET permission <code>@LTuses-permission@GT</code> tag (just before @LTapplication@GT tag)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" id="1732912451089.7563">@LTmanifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
package=&quot;com.example.snazzyapp&quot;@GT

    @LTuses-permission android:name=&quot;android.permission.INTERNET&quot; /@GT
    @LTapplication ...
         android:usesCleartextTraffic=&quot;true&quot;@GT
        ...
    @LT/application@GT
@LT/manifest@GT</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451089.7563')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Each user can accept or reject an app permission request, when this app is installed or when the user update the app settings in the device setting. So generally, you must handle this case and ask the user to reactivate the rights if he wants to use your application. In our case we will not test the authorization and we will consider that the user has accepted this permission.</p>
</div>
<div class="paragraph">
<p>You can now relaunch your app and you will be able to open the room list without error. For more information about permissions you can read this <a href="https://developer.android.com/guide/topics/permissions/overview">page</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_use_viewmodel_in_your_code">Use ViewModel in your code</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In last labs, we see how to use a <code>ViewModel</code> that can store your app data. The stored data is not lost if the framework destroys and recreates the activities during a configuration change or other events. That&#8217;s why it&#8217;s better to use a ViewModel</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/training/android/remote/view_model.png" alt="ViewModel state" width="500">
</div>
</div>
<div class="paragraph">
<p>The first thing is to create an object that will store the room list result or the error if the API call fails.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451089.6848"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomList</span>(
    <span class="hljs-keyword">val</span> rooms: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTRoomDto@</span>GT = emptyList(),
    <span class="hljs-keyword">val</span> error: String? = <span class="hljs-literal">null</span>
)</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451089.6848')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>We can now update the <code>RoomViewModel</code> to store the result of the API call (a state) in a <code>StateFlow</code> object. StateFlow is a data holder observable flow that emits the current and new state updates. Its value property reflects the current state value. To update state and send it to the flow, assign a new value to the value property of the MutableStateFlow class.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451089.1187"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomViewModel</span> : <span class="hljs-type">ViewModel</span>() {
    <span class="hljs-comment">// existing code</span>

    <span class="hljs-keyword">val</span> roomsState = MutableStateFlow(RoomList())
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451089.1187')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can now add the function to load the room list in the <code>RoomViewModel</code></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451090.1663"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomViewModel</span> : <span class="hljs-type">ViewModel</span>() {
    <span class="hljs-comment">// existing code</span>
    <span class="hljs-comment">//...</span>

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span> {
        viewModelScope.launch(context = Dispatchers.IO) { <span class="hljs-comment">// (1)</span>
            runCatching { ApiServices.roomsApiService.findAll().execute() }
                .onSuccess {
                    <span class="hljs-keyword">val</span> rooms = it.body() ?: emptyList()
                    roomsState.value = RoomList(rooms) <span class="hljs-comment">// (2)</span>
                }
                .onFailure {
                    it.printStackTrace()
                    roomsState.value = RoomList(emptyList(), it.stackTraceToString() ) <span class="hljs-comment">// (3)</span>
                }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451090.1663')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>(1)</strong> method <code>viewModelScope.launch</code> open a new coroutine to launch the API call in another thread</p>
</li>
<li>
<p><strong>(2)</strong> Update the <code>roomsState</code> object with the result of the API call when everything is OK.</p>
</li>
<li>
<p><strong>(3)</strong> If an error occurs, we update the <code>roomsState</code> object with an empty list and the error message</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The last step is to update the <code>RoomListActivity</code> to use the <code>RoomViewModel</code> to load the room list.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451090.217"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RoomListActivity</span> : <span class="hljs-type">ComponentActivity</span>() {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> {
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)
        enableEdgeToEdge()

        <span class="hljs-keyword">val</span> viewModel: RoomViewModel <span class="hljs-keyword">by</span> viewModels()

        <span class="hljs-comment">// existing code to manage the back button and the RoomItem click to open a room detail</span>
        <span class="hljs-comment">// ...</span>

        setContent {
            <span class="hljs-keyword">val</span> roomsState <span class="hljs-keyword">by</span> viewModel.roomsState.asStateFlow().collectAsState() <span class="hljs-comment">// (1)</span>
            LaunchedEffect(<span class="hljs-built_in">Unit</span>) { <span class="hljs-comment">// (2)</span>
                viewModel.findAll()
            }
            <span class="hljs-keyword">if</span> (roomsState.error != <span class="hljs-literal">null</span>) {
                setContent {
                    RoomList(emptyList(), navigateBack, openRoom)
                }
                Toast
                    .makeText(applicationContext, <span class="hljs-string">&quot;Error on rooms loading @dollar@{roomsState.error}&quot;</span>, Toast.LENGTH_LONG)
                    .show() <span class="hljs-comment">// (3)</span>
            } <span class="hljs-keyword">else</span> {
                RoomList(roomsState.rooms, navigateBack, openRoom) <span class="hljs-comment">// (4)</span>
            }
        }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451090.217')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>(1)</strong> We use the <code>asStateFlow</code> extension function to convert the <code>roomsState</code> object to a <code>StateFlow</code> object. We can now use the <code>collectAsState</code> function to observe the <code>StateFlow</code> object and update the UI when the value of the <code>StateFlow</code> object changes.</p>
</li>
<li>
<p><strong>(2)</strong> LaunchedEffect: run suspend functions (function executed in coroutine) in the scope of a composable</p>
</li>
<li>
<p><strong>(3)</strong> Display a toast notification if an error occurs</p>
</li>
<li>
<p><strong>(4)</strong> Display the list of rooms if no error occurs</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>With this code we have to write less code, manage less coroutine. The activity will subscribe to the <code>roomsState</code> object to display the result, and we don&#8217;t need to juggle with the main thread.</p>
</div>
<div class="paragraph">
<p>On the first display of the screen, we display an empty list of rooms because the findAll function is launched in asynchronous mode (in a coroutine). When the API call is finished, the <code>roomsState</code> object is updated with the result of the API call and the screen is updated.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_update_the_screen_to_display_and_update_the_detail"><span class="icon">[flask&#93;</span> : Update the screen to display and update the detail</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In <code>RoomViewModel</code> we already manage the state of the room detail screen. Add a function to load a room by its id by a remote API call</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451090.9463"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findRoom</span><span class="hljs-params">(id: <span class="hljs-type">Long</span>)</span></span> {
    viewModelScope.launch(context = Dispatchers.IO) {
        runCatching { ApiServices.roomsApiService.findById(id).execute() }
            .onSuccess {
                room = it.body()
            }
            .onFailure {
                it.printStackTrace()
                room = <span class="hljs-literal">null</span>
            }
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451090.9463')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can also add a function to update a room by its id by a remote API call</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451090.7024"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">updateRoom</span><span class="hljs-params">(id: <span class="hljs-type">Long</span>, roomDto: <span class="hljs-type">RoomDto</span>)</span></span> {
      <span class="hljs-keyword">val</span> command = RoomCommandDto(
          name = roomDto.name,
          targetTemperature = roomDto.targetTemperature ?.let { Math.round(it * <span class="hljs-number">10</span>) /<span class="hljs-number">10.0</span> },
          currentTemperature = roomDto.currentTemperature,
      )
      viewModelScope.launch(context = Dispatchers.IO) {
          runCatching { ApiServices.roomsApiService.updateRoom(id, command).execute() }
              .onSuccess {
                  room = it.body()
              }
              .onFailure {
                  it.printStackTrace()
                  room = <span class="hljs-literal">null</span>
              }
      }
  }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451090.7024')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You can now adapt the <code>RoomActivity</code> to use the <code>RoomViewModel</code> to load the room detail and remove the local call to our fake service. After this lab you should use your remote REST Service to load and update the room detail.</p>
</div>
<div class="paragraph">
<p>Implement the different functions to create a room, delete a room, list the windows of a room, update a window.</p>
</div>
</div>
</div>`;var Mf=`<div id="toc" class="toc">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a class="link" fragment="#_jetpack_room">Jetpack Room</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_entity">Entity</a></li>
<li><a class="link" fragment="#_data_object_access_dao">Data Object Access DAO</a></li>
<li><a class="link" fragment="#_create_a_database">Create a database</a></li>
</ul>
</li>
<li><a class="link" fragment="#_use_singleton_in_an_android_app">Use Singleton in an Android app</a></li>
<li><a class="link" fragment="#_use_viewmodel_object">Use ViewModel object</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_why_use_a_viewmodel">Why use a ViewModel ?</a></li>
<li><a class="link" fragment="#_create_a_viewmodel">Create a ViewModel</a></li>
<li><a class="link" fragment="#_use_the_view_model_in_an_activity">Use the view model in an activity</a></li>
</ul>
</li>
<li><a class="link" fragment="#_flask_use_a_database_in_your_project"><span class="icon">[flask&#93;</span> : Use a database in your project</a>
<ul class="sectlevel2">
<li><a class="link" fragment="#_configuration">Configuration</a></li>
<li><a class="link" fragment="#_create_your_first_entity">Create your first entity</a></li>
<li><a class="link" fragment="#_synchronize_our_database">Synchronize our database</a></li>
</ul>
</li>
</ul>
</div>
<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>In this lesson, we will learn how to use a database in our application.
For the moment we need an Internet connection to display data on our screens, but we want to be able to display something when a user is offline or when the remote API is not able to answer.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="../../img/training/android/database/database.png" alt="database" width="800">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_jetpack_room">Jetpack Room</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Each Android phone has a local SQLite database.</p>
</div>
<div class="paragraph">
<p>The <a href="https://developer.android.com/jetpack/androidx/releases/room?hl=fr">Jetpack Room</a> persistence library provides an abstraction layer over SQLite to allow fluent database access while harnessing the full power of SQLite.
Room library is an ORM (Object Relational Mapping) library (like Hibernate for the backend development). It allows you to manipulate objects in your code and to persist them in a database.</p>
</div>
<div class="paragraph">
<p>You have other libraries to do the same things but Room has the advantage of being provided and created by the Google team.</p>
</div>
<div class="sect2">
<h3 id="_entity">Entity</h3>
<div class="paragraph">
<p>An entity is a Kotlin class binded to a database table. With Room, each table is represented by a class.</p>
</div>
<div class="paragraph">
<p>An entity contains the fields of the table as properties. Each instance of an entity represents a row of the table.</p>
</div>
<div class="paragraph">
<p>SQLite database has very few types :</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>NULL</strong>. The value is a NULL value.</p>
</li>
<li>
<p><strong>INTEGER</strong>. The value is a signed integer, stored in 0, 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.</p>
</li>
<li>
<p><strong>REAL</strong>. The value is a floating point value, stored as an 8-byte IEEE floating point number.</p>
</li>
<li>
<p><strong>TEXT</strong>. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).</p>
</li>
<li>
<p><strong>BLOB</strong>. The value is a blob of data, stored exactly as it was input.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>When you use Jetpack Room, you work with Kotlin objects, and the library handles the conversion to and from the database.</p>
</div>
<div class="paragraph">
<p>Mapping is based on the names of the variables in the model class, and the names of the columns in the database. If the names don&#8217;t match, you can use annotations to define the mapping yourself. You can also use annotations to define primary keys, autoincrementing values, and other aspects of your database.</p>
</div>
<div class="paragraph">
<p>We have to define several things</p>
</div>
<div class="ulist">
<ul>
<li>
<p>to be an entity the class must be annotated with @Entity (This annotation accept a property <code>tableName</code> to personalize the name)</p>
</li>
<li>
<p>each table need a unique id, the primary key. You can mark it with the @PrimaryKey annotation and tell if the value will be generated by the database</p>
</li>
<li>
<p>each column must be declared with a @ColumnInfo annotation. The column name can be overridden.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Typically, SQL column names will have words separated by an underscore, as opposed to the lowerCamelCase used by Kotlin properties.</p>
</div>
<div class="paragraph">
<p>You can use the <code>@Ignore</code> annotation to tell Room to ignore specific fields. For example, you may want to ignore a field that is used only in logic within the app, but is not stored or referenced in the database.</p>
</div>
<div class="paragraph">
<p>If we use the building sensor API we can see the Window Entity. The window table includes some basic information about a room window.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451115.9563"><span class="hljs-meta">@Entity(tableName = <span class="hljs-string">&quot;rwindow&quot;</span>)</span>
<span class="hljs-keyword">data</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span>(
    <span class="hljs-meta">@PrimaryKey(autoGenerate = true)</span> <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>,
    <span class="hljs-meta">@ColumnInfo</span> <span class="hljs-keyword">val</span> name: String,
    <span class="hljs-meta">@ColumnInfo(name = <span class="hljs-string">&quot;room_id&quot;</span>)</span> <span class="hljs-keyword">val</span> roomId: <span class="hljs-built_in">Long</span>,
    <span class="hljs-meta">@ColumnInfo(name = <span class="hljs-string">&quot;room_name&quot;</span>)</span> <span class="hljs-keyword">val</span> roomName: String,
    <span class="hljs-meta">@ColumnInfo(name = <span class="hljs-string">&quot;window_status&quot;</span>)</span> <span class="hljs-keyword">val</span> windowStatus: WindowStatus,
    <span class="hljs-meta">@Ignore</span> <span class="hljs-keyword">val</span> windows: <span class="hljs-symbol">MutableList@</span><span class="hljs-symbol">LTWindow@</span>GT = mutableListOf()
) {
    <span class="hljs-comment">// When you need to transform your entity in a DTO (Data Transfer Object) you can use this method</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toDto</span><span class="hljs-params">()</span></span>: WindowDto =
        WindowDto(id.toLong(), name, RoomDto(roomId.toLong(), roomName, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>), windowStatus)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451115.9563')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In this code we used an enum <code>WindowStatus</code>, but this enum is not a known type in the database. We should help Rooms to serialize and deserialize this enum value. Create in the package <code>com.automacorp.model</code> a new class <code>EnumConverters</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451115.1636"><span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumConverters</span> {

    <span class="hljs-comment">// A first method to convert enum in string when the data will be stored in the database</span>
    <span class="hljs-meta">@TypeConverter</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fromWindowStatus</span><span class="hljs-params">(value: <span class="hljs-type">WindowStatus</span>?)</span></span>: String? {
        <span class="hljs-keyword">return</span> value?.toString()
    }

    <span class="hljs-comment">// A second one to do the inverse operation</span>
    <span class="hljs-meta">@TypeConverter</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toWindowStatus</span><span class="hljs-params">(value: <span class="hljs-type">String</span>?)</span></span>: WindowStatus? {
        <span class="hljs-keyword">return</span> value?.let { WindowStatus.valueOf(it) }
    }

}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451115.1636')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>With this class we can use the annotation <code>@TypeConverters</code> to tell Room to use this class to convert our enum when the data will be stored or read in the database.</p>
</div>
</div>
<div class="sect2">
<h3 id="_data_object_access_dao">Data Object Access DAO</h3>
<div class="paragraph">
<p>A DAO (Data Access Object) is a Kotlin class that provides access to the data. We will define functions for reading or manipulating data.
Each function call will perform a SQL command on the database.</p>
</div>
<div class="paragraph">
<p>With Jetpack Room, a Dao is an interface with annotated methods. The implementation of these methods is not written by you. The Room library generates the code to execute these queries from yours interfaces.</p>
</div>
<div class="paragraph">
<p>If you followed the <a href="https://dev-mind.fr/training/spring/spring-data.html">Spring Data</a> labs, Room is like Spring and it will generate the interface implementation at compile time.</p>
</div>
<div class="paragraph">
<p>To activate this mechanism you need to add the annotation @Dao on your class</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451115.6003"><span class="hljs-meta">@Dao</span>
<span class="hljs-keyword">interface</span> <span class="hljs-title class_">WindowDao</span> {
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451115.6003')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>A query is specified as a string passed into a <code>@Query</code> annotation.</p>
</div>
<div class="paragraph">
<p><strong>Contrary to Hibernate for backend developpers, we won&#8217;t manipulate objets in these queries but we have to use SQL request with the database model.</strong></p>
</div>
<div class="paragraph">
<p>Room provides also different annotations <code>@Insert</code>, <code>@Update</code>, <code>@Delete</code> to manipulate an entity.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451116.1545"><span class="hljs-meta">@Dao</span>
<span class="hljs-keyword">interface</span> <span class="hljs-title class_">WindowDao</span> {
    <span class="hljs-meta">@Query(<span class="hljs-string">&quot;select * from rwindow order by name&quot;</span>)</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>: <span class="hljs-symbol">List@</span><span class="hljs-symbol">LTWindow@</span>GT

    <span class="hljs-meta">@Query(<span class="hljs-string">&quot;select * from rwindow where id = :windowId&quot;</span>)</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(windowId: <span class="hljs-type">Long</span>)</span></span>: Window

    <span class="hljs-meta">@Insert</span>
    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">create</span><span class="hljs-params">(window: <span class="hljs-type">Window</span>)</span></span>

    <span class="hljs-meta">@Update</span>
    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">update</span><span class="hljs-params">(window: <span class="hljs-type">Window</span>)</span></span>: <span class="hljs-built_in">Int</span>

    <span class="hljs-meta">@Delete</span>
    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">delete</span><span class="hljs-params">(window: <span class="hljs-type">Window</span>)</span></span>

    <span class="hljs-meta">@Query(<span class="hljs-string">&quot;delete from rwindow&quot;</span>)</span>
    <span class="hljs-keyword">suspend</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">clearAll</span><span class="hljs-params">()</span></span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451116.1545')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>In the second example we use a function argument in the request.</p>
</div>
</div>
<div class="sect2">
<h3 id="_create_a_database">Create a database</h3>
<div class="paragraph">
<p>We now need to configure the database in our project. With Jetpack Room library we have to initialize an object that implements the RoomDatabase interface. We had to declare on this object, the different entities, the converters and their DAOs.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>@Database</code> annotation is used to declare all entities. The version number is incremented each time you make a schema change. The app checks this version with the one in the database to determine if and how a migration should be performed.</p>
</li>
<li>
<p><code>@TypeConverters</code> annotation is used to declare all type converters (enum convertion for example).</p>
</li>
<li>
<p>the class is also used to declare all DAOs.</p>
</li>
</ul>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451116.4326"><span class="hljs-meta">@Database(entities = [Window::class], version = 1)</span>
<span class="hljs-meta">@TypeConverters(EnumConverters::class)</span>
<span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutomacorpDatabase</span> : <span class="hljs-type">RoomDatabase</span>() {
    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">windowDao</span><span class="hljs-params">()</span></span>: WindowDao
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451116.4326')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_use_singleton_in_an_android_app">Use Singleton in an Android app</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Now you need to use this database in your code. And you need to use only one instance of this database.</p>
</div>
<div class="paragraph">
<p>We need to declare a singleton. A singleton is a class that can have only one instance of the class at a time. We have to do that  to prevent race conditions or other potential issues.</p>
</div>
<div class="paragraph">
<p>To resolve this problem you can use a dependency injection libray as <a href="https://developer.android.com/jetpack/androidx/releases/hilt">Hilt</a>.</p>
</div>
<div class="paragraph">
<p>Or you can define your own Android Application class and use it to store the database instance. An Android Application object is created when you launch your application, and it will be destroyed when your application is terminated.</p>
</div>
<div class="paragraph">
<p>Create a new class <code>AutomacorpApplication</code> in the root folder of your project. This class must extends <code>Application</code> class.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451116.6226"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AutomacorpApplication</span> : <span class="hljs-type">Application</span>() {}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451116.6226')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>You need to declare this new class in <code>AndroidManifest.xml</code> to launch you own implementation in place of the default one, when your app will be started.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" id="1732912451116.2183">@LTmanifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
xmlns:tools=&quot;http://schemas.android.com/tools&quot;@GT
    @LTapplication
        android:name=&quot;.AutomacorpApplication&quot;
     ...</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451116.2183')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Now we will declare our database in this <code>AutomacorpApplication</code> class. The database creation can be done with the room builder. You need to declare the global context, your Database class and the db name. the <code>by lazy</code> is used to initialize the property only when it will be used.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451116.4373"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AutomacorpApplication</span> : <span class="hljs-type">Application</span>() {

    <span class="hljs-keyword">val</span> database: AutomacorpDatabase <span class="hljs-keyword">by</span> lazy {
        Room.databaseBuilder(<span class="hljs-keyword">this</span>, AutomacorpDatabase::<span class="hljs-keyword">class</span>.java, <span class="hljs-string">&quot;automacorpdb&quot;</span>)
            .build()
    }


}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451116.4373')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>If you need to use a DAO in your code you will be able to use</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451116.2537"><span class="hljs-keyword">val</span> windowDao = AutomacorpApplication.database.windowDao()</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451116.2537')">Copy</button></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_use_viewmodel_object">Use ViewModel object</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_why_use_a_viewmodel">Why use a ViewModel ?</h3>
<div class="paragraph">
<p>The Android framework manages the lifecycle of UI controllers, such as activities and fragments. The framework may decide to destroy or re-create an UI controller in response to certain user actions or device events that are completely out of your control.</p>
</div>
<div class="paragraph">
<p>If the system destroys or re-creates an UI controller, any transient UI-related data you store in them is lost. For example, your app may include a list of users in one of its activities. When the activity is re-created for a configuration change, the new activity has to re-fetch the list of users.</p>
</div>
<div class="paragraph">
<p>For simple data, the activity can use the <code>onSaveInstanceState()</code> method and restore its data from the bundle in <code>onCreate()</code>, but this approach is only suitable for small amounts of data that can be serialized then deserialized, not for potentially large amounts of data like a list of users or bitmaps.</p>
</div>
<div class="paragraph">
<p>Another problem is that UI controllers frequently need to make asynchronous calls that may take some time to return. The UI controller needs to manage these calls and ensure the system cleans them up after it&#8217;s destroyed to avoid potential memory leaks.</p>
</div>
<div class="paragraph">
<p>ViewModels were created to resolve these problems and separate out view data ownership from UI controller logic. UI controllers such as activities and fragments should only display UI data, react to user actions, or handle operating system communication, such as permission requests. The data should be now managed by a ViewModel.</p>
</div>
<div class="paragraph">
<p>Using a view model helps enforce a clear separation between the code for your app&#8217;s UI and its data model.</p>
</div>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/android/android-view-model.svg" alt="View model"></span></p>
</div>
<div class="paragraph">
<p>The ViewModel class is used to store data related to an app&#8217;s UI, and is also lifecycle aware, meaning that it responds to lifecycle events much like an activity or fragment does. If lifecycle events such as screen rotation cause an activity or fragment to be destroyed and recreated, the associated ViewModel won&#8217;t need to be recreated.</p>
</div>
</div>
<div class="sect2">
<h3 id="_create_a_viewmodel">Create a ViewModel</h3>
<div class="paragraph">
<p>To create a view model class, create a new class called <code>WindowViewModel</code> in a new package called <code>com.automacorp.viewmodel</code>. It should only use the <code>WindowDao</code> and for the moment we can implement inside the method used to load data</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451116.9539"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowViewModel</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> windowDao: WindowDao) : ViewModel() { <span class="hljs-comment">// (1)</span>

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(windowId: <span class="hljs-type">Long</span>)</span></span>: <span class="hljs-symbol">LiveData@</span><span class="hljs-symbol">LTWindowDto@</span>GT = <span class="hljs-comment">// (2)</span>
        liveData(Dispatchers.IO) { <span class="hljs-comment">// (3)</span>
            emit(windowDao.findById(windowId).toDto()) <span class="hljs-comment">// (4)</span>
        }

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">save</span><span class="hljs-params">(windowId: <span class="hljs-type">Long</span>, command: <span class="hljs-type">WindowCommandDto</span>)</span></span>: <span class="hljs-symbol">LiveData@</span><span class="hljs-symbol">LTWindowDto@</span>GT = <span class="hljs-comment">// (2)</span>
        liveData(Dispatchers.IO) { <span class="hljs-comment">// (3)</span>
          <span class="hljs-keyword">val</span> window = Window(
              id = windowId,
              name= command.name
          )
          <span class="hljs-keyword">if</span> (windowId == <span class="hljs-number">0L</span>) {
              windowDao.create(window)
          } <span class="hljs-keyword">else</span> {
              windowDao.update(window)
          }
          emit(window.toDto()) <span class="hljs-comment">// (4)</span>
      }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451116.9539')">Copy</button></pre>
</div>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>(1)</strong> a view model must implement an abstract class ViewModel</p>
</li>
<li>
<p><strong>(2)</strong> LiveData is an observable data holder class. Unlike a regular observable, LiveData is lifecycle-aware, meaning it respects the lifecycle of other app components, such as activities, fragments, or services. This awareness ensures LiveData only updates app component observers that are in an active lifecycle state.</p>
</li>
<li>
<p><strong>(3)</strong> As we have to access to the DB we must do that outside the main thread. Coroutine <code>liveData(Dispatchers.IO)</code> is used to do that</p>
</li>
<li>
<p><strong>(4)</strong> result mut be emitted and the different observers (Activity, Fragment) will be ready to manipulate this result.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>A ViewModel class must be lifecycle aware, it should be instantiated by an object that can respond to lifecycle events and an object made to handle all memory managements. For that we will use a <code>ViewModelProvider.Factory</code>. This object should be defined in a compagnon object</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451117.2996"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WindowViewModel</span>(<span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> windowDao: WindowDao) : ViewModel() {

    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> {
        <span class="hljs-keyword">val</span> factory: ViewModelProvider.Factory =
            <span class="hljs-keyword">object</span> : ViewModelProvider.Factory {
                <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> @LTT : ViewModel@GT <span class="hljs-title">create</span><span class="hljs-params">(
                    modelClass: <span class="hljs-type">Class</span>@<span class="hljs-type">LTT</span>@<span class="hljs-type">GT</span>,
                    extras: <span class="hljs-type">CreationExtras</span>
                )</span></span>: T {
                    <span class="hljs-comment">// Load the Dao from the Application object</span>
                    <span class="hljs-keyword">val</span> windowDao = (extras[APPLICATION_KEY] <span class="hljs-keyword">as</span> AutomacorpApplication)
                            .database
                            .windowDao()
                    <span class="hljs-keyword">return</span> WindowViewModel(windowDao) <span class="hljs-keyword">as</span> T
                }
            }
    }

    <span class="hljs-comment">// ...</span>
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451117.2996')">Copy</button></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_use_the_view_model_in_an_activity">Use the view model in an activity</h3>
<div class="paragraph">
<p>You can a global property in your property to define your view model.</p>
</div>
<div class="paragraph">
<p>+</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451117.4985"><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> viewModel: WindowViewModel <span class="hljs-keyword">by</span> viewModels {
    WindowViewModel.factory
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451117.4985')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>And you want to pouplate your list you can use</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451117.1433">viewModel.findAll().observe(<span class="hljs-keyword">this</span>) { windows <span class="hljs-meta">@LAMBDA</span>
    adapter.update(windows)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451117.1433')">Copy</button></pre>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_flask_use_a_database_in_your_project"><span class="icon">[flask&#93;</span> : Use a database in your project</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_configuration">Configuration</h3>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Open <strong>build.gradle.kts (Module: automacorp.app)</strong>.</p>
</li>
<li>
<p>As Room uses annotations we need to configure Gradle to launch the kotlin annotation processor. For that you just have to add a new plugin id <code>kotlin-kapt</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912451117.7734">plugins {
    id(<span class="hljs-string">&quot;com.android.application&quot;</span>)
    id(<span class="hljs-string">&quot;org.jetbrains.kotlin.android&quot;</span>)
    id(<span class="hljs-string">&quot;kotlin-kapt&quot;</span>)
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451117.7734')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>In the dependencies block, declare new libraries</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" id="1732912451117.9458">implementation <span class="hljs-string">&quot;androidx.room:room-runtime:2.4.3&quot;</span>
implementation <span class="hljs-string">&quot;androidx.room:room-ktx:2.4.3&quot;</span>
kapt <span class="hljs-string">&quot;androidx.room:room-compiler:2.4.3&quot;</span>

implementation <span class="hljs-string">&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1&quot;</span>
implementation <span class="hljs-string">&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.5.1&quot;</span>
implementation <span class="hljs-string">&quot;androidx.activity:activity-ktx:1.6.0&quot;</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451117.9458')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>As you updated your gradle configuration, Android Studio display a message to synchronize your projet.
Click on <strong>Sync now</strong></p>
<div class="paragraph">
<p><span class="image"><img src="../../img/training/android/android-gradle-sync.png" alt="Sync Gradle project"></span></p>
</div>
</li>
</ol>
</div>
</div>
<div class="sect2">
<h3 id="_create_your_first_entity">Create your first entity</h3>
<div class="ulist">
<ul>
<li>
<p>Create a new class in the package <code>com.automacorp.model</code> called <code>Room</code> and use annotations to link this class to the database (<code>@Entity</code>, <code>@PrimaryKey</code>, <code>@ColumnInfo</code>&#8230;&#8203;)</p>
</li>
<li>
<p>Create a new interface called RoomDao in the package <code>com.automacorp.dao</code> and write methods to manage a Room :  findAll, findById, save, update, delete&#8230;&#8203;</p>
</li>
<li>
<p>Create a new class <code>AutomacorpDatabase</code> in <code>com.automacorp.dao</code> to declare the database</p>
</li>
<li>
<p>As we have to create this database only once, create a <code>AutomacorpApplication</code> in the root folder, and declare this App override in your <code>AndroidManifest.xml</code></p>
</li>
<li>
<p>Create a property <code>val database: AutomacorpDatabase by lazy {}</code> in your <code>AutomacorpApplication</code></p>
</li>
<li>
<p>Create in package <code>com.automacorp.viewmodel</code> a <code>RoomViewModel</code> class to manage all CRUD operations (Create, read all or one, update and delete)</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Now, you can update the <code>RoomListActivity</code> used to list all rooms.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Add a new global property to define your view model</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451117.1511"><span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> viewModel: RoomViewModel <span class="hljs-keyword">by</span> viewModels {
    RoomViewModel.factory
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451117.1511')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>We need to replace the code used to populate the adapter, to update a room (ie the calls to ApiServices.windowsApiService)</p>
</li>
<li>
<p>In <code>RoomListActivity</code> you can for example used this code with a method to observe our livedata returned by the view model. The code was
made to manage asynchronous calls and you don&#8217;t need anymore to switch between coroutines in your Activity or Fragment</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451117.888">viewModel.findAll().observe(<span class="hljs-keyword">this</span>) { rooms <span class="hljs-meta">@LAMBDA</span>
    roomsAdapter.setItems(rooms) }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451117.888')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>Do the same job in <code>RoomActivity</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>You can start your application and as we have nothing in database you should have an empty list when you want to display the window list.</p>
</div>
</div>
<div class="sect2">
<h3 id="_synchronize_our_database">Synchronize our database</h3>
<div class="paragraph">
<p>We want to only use this database when the remote API is not accessible. To do that we will refactor our ViewModel to</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>call the remote API by default</p>
</li>
<li>
<p>remove the last data if call is OK</p>
</li>
<li>
<p>store the last received data</p>
</li>
<li>
<p>call the database if remote API is not available (no network, service deny&#8230;&#8203;)</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Update the ViewModel to do these steps. Below you can find an example for the room</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451118.9888"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>: <span class="hljs-symbol">LiveData@</span><span class="hljs-symbol">LTList@</span><span class="hljs-symbol">LTRoomDto@</span><span class="hljs-symbol">GT@</span>GT =
    liveData(Dispatchers.IO) {
        runCatching {
            ApiServices.roomsApiService.findAll().execute()
        }.onSuccess {
            <span class="hljs-comment">// If remote API is available we synchronize data locally</span>
            it.body()
                ?.also { rooms <span class="hljs-meta">@LAMBDA</span>
                    roomDao.clearAll()
                    windowDao.clearAll()
                    rooms.onEach { room <span class="hljs-meta">@LAMBDA</span>
                        roomDao.create(
                            Room(
                                id = room.id,
                                name = room.name,
                                currentTemperature = room.currentTemperature,
                                targetTemperature = room.targetTemperature
                            )
                        )
                        room.windows.onEach {
                            windowDao.create(
                                Window(
                                    id = it.id,
                                    name = it.name,
                                    roomId = room.id,
                                    roomName = room.name,
                                    windowStatus = it.windowStatus
                                )
                            )
                        }
                    }
                    emit(rooms)
                }
                ?: emit(emptyList())
        }.onFailure {
            <span class="hljs-keyword">val</span> rooms = roomDao.findAll().map { it.toDto() }
            emit(rooms) <span class="hljs-comment">// (4)</span>
        }
    }

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(roomId: <span class="hljs-type">Long</span>)</span></span>: <span class="hljs-symbol">LiveData@</span><span class="hljs-symbol">LTRoomDto@</span>GT =
    liveData(Dispatchers.IO) { <span class="hljs-comment">// (2)</span>
        runCatching {
            <span class="hljs-comment">// We call the remote API</span>
            ApiServices.roomsApiService.findById(roomId).execute().body()!!
        }.onSuccess {
            emit(it)
        }.onFailure {
            <span class="hljs-keyword">val</span> room = roomDao.findById(roomId).apply {
                windows = windowDao.findByRoomId(roomId)
            }.toDto()
            emit(room)
        }
    }

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">save</span><span class="hljs-params">(roomId: <span class="hljs-type">Long</span>, room: <span class="hljs-type">RoomCommandDto</span>)</span></span>: <span class="hljs-symbol">LiveData@</span>LTRoomDto?<span class="hljs-meta">@GT</span> =
    liveData(Dispatchers.IO) {
        runCatching {
            <span class="hljs-keyword">if</span> (roomId == <span class="hljs-number">0L</span>) {
                ApiServices.roomsApiService.save(room).execute().body()
            } <span class="hljs-keyword">else</span> {
                ApiServices.roomsApiService.updateRoom(roomId, room).execute().body()
            }
        }.onSuccess {
            emit(it)
        }.onFailure {
            emit(<span class="hljs-literal">null</span>)
        }
    }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451118.9888')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>This code should work but it should be nice to know when we are in the fallback mode. For that we can expose a new live data in your code.</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create a new enum called <code>State</code> in <code>WindowViewModel</code></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451118.2039"><span class="hljs-keyword">enum</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span> { ONLINE, OFFLINE }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451118.2039')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>Create a property in <code>RoomViewModel</code> to expose this state. By default the state is ONLINE</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451118.5288"><span class="hljs-keyword">val</span> networkState: <span class="hljs-symbol">MutableLiveData@</span><span class="hljs-symbol">LTState@</span>GT <span class="hljs-keyword">by</span> lazy {
    <span class="hljs-symbol">MutableLiveData@</span><span class="hljs-symbol">LTState@</span>GT().also { it.postValue(State.ONLINE) }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451118.5288')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>You can add a new Observable in your activity <code>RoomListActivity</code> and <code>RoomActivity</code> to display a message when the data will be loaded from the local database</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451118.1304">viewModel.networkState.observe(<span class="hljs-keyword">this</span>) { state <span class="hljs-meta">@LAMBDA</span>
    <span class="hljs-keyword">if</span>(state == State.OFFLINE) {
        Toast.makeText(<span class="hljs-keyword">this</span>,<span class="hljs-string">&quot;Offline mode, the last known values are displayed&quot;</span>, Toast.LENGTH_LONG)
            .show()
    }
}</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451118.1304')">Copy</button></pre>
</div>
</div>
</li>
<li>
<p>Update the state in the methods <code>findAll</code>, <code>findById</code>, 'save@backtick@ in <code>RoomViewModel</code> when you use the API or the database. Be careful you need to do this update on the main thread and you have to use this coroutine scope (<code>Dispatcher.Main</code>).</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-kotlin" id="1732912451118.8098"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findById</span><span class="hljs-params">(roomId: <span class="hljs-type">Long</span>)</span></span>: <span class="hljs-symbol">LiveData@</span><span class="hljs-symbol">LTRoomDto@</span>GT =
    liveData(Dispatchers.IO) { <span class="hljs-comment">// (2)</span>
        runCatching {
            <span class="hljs-comment">// We call the remote API</span>
            ApiServices.roomsApiService.findById(roomId).execute().body()!!
        }.onSuccess {
            networkState.postValue(State.ONLINE)
            emit(it)
        }.onFailure {
            networkState.postValue(State.OFFLINE)
            <span class="hljs-keyword">val</span> room = roomDao.findById(roomId).apply {
                windows = windowDao.findByRoomId(roomId)
            }.toDto()
            emit(room)
        }
    }</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451118.8098')">Copy</button></pre>
</div>
</div>
</li>
</ol>
</div>
</div>
</div>
</div>`;var Rf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Dernier chapitre dans la pr\xE9sentation du web. Nous allons parler du protocole HTTP (HyperText Transfer Protocol), sur lequel se base le web. Ce protocole permet d\u2019\xE9changer des documents hyperm\xE9dia entre un client (un navigateur Internet) et un serveur. Le client ouvre une connexion, \xE9met une requ\xEAte et attend une r\xE9ponse. Nous parlerons aussi des organismes g\xE9rant le web.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_petit_historique">Un petit historique</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_http_1_1_1">HTTP 1 &amp; 1.1</h3>
<div class="paragraph">
<p>Le protocole a beaucoup \xE9volu\xE9 depuis ses d\xE9buts. Au d\xE9part (en 1991), http ne pouvait transf\xE9rer que des fichiers. Depuis  la version 1.0 (1996) le protocole permet de  transf\xE9rer tout type de fichiers comme des images, vid\xE9os, scripts, feuilles de styles\u2026 Le type de la ressource est pr\xE9cis\xE9 dans l\u2019ent\xEAte de la requ\xEAte ou de la r\xE9ponse, via le type MIME (Multipurpose Internet Mail Extensions).</p>
</div>
<div class="paragraph">
<p>En 1997 nous avons une nouvelle version, la version 1.1. Elle permettait entre autre d\u2019am\xE9liorer les performances en permettant de r\xE9utiliser la m\xEAme connexion. C\u2019est la version la plus r\xE9pandue aujourd\u2019hui.</p>
</div>
</div>
<div class="sect2">
<h3 id="_http_2">HTTP 2</h3>
<div class="paragraph">
<p>Le protocole est largement am\xE9liorable mais il aura fallu attendre pratiquement 20 ans, avant que les diff\xE9rents acteurs s\u2019entendent sur une nouvelle version du protocole. La version 2 a \xE9t\xE9 finalis\xE9e en 2015 et est en cours de d\xE9ploiement.</p>
</div>
<div class="paragraph">
<p>Cette nouvelle mouture se veut tout d\u2019abord \xE0 100% r\xE9trocompatible, afin de ne pas \xE0 avoir \xE0 changer le code des diff\xE9rentes applications utilisant les versions anciennes du protocole. En gros les m\xE9thodes, statuts, codes erreur sont conserv\xE9s.</p>
</div>
<div class="paragraph">
<p>Le but principal de HTTP2 est de rendre les requ\xEAtes moins co\xFBteuses en ressources, afin d\u2019am\xE9liorer les performance sur des devices o\xF9 la qualit\xE9 du r\xE9seau varie beaucoup. HTTP2 permet le multiplexage pour \xE9changer diff\xE9rents messages en m\xEAme temps et utilise la compression des ent\xEAtes.</p>
</div>
<div class="paragraph">
<p>HTTP d\xE9crit comment les messages sont \xE9chang\xE9s avec un serveur mais au niveau plus bas HTTP se base sur les protocoles TCP et IP. Actuellement HTTP peut ouvrir plusieurs connexions TCP en parall\xE8les ce qui peut congestionn\xE9 le r\xE9seau. Avec HTTP 2 le but est de regrouper ces \xE9changes sur la m\xEAme connexion TCP.
HTTP 2 n\u2019impose pas de s\xE9curiser les \xE9changes en cryptant les informations via un chiffrement TLS (SSL). HTTP limite le surco\xFBt dans le chiffrement car en 2017 tous les \xE9chnges r\xE9seaux devrai\xEAnt \xEAtre crypt\xE9s.</p>
</div>
<div class="paragraph">
<p>Aujourd\u2019hui quand vous ouvrez une page web, le code HTML arrive, il est pars\xE9, on charge ensuite les styles, les images. Quand on regarde le nombre de requ\xEAtes lors de l\u2019ouverture d\u2019une page d\u2019un navigateur, ce dernier peut \xEAtre tr\xE8s important. Maintenant grace au multipexage, les diff\xE9rents \xE9l\xE9ments pourront \xEAtre envoy\xE9s en m\xEAme temps.</p>
</div>
<div class="paragraph">
<p>En HTTP2 un client peut maintenir une connexion m\xEAme si l\u2019utilisateur clique sur un bouton ou choisit de fermer une connexion. Ceci permet au serveur de pouvoir faire du push.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_00.png" alt="Web">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_appel_http">Appel HTTP</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Comme je l\u2019ai indiqu\xE9 en ent\xEAte de ce chapitre, le client est \xE0 l\u2019initiative des \xE9changes. Nous avons toujours 3 \xE9tapes.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Ouverture d\u2019une session le plus souvent HTTP (surcouche de TCP)</p>
</li>
<li>
<p>Envoie d\u2019une requ\xEAte</p>
</li>
<li>
<p>Le serveur interpr\xE8te la requ\xEAte et renvoie un statut (un code) ainsi que les donn\xE9es \xE9ventuelles.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Une requ\xEAte HTTP est assez simple. L\u2019\xE9criture est masqu\xE9 par les logiciels clients comme votre navigateur web. Mais il est important de comprendre comment marche le protocole. Pour cel\xE0 nous allons invoquer manuellement un serveur HTTP</p>
</div>
<div class="paragraph">
<p>Lancez une commande telnet en invoquant un serveur web. Je prends dans mon exemple le site web <code><em>dev-mind</em></code> et je pr\xE9cise le port (80 est le port par d\xE9faut d\u2019un serveur web)</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451269.2869">telnet www.google.fr <span class="hljs-number">80</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451269.2869')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>On \xE9crit ensuite la requ\xEAte. Vous devez indiquer plusieurs informations</p>
</div>
<div class="paragraph">
<p>Une premi\xE8re ligne avec
* la m\xE9thode a appel\xE9 (GET, POST, DELETE\u2026),
* La ressource \xE0 charger (dans mon exemple ci dessous c\u2019est / qui pointe vers d\xE9faut vers la page index.html)
* Le protocole utilis\xE9
* Et d\u2019autres lignes avec les diff\xE9rents param\xE8tres plac\xE9s dans le header</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451269.6565">GET / HTTP/<span class="hljs-number">1.1</span>
Host: www.google.fr
Accept-Language: fr</code><button class="btn-copy-code" onclick="copyToClipboard('1732912451269.6565')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>Je demande ici de charger la ressource accessible \xE0 la racine du serveur de google. Le serveur HTTP me renvoie en r\xE9ponse la page index.html</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" id="1732912451269.4304">HTTP/<span class="hljs-number">1.1</span> <span class="hljs-number">200</span> OK
Date: Tue, <span class="hljs-number">12</span> Jul <span class="hljs-number">2016</span> <span class="hljs-number">07</span>:<span class="hljs-number">10</span>:<span class="hljs-number">23</span> GMT
Expires: -<span class="hljs-number">1</span>
Cache-Control: <span class="hljs-keyword">private</span>, max-age=<span class="hljs-number">0</span>
Content-Type: text/html; charset=ISO-<span class="hljs-number">8859</span>-<span class="hljs-number">1</span>
P3P: CP=<span class="hljs-string">&quot;This is not a P3P policy! See https://www.google.com/support/accounts/answer/151657?hl=en for more info.&quot;</span>
Server: gws
X-XSS-Protection: <span class="hljs-number">1</span>; mode=block
X-Frame-Options: SAMEORIGIN
Set-Cookie: NID=<span class="hljs-number">81</span>=UHO0sJ4yG6qTdp-5kdQO1YwAJbfrH-YBS0I3XnYdZQXuwXd1kK_Eo7PWlD6y33DVZG-MvuJfsqH7lmj7EOgcdaYXCRWCk-7fmD0bymGa-4qf3ILt8pBJdwNHWADYyn6R; expires=Wed, <span class="hljs-number">11</span>-Jan-<span class="hljs-number">2017</span> <span class="hljs-number">07</span>:<span class="hljs-number">10</span>:<span class="hljs-number">23</span> GMT; path=/; domain=.google.fr; HttpOnly
Accept-Ranges: none
Vary: Accept-Encoding
Transfer-Encoding: chunked

<span class="hljs-meta">@LT</span>!doctype html<span class="hljs-meta">@GT</span><span class="hljs-meta">@LThtml</span> itemscope=<span class="hljs-string">&quot;&quot;</span> itemtype=<span class="hljs-string">&quot;http://schema.org/WebPage&quot;</span> lang=<span class="hljs-string">&quot;fr&quot;</span><span class="hljs-meta">@GT</span><span class="hljs-meta">@LThead</span><span class="hljs-meta">@GT</span><span class="hljs-meta">@LTmeta</span> content=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span><span class="hljs-meta">@GT</span><span class="hljs-meta">@LTmeta</span> content=<span class="hljs-string">&quot;/images/branding/googleg/1x/googleg_standard_color_128dp.png&quot;</span> itemprop=<span class="hljs-string">&quot;image&quot;</span><span class="hljs-meta">@GT</span>
<span class="hljs-comment">//\u2026\u2026\u2026..</span>
<span class="hljs-meta">@LT</span>/html<span class="hljs-meta">@GT</span></code><button class="btn-copy-code" onclick="copyToClipboard('1732912451269.4304')">Copy</button></pre>
</div>
</div>
<div class="paragraph">
<p>La premi\xE8re ligne contient le statut de la requ\xEAte : un code et un libell\xE9. Quand tout se passe bien vous obtenez un code 200 et le libell\xE9 OK.</p>
</div>
<div class="paragraph">
<p>Vous avez ensuite plusieurs informations dans le header de cette r\xE9ponse comme le <em>content type</em>, des donn\xE9es d\u2019identification, les informations pour savoir si la ressource peut \xEAtre mise en cache ou non\u2026.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_m\xE9thodes_http_utilisables_dans_les_requ\xEAtes">Les m\xE9thodes HTTP utilisables dans les requ\xEAtes</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le protocole HTTP permet d\u2019ex\xE9cuter diff\xE9rents types d\u2019action sur le serveur. Voici les principales m\xE9thodes disponibles.</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code><em>GET</em></code> : permet de r\xE9cup\xE9rer une ressource sur le serveur. Suivant l\u2019impl\xE9mentation, le serveur HTTP peut prendre en compte les param\xE8tres plac\xE9s dans l\u2019ent\xEAte de la requ\xEAte (par exemple <code><em>If-Modified-Since:</em></code>, <code><em>If-Unmodified-Since:</em></code>, \u2026)</p>
</li>
<li>
<p><code><em>HEAD</em></code> : identique \xE0 <code><em>GET</em></code> mais ne contient aucun message</p>
</li>
<li>
<p><code><em>PUT</em></code> : permet de mettre \xE0 jour une ressource sur le serveur</p>
</li>
<li>
<p><code><em>POST</em></code> : effectue une action comme une cr\xE9ation ou un envoi de donn\xE9es d\u2019un formulaire HTML</p>
</li>
<li>
<p><code><em>DELETE</em></code> : suprime une ressource</p>
</li>
<li>
<p><code><em>OPTIONS</em></code> : permet de v\xE9rifier si le serveur impl\xE9mente ou accepte diff\xE9rentes actions. Cette m\xE9thode est par exemple utilis\xE9e pour r\xE9gler les probl\xE8mes <code><em>CORS (requ\xEAtes multi origines)</em></code> et faire une preflighted cross-origin request</p>
</li>
</ul>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_code_http_retourn\xE9s_dans_les_r\xE9ponses">Code HTTP retourn\xE9s dans les r\xE9ponses</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour chacun des appels une r\xE9ponse est retourn\xE9e au client pour lui dire si \xE7a requ\xEAte a pu \xEAre r\xE9alis\xE9e ou non. Cette r\xE9ponse contient un code constitu\xE9 de 3 digits. Il existe de nombreux codes r\xE9partis en 5 cat\xE9gories (le premier permet de d\xE9finir cette cat\xE9gorie)</p>
</div>
<div class="sect2">
<h3 id="_1xx_information">1xx Information</h3>
<div class="paragraph">
<p>Par exemple un code 100 (Continue) est renvoy\xE9 pour indiquer que le client peut continuer \xE0 envoyer sa requ\xEAte</p>
</div>
</div>
<div class="sect2">
<h3 id="_2xx_succ\xE8s">2xx Succ\xE8s</h3>
<div class="paragraph">
<p>Le code le plus courant est 200 (OK). Il est envoy\xE9 lorsqu\u2019une requ\xEAte est ex\xE9cut\xE9e avec succ\xE8s. Vous pouvez parfois avoir un code retour 206 (Partial Content) pour vous indiquer que d\u2019autres paquets seront envoy\xE9s plus tard mais que linformation peut commencer \xE0 \xEAtre affich\xE9e (code utilis\xE9 lors du chargement des images et des vid\xE9os par exemple).</p>
</div>
</div>
<div class="sect2">
<h3 id="_3xx_redirection">3xx Redirection</h3>
<div class="paragraph">
<p>Les codes @GT= 300 permettent d\u2019indiquer que la requ\xEAte \xE9tait valide mais qu\u2019aucune ressource ne sera renvoy\xE9. Un code 301 (Moved Permanently) indique que la ressource a \xE9t\xE9 d\xE9plac\xE9e. Un code 304 (Not Modified)  est renvoy\xE9 quand le client pos\xE8de d\xE9j\xE0 la derni\xE8re version de la ressource.</p>
</div>
</div>
<div class="sect2">
<h3 id="_4xx_erreur_c\xF4t\xE9_client">4xx Erreur c\xF4t\xE9 client</h3>
<div class="paragraph">
<p>Ce code est renvoy\xE9 quand la requ\xEAte envoy\xE9e est invalide 400 (Bad Request), incompl\xE8te, ou que la ressource demand\xE9e n\u2019a pas \xE9t\xE9 trouv\xE9e : 404 (Not Found). Les code 4xx sont aussi utilis\xE9s pour les probl\xE8mes de s\xE9curit\xE9 : 401 (Unauthorized), 403 (Forbidden)</p>
</div>
</div>
<div class="sect2">
<h3 id="_5xx_erreur_c\xF4t\xE9_serveur">5xx Erreur c\xF4t\xE9 serveur</h3>
<div class="paragraph">
<p>Les erreurs c\xF4t\xE9 serveurs renvoient un code en 5xx. Par exemple l\u2019erreur 500 (Internal Server Error) est la plus g\xE9n\xE9rique.</p>
</div>
<div class="paragraph">
<p>Voici un bon moyen mn\xE9motechnique (tir\xE9 d&#8217;une conf\xE9rence de <a href="https://twitter.com/glaforge">Guillaume Laforge</a>) pour vous souvenir des cat\xE9gories</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_05.png" alt="Cde retour HTTP">
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_headers_http">Les headers HTTP</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Afin d\u2019affiner les requ\xEAtes et les r\xE9ponses, des param\xE8tres peuvent \xEAtre ajout\xE9 dans l\u2019ent\xEAte des message. Vous pouvez ajouter vos propres donn\xE9es dans ces headers. Le principe est de pouvoir transf\xE9rer des informations entre le client et le serveur.</p>
</div>
<div class="paragraph">
<p>Je pourrai lister tous les ent\xEAtes standards interpr\xE9t\xE9s par les navigateurs mais l\u2019int\xE9r\xEAt est limit\xE9. Vous pouvez trouver la liste sur le site de <a href="http://www.iana.org/assignments/message-headers/message-headers.xhtml">Iana</a> (Internet Assigned Numbers Authority) antenne de l\u2019ICANN.</p>
</div>
<div class="paragraph">
<p>Ce qu\u2019il est int\xE9ressant de savoir c\u2019est qu\u2019il en existe diff\xE9rents pour traiter automatiquement certaines probl\xE9matiques. Le site <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">d\xE9veloppeur web (MDN)</a> de Mozilla propose une classification int\xE9ressante : authentification, cache, CORS\u2026</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_organismes_de_r\xE9gulation">Organismes de r\xE9gulation</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_des_initiatives_locales">Des initiatives locales</h3>
<div class="paragraph">
<p>Je parle de r\xE9gulation car ce terme est dans la bouche de toutes les autorit\xE9s dans le monde. Le web a \xE9t\xE9 cr\xE9\xE9 pour \xEAtre un espace libre mais l\u2019argent et les donn\xE9es personnelles sont de tel enjeux que priv\xE9s et gouvernants font tout pour prendre le contr\xF4le.</p>
</div>
<div class="paragraph">
<p>Heureusement ce n\u2019est pas simple. Mais Internet devient de moins en moins un espace de libert\xE9. Chaque pays mais en place des autorit\xE9s de r\xE9gulation quand il n\u2019y a pas de la censure ou autre m\xE9canisme pour contr\xF4ler les internautes.</p>
</div>
</div>
<div class="sect2">
<h3 id="_le_w3c">Le W3C</h3>
<div class="paragraph">
<p>Apr\xE8s ce petit appart\xE9 je vais parler de l\u2019organisme qui devrait \xEAtre le seul ma\xEEtre \xE0 bord. Il s\u2019agit du <a href="https://www.w3.org/">W3C</a> acronyme de World Wide Web Consortium. Cette association fond\xE9e en 1994 par <a href="https://fr.wikipedia.org/wiki/Tim_Berners-Lee">Tim Berners-Lee</a> a pour leitmotiv : \u201Cun seul web partout et pour tous\u201D.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/web_04.png" alt="W3C">
</div>
</div>
<div class="paragraph">
<p>Le <a href="https://www.w3.org/">W3C</a> est l\u2019organisme qui s\u2019occupe de la standardisation des technologies utilis\xE9es dans le web : HTML, CSS mais aussi XML, XSL, SVG, PNG\u2026. Le consortium regroupe un peu moins de 400 entreprises et a plusieurs antennes aux Etats Unis en Europe, en Asie\u2026</p>
</div>
<div class="paragraph">
<p>Le <a href="https://www.w3.org/">W3C</a> planche sur des recommandations. Voici par exemple la recommandation d\xE9finissant HTML5  <a href="https://www.w3.org/TR/html5/" class="bare">https://www.w3.org/TR/html5/</a>. Les fabricants peuvent suivre ou non les recommandations et par cons\xE9quent nous pouvons avoir parfois de grosses diff\xE9rences d\u2019impl\xE9mentations.</p>
</div>
<div class="paragraph">
<p>Une recommandation peut passer par les \xE9tats suivants
* Working Draft (WD) (brouillon de travail),
* Last Call Working Draft (dernier appel),
* Candidate Recommendation (CR) (candidat \xE0 la recommandation),
* Proposed Recommendation (PR) (recommandation propos\xE9e),
* W3C Recommendation (REC) (recommandation du W3C)</p>
</div>
</div>
<div class="sect2">
<h3 id="_le_whatwg">Le WHATWG</h3>
<div class="paragraph">
<p><a href="https://whatwg.org/">WHATWG</a> (Web Hypertext Application Technology Working Group) est une communaut\xE9 de personnes dont le but est de faire \xE9voluer le web. Cette fondation a \xE9t\xE9 cr\xE9\xE9e par des m\xE9contents du W3C en 2004. On retrouve la fondation Mozilla, Op\xE9ra, des personnes de chez Apple.</p>
</div>
<div class="paragraph">
<p>Le but est de r\xE9pondre \xE0 la lenteur du W3C sur certains sujets comme HTML, les web workers,&#8230;&#8203; Au final les 2 organisations travaillent ensemble pour faire avancer le web.</p>
</div>
</div>
</div>
</div>`;var Lf=`<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>On m\xE9lange souvent les termes Web et Internet. Nous allons remonter dans l&#8217;histoire au cours de plusieurs articles et expliquer les diff\xE9rences entre ces deux notions.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_un_peu_dhistoire_de_linformatique">Un peu d&#8217;histoire de l&#8217;informatique</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les premiers ordinateurs sont apparus pendant la seconde guerre mondiale. Ils \xE9taient initialement utilis\xE9 pour effectuer des calculs simples ou plus compliqu\xE9s comme des op\xE9rations de cryptage / d\xE9cryptage (<a href="https://fr.wikipedia.org/wiki/Colossus_(ordinateur)">Colossus par exemple</a> . Les premiers ordinateurs \xE9taient gigantesques et l\u2019arriv\xE9e du transistor a permis leur miniaturisation et leur lente d\xE9mocratisation.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Les transistors sont des composants \xE9lectroniques actifs qui peuvent jouer plusieurs r\xF4les : interupteur, amplificateur de signal, stabilisateur de tension&#8230;&#8203; Ils ont remplac\xE9s les tubes \xE9lectroniques qui \xE9taient volumineux, fragiles et tr\xE8s consommateurs de courant.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Une fois que la mise en place des ordinateurs individuels a \xE9t\xE9 possible, il restait \xE0 r\xE9soudre les probl\xE8mes de communication entre les ordinateurs (mise en r\xE9seau).</p>
</div>
<div class="paragraph">
<p>En 1958 le premier modem a \xE9t\xE9 cr\xE9\xE9 par les laboratoires Bell et permettait de transporter des donn\xE9es binaires sur un r\xE9seau t\xE9l\xE9phonique.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_premiers_r\xE9seaux">Les premiers r\xE9seaux</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Les premi\xE8res initiatives sont apparues fin des ann\xE9e 60, d\xE9but 70 aux Etats Unis mais aussi en Europe en Grande Bretagne et en France.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_00.png" alt="Internet">
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_arpanet">R\xE9seau ARPANET</h3>
<div class="paragraph">
<p>Le premier r\xE9seau, ARPANET est cr\xE9\xE9 par la d\xE9fense am\xE9ricaine \xE0 la fin des ann\xE9es 60. Il avait pour but de relier des sites strat\xE9giques et les universit\xE9s am\xE9ricaines (4 ordinateurs reli\xE9s en 1969 et 23 en 1971). Le d\xE9veloppement d\u2019ARPANET \xE9tait centr\xE9 autour des RFC (Request for comments). ARPANET a aujourd\u2019hui disparu (depuis 1990) mais les RFC sont rest\xE9es.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<div class="title">Note</div>
</td>
<td class="content">
Une <a href="https://fr.wikipedia.org/wiki/Request_for_comments">RFC</a> est un document technique d\xE9crivant une technique, un composant&#8230;&#8203;  Ces documents sont soumis au groupe de normalisation d\u2019Internet (<a href="https://www.ietf.org/">IETF</a> : Internet Engineering Task Force) et peuvent aboutir \xE0 une standardisation.
Une RFC peut avoir plusieurs status : Proposed Standard, Draft Standard et Internet Standard
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_npl">R\xE9seau NPL</h3>
<div class="paragraph">
<p>A la m\xEAme p\xE9riode en Europe (1970), le <a href="http://www.npl.co.uk/">National Physical Laboratory</a> (Royaume-Uni) a mis en place son propre r\xE9seau bas\xE9 sur la commutation de paquet (packet-switching). Cette initiative est la premi\xE8re impl\xE9mentation de ce mode de transmission de donn\xE9es (en 1976 le r\xE9seau reliait 12 ordinateurs et 75 terminaux)</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_merit">R\xE9seau Merit</h3>
<div class="paragraph">
<p>Au Etats Unis, au Michigan en 1971 nous avons \xE9galement des travaux qui vont dans le m\xEAme sens avec le r\xE9seau MERIT (Michigan Educational Research Information Triad) qui avait pour but de relier les 3 universit\xE9s publiques de l\u2019\xE9tat (but atteint en 1972).</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_cyclades">R\xE9seau Cyclades</h3>
<div class="paragraph">
<p>En France nous pouvons citer les travaux de <a href="https://fr.wikipedia.org/wiki/Louis_Pouzin">Louis Pouzin</a> qui a cr\xE9\xE9 le r\xE9seau Cyclades en 1971. Ce r\xE9seau exp\xE9rimental utilise \xE9galement la commutation de paquet. Le but \xE9tait de trouver des alternatives \xE0 ARPANET et aider la recherche.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_01.jpg" alt="Louis Pouzin">
</div>
<div class="title">Figure 1. Louis Pouzin</div>
</div>
<div class="paragraph">
<p>C\u2019est la premi\xE8re intiative dans l&#8217;histoire o\xF9 les machines sont responsables de la fiabilit\xE9 des donn\xE9es transmises. Les donn\xE9es sont d\xE9coup\xE9es en paquet (datagrammes) et sont ensuite r\xE9concili\xE9es \xE0 l\u2019arriv\xE9e. L\u2019\xE9metteur ne sait pas si le r\xE9cepteur a bien re\xE7u les paquets.</p>
</div>
<div class="paragraph">
<p>Le r\xE9seau s\u2019est heurt\xE9 au monopole des PTT fran\xE7aises, qui ont fait un choix diff\xE9rent et mis\xE9 sur une solution \xE0 commutation de circuit qu\u2019ils trouvaient plus fiable et moins co\xFBteuse. Le projet a \xE9t\xE9 abandonn\xE9 en 1978 mais les concepts ont \xE9t\xE9 repris lors de la mise en place du protocole TCP/IP et de la naissance d\u2019Internet.</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_x25">R\xE9seau X25</h3>
<div class="paragraph">
<p>L\u2019Union internationale des t\xE9l\xE9communications a essay\xE9 de normaliser les \xE9changes r\xE9seaux par commutation de paquets via le r\xE9seau X25. X25 utilise la commutation de paquets mais est construit sur le concept de circuit virtuels \xE9mulant des connexions t\xE9l\xE9phoniques traditionnelles. Les grands op\xE9rateurs de t\xE9l\xE9coms (tous publics \xE0 cette p\xE9riode) ont adopt\xE9 cette norme.</p>
</div>
<div class="paragraph">
<p>La premi\xE8re impl\xE9mentation date de de 1974 au Royaume Uni. En 1978, le British Post Office (UK), Western Union International (USA) et Tymnet (USA) collaborent pour mettre en place le premier r\xE9seau commut\xE9 international (IPSS : International Packet Switched Service).</p>
</div>
<div class="paragraph">
<p>En 1979 CompuServe se base sur ce r\xE9seau pour proposer le premier service de courrier \xE9lectronique.</p>
</div>
<div class="paragraph">
<p>En France France Telecom cr\xE9e une filiale, Transpac sp\xE9cialis\xE9e dans la fourniture d&#8217;acc\xE8s r\xE9seaux pour les entreprises. Transpac est \xE0 l\u2019origine</p>
</div>
<div class="ulist">
<ul>
<li>
<p>du <a href="https://fr.wikipedia.org/wiki/Minitel">Minitel</a> (1980) qui reposait sur le r\xE9seau X25 fran\xE7ais et</p>
</li>
<li>
<p>du r\xE9seau mon\xE9tique <a href="https://fr.wikipedia.org/wiki/%C3%89change_t%C3%A9l%C3%A9matique_banque-clients">ETEBAC</a> (1991).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le principal atout de X25 \xE9tait l&#8217;absence de perte de donn\xE9e, garantie par de multiples contr\xF4les et la gestion automatique de la retransmission des paquets \xE9ventuellement perdus. Ce r\xE9seau a \xE9t\xE9 arr\xEAt\xE9 en France en 2012.</p>
</div>
</div>
<div class="sect2">
<h3 id="_r\xE9seau_usenet">R\xE9seau Usenet</h3>
<div class="paragraph">
<p>En 1979 des \xE9tudiants ont l\u2019id\xE9es de transf\xE9rer des news et des messages via de simple scripts shell en utilisant UUCP (Unix to Unix Copy Protocol).  UUCP permet les \xE9changes de fichiers entre 2 machines et permet aussi d\u2019ex\xE9cuter des commandes sur une machine distante. Les donn\xE9es sont d\u2019abord mis dans une file d\u2019attente et la machine distante les r\xE9cup\xE8re au moment voulu.</p>
</div>
<div class="paragraph">
<p>Les r\xE9seaux UUCP se r\xE9pandirent rapidement, gr\xE2ce \xE0 leur co\xFBt peu \xE9lev\xE9 et leur capacit\xE9 \xE0 utiliser les lignes t\xE9l\xE9phoniques existantes, comme les liens X.25, les connexions ARPANET&#8230;&#8203;</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_unification_des_r\xE9seaux">Unification des r\xE9seaux</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_les_protocoles_tcp_ip">Les protocoles TCP / IP</h3>
<div class="paragraph">
<p>Comme nous venons de le voir il y a eu plusieurs initiatives de mise en place de r\xE9seaux. Mais chacun utilisait sa propre m\xE9thode de communication et ils ne pouvaient pas \xEAtre interconnect\xE9s les uns avec les autres.</p>
</div>
<div class="paragraph">
<p>L&#8217;id\xE9e d\u2019un r\xE9seautage \xE0 architecture ouverte a \xE9t\xE9 introduite en 1972 par <a href="https://fr.wikipedia.org/wiki/Robert_Elliot_Kahn">Robert E. Kahn</a>, peu apr\xE8s son arriv\xE9e \xE0 <a href="https://www.darpa.mil/">DARPA</a> (agence qui est \xE0 l\u2019initiative d\u2019ARPANET).  Le nom de son programme de recherche \xE9tait appel\xE9 \xAB Internetting \xBB (interr\xE9seautage). Il recrute <a href="https://fr.wikipedia.org/wiki/Vint_Cerf">Vinton G. Cerf</a> et ils reprennent ensemble certains concepts mis en place dans le r\xE9seau Cyclades de <a href="https://fr.wikipedia.org/wiki/Louis_Pouzin">Louis Pouzin</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_02.jpg" alt="Robert E. Kahn">
</div>
<div class="title">Figure 2. Robert E. Kahn co-cr\xE9ateur de TCP / IP</div>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_03.jpg" alt="Vint Cerf">
</div>
<div class="title">Figure 3. Vint Cerf co-cr\xE9ateur de TCP / IP</div>
</div>
<div class="paragraph">
<p>Leur but \xE9tait de r\xE9duire le r\xE9seau physique \xE0 son strict minimum, le transport. Ce sont les machines qui sont responsables de la r\xE9conciliation des messages. Si un morceau du message (paquet) s\u2019est perdu elles redemandent sa retransmission. En 1973 Kahn et Cerf pr\xE9sentent le protocole TCP / IP.</p>
</div>
<div class="paragraph">
<p>Le <strong>protocole TCP</strong> (Transmission Control Protocol) fournit les services de transport et d\u2019acheminement : contr\xF4le de flux et r\xE9cup\xE9ration des paquets perdus.</p>
</div>
<div class="paragraph">
<p>Le <strong>protocole IP</strong> (Internet Protocol) permet l\u2019adressage et la transmission de paquet simple.</p>
</div>
<div class="paragraph">
<p>Le <strong>protocole UDP</strong> (User Datagram Protocol) apparait aussi dans la sp\xE9cification et fournit un acc\xE8s direct aux services de base IP (sans le contr\xF4le de flux ou la r\xE9cup\xE9ration de paquets).</p>
</div>
<div class="paragraph">
<p>Le terme <strong>Internet</strong> d\xE9signe un r\xE9seau bas\xE9 sur les protocoles TCP/IP . Il a \xE9t\xE9 adopt\xE9 dans la premi\xE8re RFC publi\xE9e sur le protocole TCP. Internet a \xE9t\xE9 con\xE7u comme une infrastructure globale permettant de relier tous les r\xE9seaux existant entre eux.</p>
</div>
</div>
<div class="sect2">
<h3 id="_le_d\xE9veloppement_dinternet">Le d\xE9veloppement d\u2019Internet</h3>
<div class="paragraph">
<p>La technologie Ethernet, d\xE9velopp\xE9e en 1973 par <a href="https://www.xerox.com/">Xerox Parc</a> est commercialis\xE9e en 1980. Elle s\u2019est tr\xE8s vite g\xE9n\xE9ralis\xE9e pour cr\xE9er des r\xE9seaux dans les entreprises. Les liaisons transatlantiques sont pass\xE9es en TCP / IP en 1984 et tout ces r\xE9seaux ont pu \xEAtre regroup\xE9s pour former Internet.</p>
</div>
<div class="paragraph">
<p>Le passage de quelques r\xE9seaux \xE0 une multitude de r\xE9seaux entra\xEEna la mise en place de plusieurs concepts.</p>
</div>
<div class="sect3">
<h4 id="_les_classes_de_r\xE9seau">Les classes de R\xE9seau</h4>
<div class="paragraph">
<p>Le nombre d\u2019adresses IP dans sa version acuelle (IPv4) est limit\xE9e \xE0 un peu plus de 4 milliards (stockage sur 32 bits). Pour r\xE9partir au mieux les adresses des classes de r\xE9seaux ont \xE9t\xE9 cr\xE9\xE9es (A, B, C)</p>
</div>
<div class="ulist">
<ul>
<li>
<p>la classe A pour les grands r\xE9seaux \xE0 \xE9chelle nationale,</p>
</li>
<li>
<p>la classe B pour une \xE9chelle r\xE9gionale et</p>
</li>
<li>
<p>la classe C pour les r\xE9seaux locaux.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Comme le nombre d\u2019objet connect\xE9 grandit toujours de mani\xE8re exponentielle, une nouvelle version du protocole (IPv6 ou IPng) va permettre de r\xE9soudre ce probl\xE8me d\u2019adresse tout en am\xE9liorant d\u2019autres points.</p>
</div>
</div>
<div class="sect3">
<h4 id="_les_dns">Les DNS</h4>
<div class="paragraph">
<p>Les adresses IP sont une suite de num\xE9ro difficile \xE0 retenir. Un m\xE9canisme d\u2019alias pour faire correspondre une adresse \xE0 un nom de domaine a \xE9t\xE9 mis en place en 1983, c\u2019est le <strong>DNS</strong> Domain Name System.</p>
</div>
<div class="paragraph">
<p>Les algorithmes de routage ont du aussi \xE9volu\xE9 avec les Exterior Gateway Protocol (EGP) utilis\xE9s pour relier les r\xE9gions entre elles et les Interior Gateway Protocol (IGP)</p>
</div>
<div class="paragraph">
<p>On pourrait \xE9crire beaucoup de choses sur le protocole IP notamment sur la nouvelle impl\xE9mentation. Si vous \xEAtes int\xE9ress\xE9s par le sujet je vous r\xE9oriente vers <a href="http://www.commentcamarche.net/contents/524-le-protocole-ipv6">cet article</a>.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_la_g\xE9n\xE9ralisation_dinternet">La g\xE9n\xE9ralisation d\u2019Internet</h3>
<div class="paragraph">
<p>Le d\xE9veloppement en Europe a \xE9t\xE9 d\u2019abord \xE9t\xE9 ax\xE9 sur X25. En 1984 le <a href="https://home.cern/fr">CERN</a> (Conseil europ\xE9en pour la recherche nucl\xE9aire) tabla pour une utilisation plus \xE9tendue du protocole TCP/IP. Le r\xE9seau europ\xE9en fut reli\xE9 \xE0 Internet en 1989.</p>
</div>
<div class="paragraph">
<p>1989 marque aussi l\u2019entr\xE9e sur Internet de l\u2019Australie et du Japon.</p>
</div>
<div class="paragraph">
<p>En 1991 comme nous le verrons dans un prochain article le World Wide Web fut cr\xE9\xE9 et depuis le nombre de pays se connectant \xE0 Internet n\u2019a \xE9t\xE9 que grandissant.</p>
</div>
<div class="paragraph">
<p>Il est int\xE9ressant de voir la croissance du nombre de machines connect\xE9es \xE0 Internet</p>
</div>
<div class="ulist">
<ul>
<li>
<p>1984 : 1.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>1987 : 10.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>1989 : 100.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>1992 : 1.000.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>1996 : 36.000.000 ordinateurs connect\xE9s</p>
</li>
<li>
<p>2000 : 368.000.000 ordinateurs connect\xE9s</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Aujourd\u2019hui nous avons plus de 1,5 milliards d\u2019ordinateurs connect\xE9 et 2 milliards de smartphone</p>
</div>
<div class="paragraph">
<p>La croissance rapide d\u2019Internet est aussi li\xE9e \xE0 l\u2019acc\xE8s libre et gratuit de toutes les sp\xE9cifications (RFC Request for comments). Ces m\xE9mos \xE9taient cens\xE9s \xEAtre une fa\xE7on rapide et informelle de partager des id\xE9es avec d&#8217;autres chercheurs. Une RFC \xE9tait remplac\xE9e par une autre quand elle \xE9tait compl\xE9t\xE9e jusqu\u2019\xE0 l&#8217;obtention d\u2019un consensus. On pouvait ensuite avoir un document de sp\xE9cification. Au fil du temps les RFC sont devenues les documents de r\xE9f\xE9rence.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_r\xE9gulation_internet">R\xE9gulation Internet</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_ietf_internet_engineering_task_force">IETF (Internet Engineering Task Force)</h3>
<div class="paragraph">
<p>Toute la communaut\xE9 derri\xE8re Internet ne souhaitait qu\u2019aucune personne, aucune entreprise ou aucune organisation prennent la main sur le r\xE9seau.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_04.jpg" alt="IETF">
</div>
</div>
<div class="paragraph">
<p>Mais dans un syst\xE8me anarchique c\u2019est difficile de trouver un consensus, de mettre en place des contr\xF4les. L\u2019 <a href="https://www.ietf.org/">IETF</a> a \xE9t\xE9 mise en place en 1986.</p>
</div>
<div class="paragraph">
<p>C\u2019est un groupe informel, ouvert \xE0 toute personne motiv\xE9e. L\u2019IETF (Internet Engineering Task Force) maintient des  groupes de travail r\xE9partis sur une dizaine de domaine. Chaque groupe discute sur des listes de diffusion d\u2019un projet en cours de d\xE9veloppement. Lorsque le consensus est atteint le projet est diffus\xE9 sous forme de RFC.</p>
</div>
<div class="paragraph">
<p>L&#8217;IETF se r\xE9unit 3 fois dans l\u2019ann\xE9e.</p>
</div>
<div class="paragraph">
<p>Chaque domaine est dirig\xE9 par une ou deux personnes. Les directeurs de domaine nomment le ou les directeurs de chaque nouveau groupe de travail.</p>
</div>
</div>
<div class="sect2">
<h3 id="_isoc_internet_society">ISOC (Internet Society)</h3>
<div class="paragraph">
<p><a href="http://www.isoc.fr/">ISOC</a> est une association (droit am\xE9ricain) \xE0 vocation internationale. L\u2019association regroupe 28 000 membres venant de 170 pays, ainsi que plus de 80 organisations et 90 filiales r\xE9parties dans le monde entier.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_05.png" alt="ISOC">
</div>
</div>
<div class="paragraph">
<p>On en retrouve une en France. Cette association a \xE9t\xE9 cr\xE9e en 1992 par les pionniers de l\u2019Internet afin de coordonner son d\xE9veloppement.</p>
</div>
<div class="paragraph">
<p>L\u2019ISOC finance et veille \xE0 la bonne marche de l\u2019IETF via</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://www.iab.org/">Internet Architecture Board</a> (IAB)  :  ce comit\xE9 se charge de l&#8217;orientation \xE0 long terme d&#8217;Internet, et donc des activit\xE9s donn\xE9es \xE0 l\u2019IETF.</p>
</li>
<li>
<p><a href="https://www.ietf.org/iesg/">Internet Engineering Steering Group</a> (IESG)  : ce groupe pilote le processus de normalisation d\u2019une RFC pour que cette derni\xE8re deviennent un standard Internet ou non. Il est constitu\xE9 par des directeurs des groupes de travail de l\u2019IETF</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le financement de l\u2019ISOC provient des organisations membres, et de l\u2019organisme contr\xF4lant le domaine Internet</p>
</div>
</div>
<div class="sect2">
<h3 id="_icann_internet_corporation_for_assigned_names_and_numbers">ICANN (Internet Corporation for Assigned Names and Numbers).</h3>
<div class="paragraph">
<p><a href="https://www.icann.org/fr">ICANN</a> est l\u2019autorit\xE9 de r\xE9gulation d\u2019Internet. C\u2019est une organisation \xE0 droit priv\xE9 \xE0 but non lucratif mais elle est d\xE9cri\xE9e par de nombreuses personnes \xE0 cause de ses liens tr\xE8s \xE9troit avec le gouvernement am\xE9ricain. Elle a \xE9t\xE9 fond\xE9e en 1998 \xE0 la suite d&#8217;une directive du d\xE9partement du commerce am\xE9ricain et elle va rester sous tutelle des Etats Unis jusqu&#8217;\xE0 ce qu&#8217;il remplisse un certain nombre d&#8217;objectifs.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="../../img/blog/2017/internet_06.png" alt="ICANN">
</div>
</div>
<div class="paragraph">
<p>Bien \xE9videmment la compl\xE9tude de ces objectifs est toujours ni\xE9e par le gouvernement am\xE9ricain. Face \xE0 la col\xE8re de nombreux pays l\u2019ICANN devait se r\xE9organiser en 2014. Mais finalement au bout de 2 ans l\u2019ICANN a trouv\xE9 son ind\xE9pendance le 1er octobre 2016 mais elle reste soumise aux lois am\xE9ricaines.</p>
</div>
<div class="paragraph">
<p>On peut se demander mais \xE0 quoi sert cet organisme ? Son r\xF4le principal qui lui assure d\u2019ailleurs se revenus est li\xE9 \xE0 la vente des noms de domaine et les adresses IP. C\u2019est eux qui assurent \xE9galement la gestion des serveurs racines du DNS (Domain Name System). Les serveurs racines les noms de domaine de premier niveau .fr, .com\u2026. Elle d\xE9livre ensuite un droit \xE0 des soci\xE9t\xE9s comme VeriSign pour les domaines en .com, l\u2019Afnic pour les domaines .fr\u2026.</p>
</div>
<div class="paragraph">
<p>Le fait que l\u2019ICANN suive le droit am\xE9ricain entra\xEEne que tout arbitrage est fait par le procureur g\xE9n\xE9ral de Californie et en dernier recours par le d\xE9partement du Commerce des Etats Unis. Il \xE9tait donc l\xE9gitime que tous les pays fassent pression pour que cet organisme devienne ind\xE9pendant.</p>
</div>
<div class="paragraph">
<p>Mais il existe des r\xE9seaux alternatifs. Les chinois ont leur propre DNS racine et un .com.cn apparait pour un chinois en .com (d\u2019o\xF9 la facilit\xE9 de la censure&#8230;&#8203;). Un site chinois ne sera accessible que s\u2019il en fait la demande aux autorit\xE9s. Vu le nombre d\u2019internautes chinois (22% et le nombre monte en fl\xEAche) nous avons deux Internet en parall\xE8le.</p>
</div>
<div class="paragraph">
<p>Ces derni\xE8res ann\xE9es l\u2019ICANN s\u2019est ouvert au monde. Les noms de domaine ne sont plus exclusivement en alphabet latin depuis 2009.  Ils peuvent \xEAtre r\xE9dig\xE9 avec des caract\xE8res arabes, chinois, cor\xE9ens, japonais ou cyrilliques.</p>
</div>
<div class="paragraph">
<p>Depuis 2013 vous pouvez utiliser n\u2019importe quel nom de domaine de premier niveau \xE0 condition toutefois de d\xE9bourser 185.000 \u20AC au d\xE9part et 25.000\u20AC ensuite par an.</p>
</div>
</div>
</div>
</div>`;var ee=new Map;ee.set("install_development_environment",gf);ee.set("git",vf);ee.set("gradle",ff);ee.set("unit_test_in_java",bf);ee.set("spring_intro",yf);ee.set("spring_ioc",jf);ee.set("spring_data",wf);ee.set("spring_web",kf);ee.set("spring_security",_f);ee.set("kotlin_for_java_developer",xf);ee.set("deploy_webapp_on_clever_cloud",Cf);ee.set("android_introduction",Sf);ee.set("android_first_app",Tf);ee.set("android_add_activity",Ef);ee.set("android_update_ui",Df);ee.set("android_add_menu",qf);ee.set("android_add_activity_list",If);ee.set("android_call_remote_api",Af);ee.set("android_database_room_viewmodel",Mf);ee.set("http",Rf);ee.set("internet",Lf);function Dx(s,e){if(s&1&&(d(0,"div",6),c(1),p()),s&2){let a=e.$implicit;N(),xe(a)}}var y=(()=>{let e=class e{constructor(t){this.domSanitizer=t,this.title="",this.author="devmind",this.publicationDate="",this.category="",this.keywords=[],this.description="",this.filename="",this.folder="",this.image="",this.type="blog",this.content=null}ngOnInit(){let n=(T.get(this.filename)||ee.get(this.filename)||"").replaceAll("&amp;quot;","&quot;").replaceAll("&amp;apos;","&apos;").replaceAll("@link@",this.filename+".html").replaceAll("@dollar@","$").replaceAll("@GT","&gt;").replaceAll("@LT","&lt;").replaceAll(/@<span class="([\w\s-_]*)">LT/gi,"<span>&lt;").replaceAll(/@<span class="([\w\s-_]*)">GT/gi,"<span>&gt;").replaceAll("@LAMBDA","->").replaceAll("@ARROW","=>").replaceAll(/@<span class="([\w\s-_]*)">LAMBDA/gi,'<span class="hljs-title class_">->').replaceAll(/@<span class="([\w\s-_]*)">ARROW/gi,'<span class="hljs-title class_">=>').replaceAll("@backtick@","`").replaceAll("&amp;#xEA;","&ecirc;").replaceAll('<span class="icon">[flask&#93;</span>','<img src="/img/ic_flask.svg" style="width: 1em"/>').replaceAll('<span class="hljs-meta">@backtick</span>@',"`").replaceAll('<span class="hljs-meta">@backtick</span><span class="hljs-meta">@',"`").replaceAll('<span class="hljs-meta">@dollar</span>@',"$").replaceAll('<span class="hljs-symbol">&amp;lt;</span>',"&lt;").replaceAll('<span class="hljs-symbol">&amp;gt;</span>',"&gt;").replaceAll('@</span><span class="hljs-symbol">LT',"&lt;").replaceAll('@</span><span class="hljs-symbol">GT',"&gt;").replaceAll("@</span>GT","&gt;");this.content=this.domSanitizer.bypassSecurityTrustHtml(n)}routerlinkClicked(t){let o=t.target.attributes.getNamedItem("fragment")?.value;o&&(console.log("Go on",o),document.querySelector(o)?.scrollIntoView({block:"center"}))}};e.\u0275fac=function(n){return new(n||e)(ce(yc))},e.\u0275cmp=K({type:e,selectors:[["app-asciidoc-viewer"]],inputs:{title:"title",author:"author",publicationDate:"publicationDate",category:"category",keywords:"keywords",description:"description",filename:"filename",folder:"folder",image:"image",type:"type"},standalone:!0,features:[X],decls:10,vars:4,consts:[[1,"dm-block--blog"],[1,"devmind-section"],[1,"blog-keywords"],[1,"dm-blog--info-date"],["class","dm-blog--keyword-detail",4,"ngFor","ngForOf"],[1,"preview",3,"click","innerHTML"],[1,"dm-blog--keyword-detail"]],template:function(n,i){n&1&&(d(0,"div",0)(1,"div",1)(2,"h1"),c(3),p(),d(4,"div",2)(5,"div",3),c(6),p(),Qe(7,Dx,2,1,"div",4),c(8,"\xA0 "),p(),d(9,"div",5),pt("click",function(r){return i.routerlinkClicked(r)}),p()()()),n&2&&(N(3),xe(i.title),N(3),xe(i.publicationDate),N(),$("ngForOf",i.keywords),N(2),$("innerHTML",i.content,Th))},dependencies:[Ns],styles:[`h1{margin-top:.5em}.dm-blog--info-date{font-size:smaller;color:#424242;border:1px solid #aaa;border-radius:24px;padding:.5em 1em;margin-right:.5em;display:inline}.blog-keywords{display:flex;margin-bottom:1em}.blog-keywords .dm-blog--keyword-detail{background-color:#ccc;color:#424242;padding:.5em 1em;margin-right:.5em;border-radius:24px;font-size:smaller}.toc{background-color:#ccc;margin-top:1em;border:1px solid #ccc;padding:1em;border-radius:8px}.toc #toctitle{font-weight:700;margin-bottom:.5em}img{max-width:100%;height:auto}.imageblock>.content{display:flex;justify-content:center;align-items:center}.highlight{display:block;overflow-x:auto;background:#f3f3f3;color:#444;padding:1.5em;box-shadow:0 8px 16px #00000026;border-radius:8px}code.hljs{padding:3px 5px}.hljs-comment{color:#697070}.hljs-punctuation,.hljs-tag{color:#444a}.hljs-tag .hljs-attr,.hljs-tag .hljs-name{color:#444}.hljs-attribute,.hljs-doctag,.hljs-keyword,.hljs-meta .hljs-keyword,.hljs-name,.hljs-selector-tag{font-weight:700}.hljs-deletion,.hljs-number,.hljs-quote,.hljs-selector-class,.hljs-selector-id,.hljs-string,.hljs-template-tag,.hljs-type{color:#800}.hljs-section,.hljs-title{color:#800;font-weight:700}.hljs-link,.hljs-operator,.hljs-regexp,.hljs-selector-attr,.hljs-selector-pseudo,.hljs-symbol,.hljs-template-variable,.hljs-variable{color:#ab5656}.hljs-literal{color:#695}.hljs-addition,.hljs-built_in,.hljs-bullet,.hljs-code{color:#397300}.hljs-meta{color:#1f7199}.hljs-meta .hljs-string{color:#38a}.hljs-emphasis{font-style:italic}.hljs-strong{font-weight:700}.language-kotlin:before{display:block;float:right;content:"kotlin";font-weight:700;text-transform:uppercase}.language-typescript:before{display:block;float:right;content:"typescript";font-weight:700;text-transform:uppercase}.language-java:before{display:block;float:right;content:"java";font-weight:700;text-transform:uppercase}.language-javascript:before{display:block;float:right;content:"javascript";font-weight:700;text-transform:uppercase}.language-shell:before{display:block;float:right;content:"shell";font-weight:700;text-transform:uppercase}.language-yaml:before{display:block;float:right;content:"yaml";font-weight:700;text-transform:uppercase}.language-json:before{display:block;float:right;content:"json";font-weight:700;text-transform:uppercase}.language-xml:before{display:block;float:right;content:"xml";font-weight:700;text-transform:uppercase}.language-html:before{display:block;float:right;content:"html";font-weight:700;text-transform:uppercase}.language-css:before{display:block;float:right;content:"css";font-weight:700;text-transform:uppercase}.language-scss:before{display:block;float:right;content:"scss";font-weight:700;text-transform:uppercase}
`],encapsulation:2});let s=e;return s})();var ba=[{path:"blog/2024/server_side_rendering.html",component:y,data:{title:"Server Side Rendering",author:"Guillaume EHRET - Dev-Mind",publicationDate:"31/05/2024",category:"Web",description:"Qu'est ce que le Server Side Rendering (SSR) et comment l'utiliser dans une application Angular",keywords:["Angular"],priority:"0.6",filename:"server_side_rendering",folder:"blog/2024",image:":../../img/blog/2024/ssr_intro.png"}},{path:"blog/2022/spring_boot_starter_database_schema_initialization.html",component:y,data:{title:"Comprendre l'auto-configuration Spring Boot",author:"Guillaume EHRET - Dev-Mind",publicationDate:"13/10/2022",category:"Spring",description:"Comment initialiser le schema et user d'un microservice via un starter Spring juste avant l'initialisation de la datasource g\xE9r\xE9e par Spring, Liquibase ou Flyway. Pour cel\xE0 il faut comprendre l'auto-configuration Spring Boot",keywords:["Kotlin","Spring","Liquibase","Flyway"],priority:"0.6",filename:"spring_boot_starter_database_schema_initialization",folder:"blog/2022",image:":../../img/blog/2022/sb_starter.png"}},{path:"blog/2021/assertj_extracting_koltin.html",component:y,data:{title:"Comment utiliser la m\xE9thode extracting AssertJ en Kotlin",publicationDate:"17/09/2021",category:"Kotlin",description:"La m\xE9thode extracting de AssertJ permet de tester les propri\xE9t\xE9s d'un objet ou d'une liste d'\xE9l\xE9ments rapidement. Mais comment l'utiliser en Kotlin ?",keywords:[],priority:"0.6",filename:"assertj_extracting_koltin",folder:"blog/2021",image:":../../img/blog/2021/assertj_koltin.png"}},{path:"blog/2021/java_memoire.html",component:y,data:{title:"La m\xE9moire en Java",author:"Guillaume EHRET - Dev-Mind",publicationDate:"20/02/2021",category:"Java",description:"Comprendre comment la m\xE9moire Java est g\xE9r\xE9e pour identifier des probl\xE8mes (Serial, Paralell, G1, ZGC, Epsilon, Shenandoah)",keywords:["Java","m\xE9moire"],priority:"0.6",filename:"java_memoire",folder:"blog/2021",image:":../../img/blog/2021/jvm_memory.png"}},{path:"blog/2019/application_web_typescript.html",component:y,data:{title:"Cr\xE9er une application web en TypeScript",author:"Guillaume EHRET - Dev-Mind",publicationDate:"08/10/2019",category:"Web",description:"Cr\xE9er une application web en TypeScript",keywords:["Web","Typescript"],priority:"0.6",filename:"application_web_typescript",folder:"blog/2019",image:":../../img/blog/2019/web_typescript0.png"}},{path:"blog/2019/start_typescript_project_and_test_with_jest.html",component:y,data:{title:"D\xE9marrez un projet Typescript et testez le avec Jest",author:"Guillaume EHRET - Dev-Mind",publicationDate:"19/08/2019",category:"Web",description:"Tout savoir sur comment D\xE9marrer un projet Typescript et le tester avec Jest",keywords:["Web","Typescript","Jest"],priority:"0.6",filename:"start_typescript_project_and_test_with_jest",folder:"blog/2019",image:":../../img/blog/2019/laissez_tomber_javascript1.png"}},{path:"blog/2019/comprendre_programation_android.html",component:y,data:{title:"Comprendre la programmation Android",author:"Guillaume EHRET - Dev-Mind",publicationDate:"12/06/2019",category:"Android",description:"Eco-syst\xE8me Android",keywords:["Android"],priority:"0.6",filename:"comprendre_programation_android",folder:"blog/2019",image:":../../img/blog/2019/android_pf_00.png"}},{path:"blog/2019/kotlin_et_android.html",component:y,data:{title:"Kotlin langage de r\xE9f\xE9rence Android",author:"Guillaume EHRET - Dev-Mind",publicationDate:"07/06/2019",category:"Android",description:"Pourquoi utiliser Kotlin quand on d\xE9veloppe en Android",keywords:["Android"],priority:"0.6",filename:"kotlin_et_android",folder:"blog/2019",image:":../../img/blog/2019/kotlin_et_android.png"}},{path:"blog/2019/application_android_score.html",component:y,data:{title:"Application pour saisir les scores",author:"Guillaume EHRET - Dev-Mind",publicationDate:"01/01/2019",category:"Android",description:"Score jeu de soci\xE9t\xE9 permet de saisir les scores quand vous jouez entre amis \xE0 un jeu de soci\xE9t\xE9",keywords:["Android"],priority:"0.6",filename:"application_android_score",folder:"blog/2019",image:":../../img/blog/2019/score_00.png"}},{path:"blog/2018/objectif_clever_cloud_js.html",component:y,data:{title:"Objectif web server JS sur Clever Cloud",author:"Guillaume EHRET - Dev-Mind",publicationDate:"02/11/2018",category:"Web",description:"Comment installer un serveur web en JS sur Clever Cloud et le s\xE9curiser pour la production",keywords:["Web","Clever","Cloud"],priority:"0.6",filename:"objectif_clever_cloud_js",folder:"blog/2018",image:"../../img/blog/2018/objectif_clever_cloud_00.png"}},{path:"blog/2018/installer_xps_ubuntu.html",component:y,data:{title:"Installer Ubuntu en dual boot sur XPS 15",author:"Guillaume EHRET - Dev-Mind",publicationDate:"16/09/2018",category:"Ubuntu",description:"Comment installer Ubuntu sur XPS 15 \xE0 c\xF4t\xE9 de Windows",keywords:["Syst\xE8me","Ubuntu"],priority:"0.6",filename:"installer_xps_ubuntu",folder:"blog/2018",image:"../../img/blog/2018/ubuntun00.png"}},{path:"blog/2018/slide_avec_revealjs_asciidoctor.html",component:y,data:{title:"G\xE9n\xE9rer vos slides avec Reveal.js et Asciidoctor",author:"Guillaume EHRET - Dev-Mind",publicationDate:"17/06/2018",category:"Conference",description:"G\xE9n\xE9rer vos slides avec Reveal.js et Asciidoctor",keywords:["Web","Conference","Slide","Asciidoctor"],priority:"0.6",filename:"slide_avec_revealjs_asciidoctor",folder:"blog/2018",image:"../../img/blog/2018/reveal_00.png"}},{path:"blog/2018/premiere_conference_au_togo.html",component:y,data:{title:"Premi\xE8re \xE9dition de ITogo.conf \xE0 Lom\xE9 au Togo",author:"Guillaume EHRET - Dev-Mind",publicationDate:"11/06/2018",category:"Conference",description:"Premi\xE8re \xE9dition de ITogo.conf \xE0 Lom\xE9 au Togo les 7 et 9 juin 2018",keywords:["Web","Conference","Android"],priority:"0.6",filename:"premiere_conference_au_togo",folder:"blog/2018",image:"../../img/blog/2018/itogo_00.png"}},{path:"blog/2018/secret_de_la_motivation.html",component:y,data:{title:"La motivation en entreprise",author:"Guillaume EHRET - Dev-Mind",publicationDate:"05/04/2018",category:"Agilit\xE9",description:"Quelles sont les secrets pour avoir des \xE9quipes motiv\xE9es",keywords:["Agilit\xE9","Motivation"],priority:"0.6",filename:"secret_de_la_motivation",folder:"blog/2018",image:"../../img/blog/2018/motivation_00.png"}},{path:"blog/2018/mongo_full_text_index.html",component:y,data:{title:"Recherche Fulltext dans une application SpringBoot via MongoDB",author:"Guillaume EHRET - Dev-Mind",publicationDate:"23/02/2018",category:"Java",description:"Les diff\xE9rentes \xE9tapes pour ajouter une recherche full text dans une application SpringBoot \xE9crite en Kotlyn",keywords:["Spring","MongoDb","Kotlyn"],priority:"0.6",filename:"mongo_full_text_index",folder:"blog/2018",image:"../../img/blog/2018/mongo_full_text_index_00.png"}},{path:"blog/2018/publish_maven_central.html",component:y,data:{title:"Publier une librairie open source sur Maven Central",author:"Guillaume EHRET - Dev-Mind",publicationDate:"22/01/2018",category:"Java",description:"les astuces pour pouvoir publier une librairie open source sur Maven Central",keywords:["Java","Gradle","OSS"],priority:"0.6",filename:"publish_maven_central",folder:"blog/2018",image:"../../img/blog/2018/mavencentral_00.png"}},{path:"blog/2018/mockserver.html",component:y,data:{title:"Tester Spring WebFlux WebClient en Junit 4 ou 5 avec MockWebServer",author:"Guillaume EHRET - Dev-Mind",publicationDate:"15/01/2018",category:"Java",description:"comment utiliser mockwebserver pour tester vos services Spring utilisant WebClient",keywords:["Java","Junit","Spring","Boot","WebClient"],priority:"0.6",filename:"mockserver",folder:"blog/2018",image:"../../img/blog/2018/mockwebserver_00.png"}},{path:"blog/2018/junit5_and_springboot.html",component:y,data:{title:"Utiliser Junit 5 dans une application Spring Boot",author:"Guillaume EHRET - Dev-Mind",publicationDate:"08/01/2018",category:"Java",description:"Tout ce qu'il fut savoir pour utiliser la derni\xE8re version de Junit 5 dans un projet Java et plus particuli\xE8rement dans un projet Spring Boot",keywords:["Java","Junit","Spring","Boot"],priority:"0.6",filename:"junit5_and_springboot",folder:"blog/2018",image:"../../img/blog/2018/junit5_00.png"}},{path:"blog/2018/utiliser_api_envoi_email.html",component:y,data:{title:"Utiliser une API d'envoi de mail en Java",author:"Guillaume EHRET - Dev-Mind",publicationDate:"04/01/2018",category:"Java",description:"Utiliser une API d'envoi de mail en Java dans une application Spring Boot",keywords:["Java","API","Email"],priority:"0.6",filename:"utiliser_api_envoi_email",folder:"blog/2018",image:"../../img/blog/2018/email_00.png"}},{path:"blog/2018/do_your_blog_yourself.html",component:y,data:{title:"Do your Blog yourself",author:"Guillaume EHRET - Dev-Mind",publicationDate:"02/01/2018",category:"Web",description:"Comment construire le blog parfait",keywords:["Web","Blog","Asciidoc","Asciidoctor","CMS","Clever","Cloud"],priority:"0.6",filename:"do_your_blog_yourself",folder:"blog/2018",image:"../../img/blog/2018/siteweb_00.jpg"}},{path:"blog/2017/dotcss.html",component:y,data:{title:"DotCSS 2017",author:"Guillaume EHRET - Dev-Mind",publicationDate:"01/12/2017",category:"Web",description:"Retour sur l'\xE9dtion 2017 de dotCSS",keywords:["Internet","Web","CSS","MediaQueries","Font"],priority:"0.6",filename:"dotcss",folder:"blog/2017",image:"../../img/blog/2017/dotcss_00.jpg"}},{path:"blog/2017/http.html",component:y,data:{title:"Le protocole HTTP",author:"Guillaume EHRET - Dev-Mind",publicationDate:"27/11/2017",category:"Web",description:"Le protocole HTTP",keywords:["Internet","Web"],priority:"0.6",filename:"http",folder:"blog/2017",image:"../../img/blog/2017/web_00.png"}},{path:"blog/2017/web.html",component:y,data:{title:"Le World Wide Web",author:"Guillaume EHRET - Dev-Mind",publicationDate:"25/11/2017",category:"Web",description:"Retour sur la cr\xE9ation du world wide web",keywords:["Internet","Web"],priority:"0.6",filename:"web",folder:"blog/2017",image:"../../img/blog/2017/web_00.png"}},{path:"blog/2017/internet.html",component:y,data:{title:"Retour sur la cr\xE9ation d'Internet",author:"Guillaume EHRET - Dev-Mind",publicationDate:"20/11/2017",category:"Web",description:"Retour sur la cr\xE9ation d'Internet",keywords:["Internet"],priority:"0.6",filename:"internet",folder:"blog/2017",image:"../../img/blog/2017/internet_00.png"}},{path:"blog/2017/site_wassadou.html",component:y,data:{title:"Solidarit\xE9 Wassadou Pont-Trambouze",author:"Guillaume EHRET - Dev-Mind",publicationDate:"05/08/2017",category:"Web",description:"Retour sur la cr\xE9ation du site Solidarit\xE9 Wassadou Pont-Trambouze",keywords:["Web","Firebase","Serverless"],priority:"0.6",filename:"site_wassadou",folder:"blog/2017",image:"../../img/blog/2017/wassadou_00.png"}},{path:"blog/2017/workboxjs.html",component:y,data:{title:"Workbox la toolbox pour les progressive webapps",author:"Guillaume EHRET - Dev-Mind",publicationDate:"02/07/2017",category:"Web",description:"Comment utiliser Workbox la nouvelle toolbox de Google faite pour faciiter la cr\xE9ation de vos progressive webapps",keywords:["Web","PWA","ServiceWorker","Workbox"],priority:"0.6",filename:"workboxjs",folder:"blog/2017",image:"../../img/blog/2017/workbox_00.png"}},{path:"blog/2017/creer_service_worker.html",component:y,data:{title:"Cr\xE9er un Service Worker",author:"Guillaume EHRET - Dev-Mind",publicationDate:"28/06/2017",category:"Web",description:"Zoom sur sw-precache et sw-toolbox permettant de mettre en place des services workers",keywords:["Web","PWA","ServiceWorker"],priority:"0.6",filename:"creer_service_worker",folder:"blog/2017",image:"../../img/blog/2017/creer_service_worker_00.png"}},{path:"blog/2017/service_worker.html",component:y,data:{title:"Les services workers",author:"Guillaume EHRET - Dev-Mind",publicationDate:"20/06/2017",category:"Web",description:"Comment marche les progressive webapps et focus sur les services workers",keywords:["Web","PWA","ServiceWorker"],priority:"0.6",filename:"service_worker",folder:"blog/2017",image:"../../img/blog/2017/service_worker_00.png"}},{path:"blog/2017/highcharts_stackedarea.html",component:y,data:{title:"Highcharts et staked area avec des valeurs n\xE9gatives et positives",author:"Guillaume EHRET - Dev-Mind",publicationDate:"29/05/2017",category:"JavaScript Web",description:"Comment afficher des graphiques de type staked area (zone empil\xE9e) avec Highcharts quand le jeu de donn\xE9es contient \xE0 la fois des valeurs n\xE9gatives et des valeurs positives",keywords:["JavaScripy","Graph","Highcharts"],priority:"0.6",filename:"highcharts_stackedarea",folder:"blog/2017",image:"../../img/blog/2017/highcharts_stackedarea_00.png"}},{path:"blog/2017/nouveau_site_asciidoctor.html",component:y,data:{title:"Cr\xE9er son blog en Asciidoc via Asciidoctor",author:"Guillaume EHRET - Dev-Mind",publicationDate:"09/05/2017",category:"Web",description:"Migrer son blog de blogger vers un blog g\xE9n\xE9r\xE9 en Asciidoc via Asciidoctor",keywords:["Web","Blog","Asciidoc","Asciidoctor","CMS"],priority:"0.6",filename:"nouveau_site_asciidoctor",folder:"blog/2017",image:"../../img/blog/2017/nouveau_site_asciidoctor_00.png"}},{path:"blog/2017/test_services_rest_springboot.html",component:y,data:{title:"Des tests simples de vos services REST avec SpringBoot",author:"Guillaume EHRET - Dev-Mind",publicationDate:"15/03/2017",category:"Java",description:"SpringBoot pour \xE9crire des tests simples, lisibles et rapides de vos services REST",keywords:["Java","Spring","SpringBoot"],priority:"0.6",filename:"test_services_rest_springboot",folder:"blog/2017",image:"../../img/blog/2017/test_services-rest-springboot_00.png"}},{path:"blog/2017/ecrire_ses_scripts_gradle_en_kotlin.html",component:y,data:{title:"Scripts Gradle : Kotlin vs Groovy",author:"Guillaume EHRET - Dev-Mind",publicationDate:"12/01/2017",category:"Gradle Kotlin",description:"Diff\xE9rences entre un script Groovy et Kotlin en essayant de param\xE9trer le plugin gradle-node-plugin",keywords:["Java","Gradle","Kotlin"],priority:"0.6",filename:"ecrire_ses_scripts_gradle_en_kotlin",folder:"blog/2017",image:"../../img/blog/2017/ecrire_ses_scripts_gradle_en_kotlin_00.png"}},{path:"blog/2016/ngeurope_angular2_unittest.html",component:y,data:{title:"Tester une application Angular 2",author:"Guillaume EHRET - Dev-Mind",publicationDate:"24/10/2016",category:"Web",description:"Ng-europe Paris du 24 au 26 octobre 2016 Tester une application Angular 2",keywords:["Angular","Angular2","ng-europe","Test"],priority:"0.6",filename:"ngeurope_angular2_unittest",folder:"blog/2016",image:"../../img/blog/2016/ngeurope/ngeurope-angulartest00.jpg"}},{path:"blog/2016/ngeurope_angular_cli.html",component:y,data:{title:"Cycle de vie d\u2019une application Angular 2 via Angular CLI",author:"Guillaume EHRET - Dev-Mind",publicationDate:"24/10/2016",category:"Web",description:"Ng-europe Paris du 24 au 26 octobre 2016 Retour sur le talk de Hans Larsen Angular CLI &amp; You",keywords:["Angular","Angular2","ng-europe","Web"],priority:"0.6",filename:"ngeurope_angular_cli",folder:"blog/2016",image:"../../img/blog/2016/ngeurope/ngeurope-angularcli00.jpg"}},{path:"blog/2016/ngeurope_keynote_misko_hevery.html",component:y,data:{title:"Keynote de Mi\u0161ko Hevery \xE0 ng-europe 2016",author:"Guillaume EHRET - Dev-Mind",publicationDate:"24/10/2016",category:"Web",description:"Ng-europe Paris du 24 au 26 octobre 2016 retour sur la keynote de Mi\u0161ko Hevery \xE0 ng-europe 2016",keywords:["Angular","Angular2","ng-europe","Web"],priority:"0.6",filename:"ngeurope_keynote_misko_hevery",folder:"blog/2016",image:"../../img/blog/2016/ngeurope/ngeurope-keynote-misko-hevery00.jpg"}},{path:"blog/2016/ngeurope_mobile_first_is_not_mobile_only.html",component:y,data:{title:"Mobile first is not mobile only (ng-europe 2016)",author:"Guillaume EHRET - Dev-Mind",publicationDate:"24/10/2016",category:"Web",description:"Retour sur les conf\xE9rences de Willem Veelentur et de Christian Weyer &amp; Thorsten Hans sur les rendus sur mobile Angular 2 \xE0 ng-europe 2016",keywords:["Angular","Angular2","ng-europe","TypeScript"],priority:"0.6",filename:"ngeurope_mobile_first_is_not_mobile_only",folder:"blog/2016",image:"../../img/blog/2016/ngeurope/ngeurope-mobile00.jpg"}},{path:"blog/2016/ngeurope_rendering_et_angular.html",component:y,data:{title:"Angular 2 et Rendering : Universal, React Native, NativeScript",author:"Guillaume EHRET - Dev-Mind",publicationDate:"24/10/2016",category:"Web",description:"Ng-europe Paris du 24 au 26 octobre 2016 Angular 2 et Rendering : Universal, React Native, NativeScript",keywords:["Angular","Angular2","ng-europe","Universal"],priority:"0.6",filename:"ngeurope_rendering_et_angular",folder:"blog/2016",image:"../../img/blog/2016/ngeurope/ngeurope-rendering00.jpg"}},{path:"blog/2016/ngeurope_rxjs_angular2.html",component:y,data:{title:"Angular 2 et RxJS \xE0 ng-europe 2016",author:"Guillaume EHRET - Dev-Mind",publicationDate:"24/10/2016",category:"Java",description:"Ng-europe Paris du 24 au 26 octobre 2016 retour sur les talks sur RxJS",keywords:["Web","Angular","RxJs"],priority:"0.6",filename:"ngeurope_rxjs_angular2",folder:"blog/2016",image:"../../img/blog/2016/ngeurope_rxjs_angular2_00.jpg"}},{path:"blog/2016/ngeurope_typescript_et_angular.html",component:y,data:{title:"Ecrire en TypeScript une application Angular",author:"Guillaume EHRET - Dev-Mind",publicationDate:"24/10/2016",category:"Web",description:"Ng-europe Paris du 24 au 26 octobre 2016 retour comment \xE9crire en TypeScript une application Angular 2",keywords:["Angular","Angular2","ng-europe","TypeScript"],priority:"0.6",filename:"ngeurope_typescript_et_angular",folder:"blog/2016",image:"../../img/blog/2016/ngeurope/ngeurope-typescript00.jpg"}},{path:"blog/2016/springboot_kotlin.html",component:y,data:{title:"Kotlin dans le monde Spring",author:"Guillaume EHRET - Dev-Mind",publicationDate:"23/09/2016",category:"Java",description:"Kotlin dans le monde Spring",keywords:["Java","SpringBoot","Kotlin"],priority:"0.6",filename:"springboot_kotlin",folder:"blog/2016",image:"../../img/blog/2016/springkotlin_00.png"}},{path:"blog/2016/springboot_http2.html",component:y,data:{title:"HTTP 2 comment l'utiliser dans une webapp Spring Boot",author:"Guillaume EHRET - Dev-Mind",publicationDate:"10/07/2016",category:"Java",description:"HTTP 2 comment l'utiliser dans une webapp Spring Boot",keywords:["Java","SpringBoot","HTTP/2"],priority:"0.6",filename:"springboot_http2",folder:"blog/2016",image:"../../img/blog/2016/springhttp2_00.png"}},{path:"blog/2016/springboot_devtools.html",component:y,data:{title:"Optimiser son quotidien de d\xE9veloppeur avec Spring DevTools",author:"Guillaume EHRET - Dev-Mind",publicationDate:"29/06/2016",category:"Java",description:"Optimiser son quotidien de d\xE9veloppeur avec Spring DevTools",keywords:["Java","SpringBoot"],priority:"0.6",filename:"springboot_devtools",folder:"blog/2016",image:"../../img/blog/2016/springdevtools_00.png"}},{path:"blog/2016/headlesss_testing.html",component:y,data:{title:"Installer un serveur X virtuel pour ex\xE9cuter ses tests headless",author:"Guillaume EHRET - Dev-Mind",publicationDate:"03/06/2016",category:"Java",description:"Headless testing : comment installer un serveur X virtuel pour ex\xE9cuter vos tests unitaires ou end-to-end",keywords:["Java","SpringBoot","Kotlin"],priority:"0.6",filename:"headlesss_testing",folder:"blog/2016",image:"../../img/blog/2016/testheadless_00.png"}},{path:"blog/2016/flexbox_layouts_faciles.html",component:y,data:{title:"Flexbox et la simplification des layouts",author:"Guillaume EHRET - Dev-Mind",publicationDate:"18/05/2016",category:"Web",description:"Utiliser les flexbox pour disposer les \xE9l\xE9ments dans votre page",keywords:["Web","CSS","Flexbox"],priority:"0.6",filename:"flexbox_layouts_faciles",folder:"blog/2016",image:"../../img/blog/2016/flexbox_layouts_faciles_00.png"}},{path:"blog/2016/communication_et_neuroscience.html",component:y,data:{title:"Communication : le cerveau \xE0 la recherche de la r\xE9alit\xE9",author:"Guillaume EHRET - Dev-Mind",publicationDate:"04/03/2016",category:"Agilit\xE9",description:"Agile Lyon sur la communication : le cerveau \xE0 la recherche de la r\xE9alit\xE9 retour sur intervention de Yves Rosseti",keywords:["Agilit\xE9","Communication"],priority:"0.6",filename:"communication_et_neuroscience",folder:"blog/2016",image:"../../img/blog/2016/communication_et_neuroscience_00.png"}},{path:"blog/2016/sorganiser_pour_la_complexite.html",component:y,data:{title:"S'organiser pour la complexit\xE9",author:"Guillaume EHRET - Dev-Mind",publicationDate:"22/02/2016",category:"Agile method",description:"S'organiser pour la complexit\xE9",keywords:["Agile","method","Complexity"],priority:"0.6",filename:"sorganiser_pour_la_complexite",folder:"blog/2016",image:"../../img/blog/2016/complexity_00.jpg"}},{path:"blog/2016/pousser_message_slack_en_java.html",component:y,data:{title:"Pousser un message Slack en Java",author:"Guillaume EHRET - Dev-Mind",publicationDate:"29/01/2016",category:"Java",description:"Pousser un message Slack en Java",keywords:["Java"],priority:"0.6",filename:"pousser_message_slack_en_java",folder:"blog/2016",image:"../../img/blog/2016/slack_00.png"}},{path:"blog/2015/12_patterns_transition_agile.html",component:y,data:{title:"12 patterns pour une transition agile",author:"Guillaume EHRET - Dev-Mind",publicationDate:"03/11/2015",category:"Agilit\xE9",description:"12 patterns pour la transition agile par Christophe Addinquy",keywords:["Agilit\xE9","Leadership","Management"],priority:"0.6",filename:"12_patterns_transition_agile",folder:"blog/2015",image:"../../img/blog/2015/transition_00.png"}},{path:"blog/2015/formes_leadership.html",component:y,data:{title:"Les diff\xE9rentes formes de leadership",author:"Guillaume EHRET - Dev-Mind",publicationDate:"15/09/2015",category:"Agilit\xE9",description:"Les diff\xE9rentes formes de leadership dans un village gaulois.... Parall\xE8le avec la c\xE9l\xE8bre BD Ast\xE9rix et Ob\xE9lix",keywords:["Agilit\xE9","Leadership","Management"],priority:"0.6",filename:"formes_leadership",folder:"blog/2015",image:"../../img/blog/2015/formes_leadership_00.jpg"}},{path:"blog/2015/java8_et_les_lambda_stream.html",component:y,data:{title:"Java 8 et les Lambda, Stream et Collectors",author:"Guillaume EHRET - Dev-Mind",publicationDate:"02/01/2015",category:"Java",description:"Tout comprendre sur les lmabda introduits dans Java 8. Manipuler les collections avec la nouvelle API Stream",keywords:["Java","Java","8","Stream","Lambda"],priority:"0.6",filename:"java8_et_les_lambda_stream",folder:"blog/2015",image:"../../img/blog/2015/java8_00.jpg"}}];function qx(s,e){s&1&&(d(0,"h1"),c(1,"Le blog"),p())}function Ix(s,e){s&1&&(d(0,"h1"),c(1,"Les archives du blog"),p())}function Ax(s,e){s&1&&(d(0,"p",11),c(1,"Retrouvez les derniers articles de blog de Dev-Mind."),p())}function Mx(s,e){if(s&1&&(d(0,"article",12)(1,"div",13)(2,"div",14),S(3,"img",15),p(),d(4,"h3")(5,"a",16),c(6),p()(),d(7,"p",17),c(8),p()()()),s&2){let a=e.$implicit,t=dt();$("routerLink",t.postPath(a)),N(3),$("ngSrc",a.image)("alt",a.description),N(2),$("routerLink",t.postPath(a))("title",a.title),N(),xe(a.title),N(2),xe(a.description)}}function Rx(s,e){if(s&1){let a=_m();d(0,"button",18),pt("click",function(){Cu(a);let n=dt();return Su(n.displayedArticles=n.displayedArticles+4)}),c(1,"Plus d'articles... "),p()}}function Lx(s,e){s&1&&(d(0,"a",19),c(1,"Voir tous les articles"),p())}var op=(()=>{let e=class e{constructor(){this.archive=!1,this.blogEntries=ba.map(t=>t.data),this.displayedArticles=4}ngOnInit(){this.displayedArticles=this.archive?4e3:4}postPath(t){return["/",...t.folder.split("/"),t.filename+".html"]}};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-blog"]],inputs:{archive:"archive"},standalone:!0,features:[X],decls:15,vars:10,consts:[[1,"dm-block--blog"],[1,"devmind-section"],[4,"ngIf"],["class","dm_lead",4,"ngIf"],[1,"dm-blog--container-article"],[3,"routerLink",4,"ngFor","ngForOf"],[1,"btn-group",2,"padding","1em"],[1,"btn-group--element"],["class","btn-inverse",3,"click",4,"ngIf"],["href","blog_archive.html","class","btn-inverse",4,"ngIf"],["href","/rss/blog.xml",1,"btn-inverse"],[1,"dm_lead"],[3,"routerLink"],[1,"dm-blog--article"],[1,"dm-blog--imgteaser"],["width","1500","height","764","sizes","(max-width: 100%)",3,"ngSrc","alt"],[3,"routerLink","title"],[1,"dm-blog--teaser"],[1,"btn-inverse",3,"click"],["href","blog_archive.html",1,"btn-inverse"]],template:function(n,i){n&1&&(d(0,"main")(1,"div",0)(2,"div",1),Qe(3,qx,2,0,"h1",2)(4,Ix,2,0,"h1",2)(5,Ax,2,0,"p",3),d(6,"div",4),Qe(7,Mx,9,7,"article",5),Sm(8,"slice"),p(),d(9,"div",6)(10,"div",7),Qe(11,Rx,2,0,"button",8)(12,Lx,2,0,"a",9),d(13,"a",10),c(14,"Flux RSS"),p()()()()()()),n&2&&(N(3),$("ngIf",!i.archive),N(),$("ngIf",i.archive),N(),$("ngIf",!i.archive),N(2),$("ngForOf",Tm(8,6,i.blogEntries,0,i.displayedArticles)),N(4),$("ngIf",!i.archive),N(),$("ngIf",!i.archive))},dependencies:[Ns,fa,us,aa,Wm,Hm],styles:[".btn-inverse[_ngcontent-%COMP%]{margin-right:1em}"]});let s=e;return s})();function Px(s,e){if(s&1&&(d(0,"article",21)(1,"div",22)(2,"div",23),S(3,"img",24),p(),d(4,"h3")(5,"a",25),c(6),p()(),d(7,"p",26),c(8),p()()()),s&2){let a=e.$implicit,t=dt();$("routerLink",t.postPath(a)),N(3),$("ngSrc",a.image)("alt",a.description),N(2),$("routerLink",t.postPath(a))("title",a.title),N(),xe(a.title),N(2),xe(a.description)}}var Pf=(()=>{let e=class e{constructor(){this.blogEntries=ba.map(t=>t.data).slice(0,2)}postPath(t){return["/",...t.folder.split("/"),t.filename+".html"]}};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-home"]],standalone:!0,features:[X],decls:69,vars:1,consts:[[1,"dm-block--intro"],[1,"devmind-section"],[1,"dm_lead"],["href","https://bsky.app/profile/dev-mind.fr","rel","noopener","target","_blank"],["href","https://bsky.app/profile/dev-mind.fr","target","_blank","rel","noopener"],["src","img/contact/bsky.svg","alt","BlueSky",1,"dm-social"],["href","https://github.com/javamind","target","_blank","rel","noopener"],["src","img/contact/github.svg","alt","Github",1,"dm-social"],["href","https://www.linkedin.com/pub/guillaume-ehret/7/668/999","target","_blank","rel","noopener"],["src","img/contact/linkedin.svg","alt","Linkedin",1,"dm-social"],[1,"center","btn-group"],["href","formations.html","alt","Formations","onclick","app.changeMenu('#formation')",1,"btn"],[1,"dm-block--blog"],[1,"dm-blog--container-article"],[3,"routerLink",4,"ngFor","ngForOf"],["href","blog.html","alt","Blog","onclick","app.changeMenu('#blog')",1,"btn","btn-inverse"],[1,"dm-block--news"],["href","experience.html","alt","Experience","onclick","app.changeMenu('#experience')"],["href","https://mixitconf.org/","rel","noopener"],["href","https://github.com/javamind","rel","noopener"],["href","https://speakerdeck.com/javamind","rel","noopener"],[3,"routerLink"],[1,"dm-blog--article"],[1,"dm-blog--imgteaser"],["width","1500","height","764","sizes","(max-width: 100%)",3,"ngSrc","alt"],[3,"routerLink","title"],[1,"dm-blog--teaser"]],template:function(n,i){n&1&&(d(0,"div",0)(1,"div",1)(2,"h1"),c(3,"D\xE9veloppement & Formation"),p(),d(4,"p",2),c(5," Je me nomme "),d(6,"a",3),c(7,"Guillaume EHRET"),p(),c(8," et je propose mes services pour aider les entreprises qui souhaitent cr\xE9er de nouveaux logiciels ou s'organiser pour r\xE9ussir leurs d\xE9fis. Je peux intervenir en tant que d\xE9veloppeur exp\xE9riment\xE9 pour du conseil, de la programmation et de la formation. "),p(),d(9,"p")(10,"a",4),S(11,"img",5),p(),d(12,"a",6),S(13,"img",7),p(),d(14,"a",8),S(15,"img",9),p()(),d(16,"p",10)(17,"a",11),c(18," Voir les formations"),p()()()(),d(19,"div",12)(20,"div",1)(21,"h2"),c(22,"Derniers articles de blog"),p(),d(23,"div",13),Qe(24,Px,9,7,"article",14),p(),d(25,"p",10)(26,"a",15),c(27," Voir le blog"),p()()()(),d(28,"div",16)(29,"div",1)(30,"h2"),c(31,"Actualit\xE9s"),p(),d(32,"p",2),c(33,"Vous pouvez visualiser ma page "),d(34,"a",17),c(35,"exp\xE9riences"),p(),c(36," pour voir mes clients ou employeurs depuis 20 ans. J'interviens en tant que speaker dans des conf\xE9rences et je fais aussi partie de l'\xE9quipe des organisateurs de la conf\xE9rence "),d(37,"a",18),c(38,"MiXiT"),p(),c(39," qui a lieu tous les ans \xE0 Lyon qui regroupe 1000 personnes pendant 2 jours autour de conf\xE9rences, d'ateliers avec des speakers venant du monde entier."),p(),d(40,"p",2),c(41,"Je participe \xE9galement \xE0 des projets Open Source. Vous pouvez consulter mon "),d(42,"a",19),c(43,"Github"),p(),c(44," pour plus d'informations. J'interviens \xE9galement r\xE9guli\xE8rement dans des conf\xE9rences et voici mon "),d(45,"a",20),c(46,"Speaker Deck"),p()()()(),d(47,"div",12)(48,"div",1)(49,"h2"),c(50,"Contact"),p(),d(51,"p",2),c(52," N'h\xE9sitez pas \xE0 me contacter si vous souhaitez plus d'informations"),S(53,"br"),p(),d(54,"p",2)(55,"b"),c(56,"Guillaume EHRET"),p(),S(57,"br"),d(58,"a"),c(59,"guillaume (@) dev-mind.fr"),p()(),d(60,"address",2)(61,"b"),c(62,"Dev-Mind"),p(),S(63,"br"),c(64," 14 rue des roches"),S(65,"br"),c(66," 42290 Sorbiers"),S(67,"br"),c(68," France "),p()()()),n&2&&(N(24),$("ngForOf",i.blogEntries))},dependencies:[Ns,aa,fa,us],styles:[".dm-social[_ngcontent-%COMP%]{min-width:2em;max-width:2em;width:2em;height:2em;margin-right:.5em}.dm-social[_ngcontent-%COMP%]:hover{opacity:.8}"]});let s=e;return s})();var Nf=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-experience"]],standalone:!0,features:[X],decls:741,vars:0,consts:[[1,"dm-block--intro"],[1,"devmind-section"],[1,"dm_lead"],[1,"is-large-screen"],[1,"dm-experience--graph"],[1,"dm-experience--before"],[1,"dm-experience--date"],[1,"dm-experience--step"],[1,"dm-experience--solutec"],["href","experience.html#solutec"],[1,"dm-experience--casino"],["href","experience.html#casino"],[1,"dm-experience--iorga"],["href","experience.html#iorga"],[1,"dm-experience--boiron"],["href","experience.html#boiron"],[1,"dm-experience--devmind"],["href","experience.html#experience"],[1,"dm-experience--after"],[1,"is-small-screen"],[1,"dm-block--blog"],["id","experience",1,"dm-experience--container"],["href","https://www.hopwork.com/profile/541be334e4b01245a80d52ab?q=ehret","rel","noopener"],["href","https://github.com/javamind","rel","noopener"],["href","https://speakerdeck.com/javamind","rel","noopener"],["data-value","Spring;Kotlin;Web;Android","id","fairphone",1,"dm-experience--section"],[1,"dm-experience--label-box"],[1,"dm-experience--label"],["data-value","Spring;Java;Web;Angular","id","epool",1,"dm-experience--section"],["data-value","Spring;Java;Web;Angular","id","esme",1,"dm-experience--section"],["data-value","Spring;Java;Web;Angular","id","bonita",1,"dm-experience--section"],["data-value","Spring","id","poleemploi",1,"dm-experience--section"],["data-value","Spring","id","esmeform",1,"dm-experience--section"],[1,"dm-block--news"],["id","conferences"],["href","mixitconf.org"],["data-value","Conf\xE9rence",1,"dm-experience--section"],["href","https://cfp.devoxx.fr/2019/talk/AIY-5287/Developper_une_application_Android_en_Kotlin.html"],["href","https://speakerdeck.com/javamind/developper-une-application-en-kotlin"],["href","https://cfp2018.devoxx.ma/2018/speaker/guillaume_ehret"],["href","https://speakerdeck.com/javamind/2h-pour-creer-une-application-android-en-kotlin"],["href","https://itogo.cleverapps.io/"],["href","https://speakerdeck.com/javamind/mettre-en-place-une-application-android-en-50-minutes"],["href","https://speakerdeck.com/javamind/itogo-conf-optimiser-les-performances-d-une-webapp"],["href","https://speakerdeck.com/javamind/optimiser-les-performances-dune-webapp-1"],["href","https://www.youtube.com/watch?v=1uh7IFs7_BA"],["href","https://cfp.devoxx.fr/2017/speaker/guillaume_ehret"],["href","https://speakerdeck.com/javamind/optimiser-les-performances-dune-webapp"],["href","https://www.youtube.com/watch?v=9PRPPJFaF_o"],["href","http://www.soft-shake.ch"],["href","https://speakerdeck.com/javamind/optimisez-votre-webapp"],["href","http://www.lyonjug.org/evenements/testing-1"],["href","https://speakerdeck.com/javamind/ecrire-des-tests-en-javascript"],["href","https://www.youtube.com/watch?v=E5HB62QrVbU"],["href","https://snowcamp2016.sched.com/"],["href","https://speakerdeck.com/javamind/les-tests-en-javascript-2"],["href","https://speakerdeck.com/javamind/les-tests-en-javascript-1"],["href","http://www.jugsummercamp.org/edition/6"],["href","https://speakerdeck.com/javamind/15-minutes-pour-tester-son-application-js"],["href","https://www.youtube.com/watch?v=CBskWMtTq80"],["href","http://2015.breizhcamp.org/"],["href","https://speakerdeck.com/javamind/les-tests-en-javascript"],["href","https://www.youtube.com/watch?v=qifqH8lKWXk&list=PLHWl6dPnEb4kHfPp5D8CiGNfA64HQs_Hb&index=50"],["href","https://speakerdeck.com/javamind/le-bon-testeur-il-teste-le-mauvais-testeur-il-teste-dot-dot-dot"],["href","http://www.lavajug.org/2014/09/11/le-bon-testeur.html"],["href","https://speakerdeck.com/javamind/lavajug2014-le-bon-testeur-il-teste-le-mauvais-testeur-il-teste"],["href","https://speakerdeck.com/javamind/devoxxfr2014-le-bon-testeur-il-teste-le-mauvais-testeur-il-teste"],["href","https://www.youtube.com/watch?v=jCk2H0X82qM"],["id","boiron",1,"dm-block--blog"],[1,"dm-experience--container-past"],["data-value","Architecture;JMS;Java;Webservices","id","boiron-archi",1,"dm-experience--section"],["data-value","Java;Webservices;Web","id","boiron-rm",1,"dm-experience--section"],["data-value","Java;Agilit\xE9;Web;Devops","id","iorga",1,"dm-experience--section"],["data-value","Architecture;Spring;Java","id","iorga-scc",1,"dm-experience--section"],["data-value","Architecture;Spring;Java","id","iorga-onf",1,"dm-experience--section"],["data-value","Architecture;Spring;Java","id","iorga-cete",1,"dm-experience--section"],["data-value","Architecture;Spring;Java","id","casino",1,"dm-experience--section"],["data-value","Architecture;D\xE9cisionnel;Java","id","casino-archi",1,"dm-experience--section"],["data-value","Agilit\xE9;Tests;Int\xE9gration continue","id","casino-cp",1,"dm-experience--section"],["data-value","D\xE9veloppement;Web;Java;Swing","id","casino-dev",1,"dm-experience--section"],["id","solutec",1,"dm-experience--container-past"],["data-value","Cobol;Web;Java;HTML;CSS;Javascript","id","solutec-cafet",1,"dm-experience--section"],["data-value","D\xE9veloppement;Web;Java;Swing","id","solutec-grpcasino",1,"dm-experience--section"],["data-value","D\xE9veloppement;Web;Java;Swing","id","solutec-tessi",1,"dm-experience--section"]],template:function(n,i){n&1&&(d(0,"div",0)(1,"div",1)(2,"p",2),c(3," J'ai eu la chance de travailler pour diff\xE9rentes entreprises, dans des secteurs diff\xE9rents, \xE0 des postes multiples fonctionnels ou techniques et sur des projets de diff\xE9rentes envergures (quelques centaines \xE0 des milliers de jour). Depuis 2015, j'ai choisi de fonder Dev-Mind et de devenir ind\xE9pendant pour me concentrer sur le d\xE9veloppement, le conseil et la formation. "),p(),d(4,"p"),c(5,"\xA0"),p(),d(6,"div",3)(7,"div",4)(8,"div",5)(9,"div",6)(10,"small"),c(11,"\xA0"),p()(),d(12,"div",7),c(13,"..."),p()(),d(14,"div",8)(15,"div",6)(16,"small"),c(17,"2001"),p()(),d(18,"div",7)(19,"a",9),c(20,"SOLUTEC"),p()()(),d(21,"div",10)(22,"div",6)(23,"small"),c(24,"2003"),p()(),d(25,"div",7)(26,"a",11),c(27,"CASINO"),p()()(),d(28,"div",12)(29,"div",6)(30,"small"),c(31,"2009"),p()(),d(32,"div",7)(33,"a",13),c(34,"IORGA"),p()()(),d(35,"div",14)(36,"div",6)(37,"small"),c(38,"2010"),p()(),d(39,"div",7)(40,"a",15),c(41,"BOIRON"),p()()(),d(42,"div",16)(43,"div",6)(44,"small"),c(45,"2015"),p()(),d(46,"div",7)(47,"a",17),c(48,"DEV-MIND"),p()()(),d(49,"div",18)(50,"div",6)(51,"small"),c(52,"\xA0"),p()(),d(53,"div",7),c(54,"..."),p()()()(),d(55,"div",19)(56,"div",4)(57,"div",5)(58,"div",6)(59,"small"),c(60,"\xA0"),p()(),d(61,"div",7),c(62,"..."),p()(),d(63,"div",8)(64,"div",6)(65,"small"),c(66,"2001"),p()(),d(67,"div",7)(68,"a",9),c(69,"SOLUTEC"),p()()(),d(70,"div",10)(71,"div",6)(72,"small"),c(73,"2003"),p()(),d(74,"div",7)(75,"a",11),c(76,"CASINO"),p()()(),d(77,"div",12)(78,"div",6)(79,"small"),c(80,"2009"),p()(),d(81,"div",7)(82,"a",13),c(83,"IORGA"),p()()(),d(84,"div",18)(85,"div",6)(86,"small"),c(87,"2010"),p()(),d(88,"div",7),c(89,"\xA0"),p()()(),S(90,"br"),d(91,"div",4)(92,"div",14)(93,"div",6)(94,"small"),c(95,"\xA0"),p()(),d(96,"div",7)(97,"a",15),c(98,"BOIRON"),p()()(),d(99,"div",16)(100,"div",6)(101,"small"),c(102,"2015"),p()(),d(103,"div",7)(104,"a",17),c(105,"DEV-MIND"),p()()(),d(106,"div",18)(107,"div",6)(108,"small"),c(109,"\xA0"),p()(),d(110,"div",7),c(111,"..."),p()()()(),d(112,"p"),c(113,"\xA0"),p(),d(114,"p"),c(115,"Ce parcours o\xF9 j'ai pu multipli\xE9 les casquettes (d\xE9veloppeur, chef de projet, coach, consultant, formateur,...) m'a permis de voir toutes les facettes permettant de r\xE9aliser un projet de d\xE9veloppement. Je me d\xE9finis aujourd'hui comme un artisan de la programmation."),p()()(),d(116,"div",20)(117,"div",1)(118,"div",21)(119,"h1"),c(120,"Dev-Mind"),p(),d(121,"p",2),S(122,"br"),c(123," Vous pouvez voir certaines "),d(124,"a",22),c(125,"recommandations"),p(),c(126," faites par mes anciens clients sur mon profil "),d(127,"a",22),c(128,"Hopwork"),p(),c(129,". Je participe \xE9galement \xE0 des projets Open Source. Vous pouvez consulter mon "),d(130,"a",23),c(131,"Github"),p(),c(132," pour plus d'informations. J'interviens \xE9galement r\xE9guli\xE8rement dans des conf\xE9rences et voici mon "),d(133,"a",24),c(134,"Speaker Deck"),p()(),d(135,"p"),c(136,"Depuis "),d(137,"b"),c(138,"2015"),p(),c(139,", je suis d\xE9veloppeur ind\xE9pendant (soci\xE9t\xE9 DevMind) et j\u2019interviens pour aider les entreprises \xE0 d\xE9velopper ou mettre en place leurs propres logiciels dans leur SI. "),p(),d(140,"h2"),c(141,"G\xE9rant, d\xE9veloppeur Java/Web"),p(),d(142,"section",25)(143,"h3"),c(144,"Fairphone (Netherlands) - missions ponctuelles depuis 2021"),p(),d(145,"p"),c(146," D\xE9veloppement Android Kotlin ou backend en Spring Kotlin "),p(),d(147,"div",26)(148,"span",27),c(149,"Android"),p(),d(150,"span",27),c(151,"Kotlin"),p()()(),d(152,"section",28)(153,"h3"),c(154,"Energy Pool (Lyon) - depuis 2015"),p(),d(155,"p"),c(156," Conception et d\xE9veloppement de l\u2019application au coeur de l\u2019activit\xE9 de la startup Energy Pool agissant dans le domaine de la flexibilit\xE9 \xE9lectrique et leader de l\u2019effacement \xE9lectrique en France. "),p(),d(157,"div",26)(158,"span",27),c(159,"Angular"),p(),d(160,"span",27),c(161,"Typescript"),p(),d(162,"span",27),c(163,"Kotlin"),p(),d(164,"span",27),c(165,"Java"),p(),d(166,"span",27),c(167,"Web"),p(),d(168,"span",27),c(169,"SpringBoot"),p(),d(170,"span",27),c(171,"git"),p()()(),d(172,"section",29)(173,"h3"),c(174,"Ecole des mines (Saint Etienne) - 2016 "),p(),d(175,"p"),c(176," D\xE9veloppement de l\u2019application utilis\xE9e pour le bicentenaire de l\u2019\xE9cole des Mines par les \xE9l\xE8ves pour laisser une trace de cet \xE9v\xE9nement sous forme de texte sous un mur num\xE9rique https://ewall.mines-stetienne.fr/home "),p(),d(177,"div",26)(178,"span",27),c(179,"Angular"),p(),d(180,"span",27),c(181,"Java"),p(),d(182,"span",27),c(183,"Web"),p(),d(184,"span",27),c(185,"SpringBoot"),p()()(),d(186,"section",30)(187,"h3"),c(188,"BonitaSoft (Grenoble) - 2015 "),p(),d(189,"p"),c(190," D\xE9veloppement d\u2019un designer de page web pour aider les utilisateurs de la plateforme de BPM Bonitasoft \xE0 mod\xE9liser leurs pages pour interagir avec un processus. "),p(),d(191,"div",26)(192,"span",27),c(193,"Angular"),p(),d(194,"span",27),c(195,"Java"),p(),d(196,"span",27),c(197,"Web"),p(),d(198,"span",27),c(199,"Spring"),p(),d(200,"span",27),c(201,"git"),p()()(),d(202,"h2"),c(203,"Formateur"),p(),d(204,"section",31)(205,"h3"),c(206,"P\xF4le emploi via Diginamic (Lyon) - 2018, 2019"),p(),d(207,"p"),c(208," Formation Spring dans le cadre de reconvertion professionnelle soutenue par P\xF4le emploi "),p(),d(209,"div",26)(210,"span",27),c(211,"Spring Framework"),p(),d(212,"span",27),c(213,"Spring AOP"),p(),d(214,"span",27),c(215,"Spring MVC"),p(),d(216,"span",27),c(217,"Spring Data"),p(),d(218,"span",27),c(219,"Spring Security"),p(),d(220,"span",27),c(221,"Spring Boot"),p()()(),d(222,"section",32)(223,"h3"),c(224,"Ecole des mines (Saint Etienne) - depuis 2018 "),p(),d(225,"p"),c(226," Formation des \xE9tudiants 2\xE8me ann\xE9e \xE0 Spring et Android "),p(),d(227,"div",26)(228,"span",27),c(229,"Spring Framework"),p(),d(230,"span",27),c(231,"Spring Data"),p(),d(232,"span",27),c(233,"Spring Boot"),p(),d(234,"span",27),c(235,"Kotlin"),p(),d(236,"span",27),c(237,"Android"),p()()()()()(),d(238,"div",33)(239,"div",1)(240,"div",34)(241,"h2"),c(242,"Conf\xE9rences"),p(),d(243,"p"),c(244," Je fais partie de l'organisation de la conf\xE9rence "),d(245,"a",35),c(246,"MiXiT"),p(),c(247," qui a lieu \xE0 Lyon chaque ann\xE9\xE9 au printemps autour du d\xE9veloppement sur des sujets techniques ou non. Cette conf\xE9rence accueille 800 participants sur deux jours. Il peuvent assister \xE0 des sessions ou des ateliers anim\xE9s par des speakers fran\xE7ais et internationaux. J'interviens aussi en tant que speaker dans d'autres conf\xE9rences "),p(),d(248,"section",36)(249,"h3"),c(250,"2h pour mettre en place une application Android"),p(),d(251,"p"),c(252," Dans cette session de 2 ou 4 heures je reviens sur les bases de la cr\xE9ation d'une application Android. En live coding nous verrons les concepts de la programmation Android et nous d\xE9velopperons en Kotlin une r\xE9elle application. "),p(),d(253,"ul")(254,"li")(255,"a",37),c(256,"Devoxx France 2019"),p(),c(257," : "),d(258,"a",38),c(259,"slides"),p()(),d(260,"li")(261,"a",39),c(262,"Devoxx Maroc 2018"),p(),c(263," : "),d(264,"a",40),c(265,"slides"),p()(),d(266,"li")(267,"a",41),c(268,"ITogo.conf 2018"),p(),c(269," : "),d(270,"a",42),c(271,"slides"),p()()(),d(272,"div",26)(273,"span",27),c(274,"Performance"),p(),d(275,"span",27),c(276,"Web"),p()()(),d(277,"section",36)(278,"h3"),c(279,"Optimiser les performances d\u2019une application Web"),p(),d(280,"p"),c(281," Diff\xE9rentes astuces pour optimiser les performances d\u2019une application web en production. Comment optimiser les temps de chargement, de raffraichissement, le mode offline... "),p(),d(282,"ul")(283,"li")(284,"a",41),c(285,"ITogo.conf 2018"),p(),c(286," : "),d(287,"a",43),c(288,"slides"),p()(),d(289,"li")(290,"a",44),c(291,"Jug Lausanne 2017"),p(),c(292," : "),d(293,"a",44),c(294,"slides"),p(),c(295,"\xA0/\xA0 "),d(296,"a",45),c(297,"videos"),p()(),d(298,"li")(299,"a",46),c(300,"Devoxx 2017"),p(),c(301," : "),d(302,"a",47),c(303,"slides"),p(),c(304,"\xA0/\xA0 "),d(305,"a",48),c(306,"videos"),p()(),d(307,"li")(308,"a",49),c(309,"Softshake 2016"),p(),c(310," : "),d(311,"a",50),c(312,"slides"),p()()(),d(313,"div",26)(314,"span",27),c(315,"Performance"),p(),d(316,"span",27),c(317,"Web"),p()()(),d(318,"section",36)(319,"h3"),c(320,"Tester une application Javascript"),p(),d(321,"p"),c(322," Pourquoi et comment faire des tests unitaires et d'int\xE9gration dans une application Javascript. Pr\xE9sentation faite en livecoding sur une application JS ou Angular JS en utilisant Jasmine, Karma, Protractor "),p(),d(323,"ul")(324,"li")(325,"a",51),c(326,"Jug Lyon 2017"),p(),c(327," : "),d(328,"a",52),c(329,"slides"),p(),c(330,"\xA0/\xA0 "),d(331,"a",53),c(332,"vid\xE9o"),p()(),d(333,"li")(334,"a",54),c(335,"Snowcamp 2016"),p(),c(336," : "),d(337,"a",55),c(338,"slides"),p()(),d(339,"li")(340,"a",49),c(341,"Soft Shake 2015"),p(),c(342," : "),d(343,"a",56),c(344,"slides"),p()(),d(345,"li")(346,"a",57),c(347,"JugSummer Camp 2015"),p(),c(348," : "),d(349,"a",58),c(350,"slides"),p(),c(351,"\xA0/\xA0 "),d(352,"a",59),c(353,"vid\xE9o"),p()(),d(354,"li")(355,"a",60),c(356,"Breizhcamp 2015"),p(),c(357," : "),d(358,"a",61),c(359,"slides"),p(),c(360,"\xA0/\xA0 "),d(361,"a",62),c(362,"vid\xE9o"),p()()(),d(363,"div",26)(364,"span",27),c(365,"Angular"),p(),d(366,"span",27),c(367,"JavaScript"),p(),d(368,"span",27),c(369,"Karma"),p(),d(370,"span",27),c(371,"Jasmine"),p(),d(372,"span",27),c(373,"Protractor"),p()()(),d(374,"section",36)(375,"h3"),c(376,"Le bon testeur il teste, le mauvais testeur il teste"),p(),d(377,"p"),c(378," Rappel sur les diff\xE9rents principes pour \xE9crire des tests unitaires de qualit\xE9, rapide et maintenable dans le temps. Pr\xE9sentation faite en livecoding avec plusieurs cas pratiques utilisant des outils et librairies comme FestAssert, AssertJ, InfiniTest, DBSetup "),p(),d(379,"ul")(380,"li")(381,"a",49),c(382,"Softshake 2014"),p(),c(383," : "),d(384,"a",63),c(385,"slides"),p()(),d(386,"li")(387,"a",64),c(388,"Lava Jug 2014"),p(),c(389," : "),d(390,"a",65),c(391,"slides"),p()(),d(392,"li")(393,"a",49),c(394,"Devoxx 2014"),p(),c(395," : "),d(396,"a",66),c(397,"slides"),p(),c(398," / "),d(399,"a",67),c(400,"video"),p()()(),d(401,"div",26)(402,"span",27),c(403,"Test"),p(),d(404,"span",27),c(405,"Java"),p()()(),d(406,"section",36)(407,"h3"),c(408,"Interventions sur l\u2019agilit\xE9"),p(),d(409,"p"),c(410," Diff\xE9rentes interventions pour pr\xE9senter les concepts de l\u2019agilit\xE9 ou comment mettre en place Scrum ou Kanban dans une organisation, am\xE9liorer la lisibilit\xE9 de ses tests "),p(),d(411,"div",26)(412,"span",27),c(413,"Scrum"),p(),d(414,"span",27),c(415,"Kanban"),p()()()()()(),d(416,"div",68)(417,"div",1)(418,"div",69)(419,"h1"),c(420,"Boiron"),p(),d(421,"p"),c(422,"De "),d(423,"b"),c(424,"2010 \xE0 2014"),p(),c(425,", j\u2019ai fait partie des laboratoires BOIRON (leader mondial de l\u2019hom\xE9opathie) "),p(),d(426,"h2"),c(427,"Architecte applicatif"),p(),d(428,"section",70)(429,"h3"),c(430,"Architecture du syt\xE8me d\u2019information"),p(),d(431,"ul")(432,"li"),c(433,"Participation \xE0 la mise en place de l\u2019architecture applicative en service (SOA)"),p(),d(434,"li"),c(435,"R\xE9f\xE9rentiel de donn\xE9es d\u2019entreprise (MDM)"),p(),d(436,"li"),c(437,"Conception et mise en place des m\xE9canismes de synchronisation entre les diff\xE9rentes briques du syst\xE8me (brique de synchronisation permettant de recevoir des donn\xE9es ou de les publier au format XML) "),p(),d(438,"li"),c(439,"Mise en place de la supervision des diff\xE9rentes applications"),p()(),d(440,"div",26)(441,"span",27),c(442,"Architecture"),p(),d(443,"span",27),c(444,"Webservices"),p(),d(445,"span",27),c(446,"Java"),p(),d(447,"span",27),c(448,"Web"),p(),d(449,"span",27),c(450,"SOA"),p(),d(451,"span",27),c(452,"MDM"),p(),d(453,"span",27),c(454,"AngularJS"),p()()(),d(455,"section",71)(456,"h3"),c(457,"Gestion des remises"),p(),d(458,"ul")(459,"li"),c(460,"Conception technique de l\u2019application pour qu\u2019elle soit capable d\u2019appliquer les remises sur les 60.000 commandes quotidiennes au fil de l\u2019eau. "),p(),d(461,"li"),c(462,"Interconnexion de l\u2019application avec le syst\xE8me d\u2019information"),p(),d(463,"li"),c(464,"Mise en place de m\xE9canisme de rejeu pour faciliter l\u2019exploitation de l\u2019application"),p()(),d(465,"span",27),c(466,"Webservices"),p(),d(467,"span",27),c(468,"Java"),p(),d(469,"span",27),c(470,"Web"),p()(),d(471,"section",72)(472,"h3"),c(473,"Leader technique et m\xE9thodologique"),p(),d(474,"ul")(475,"li"),c(476,"Evolution de l\u2019architecture sur les derni\xE8res versions des briques logicielles"),p(),d(477,"li"),c(478,"Mise en place architecture web \xE0 base d\u2019AngularJS"),p(),d(479,"li"),c(480,"Formation des \xE9quipes de d\xE9veloppement \xE0 l\u2019architecture en Service, Java, Spring, Angular JS, Yeoman, Maven\u2026 "),p(),d(481,"li"),c(482,"Sensibilisation et formation des chefs de projets \xE0 l\u2019agilit\xE9 : UP, Scrum, Kanban, Devops "),p(),d(483,"li"),c(484,"Mise en place de la plateforme d\u2019int\xE9gration continue"),p(),d(485,"li"),c(486,"Mise au point de la livraison continue pour uniformiser les installations du d\xE9veloppement \xE0 la production "),p()(),d(487,"div",26)(488,"span",27),c(489,"Web"),p(),d(490,"span",27),c(491,"Java"),p(),d(492,"span",27),c(493,"Javascript"),p(),d(494,"span",27),c(495,"NodeJS"),p(),d(496,"span",27),c(497,"Kanban"),p(),d(498,"span",27),c(499,"Scrum"),p(),d(500,"span",27),c(501,"Devops"),p()()()(),d(502,"div",69)(503,"h1"),c(504,"iORGA"),p(),d(505,"p"),c(506,"De "),d(507,"b"),c(508,"2009 \xE0 2010"),p(),c(509,", j\u2019ai fait partie de iORGA (agence de Lyon de cette SSII)"),p(),d(510,"h2"),c(511,"Consultant Java"),p(),d(512,"section",73)(513,"h3"),c(514,"Soci\xE9t\xE9 Centrale Canine (Paris)"),p(),d(515,"ul")(516,"li"),c(517,"R\xE9daction des guides d\u2019installation et d\u2019exploitation des applications"),p(),d(518,"li"),c(519,"Mise en place d\u2019un serveur SVN pour la gestion des codes sources des applications de la SCC "),p(),d(520,"li"),c(521,"Correction des probl\xE8mes techniques et d\u2019architecture sur les applications existantes (mise aux normes J2EE, mise en place de Maven,...) "),p(),d(522,"li"),c(523,"Cr\xE9ation d'un socle pour les nouvelles applications de la SCC respectant les standards J2EE (mise en place d\u2019un moteur MVC et de web services) "),p()(),d(524,"div",26)(525,"span",27),c(526,"Architecture"),p(),d(527,"span",27),c(528,"Spring"),p(),d(529,"span",27),c(530,"Java"),p()()(),d(531,"section",74)(532,"h3"),c(533,"Office National des For\xEAts (Paris)"),p(),d(534,"ul")(535,"li"),c(536,"Dans le cadre de la refonte du syst\xE8me d\u2019information li\xE9 aux ressources humaines, l\u2019ONF souhaitait concevoir un r\xE9f\xE9rentiel unique des salari\xE9s permettant de suivre la vie professionnelle des employ\xE9s. "),p(),d(537,"li"),c(538,"Conception technique de l\u2019application en enrichissant le socle technique interne (mise en place des tests unitaires , isolation d\u2019une couche m\xE9tier). "),p(),d(539,"li"),c(540,"Suivi technique et fonctionnel"),p()(),d(541,"div",26)(542,"span",27),c(543,"SWT"),p(),d(544,"span",27),c(545,"Hibernate"),p(),d(546,"span",27),c(547,"Java"),p()()(),d(548,"section",75)(549,"h3"),c(550,"CETE minist\xE8re de l\u2019\xE9quipement (Lyon)"),p(),d(551,"ul")(552,"li"),c(553,"Intervention technique sur la TMA de l\u2019application DAPCETE g\xE9rant les budgets attribu\xE9s par l\u2019\xE9tat. Les budgets sont dot\xE9s \xE0 des services g\xE9n\xE9raux qui vont \xE0 leur tour d\xE9l\xE9guer des montants \xE0 des services inf\xE9rieurs qui les affecteront aux CETE. "),p(),d(554,"li"),c(555,"Mise en place des tests d'int\xE9gration et des tests d'int\xE9gration au d\xE9marrage du forfait de d\xE9veloppement de l'application CITES (Convention sur le commerce international des esp\xE8ces de faune et de flore sauvages menac\xE9es d'extinction). Sensibilisation de l\u2019\xE9quipe en forfait sur la d\xE9marche Scrum "),p()(),d(556,"div",26)(557,"span",27),c(558,"Scrum"),p(),d(559,"span",27),c(560,"Hibernate"),p(),d(561,"span",27),c(562,"Java"),p()()(),d(563,"section",76)(564,"h3"),c(565,"CFDP conseil Juridique (Lyon)"),p(),d(566,"ul")(567,"li"),c(568,"Audit de l'architecture"),p(),d(569,"li"),c(570,"Conception du nouveau syst\xE8me"),p()(),d(571,"span",27),c(572,"HTML"),p(),d(573,"span",27),c(574,"Javascript"),p(),d(575,"span",27),c(576,"Java"),p()()(),d(577,"div",69)(578,"h1"),c(579,"Groupe Casino"),p(),d(580,"p"),c(581,"De "),d(582,"b"),c(583,"2003 \xE0 2008"),p(),c(584,", j\u2019ai fait partie du groupe Casino (grande distribution avec plus de 80.000 salari\xE9s en France) et plus particuli\xE8rement de la filiale Casino Restauration"),p(),d(585,"h2"),c(586,"Chef de projet technique"),p(),d(587,"section",77)(588,"h3"),c(589,"Architecture applicative"),p(),d(590,"ul")(591,"li"),c(592,"Refonte du syst\xE8me d\u2019information et \xE9laboration de l\u2019architecture logicielle permettant aux applications situ\xE9es en \xE9tablissement (250 \xE0 travers la France) de travailler en mode d\xE9connect\xE9 et de se synchroniser avec les applications si\xE8ges "),p(),d(593,"li"),c(594,"Mise en place socle technique"),p(),d(595,"li"),c(596,"Supervision des d\xE9veloppements JEE et formations"),p()(),d(597,"div",26)(598,"span",27),c(599,"Architecture"),p(),d(600,"span",27),c(601,"D\xE9cisionnel"),p(),d(602,"span",27),c(603,"Java"),p(),d(604,"span",27),c(605,"Spring"),p()()(),d(606,"section",78)(607,"h3"),c(608,"Gestion de projet agile"),p(),d(609,"ul")(610,"li"),c(611,"R\xE9organisation des d\xE9veloppements et de la prise des besoins des utilisateurs en appliquant des pratiques agiles (XP, Scrum, UP) "),p(),d(612,"li"),c(613,"Sensibilisation des \xE9quipes \xE0 l\u2019agilit\xE9"),p(),d(614,"li"),c(615,"Animation ateliers pour la d\xE9finition du contenu fonctionnel des applications"),p(),d(616,"li"),c(617,"Mise en place d\u2019une plateforme d\u2019int\xE9gration continue (archivage des sources, ex\xE9cution des tests en automatique, d\xE9ploiement automatique des applications) "),p(),d(618,"li"),c(619,"Mise en place d'un wiki afin de centraliser toutes les documentations du service des \xE9tudes. "),p()(),d(620,"div",26)(621,"span",27),c(622,"Agilit\xE9"),p(),d(623,"span",27),c(624,"Tests"),p(),d(625,"span",27),c(626,"Int\xE9gration continue"),p()()(),d(627,"section",79)(628,"h3"),c(629,"D\xE9veloppement"),p(),d(630,"ul")(631,"li"),c(632," D\xE9veloppements JEE de plusieurs applications dans diff\xE9rents domaines "),d(633,"ul")(634,"li"),c(635,"Cha\xEEne produit (gestion des commandes, des articles, des fiches recettes\u2026)"),p(),d(636,"li"),c(637,"Ressources humaines (planning encadrement, pointage des salari\xE9s, \xE9dition des contrats) "),p(),d(638,"li"),c(639,"Marketing (remarques clients)"),p()()(),d(640,"li"),c(641," D\xE9veloppement Web "),d(642,"ul")(643,"li"),c(644,"Responsable de l'Intranet"),p(),d(645,"li"),c(646,"Supervision de la mise en \u0153uvre d'un portail d'entreprise dynamique sous Plumtree "),p(),d(647,"li"),c(648,"Cr\xE9ation de la charte graphique"),p(),d(649,"li"),c(650,"Cr\xE9ation de connecteur Java pour faire le pont entre les Portlets Plumtree et le syst\xE8me d\u2019information "),p()()(),d(651,"li"),c(652," D\xE9veloppement D\xE9cisionnel "),d(653,"ul")(654,"li"),c(655,"Mod\xE9lisation d'un datawarehouse contenant l'ensemble des ventes de l\u2019entreprise (remont\xE9es encaissement). "),p(),d(656,"li"),c(657,"Mise en place des outils BI de Cognos."),p(),d(658,"li"),c(659,"Optimisation de la base de donn\xE9es et mise en place d\u2019un mod\xE8le en \xE9toiles"),p(),d(660,"li"),c(661,"Rapport et cubes OLAP"),p(),d(662,"li"),c(663,"Cr\xE9ation de connecteur Java pour relier le d\xE9cisionnel au reste du SI"),p()()()(),d(664,"div",26)(665,"span",27),c(666,"D\xE9veloppement"),p(),d(667,"span",27),c(668,"D\xE9cisionnel"),p(),d(669,"span",27),c(670,"Java"),p(),d(671,"span",27),c(672,"JavaScript"),p(),d(673,"span",27),c(674,"HTML"),p()()()(),d(675,"div",80)(676,"h1"),c(677,"Solutec"),p(),d(678,"p"),c(679,"De "),d(680,"b"),c(681,"2001 \xE0 2003"),p(),c(682,", J\u2019ai fait partie de Solutec (SSII lyonnaise qui comprenait \xE0 l\u2019\xE9poque 120 salari\xE9s) "),p(),d(683,"h2"),c(684,"Ing\xE9nieur d\u2019\xE9tudes"),p(),d(685,"section",81)(686,"h3"),c(687,"Casino Restauration (Saint Etienne) - 2003"),p(),d(688,"ul")(689,"li"),c(690,"Applications J2EE de gestion des remarques clients et planning encadrement"),p(),d(691,"li"),c(692,"D\xE9veloppement de la partie Java et des services m\xE9tier COBOL permettant de s\u2019interfacer au syst\xE8me d\u2019information legacy du groupe Casino Conception technique "),p(),d(693,"li"),c(694,"Mise en place d\u2019un r\xE9f\xE9rentiel commun"),p(),d(695,"li"),c(696,"Formation Java"),p()(),d(697,"div",26)(698,"span",27),c(699,"D\xE9veloppement"),p(),d(700,"span",27),c(701,"HTML"),p(),d(702,"span",27),c(703,"Javascript"),p(),d(704,"span",27),c(705,"CSS"),p(),d(706,"span",27),c(707,"Java"),p()()(),d(708,"section",82)(709,"h3"),c(710,"Groupe Casino (Saint Etienne) - 2002"),p(),d(711,"ul")(712,"li"),c(713,"Applications J2EE d\xE9velopp\xE9es en forfait (Application de gestion des op\xE9rations promotionnelles du groupe Casino et application de prise de commandes des magasins de proximit\xE9 par t\xE9l\xE9vente) "),p(),d(714,"li"),c(715,"Conception technique"),p(),d(716,"li"),c(717,"Formation des nouveaux collaborateurs arrivant sur le projet"),p()(),d(718,"div",26)(719,"span",27),c(720,"HTML"),p(),d(721,"span",27),c(722,"Javascript"),p(),d(723,"span",27),c(724,"CSS"),p(),d(725,"span",27),c(726,"Java"),p()()(),d(727,"section",83)(728,"h3"),c(729,"TESSI Informatique (Saint Etienne) - 2001"),p(),d(730,"p"),c(731," Etudes et d\xE9veloppements sur une plate-forme EDI bancaire \xE9quipant la majorit\xE9 des caisses r\xE9gionales du Cr\xE9dit Agricole et permettant diff\xE9rents transferts entre la banque et leurs clients par l'interm\xE9diaire de plusieurs protocoles : ETEBAC 1 \xE0 5, PeSIT, Fax, Mail (SMTP), Internet (TCP/IP). "),p(),d(732,"div",26)(733,"span",27),c(734,"HTML"),p(),d(735,"span",27),c(736,"Javascript"),p(),d(737,"span",27),c(738,"CSS"),p(),d(739,"span",27),c(740,"C"),p()()()()()())},styles:[".dm-experience--container[_ngcontent-%COMP%]{margin:1em 0;padding:1em;border-radius:4px}.dm-experience--container-past[_ngcontent-%COMP%]{background-color:#cfd8dc;margin:1em 0;padding:1em;border-radius:4px}.dm-experience--label-box[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap}.dm-experience--label[_ngcontent-%COMP%]{border-radius:24px;border:1px solid #c9c9c9;background-color:#fff;padding:.5em 1em;margin:.1em;opacity:.7;color:#5f5346}.dm-experience--section[_ngcontent-%COMP%]{padding-bottom:1em}.dm-experience--graph[_ngcontent-%COMP%]{margin-top:1em;display:flex;flex-wrap:nowrap}.dm-experience--step[_ngcontent-%COMP%]{text-align:center}.dm-experience--date[_ngcontent-%COMP%]{position:relative;top:-1.2em;left:-2em}.dm-experience--before[_ngcontent-%COMP%]{border:2px solid white;padding:0 1em 1em;color:#fff;font-weight:700;border-left:none;flex:1}.dm-experience--before[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.dm-experience--after[_ngcontent-%COMP%]{border:2px solid white;padding:0 1em 1em;color:#fff;font-weight:700;border-left:none;border-right:none;flex:1}.dm-experience--after[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.dm-experience--solutec[_ngcontent-%COMP%]{border:2px solid white;border-left:none;padding:0 1em 1em;color:#fff;font-weight:700;flex:4}.dm-experience--solutec[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.dm-experience--casino[_ngcontent-%COMP%]{border:2px solid white;border-left:none;padding:0 1em 1em;color:#fff;font-weight:700;flex:12}.dm-experience--casino[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.dm-experience--iorga[_ngcontent-%COMP%]{border:2px solid white;border-left:none;padding:0 1em 1em;color:#fff;font-weight:700;flex:2}.dm-experience--iorga[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.dm-experience--boiron[_ngcontent-%COMP%]{border:2px solid white;border-left:none;padding:0 1em 1em;color:#fff;font-weight:700;flex:8}.dm-experience--boiron[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.dm-experience--devmind[_ngcontent-%COMP%]{border:2px solid white;border-left:none;padding:0 1em 1em;color:#fff;font-weight:700;border-right:none;flex:20}.dm-experience--devmind[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}"]});let s=e;return s})();var Nx=()=>["/","training","trainings.html"],Of=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-training"]],standalone:!0,features:[X],decls:160,vars:2,consts:[[1,"dm-block--intro"],[1,"devmind-section"],[1,"dm-grid--flexible",2,"align-items","center"],[1,"dm-grid--element"],[1,"center"],["alt","Espace \xE9tudiant"],["srcset","../img/experience/formation_600.webp","type","image/webp"],["srcset","../img/experience/formation_600.png"],["src","../img/experience/formation_600.png","alt","Training"],[1,"dm-grid--element",2,"flex","3 0 0"],[1,"dm_lead"],["href","formation_spring.html"],["href","https://twitter.com/guillaumeehret","target","_blank","rel","noopener"],["src","../img/contact/twitter.svg","alt","Twitter",1,"dm-social"],["href","https://github.com/Dev-Mind","target","_blank","rel","noopener"],["src","../img/contact/github.svg","alt","Github",1,"dm-social"],[1,"dm-block--blog"],["href","https://spring.io/"],["href","https://www.clever-cloud.com/"],[1,"fa","fa-flask"],[1,"dm-grid--flexible"],["src","../img/training/environnement.png"],["routerLink","/training/outil/install_development_environment.html"],["routerLink","/training/outil/git.html"],["routerLink","/training/gradle/gradle.html"],["routerLink","/training/unit-test/unit_test_in_java.html"],["src","../img/training/spring-intro.png"],["routerLink","/training/spring/spring_intro.html"],["routerLink","/training/spring/spring_ioc.html"],["routerLink","/training/spring/spring_data.html"],["routerLink","/training/spring/spring_web.html"],["routerLink","/training/spring/spring_security.html"],["src","../img/training/clever-cloud.png"],["routerLink","/training/cloud/deploy_webapp_on_clever_cloud.html"],["src","../img/training/learn-kotlin.png"],["routerLink","/training/kotlin/kotlin_for_java_developer.html"],["src","../img/training/android/android-course1.png"],[1,"dm_lead",2,"padding-top","0","margin-top","0"],["routerLink","/training/android/android_introduction.html"],["routerLink","/training/android/android_first_app.html"],["routerLink","/training/android/android_update_ui.html"],["routerLink","/training/android/android_add_activity.html"],["routerLink","/training/android/android_add_menu.html"],["routerLink","/training/android/android_add_activity_list.html"],["routerLink","/training/android/android_call_remote_api.html"],["routerLink","/training/android/android_database_room_viewmodel.html"],[1,"btn-group"],[1,"btn-inverse",3,"routerLink"]],template:function(n,i){n&1&&(d(0,"div",0)(1,"div",1)(2,"h1"),c(3,"Training"),p(),d(4,"div",2)(5,"div",3)(6,"div",4)(7,"picture",5),S(8,"source",6)(9,"source",7)(10,"img",8),p()()(),d(11,"div",9)(12,"p",10),c(13," Dev-Mind est enregistr\xE9 sous le num\xE9ro 84 42 02955 42 en tant que prestataire de formation conform\xE9ment aux dispositions de l'article R. 6351-6 du code du travail. Cet enregistrement ne vaut pas agr\xE9ment de l'\xE9tat. "),p(),d(14,"p",10),c(15," Dev-Mind donne principalement des formations pour apprendre \xE0 utiliser le "),d(16,"a",11),c(17,"Framework Spring"),p(),c(18," en Java ou en Kotlin. "),p(),d(19,"p"),c(20," You can also find freely accessible trainings about Git, Gradle, Spring, Android on this website. All lesson supports and labs remain the intellectual property of Dev-Mind. If you are missing anything, please tell me "),p(),d(21,"p")(22,"a",12),S(23,"img",13),p(),d(24,"a",14),S(25,"img",15),p()()()()()(),d(26,"div",16)(27,"div",1)(28,"div")(29,"p"),c(30,' The following lessons are given at the "Ecole des mines de Saint Etienne" to engineering students or students in computer science master. These lessons are free and you can follow them to learn how develop an Android app in Kotlin which call REST services exposed by a '),d(31,"a",17),c(32,"Spring"),p(),c(33," application developped in Java and deployed on "),d(34,"a",18),c(35,"Clever Cloud"),p(),c(36,". "),p(),d(37,"p"),c(38,"In each lesson, I first present the theory to you, but you have many exercises to implement and understand these different concepts through practice. Each exercise is identifiable by the "),S(39,"i",19),c(40," logo used in the title."),p(),d(41,"div",20)(42,"div",3),S(43,"img",21),p(),d(44,"div",9)(45,"p",10)(46,"b"),c(47,"Tools"),p()(),d(48,"ul")(49,"li")(50,"a",22),c(51,"Install development environment"),p(),c(52," : install Java Developer Kit and an IDE to develop "),p(),d(53,"li")(54,"a",23),c(55,"Managing your sources with Git"),p(),c(56," : introduction to Git and Github "),p(),d(57,"li")(58,"a",24),c(59,"Gradle in practice"),p(),c(60," : how Gradle works and how use it in our projects "),p(),d(61,"li")(62,"a",25),c(63," Write unit tests in Java"),p(),c(64," : understand tests, simulate collaborator behaviors and check results "),p()()()(),d(65,"div",20)(66,"div",3),S(67,"img",26),p(),d(68,"div",9)(69,"p",10)(70,"b"),c(71,"Spring framework"),p()(),d(72,"ul")(73,"li")(74,"a",27),c(75,"Spring introduction"),p(),c(76," : learn what is Spring and create a first app "),p(),d(77,"li")(78,"a",28),c(79,"Spring and dependency injection"),p(),c(80," : in this lesson you will learn one of the main principle of software design, the dependency injection "),p(),d(81,"li")(82,"a",29),c(83,"Spring database & JPA"),p(),c(84," : how use a database in your Spring project with Spring Data JPA and a H2 Database "),p(),d(85,"li")(86,"a",30),c(87,"Spring rest services"),p(),c(88," : use Spring MVC to expose services to receive or update data "),p(),d(89,"li")(90,"a",31),c(91,"Spring security"),p(),c(92," : Spring Security helps you to secure your app "),p()()()(),d(93,"div",20)(94,"div",3),S(95,"img",32),p(),d(96,"div",9)(97,"p",10)(98,"b"),c(99,"Cloud"),p()(),d(100,"ul")(101,"li")(102,"a",33),c(103,"Clever cloud"),p(),c(104," : learn how deploy a webapp on clever cloud "),p()()()(),d(105,"div",20)(106,"div",3),S(107,"img",34),p(),d(108,"div",9)(109,"p",10)(110,"b"),c(111,"Kotlin"),p()(),d(112,"ul")(113,"li")(114,"a",35),c(115,"Learn Kotlin"),p(),c(116," : introduction for Java developer "),p()()()()(),d(117,"div",20)(118,"div",3),S(119,"img",36),p(),d(120,"div",9)(121,"p",37)(122,"b"),c(123,"Android"),p()(),d(124,"ul")(125,"li")(126,"a",38),c(127,"Android platform"),p(),c(128," : introduction "),p(),d(129,"li")(130,"a",39),c(131,"My first Android App"),p(),c(132," : how develop an Hello World app "),p(),d(133,"li")(134,"a",40),c(135,"Update Android UI app"),p(),c(136," use Android Studio tools to update the main layout "),p(),d(137,"li")(138,"a",41),c(139,"Add a new activity"),p(),c(140," : a new screen in your app "),p(),d(141,"li")(142,"a",42),c(143,"Page structuration"),p(),c(144," : How use a menu and launch intents to open internal or external activities "),p(),d(145,"li")(146,"a",43),c(147,"An activity to list elements"),p(),c(148," : learn how write an adapter to diplay a list of data "),p(),d(149,"li")(150,"a",44),c(151,"Call remote API"),p(),c(152," : use retrofit to call a remote REST API "),p(),d(153,"li")(154,"a",45),c(155,"Use the phone SQLite database"),p(),c(156," : use Room to store your data and the viewmodel object to decouplate the view from the model "),p()()()(),d(157,"p",46)(158,"a",47),c(159,"Free trainings"),p()()()()),n&2&&(N(158),$("routerLink",Cm(1,Nx)))},dependencies:[us],encapsulation:2});let s=e;return s})();var To=[{path:"training/outil/install_development_environment.html",component:y,data:{title:"Prepare your working environment (EN)",author:"Guillaume EHRET - Dev-Mind",publicationDate:"10/09/2024",category:"Java, IntelliJ",description:"Quels sont les outils \xE0 installer pour \xEAtre un d\xE9veloppeur full stack, Java Android et Web",keywords:["D\xE9veloppement","Installation"],priority:"0.6",filename:"install_development_environment",folder:"training/outil",image:"../../img/training/environnement.png"}},{path:"training/outil/git.html",component:y,data:{title:"Managing your code sources with Git",author:"Guillaume EHRET - Dev-Mind",publicationDate:"09/09/2024",category:"Git",description:"Quels sont les outils \xE0 installer pour \xEAtre un d\xE9veloppeur full stack, Java Android et Web",keywords:["Developement","Source","management"],priority:"0.6",filename:"git",folder:"training/outil",image:"../../img/training/git.png"}},{path:"training/gradle/gradle.html",component:y,data:{title:"Gradle in practice",author:"Guillaume EHRET - Dev-Mind",publicationDate:"08/09/2024",category:"Web",description:"Comment construire une application Java interfac\xE9e \xE0 une base de donn\xE9es et exposant des services REST",keywords:["Gradle"],priority:"0.6",filename:"gradle",folder:"training/gradle",image:"../../img/training/gradle.png"}},{path:"training/unit-test/unit_test_in_java.html",component:y,data:{title:"Write unit tests in Java (EN)",author:"Guillaume EHRET - Dev-Mind",publicationDate:"05/09/2024",category:"Java",description:"Write unit tests in Java",keywords:["Java","Unit","Test","AssertJ","Mockito","Junit"],priority:"0.6",filename:"unit_test_in_java",folder:"training/unit-test",image:"../../img/training/unit-tests.png"}},{path:"training/spring/spring_intro.html",component:y,data:{title:"Spring in practice : introduction",author:"Guillaume EHRET - Dev-Mind",publicationDate:"31/08/2024",category:"Java",description:"Pr\xE9sentation de l'\xE9cosyst\xE8me de Spring",keywords:["Java","Spring"],priority:"0.6",filename:"spring_intro",folder:"training/spring",image:"../../img/training/spring-intro.png"}},{path:"training/spring/spring_ioc.html",component:y,data:{title:"Spring in practice : dependency injection",author:"Guillaume EHRET - Dev-Mind",publicationDate:"30/08/2024",category:"Java",description:"Pr\xE9sentation de l'\xE9cosyst\xE8me de Spring",keywords:["Java","Spring"],priority:"0.6",filename:"spring_ioc",folder:"training/spring",image:"../../img/training/spring-core.png"}},{path:"training/spring/spring_data.html",component:y,data:{title:"Spring in practice : database and JPA",author:"Guillaume EHRET - Dev-Mind",publicationDate:"29/08/2024",category:"Java",description:"How use a database in your Spring project with Spring Data JPA and a H2 Database",keywords:["Java","Spring"],priority:"0.6",filename:"spring_data",folder:"training/spring",image:"../../img/training/spring-data.png"}},{path:"training/spring/spring_web.html",component:y,data:{title:"Spring in practice : REST service",author:"Guillaume EHRET - Dev-Mind",publicationDate:"28/08/2024",category:"Java",description:"How write REST services in Spring Web and expose resource to your apps",keywords:["Java","Spring"],priority:"0.6",filename:"spring_web",folder:"training/spring",image:"../../img/training/spring-boot.png"}},{path:"training/spring/spring_security.html",component:y,data:{title:"Spring in practice : Security",author:"Guillaume EHRET - Dev-Mind",publicationDate:"27/08/2024",category:"Java",description:"Each app must be secured and Spring is still here to simplify the work",keywords:["Java","Spring"],priority:"0.6",filename:"spring_security",folder:"training/spring",image:"../../img/training/spring-security.png"}},{path:"training/kotlin/kotlin_for_java_developer.html",component:y,data:{title:"Kotlin for a Java developer",author:"Guillaume EHRET - Dev-Mind",publicationDate:"25/08/2024",category:"Kotlin",description:"How to start in Kotlin when you know only Java language",keywords:["Kotlin"],priority:"0.6",filename:"kotlin_for_java_developer",folder:"training/kotlin",image:"../../img/training/learn-kotlin.png"}},{path:"training/cloud/deploy_webapp_on_clever_cloud.html",component:y,data:{title:"Deploy your webapp on Clever Cloud (EN)",author:"Guillaume EHRET - Dev-Mind",publicationDate:"24/08/2024",category:"JAva",description:"Deploy your webapp on Clever Cloud (EN)",keywords:["Gradle","Spring"],priority:"0.6",filename:"deploy_webapp_on_clever_cloud",folder:"training/cloud",image:"../../img/training/clever-cloud.png"}},{path:"training/android/android_introduction.html",component:y,data:{title:"Android platform",author:"Guillaume EHRET - Dev-Mind",publicationDate:"20/08/2024",category:"Android",description:"A tutorial to start Android development. In this example we develop an Hello World app",keywords:["Android"],priority:"0.6",filename:"android_introduction",folder:"training/android",image:"../../img/blog/2019/android_pf_00.png"}},{path:"training/android/android_first_app.html",component:y,data:{title:"A first application in Android",author:"Guillaume EHRET - Dev-Mind",publicationDate:"19/08/2024",category:"Android",description:"A tutorial to start Android development. In this example we develop an Hello World app",keywords:["Android"],priority:"0.6",filename:"android_first_app",folder:"training/android",image:"../../img/training/android/android-course1.png"}},{path:"training/android/android_add_activity.html",component:y,data:{title:"Add an activity",author:"Guillaume EHRET - Dev-Mind",publicationDate:"18/08/2024",category:"Android",description:"In this lesson you will learn how add a new activity in your project and call it",keywords:["Android"],priority:"0.6",filename:"android_add_activity",folder:"training/android",image:"../../img/training/android/android-add-activity.png"}},{path:"training/android/android_update_ui.html",component:y,data:{title:"Update UI and refactor welcome layout",author:"Guillaume EHRET - Dev-Mind",publicationDate:"18/08/2024",category:"Android",description:"In this lesson we will update the main layout to create a welcome screen",keywords:["Android"],priority:"0.6",filename:"android_update_ui",folder:"training/android",image:"../../img/training/android/android-course2.png"}},{path:"training/android/android_add_menu.html",component:y,data:{title:"Page structuration",author:"Guillaume EHRET - Dev-Mind",publicationDate:"17/08/2024",category:"Android",description:"In this lesson you will learn how add a menu and launch intent to open internal or external activities",keywords:["Android"],priority:"0.6",filename:"android_add_menu",folder:"training/android",image:"../../img/training/android/android-add-menu.png"}},{path:"training/android/android_add_activity_list.html",component:y,data:{title:"Add a list activity in your app",author:"Guillaume EHRET - Dev-Mind",publicationDate:"16/08/2024",category:"Android",description:"In this lesson you will learn how add an activity to list elements",keywords:["Android"],priority:"0.6",filename:"android_add_activity_list",folder:"training/android",image:"../../img/training/android/android-activity-list.png"}},{path:"training/android/android_call_remote_api.html",component:y,data:{title:"Call a remote API in Android",author:"Guillaume EHRET - Dev-Mind",publicationDate:"15/08/2024",category:"Android",description:"In this lesson, you will learn how to call a remote API to synchronously read data.",keywords:["Android"],priority:"0.6",filename:"android_call_remote_api",folder:"training/android",image:"../../img/training/android/android-call-remote.png"}},{path:"training/android/android_database_room_viewmodel.html",component:y,data:{title:"Interact with a database in your project",author:"Guillaume EHRET - Dev-Mind",publicationDate:"14/08/2024",category:"Android, Kotlin",description:"You'll learn about the fundamentals of using Room, including the database class, the DAO, entities, and view models.",keywords:["Android","database","room"],priority:"0.6",filename:"android_database_room_viewmodel",folder:"training/android",image:"../../img/training/android/database/database.png"}},{path:"training/web/http.html",component:y,data:{title:"Le protocole HTTP",author:"Guillaume EHRET - Dev-Mind",publicationDate:"27/11/2017",category:"Web",description:"Le protocole HTTP",keywords:["Internet","Web"],priority:"0.6",filename:"http",folder:"training/web",image:"../../img/blog/2017/web_00.png"}},{path:"training/web/internet.html",component:y,data:{title:"Retour sur la cr\xE9ation d'Internet",author:"Guillaume EHRET - Dev-Mind",publicationDate:"20/11/2017",category:"Web",description:"Retour sur la cr\xE9ation d'Internet",keywords:["Internet"],priority:"0.6",filename:"internet",folder:"training/web",image:"../../img/blog/2017/internet_00.png"}}];function Ox(s,e){if(s&1&&(d(0,"article",18)(1,"div",19)(2,"div",20),S(3,"img",21),p(),d(4,"h3")(5,"a",22),c(6),p()(),d(7,"p",23),c(8),p()()()),s&2){let a=e.$implicit,t=dt();$("routerLink",t.postPath(a)),N(3),$("ngSrc",a.image)("alt",a.description),N(2),$("routerLink",t.postPath(a))("title",a.title),N(),xe(a.title),N(2),xe(a.description)}}var Ff=(()=>{let e=class e{constructor(){this.blogEntries=To.map(t=>t.data)}postPath(t){return["/",...t.folder.split("/"),t.filename+".html"]}};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-all-training"]],standalone:!0,features:[X],decls:25,vars:1,consts:[[1,"dm-block--intro"],[1,"devmind-section"],[1,"dm-grid--flexible",2,"align-items","center"],[1,"dm-grid--element"],[1,"center"],["alt","Espace \xE9tudiant"],["srcset","../img/experience/formation_600.webp","type","image/webp"],["srcset","../img/experience/formation_600.png"],["src","../img/experience/formation_600.png","alt","Espace \xE9tudiant"],[1,"dm-grid--element",2,"flex","3 0 0"],[1,"dm_lead"],["href","https://twitter.com/guillaumeehret","target","_blank","rel","noopener"],["src","../img/contact/twitter.svg","alt","Twitter",1,"dm-social"],["href","https://github.com/Dev-Mind","target","_blank","rel","noopener"],["src","../img/contact/github.svg","alt","Github",1,"dm-social"],[1,"dm-block--news"],[1,"dm-blog--container-article"],[3,"routerLink",4,"ngFor","ngForOf"],[3,"routerLink"],[1,"dm-blog--article"],[1,"dm-blog--imgteaser"],["width","1500","height","764","sizes","(max-width: 100%)",3,"ngSrc","alt"],[3,"routerLink","title"],[1,"dm-blog--teaser"]],template:function(n,i){n&1&&(d(0,"div",0)(1,"div",1)(2,"h1"),c(3,"Student space"),p(),d(4,"div",2)(5,"div",3)(6,"div",4)(7,"picture",5),S(8,"source",6)(9,"source",7)(10,"img",8),p()()(),d(11,"div",9)(12,"p",10),c(13," All lesson supports and labs remain the intellectual property of Dev-Mind but they are freely accessible. "),p(),d(14,"p"),c(15,"You will find here all the supports shown during the lessons. If you are missing anything, please tell me"),p(),d(16,"p")(17,"a",11),S(18,"img",12),p(),d(19,"a",13),S(20,"img",14),p()()()()()(),d(21,"div",15)(22,"div",1)(23,"div",16),Qe(24,Ox,9,7,"article",17),p()()()),n&2&&(N(24),$("ngForOf",i.blogEntries))},dependencies:[Ns,aa,fa,us],encapsulation:2});let s=e;return s})();var Gf=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-spring"]],standalone:!0,features:[X],decls:114,vars:0,consts:[[1,"dm-block--intro"],[1,"devmind-section"],[1,"dm-grid--flexible"],[1,"dm-grid--element"],[1,"center"],["src","img/formation/spring.svg","alt","Spring"],[1,"dm-grid--element",2,"flex","3 0 0"],[1,"dm_lead"],[1,"dm-block--news"],[1,"dm-grid--element","center"],["src","img/formation/spring-fwk.svg","alt","Spring Framework",1,"dm--picture--inverse",2,"width","75%"],[1,"dm-formation--detail"],["src","img/formation/spring-boot.svg","alt","Spring Boot",1,"dm--picture--inverse",2,"width","90%"],["src","img/formation/spring-data.svg","alt","Spring Data",1,"dm--picture--inverse",2,"width","90%"],["src","img/formation/spring-security.svg","alt","Spring Security",1,"dm--picture--inverse",2,"width","85%"],[1,"dm-block--blog"],["alt","Ecran principal"],["srcset","img/formation/spring-ex1.webp","type","image/webp"],["srcset","img/formation/spring-ex1.png"],["src","img/formation/spring-ex1.png","alt","Ecran principal"],["alt","Liste des sites"],["srcset","img/formation/spring-ex2.webp","type","image/webp"],["srcset","img/formation/spring-ex2.png"],["src","img/formation/spring-ex2.png","alt","Liste des sites"],["alt","Mesures temps r\xE9el"],["srcset","img/formation/spring-ex4.webp","type","image/webp"],["srcset","img/formation/spring-ex4.png"],["src","img/formation/spring-ex4.png","alt","Mesures temps r\xE9el"]],template:function(n,i){n&1&&(d(0,"div",0)(1,"div",1)(2,"h1"),c(3,"Formation Spring"),p(),d(4,"div",2)(5,"div",3)(6,"div",4),S(7,"img",5),p()(),d(8,"div",6)(9,"p",7),c(10," Spring est le framework Java le plus utilis\xE9 et il est Open Source. Connaissez vous toute la magie de Spring, comment il fonctionne, comment l'utiliser tout en respectant les bonnes pratiques de d\xE9veloppement ? "),p(),d(11,"p")(12,"i"),c(13,"J'utilise Spring depuis 15 ans et la version 1. Nous verrons ensemble comment le framework a \xE9volu\xE9, quels sont les probl\xE9matiques qui ont \xE9t\xE9 r\xE9solues. Ensemble nous pouvons construire une formation \xE0 la carte"),p()()()()()(),d(14,"div",8)(15,"div",1)(16,"p",7),c(17,"Je vous propose diff\xE9rents modules en fonction des diff\xE9rents projets et sous projets de Spring."),p(),d(18,"div",2)(19,"div",9),S(20,"img",10),d(21,"h2"),c(22,"CORE"),p(),d(23,"div",7)(24,"ul",11)(25,"li"),c(26,"Injection"),p(),d(27,"li"),c(28,"AOP"),p(),d(29,"li"),c(30,"Web MVC"),p(),d(31,"li"),c(32,"Web Rest"),p()(),d(33,"i"),c(34,"Temps id\xE9al : 3 jours"),p()()(),d(35,"div",9),S(36,"img",12),d(37,"h2"),c(38,"BOOT"),p(),d(39,"div",7)(40,"ul",11)(41,"li"),c(42,"Starter"),p(),d(43,"li"),c(44,"Auto config"),p(),d(45,"li"),c(46,"Logs"),p(),d(47,"li"),c(48,"M\xE9triques"),p()()(),d(49,"i"),c(50,"Temps id\xE9al : 1 jour"),p()(),d(51,"div",9),S(52,"img",13),d(53,"h2"),c(54,"DATA"),p(),d(55,"div",7)(56,"ul",11)(57,"li"),c(58,"JDBC"),p(),d(59,"li"),c(60,"JPA (Hibernate)"),p(),d(61,"li"),c(62,"Transaction"),p(),d(63,"li"),c(64,"Validation"),p()(),d(65,"i"),c(66,"Temps id\xE9al : 2 jours"),p()()(),d(67,"div",9),S(68,"img",14),d(69,"h2"),c(70,"SECURITY"),p(),d(71,"div",7)(72,"ul",11)(73,"li"),c(74,"Authorisation"),p(),d(75,"li"),c(76,"Authentification"),p(),d(77,"li"),c(78,"Cors"),p(),d(79,"li"),c(80,"CSRF"),p()(),d(81,"i"),c(82,"Temps id\xE9al : 1 jour"),p()()()(),d(83,"h2"),c(84,"Tarification"),p(),d(85,"p",7),c(86," Il existe deux modes de tarification en fonction du mode choisi "),p(),d(87,"ul",7)(88,"li"),c(89,"mode INTRA : la formation vous est r\xE9serv\xE9e et vous pouvez proposer jusqu'\xE0 6 stagiaires"),p(),d(90,"li"),c(91,"mode INTER : formation d'un seul stagiaire"),p()(),d(92,"p"),c(93,"Contactez moi sur guillaume (@) dev-mind.fr pour plus d'informations "),p()()(),d(94,"div",15)(95,"div",1)(96,"p",7),c(97," La formation est principalement ax\xE9e sur de la pratique. Si vous faites tous les modules vous construisez de A \xE0 Z une application qui permet de lire des donn\xE9es en temps r\xE9el et de les afficher sous forme de graphique "),p(),d(98,"div",2)(99,"div",9)(100,"picture",16),S(101,"source",17)(102,"source",18)(103,"img",19),p()(),d(104,"div",9)(105,"picture",20),S(106,"source",21)(107,"source",22)(108,"img",23),p()(),d(109,"div",9)(110,"picture",24),S(111,"source",25)(112,"source",26)(113,"img",27),p()()()()())},encapsulation:2});let s=e;return s})();var rp=(()=>{let e=class e{};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-not-found"]],standalone:!0,features:[X],decls:14,vars:0,consts:[[1,"dm-block--intro"],[1,"devmind-section"],[1,"dm_lead"],[1,"btn-group"],["href","/",1,"btn"]],template:function(n,i){n&1&&(d(0,"div",0)(1,"div",1)(2,"h1"),c(3,"Are you lost in the clouds ?? "),d(4,"span"),c(5,":("),p()(),d(6,"p",2),c(7,"Sorry, but the page you were trying to view does not exist."),p(),d(8,"div",3)(9,"a",4),c(10," Go to home "),p()()()(),d(11,"div")(12,"div",1),c(13," \xA0 "),p()())},encapsulation:2});let s=e;return s})();var Ce=(()=>{let e=class e{constructor(){this.currentHeader=new oe("home")}navigateTo(t){this.currentHeader.next(t)}};e.\u0275fac=function(n){return new(n||e)},e.\u0275prov=w({token:e,factory:e.\u0275fac,providedIn:"root"});let s=e;return s})();var zf=[{path:"home.html",component:Pf,resolve:{current:()=>v(Ce).navigateTo("home"),title:()=>v(Be).setTitle("DevMind")}},{path:"experience.html",component:Nf,resolve:{current:()=>v(Ce).navigateTo("experience"),title:()=>v(Be).setTitle("Experience")}},{path:"formations.html",component:Of,resolve:{current:()=>v(Ce).navigateTo("training"),title:()=>v(Be).setTitle("Formation")}},{path:"formation_spring.html",component:Gf,resolve:{current:()=>v(Ce).navigateTo("training"),title:()=>v(Be).setTitle("Formation")}},{path:"training/trainings.html",component:Ff,resolve:{current:()=>v(Ce).navigateTo("training"),title:()=>v(Be).setTitle("Formation")}},{path:"blog.html",component:op,resolve:{current:()=>v(Ce).navigateTo("blog"),title:()=>v(Be).setTitle("Blog")}},{path:"blog_archive.html",component:op,data:{archive:!0},resolve:{current:()=>v(Ce).navigateTo("blog"),title:()=>v(Be).setTitle("Blog")}},...ba.map(s=>(s.data=Q(j({},s.data),{type:"blog"}),s.resolve={current:()=>v(Ce).navigateTo("blog"),title:()=>v(Be).setTitle("Blog")},s)),...To.map(s=>(s.data=Q(j({},s.data),{type:"training"}),s.resolve={current:()=>v(Ce).navigateTo("training"),title:()=>v(Be).setTitle("Training")},s)),{path:"404.html",component:rp,resolve:{current:()=>v(Ce).navigateTo("home")}},{path:"",redirectTo:"/home.html",pathMatch:"full"},{path:"**",component:rp,resolve:{current:()=>v(Ce).navigateTo("home")}}];var Bf={providers:[uv(zf,np(),mv({scrollPositionRestoration:"top",anchorScrolling:"enabled"})),hg(),_g()]};var Uf=(()=>{let e=class e{constructor(t){this.current="home",this.subscription=t.currentHeader.subscribe(n=>this.current=n)}ngOnDestroy(){this.subscription?.unsubscribe()}};e.\u0275fac=function(n){return new(n||e)(ce(Ce))},e.\u0275cmp=K({type:e,selectors:[["app-header"]],standalone:!0,features:[X],decls:15,vars:8,consts:[[1,"header-img"],["routerLink","/","aria-label","Accueil"],["src","img/logo/logo_long.svg","alt","Dev-Mind","title","Dev-Mind"],["routerLink","/","aria-label","Accueil",1,"nav-home"],["src","/img/ic_home_white_24px.svg","rel","start","alt","Accueil"],["routerLink","/formations.html","aria-label","Formations"],["routerLink","/blog.html","aria-label","Blog"],["routerLink","/experience.html","aria-label","Experience"],[1,"header-space"]],template:function(n,i){n&1&&(d(0,"header")(1,"div",0)(2,"a",1),S(3,"img",2),p()(),d(4,"nav")(5,"a",3),S(6,"img",4),p(),d(7,"a",5),c(8," Formations"),p(),d(9,"a",6),c(10,"Blog"),p(),d(11,"a",7),c(12," Exp\xE9rience"),p()(),S(13,"hr"),p(),S(14,"div",8)),n&2&&(N(5),Xt("active",i.current==="home"),N(2),Xt("active",i.current==="training"),N(2),Xt("active",i.current==="blog"),N(2),Xt("active",i.current==="experience"))},dependencies:[us]});let s=e;return s})();var Vf="29/11/2024";var Hf=(()=>{let e=class e{constructor(){this.gendate=Vf}};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-footer"]],standalone:!0,features:[X],decls:26,vars:1,consts:[[1,"dm_footer"],[1,"is-small-screen"],["id","footer-dm_society"],[1,"is-large-screen"],[1,"dm_footer__middle"],[1,"dm_society"],[1,"dm_footer__right"]],template:function(n,i){n&1&&(d(0,"footer")(1,"div",0)(2,"div",1)(3,"p",2),c(4," SARL au capital de "),d(5,"i"),c(6,"5000\u20AC"),p(),S(7,"br"),c(8," SIREN : 808 720 759, au RCS de Saint-Etienne"),S(9,"br"),c(10," All right reserved - \xA92024 Guillaume EHRET "),p()(),d(11,"div",3)(12,"div",4)(13,"div",5),c(14," Dev-Mind "),p(),d(15,"div"),c(16,"SARL au capital de "),d(17,"i"),c(18,"5000\u20AC"),p()(),d(19,"div"),c(20,"SIREN : 808 720 759, au RCS de Saint-Etienne"),p(),d(21,"div")(22,"small"),c(23),p()()(),d(24,"div",6),c(25," All right reserved - \xA92024 Guillaume EHRET "),p()()()()),n&2&&(N(23),Ji("Mise \xE0 jour le ",i.gendate,""))},styles:[".dm_footer[_ngcontent-%COMP%]{color:#eee;display:flex;justify-content:space-between;font-size:14px}.dm_footer[_ngcontent-%COMP%]   .dm_society[_ngcontent-%COMP%]{color:#fff}.dm_footer[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{margin-right:1em;width:100%}.dm_footer[_ngcontent-%COMP%]   .dm_footer__middle[_ngcontent-%COMP%]{flex-grow:1}.dm_footer[_ngcontent-%COMP%]   .dm_footer__right[_ngcontent-%COMP%]{text-align:right}.dm_footer[_ngcontent-%COMP%]   .is-large-screen[_ngcontent-%COMP%]{padding:.7em;margin:.7em 1em}.dm_footer[_ngcontent-%COMP%]   .is-small-screen[_ngcontent-%COMP%]{padding:0;margin:0 1em;font-size:12px}"]});let s=e;return s})();var Wf=(()=>{let e=class e{constructor(){this.title="devmind-angular"}};e.\u0275fac=function(n){return new(n||e)},e.\u0275cmp=K({type:e,selectors:[["app-root"]],standalone:!0,features:[X],decls:3,vars:0,template:function(n,i){n&1&&S(0,"app-header")(1,"router-outlet")(2,"app-footer")},dependencies:[ac,Xc,Uf,Hf]});let s=e;return s})();kg(Wf,Bf).catch(s=>console.error(s));
